"use strict";(self.webpackChunkNJS_Lab=self.webpackChunkNJS_Lab||[]).push([[15168],{15168:(e,t,o)=>{o.r(t),o.d(t,{Renderer:()=>l,Solution:()=>c});var s=o(5483),i=o.n(s);class r{constructor(e){var t=this;this.map=void 0,this.center=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:-99.292649,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:39.043903;t.map.setCenter({lat:o,lng:e})},this.toMap=(e,t)=>{const o=this.map.unproject({x:e,y:t});return[o.lng,o.lat]},this.toScreen=(e,t)=>{const o=this.map.project([e,t]);return[o.x,o.y]},this.mouseDown=e=>{},this.mouseUp=e=>{},this.mouseMove=e=>{},this.mouseClick=e=>{},this.mouseDClick=e=>{},this.initMap(e)}initMap(e){i().accessToken="pk.eyJ1IjoiZGVzaWduanUiLCJhIjoiY2xhNGU0YWo4MDlhYzNwdHBwenVvang4eiJ9.P3sX4l_3KjdPeRRbVS1VVg",this.map=new(i().Map)({container:e,zoom:15,center:[-71.093161,42.358871],style:"mapbox://styles/mapbox/dark-v10"}),this.map.dragRotate.disable(),this.map.on("mousemove",(e=>{this.mouseMove(e)})),this.map.on("click",(e=>{this.mouseClick(e)})),this.map.on("mousedown",(e=>{this.mouseDown(e)})),this.map.on("dblclick",(e=>{this.mouseDClick(e)})),this.map.on("mouseup",(e=>{this.mouseUp(e)}));let t=document.getElementsByClassName("mapboxgl-canvas")[0];t.style.position="absolute",t=document.getElementsByClassName("mapboxgl-control-container")[0],t.style.display="none"}}var n=o(55913),a=o(39497);class c{constructor(e){this.divHost=void 0,this.mapboxWrapper=void 0,this.renderer=void 0,this.mouseDown=e=>{},this.mouseUp=e=>{},this.mouseDrag=e=>{},this.mouseClick=e=>{this.renderer.pts.push([e.lngLat.lng,e.lngLat.lat])},this.mouseMove=e=>{},this.divHost=document.getElementById(e),this.divHost.style.position="relative",this.mapboxWrapper=new r(this.divHost.id),this.mapboxWrapper.mouseDown=this.mouseDown,this.mapboxWrapper.mouseUp=this.mouseUp,this.mapboxWrapper.mouseClick=this.mouseClick,this.mapboxWrapper.mouseMove=this.mouseMove,setTimeout((()=>{this.renderer=new l(this.divHost,this)}),100);(0,a.Sw)(this.divHost,(async e=>{const t=e.dataTransfer.files;if(t.length>0&&t[0].name.endsWith(".zip")){const e=t[0];try{const{geojson:t,projectionString:o}=await(0,a.c8)(e);console.log("GeoJSON:",t),console.log("Projection:",o);const s=await(0,a.Iw)(t,o);console.log({transformedGeoJSON:s}),(0,a.YS)(this.mapboxWrapper.map,s)}catch(o){console.error("error:",o)}}else console.error("Not a valid ZIP file")}))}keyDown(e){}destroy(){var e;for(null===(e=this.renderer)||void 0===e||e.destroy();this.divHost.lastElementChild;)this.divHost.removeChild(this.divHost.lastElementChild)}}class l extends n.bb{constructor(e,t){super(e),this.app=void 0,this.time=0,this.pts=[],this.mouseDown=(e,t)=>{},this.mouseUp=(e,t)=>{},this.mouseDrag=(e,t)=>{},this.app=t,this.canvas.id="mapboxCustom",this.canvas.style.position="absolute",this.canvas.style.width="100%",this.canvas.style.height="100%",this.canvas.style.pointerEvents="none",this.pts.push([-71.093161,42.358871]),this.start()}render(e){this.time+=.1;for(let t=0;t<this.pts.length;++t){const o=this.pts[t],s=this.app.mapboxWrapper.toScreen(o[0],o[1]);e.beginPath(),e.arc(s[0],s[1],3*Math.sin(this.time)+15,0,2*Math.PI),e.closePath(),e.fillStyle="#0f0",e.fill()}}}},39497:(e,t,o)=>{o.d(t,{Sw:()=>m,YS:()=>d,c8:()=>p,Iw:()=>h});var s=o(18489),i=o(5483),r=o.n(i),n=o(92775),a=o(95587),c=o.n(a),l=o(4480);const h=async(e,t)=>{if(!t)return console.warn("no projection needed."),e;try{l.Z.defs("SOURCE_CRS",t)}catch(i){return console.error("fail to parse the projection:",i),e}const o=e.features.map((e=>{const t=e=>e.map((e=>{const[t,o]=(0,l.Z)("SOURCE_CRS","EPSG:4326",e);return[t,o]}));switch(e.geometry.type){case"Polygon":const o=e.geometry.coordinates.map((e=>t(e)));return(0,s.Z)((0,s.Z)({},e),{},{geometry:(0,s.Z)((0,s.Z)({},e.geometry),{},{coordinates:o})});case"MultiPolygon":const i=e.geometry.coordinates.map((e=>e.map((e=>t(e)))));return(0,s.Z)((0,s.Z)({},e),{},{geometry:(0,s.Z)((0,s.Z)({},e.geometry),{},{coordinates:i})});case"LineString":const r=t(e.geometry.coordinates);return(0,s.Z)((0,s.Z)({},e),{},{geometry:(0,s.Z)((0,s.Z)({},e.geometry),{},{coordinates:r})});case"MultiLineString":const n=e.geometry.coordinates.map((e=>t(e)));return(0,s.Z)((0,s.Z)({},e),{},{geometry:(0,s.Z)((0,s.Z)({},e.geometry),{},{coordinates:n})});case"Point":const a=t([e.geometry.coordinates])[0];return(0,s.Z)((0,s.Z)({},e),{},{geometry:(0,s.Z)((0,s.Z)({},e.geometry),{},{coordinates:a})});case"MultiPoint":const c=t(e.geometry.coordinates);return(0,s.Z)((0,s.Z)({},e),{},{geometry:(0,s.Z)((0,s.Z)({},e.geometry),{},{coordinates:c})});default:return e}}));return(0,s.Z)((0,s.Z)({},e),{},{features:o})},p=async e=>{const t=new(c()),o=await t.loadAsync(e);let s,i,r;for(const n in o.files)n.endsWith(".shp")?s=o.files[n]:n.endsWith(".dbf")?i=o.files[n]:n.endsWith(".prj")&&(r=o.files[n]);if(!s||!i)throw new Error("no .shp or .dbf in the zip file");const a=await s.async("arraybuffer"),l=await i.async("arraybuffer"),h=r?await r.async("string"):null;return{geojson:await new Promise(((e,t)=>{n.ij(a,l).then((t=>e(t))).catch((e=>t(e)))})),projectionString:h}},m=(e,t)=>{e.addEventListener("dragover",(e=>{e.preventDefault(),e.stopPropagation(),e.dataTransfer.dropEffect="copy"})),e.addEventListener("drop",(async e=>{e.preventDefault(),e.stopPropagation(),t(e)}))},d=(e,t)=>{if(e.getSource("geojson-data")){(e.getStyle().layers||[]).forEach((t=>{t.id.startsWith("geojson-layer")&&e.removeLayer(t.id)})),e.removeSource("geojson-data")}e.addSource("geojson-data",{type:"geojson",data:t}),t.features.forEach((t=>{let o,s;switch(t.geometry.type){case"Polygon":case"MultiPolygon":o="fill",s={"fill-color":"#088","fill-opacity":.8};break;case"LineString":case"MultiLineString":o="line",s={"line-color":"#088","line-width":2};break;case"Point":case"MultiPoint":o="circle",s={"circle-radius":6,"circle-color":"#088"};break;default:return}e.addLayer({id:"geojson-layer-".concat(t.id||t.geometry.type),type:o,source:"geojson-data",filter:["==","$type",t.geometry.type],paint:s})}));const o=new(r().LngLatBounds);t.features.forEach((e=>{"Polygon"===e.geometry.type||"MultiPolygon"===e.geometry.type?e.geometry.coordinates.forEach((e=>{e.forEach((e=>{o.extend(e)}))})):"LineString"===e.geometry.type||"MultiLineString"===e.geometry.type?e.geometry.coordinates.forEach((e=>{o.extend(e)})):"Point"!==e.geometry.type&&"MultiPoint"!==e.geometry.type||o.extend(e.geometry.coordinates)}));try{e.fitBounds(o,{padding:50})}catch(s){console.error(s)}}}}]);
//# sourceMappingURL=15168.77c2d06e.chunk.js.map
{"version":3,"file":"static/js/1613.13d943b0.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_04/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Geometry/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/Modal.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/VAO.ts"],"sourcesContent":["import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        this.scene.add(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n}","\r\nimport { RTN } from '../../WebGL/VAO';\r\nimport { Modal } from '../../WebGL/Modal';\r\nimport { Shader } from '../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\nimport { ATTR } from '../../WebGL/AttribLocations';\r\n// import { MeshCommon } from '../../WebGL/MeshCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[]) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            // this.uniformLoc.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uniformLoc.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n            var uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n        }\r\n        gl.useProgram(null); // Done setting up shader\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(angle: number) {\r\n        this.gl.uniform1f(this.uniformLoc.uAngle, angle);\r\n        return this;\r\n    }\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends GeometryBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform vec3 uColor[4];\t//Color Array\r\n    uniform float uAngle;\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        // gl_Position = vec4(a_position, 1.0);\r\n        gl_Position = vec4(cos(uAngle) * 0.3 + a_position.x, sin(uAngle) * 0.3 + a_position.y, a_position.z, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) {\r\n        finalColor = color;\r\n        // finalColor = vec4(1, 0, 0, 1);\r\n    }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    mesh: RTN;\r\n    modal: Modal;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO() {\r\n        var verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        var p;\t// Temp variable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(half);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(-half);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(p);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(p);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n        }\r\n\r\n        // TODO : Remove the following, its only to demo extra lines can be thrown in.\r\n        verts.push(-half);\t// x1\r\n        verts.push(-half);\t// y1\r\n        verts.push(0);\t\t// z1\r\n        verts.push(2);\t\t// c2\r\n\r\n        verts.push(half);\t// x2\r\n        verts.push(half);\t// y2\r\n        verts.push(0);\t\t// z2\r\n        verts.push(2);\t\t// c2\r\n\r\n        verts.push(-half);\t// x1\r\n        verts.push(half);\t// y1\r\n        verts.push(0);\t\t// z1\r\n        verts.push(3);\t\t// c2\r\n\r\n        verts.push(half);\t// x2\r\n        verts.push(-half);\t// y2\r\n        verts.push(0);\t\t// z2\r\n        verts.push(3);\t\t// c2\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.mesh = new RTN(); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.mesh.drawMode = this.gl.LINES;\r\n        this.mesh.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.mesh.vertexComponentLen = 4;\r\n        this.mesh.vertexCount = verts.length / this.mesh.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.mesh.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.mesh.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.mesh.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.mesh.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mMeshCache[\"grid\"] = this.mesh;\r\n        return this.mesh;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col);\r\n        this.mesh = this.GetVAO();\r\n        this.modal = new Modal(this.mesh);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        this.shader.activate();\r\n        this.ro += 0.04;\r\n        this.shader.set(this.ro);\r\n        this.shader.renderModal(this.modal);\r\n    }\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}","import { RTN } from './VAO';\r\n\r\nexport class Modal {\r\n    mesh: RTN;\r\n    constructor(meshData: RTN) {\r\n        this.mesh = meshData;\r\n    }\r\n\r\n    // Things to do before its time to render\r\n    preRender() {\r\n        // TODO :: Update transform Matrix in future lesson\r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { AttribLocations } from './AttribLocations';\r\nimport { Modal } from './Modal';\r\n\r\nexport class UniformLoc {\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLoc;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertShaderSrc: string, fragShaderSrc: string) {\r\n        this.program = GLShaderCommon.getShaderProgram(gl, vertShaderSrc, fragShaderSrc, true);\r\n\r\n        if (this.program != null) {\r\n            this.gl = gl;\r\n            gl.useProgram(this.program);\r\n            this.attribLoc = new AttribLocations(gl, this.program);\r\n            this.uniformLoc = new UniformLoc();\r\n            // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n        }\r\n\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n        this.gl.useProgram(this.program); return this;\r\n    }\r\n    deactivate() {\r\n        this.gl.useProgram(null); return this;\r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) { this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    }\r\n    // Handle rendering a modal\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n            this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}","import { ATTR } from './AttribLocations';\r\n\r\nexport enum DRAW_MODE {\r\n    //\r\n}\r\n\r\nexport class RTN {\r\n    name: string;\r\n\r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n}\r\n\r\nexport class VAO {\r\n\r\n    static createMeshVAO(gl: WebGL2RenderingContext, name: string, aryVert: number[], aryInd?: number[], aryNorm?: number[], aryUV?: number[]) {\r\n        let rtn = new RTN();\r\n        rtn.name = name;\r\n        rtn.drawMode = gl.TRIANGLES;\r\n\r\n        rtn.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(rtn.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            rtn.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            rtn.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            rtn.vertexCount = aryVert.length / rtn.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm != null) {\r\n            rtn.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV != null) {\r\n            rtn.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd != null) {\r\n            rtn.bufIndex = gl.createBuffer();\r\n            rtn.indexCount = aryInd.length;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, rtn.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n        return rtn;\r\n    }\r\n    constructor() {\r\n        //\r\n    }\r\n}"],"names":["GeometryBase","constructor","scene","this","add","render","gl","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","super","program","uniformLoc","uAngle","getUniformLocation","uColor","uniform3fv","useProgram","set","angle","uniform1f","renderModal","modal","bindVertexArray","mesh","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","app","v","f","shader","ro","canvas","initShader","GetVAO","p","verts","half","size","i","push","RTN","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","Modal","activate","GLShaderCommon","static","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","createProgram","console","error","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","AttribLocations","position","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","meshData","preRender","UniformLoc","uPointSize","vertShaderSrc","fragShaderSrc","attribLoc","deactivate","dispose","getParameter","CURRENT_PROGRAM","DRAW_MODE","name","bufNormals","bufUV","bufIndex","VAO","aryVert","aryInd","aryNorm","aryUV","rtn","TRIANGLES","undefined","ELEMENT_ARRAY_BUFFER","Uint16Array"],"sourceRoot":""}
{"version":3,"file":"static/js/27273.8badf283.chunk.js","mappings":"iKAEO,MAAMA,EAGTC,YAAYC,GAAa,KAFlBC,aAAO,OACPC,cAAQ,EAEXC,KAAKF,QAAUG,SAASC,eAAeL,GAGvCG,KAAKF,QAAQK,MAAMC,QAAU,OAC7BJ,KAAKF,QAAQK,MAAME,WAAa,SAEhC,MAAMC,EAAML,SAASM,cAAc,OACnCD,EAAIH,MAAMK,WAAa,OACvBF,EAAIH,MAAMM,YAAc,OACxBH,EAAIH,MAAMO,gBAAkB,OAC5BJ,EAAIH,MAAMQ,MAAQ,SAClBL,EAAIH,MAAMS,OAAS,QAEnBZ,KAAKF,QAAQe,YAAYP,GAKzBN,KAAKD,SAAW,IAAIe,EAASR,EAKjC,CACOS,UACH,GAAIf,KAAKF,QACL,IACI,KAAOE,KAAKF,QAAQkB,YAChBhB,KAAKF,QAAQmB,YAAYjB,KAAKF,QAAQkB,WAI9C,CAFE,MAAOE,GACLC,QAAQD,MAAM,2BAA4BA,EAC9C,MAEAC,QAAQC,KAAK,yCAErB,EAGG,MAAMN,UAAiBO,EAAAA,GAE1BzB,YAAYU,GACRgB,MAAMhB,GACNN,KAAKuB,OAAOpB,MAAMqB,SAAW,WAC7BxB,KAAKuB,OAAOpB,MAAMQ,MAAQ,OAC1BX,KAAKuB,OAAOpB,MAAMS,OAAS,OAO3BZ,KAAKyB,QAILC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IAC5CC,MAAMC,IACH,MAAMC,EAAe,IAAKC,OAAOC,cAAgBD,OAAOE,oBAClDC,EAAWJ,EAAaK,iBACfL,EAAaM,wBAAwBP,GAG7CQ,QAAQH,GAGfA,EAASI,QAAU,IACnB,MAAMC,EAAeL,EAASM,kBACxBC,EAAY,IAAIC,WAAWH,GAG3BI,EAAc7C,KAAKuB,OAAOZ,MAC1BmC,EAAe9C,KAAKuB,OAAOX,OAC3BmC,EAAWF,EAAcJ,EAGzBO,EAAO,KACbC,sBAAsBD,GAGtBZ,EAASc,qBAAqBP,GAG9B3C,KAAKmD,IAAIC,UAAY,OACrBpD,KAAKmD,IAAIE,SAAS,EAAG,EAAGR,EAAaC,GAGrC,IAAIQ,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAcc,IAAK,CACnC,MAAMC,EAAYb,EAAUY,IAAMT,EAAe,KAC3CW,EAAK,cAAUD,EAAY,IAAG,iBAAS,IAAMA,EAAS,KAE5DxD,KAAKmD,IAAIC,UAAYK,EACrBzD,KAAKmD,IAAIE,SAASC,EAAGR,EAAeU,EAAWT,EAAUS,GAEzDF,GAAKP,CACT,GAGAC,GAAM,IAETU,OAAOC,IACJxC,QAAQD,MAAM,gDAAcyC,EAAI,GAIxC,CACOC,OAAOT,GAMV,E","sources":["njslab/Tools/Sound-visualization/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id)\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1000px';\r\n        div.style.height = '600px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        if (this.divHost) {\r\n            try {\r\n                while (this.divHost.firstChild) {\r\n                    this.divHost.removeChild(this.divHost.firstChild);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error in destroy method:', error);\r\n            }\r\n        } else {\r\n            console.warn('divHost is undefined in destroy method');\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n\r\n        this.start();\r\n\r\n\r\n        // 브라우저에서 마이크 접근\r\n        navigator.mediaDevices.getUserMedia({ audio: true })\r\n        .then((stream) => {\r\n            const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n            const analyser = audioContext.createAnalyser();\r\n            const source = audioContext.createMediaStreamSource(stream);\r\n\r\n            // 마이크 스트림을 AnalyserNode에 연결\r\n            source.connect(analyser);\r\n\r\n            // AnalyserNode 설정\r\n            analyser.fftSize = 256; // FFT 크기 (주파수 분석 해상도)\r\n            const bufferLength = analyser.frequencyBinCount; // fftSize / 2\r\n            const dataArray = new Uint8Array(bufferLength); // 주파수 데이터를 저장할 배열\r\n\r\n            // 캔버스 크기 설정\r\n            const canvasWidth = this.canvas.width;\r\n            const canvasHeight = this.canvas.height;\r\n            const barWidth = canvasWidth / bufferLength;\r\n\r\n            // 주파수 데이터를 시각화하는 함수\r\n            const draw = () => {\r\n            requestAnimationFrame(draw);\r\n\r\n            // AnalyserNode에서 주파수 데이터를 가져오기\r\n            analyser.getByteFrequencyData(dataArray);\r\n\r\n            // 캔버스 초기화\r\n            this.ctx.fillStyle = '#000'; // 배경색 (검정)\r\n            this.ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\r\n            // 주파수 데이터를 바 형태로 그리기\r\n            let x = 0; // x축 시작점\r\n            for (let i = 0; i < bufferLength; i++) {\r\n                const barHeight = dataArray[i] * (canvasHeight / 255); // 바 높이 계산\r\n                const color = `rgb(${barHeight + 100}, 50, ${200 - barHeight})`; // RGB 색상 생성\r\n\r\n                this.ctx.fillStyle = color; // 바 색상\r\n                this.ctx.fillRect(x, canvasHeight - barHeight, barWidth, barHeight); // 바 그리기\r\n\r\n                x += barWidth; // 다음 바 위치\r\n            }\r\n            }\r\n\r\n            draw(); // 시각화 함수 호출\r\n        })\r\n        .catch((err) => {\r\n            console.error('마이크 접근 실패:', err);\r\n        });\r\n\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["Solution","constructor","id","divHost","renderer","this","document","getElementById","style","display","alignItems","div","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","firstChild","removeChild","error","console","warn","RendererCanvas","super","canvas","position","start","navigator","mediaDevices","getUserMedia","audio","then","stream","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","createMediaStreamSource","connect","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","canvasWidth","canvasHeight","barWidth","draw","requestAnimationFrame","getByteFrequencyData","ctx","fillStyle","fillRect","x","i","barHeight","color","catch","err","render"],"sourceRoot":""}
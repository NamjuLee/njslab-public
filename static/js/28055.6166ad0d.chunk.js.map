{"version":3,"file":"static/js/28055.6166ad0d.chunk.js","mappings":"iKAEO,MAAMA,EAETC,YAAYC,GAAa,KADlBC,SAAG,OA4CHC,OAAS,WAIhB,EAAC,KACMC,MAAQ,CAACC,EAAWC,KAAZ,EAGd,KACMC,SAAW,CAACC,EAAaC,KAAd,EAGjB,KACMC,UAAaC,MAGnB,KACMC,QAAWD,MAEjB,KACME,UAAaF,MAEnB,KACMG,WAAcH,MAQpB,KACMI,YAAeJ,MA1ElBK,KAAKC,QAAQhB,EACjB,CACQgB,QAAQhB,GAEZe,KAAKd,IAAMgB,EAAAA,IAAMjB,EAAI,CACjBE,OAAQ,CAAC,GAAI,IACbgB,KAAM,EACNC,UAAU,EACVC,YAAa,CAAC,IAGlBH,EAAAA,UAAY,qDAAsD,CAC9DI,QAAS,GACTC,YAAa,4FACdC,MAAMR,KAAKd,KAGCgB,EAAAA,OAAS,CAAC,QAAS,UAC7BM,MAAMR,KAAKd,KACXuB,UAAU,gBACVC,YAGUR,EAAAA,OAAS,CAAC,QAAS,SAAW,CACzCS,MAAO,OACPC,UAAW,OACXC,YAAa,GACbC,OAAQ,MACTN,MAAMR,KAAKd,KAAKuB,UAAU,+CAEbP,EAAAA,QAAU,CACtB,CAAC,OAAQ,SACT,CAAC,OAAQ,SACT,CAAC,OAAQ,WACVM,MAAMR,KAAKd,KAAKuB,UAAU,gDAG7BT,KAAKd,IAAI6B,GAAG,SAAUpB,IAClBqB,MAAM,uDAAD,OAAgBrB,EAAEsB,QAAS,GAGxC,E,eC3CG,MAAMC,EAITlC,YAAYC,GAAa,KAHlBkC,aAAO,OACPC,mBAAa,OACbC,cAAQ,OA2BR3B,UAAaC,MAEnB,KACMC,QAAWD,MAEjB,KACM2B,UAAa3B,MAEnB,KACMG,WAAcH,MAKpB,KACME,UAAaF,MAxChBK,KAAKmB,QAAUI,SAASC,eAAevC,GACvCe,KAAKmB,QAAQM,MAAMC,SAAW,WAE9B,MAAMC,EAAMJ,SAASK,cAAc,OACnCD,EAAI1C,GAAK,cACT0C,EAAIF,MAAMI,MAAQ,QAClBF,EAAIF,MAAMK,OAAS,QAEnB9B,KAAKmB,QAAQY,YAAYJ,GAEzBK,YAAW,KACPhC,KAAKoB,cAAgB,IAAIrC,EAAe4C,EAAI1C,GAAG,GAChD,IAYP,CAmBOgD,QAAQC,GACX,CAEGC,UAAW,IAAD,EAEb,IADa,QAAb,EAAAnC,KAAKqB,gBAAQ,OAAb,EAAec,UACRnC,KAAKmB,QAAQiB,kBAChBpC,KAAKmB,QAAQkB,YAAYrC,KAAKmB,QAAQiB,iBAE9C,EAGG,MAAME,UAAiBC,EAAAA,GAI1BvD,YAAY2C,EAAUa,GAClBC,MAAMd,GAAK,KAJRa,SAAG,OACHE,KAAe,EAAI,KACnBC,IAAkB,GAAG,KAgBrBjD,UAAY,CAACL,EAAWC,KAAZ,EAElB,KACMM,QAAU,CAACP,EAAWC,KAAZ,EAEhB,KACMgC,UAAY,CAACjC,EAAWC,KAAZ,EAnBfU,KAAKwC,IAAMA,EACXxC,KAAK4C,OAAO3D,GAAK,eACjBe,KAAK4C,OAAOnB,MAAMC,SAAW,WAC7B1B,KAAK4C,OAAOnB,MAAMI,MAAQ,OAC1B7B,KAAK4C,OAAOnB,MAAMK,OAAS,OAC3B9B,KAAK4C,OAAOnB,MAAMoB,cAAgB,OAIlC7C,KAAK2C,IAAIG,KAAK,EAAE,UAAW,YAE3B9C,KAAK+C,OACT,CAUOC,OAAOC,GAaV,E","sources":["njslab/LabStarter/Starter-leaflet/LeafletWrapper/index.ts","njslab/LabStarter/Starter-leaflet/index.ts"],"sourcesContent":["import * as L from 'leaflet';\r\n\r\nexport class LeafletWrapper {\r\n    public map\r\n    constructor(id: string) {\r\n        this.initMap(id);\r\n    }\r\n    private initMap(id: string) {\r\n\r\n        this.map = L.map(id, {\r\n            center: [47, 14],\r\n            zoom: 5,\r\n            editable: true,\r\n            editOptions: {}\r\n         });\r\n\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            maxZoom: 19,\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(this.map);\r\n    \r\n        // 마커 추가\r\n        const marker = L.marker([37.5665, 126.9780])\r\n            .addTo(this.map)\r\n            .bindPopup(\"서울\")\r\n            .openPopup();\r\n    \r\n        // 반경 500m의 원 추가\r\n        const circle = L.circle([37.5665, 126.9780], {\r\n            color: 'blue',\r\n            fillColor: '#30f',\r\n            fillOpacity: 0.2,\r\n            radius: 500\r\n        }).addTo(this.map).bindPopup(\"서울 주변 500m 반경\");\r\n    \r\n        const polygon = L.polygon([\r\n            [37.569, 126.977],\r\n            [37.566, 126.982],\r\n            [37.564, 126.976]\r\n        ]).addTo(this.map).bindPopup(\"서울의 특정 영역\");\r\n    \r\n        // 클릭 이벤트 추가\r\n        this.map.on('click', (e: L.LeafletMouseEvent) => {\r\n            alert(`지도를 클릭한 위치: ${e.latlng}`);\r\n        });\r\n\r\n    }\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lon, lat);\r\n        // console.log(v);\r\n        // this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        // const p = this.map.unproject({x, y} as any)\r\n        // return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        // const p = this.map.project([lon, lat])\r\n        // return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n}\r\n\r\n\r\n","import { LeafletWrapper } from './LeafletWrapper';\r\nimport { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: LeafletWrapper;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'absolute';\r\n\r\n        const div = document.createElement('div')\r\n        div.id = 'map-leaflet'\r\n        div.style.width = '500px'\r\n        div.style.height = '500px'\r\n        // div.style.background = '#f00'\r\n        this.divHost.appendChild(div);\r\n\r\n        setTimeout(() => {\r\n            this.mapboxWrapper = new LeafletWrapper(div.id);\r\n        }, 100);\r\n\r\n\r\n        // this.mapboxWrapper.mouseDown = this.mouseDown\r\n        // this.mapboxWrapper.mouseUp = this.mouseUp\r\n        // this.mapboxWrapper.mouseClick = this.mouseClick\r\n        // this.mapboxWrapper.mouseMove = this.mouseMove\r\n\r\n        // setTimeout(() => {\r\n        //     this.renderer = new Renderer(this.divHost, this);\r\n        // }, 100);\r\n\r\n    }\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // TODO\r\n        // console.log(e);\r\n        // console.log(e['lngLat']);\r\n        // this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n    }\r\n    public mouseMove = (e)  =>{\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer?.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n    public app: Solution\r\n    public time: number = 0.0;\r\n    public pts: number[][] = [];\r\n    constructor(div: any, app: Solution) {\r\n        super(div);\r\n        this.app = app;\r\n        this.canvas.id = 'mapboxCustom'\r\n        this.canvas.style.position = 'absolute';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n        this.canvas.style.pointerEvents = 'none';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        this.pts.push([-71.093161, 42.358871]);\r\n\r\n        this.start();\r\n    }\r\n    public mouseDown = (x: number, y: number): void => {\r\n\r\n    }\r\n    public mouseUp = (x: number, y: number): void => {\r\n\r\n    }\r\n    public mouseDrag = (x: number, y: number): void => {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // this.time += 0.1;\r\n\r\n        // for(let i = 0 ; i < this.pts.length; ++i) {\r\n        //     const pt = this.pts[i];\r\n        //     const p = this.app.mapboxWrapper.toScreen(pt[0], pt[1]);\r\n        //     // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\r\n    \r\n        //     ctx.beginPath();\r\n        //     ctx.arc(p[0], p[1], Math.sin(this.time) * 3 + 15, 0, Math.PI * 2);\r\n        //     ctx.closePath();\r\n        //     ctx.fillStyle = '#0f0';\r\n        //     ctx.fill();\r\n        // }\r\n\r\n    }\r\n}"],"names":["LeafletWrapper","constructor","id","map","center","toMap","x","y","toScreen","lon","lat","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","this","initMap","L","zoom","editable","editOptions","maxZoom","attribution","addTo","bindPopup","openPopup","color","fillColor","fillOpacity","radius","on","alert","latlng","Solution","divHost","mapboxWrapper","renderer","mouseDrag","document","getElementById","style","position","div","createElement","width","height","appendChild","setTimeout","keyDown","k","destroy","lastElementChild","removeChild","Renderer","RendererCanvas","app","super","time","pts","canvas","pointerEvents","push","start","render","ctx"],"sourceRoot":""}
{"version":3,"file":"static/js/28706.44c4fb08.chunk.js","mappings":"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","sources":["../node_modules/@upscalerjs/default-model/dist/esm/packages/shared/src/esrgan/esrgan.js","../node_modules/@upscalerjs/default-model/dist/esm/models/default-model/src/index.js","../node_modules/@upscalerjs/default-model/dist/esm/models/default-model/src/constants.generated.js","../node_modules/upscaler/dist/browser/esm/shared/src/types.js","../node_modules/upscaler/dist/browser/esm/shared/src/constants.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/utils.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/errors-and-warnings.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/makeTick.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/warmup.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/model-utils.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/isLayersModel.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/tensor-utils.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/image-utils.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/upscale.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/shared/upscaler.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/browser/args.browser.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/browser/loadModel.browser.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/browser/image.browser.js","../node_modules/upscaler/dist/browser/esm/upscalerjs/src/browser/index.js","njslab/Raster/image-upscale/index.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/OverloadYield.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js"],"sourcesContent":["const isTensorArray = (inputs) => {\n    return Array.isArray(inputs);\n};\nconst getInput = (inputs) => {\n    if (isTensorArray(inputs)) {\n        return inputs[0];\n    }\n    return inputs;\n};\nexport const getESRGANModelDefinition = ({ scale, name, version, meta: { architecture, ...meta }, path: modelPath, }) => {\n    const path = modelPath || `models/x${scale}/model.json`;\n    if (architecture === 'rdn') {\n        return {\n            scale,\n            modelType: 'layers',\n            _internals: {\n                path,\n                name,\n                version,\n            },\n            meta: {\n                architecture,\n                ...meta,\n            },\n            inputRange: [0, 255,],\n            outputRange: [0, 255,],\n        };\n    }\n    const setup = (tf) => {\n        const Layer = tf.layers.Layer;\n        const BETA = 0.2;\n        class MultiplyBeta extends Layer {\n            beta;\n            constructor() {\n                super({});\n                this.beta = BETA;\n            }\n            call(inputs) {\n                return tf.mul(getInput(inputs), this.beta);\n            }\n            static className = 'MultiplyBeta';\n        }\n        const getPixelShuffle = (_scale) => {\n            class PixelShuffle extends Layer {\n                scale = _scale;\n                constructor() {\n                    super({});\n                }\n                computeOutputShape(inputShape) {\n                    return [inputShape[0], inputShape[1], inputShape[2], 3,];\n                }\n                call(inputs) {\n                    return tf.depthToSpace(getInput(inputs), this.scale, 'NHWC');\n                }\n                static className = `PixelShuffle${scale}x`;\n            }\n            return PixelShuffle;\n        };\n        [\n            MultiplyBeta,\n            getPixelShuffle(scale),\n        ].forEach((layer) => {\n            tf.serialization.registerClass(layer);\n        });\n    };\n    return {\n        setup,\n        scale,\n        modelType: 'layers',\n        _internals: {\n            path,\n            name,\n            version,\n        },\n        meta: {\n            architecture,\n            ...meta,\n        },\n        inputRange: [0, 1,],\n        outputRange: [0, 1,],\n    };\n};\n","import { getESRGANModelDefinition, } from '../../../packages/shared/src/esrgan/esrgan';\nimport { NAME, VERSION, } from './constants.generated';\nconst SCALE = 2;\nconst modelDefinition = getESRGANModelDefinition({\n    scale: SCALE,\n    name: NAME,\n    version: VERSION,\n    path: 'models/model.json',\n    meta: {\n        C: 1,\n        D: 2,\n        G: 4,\n        G0: 64,\n        T: 10,\n        architecture: \"rdn\",\n        patchSize: 128,\n        size: 'slim',\n        artifactReducing: false,\n        sharpening: false,\n        dataset: 'div2k',\n        modelFileName: 'rdn-C1-D2-G4-G064-T10-x2-patchsize128-compress100-sharpen0-datadiv2k-vary_cFalse_best-val_loss_epoch494',\n    },\n});\nexport default modelDefinition;\n","export const NAME = \"@upscalerjs/default-model\";\nexport const VERSION = \"1.0.0-beta.17\";\n","export var MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE;\n(function (MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE) {\n    MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE[\"UNDEFINED\"] = \"undefined\";\n    MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE[\"INVALID_MODEL_TYPE\"] = \"invalidModelType\";\n    MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE[\"MISSING_PATH\"] = \"missingPath\";\n})(MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE || (MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE = {}));\n","import * as tf from '@tensorflow/tfjs-core';\nimport { MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE } from './types';\nexport const isShape4D = (shape) => {\n    if (!Boolean(shape) || !Array.isArray(shape) || shape.length !== 4) {\n        return false;\n    }\n    return shape.every((value) => value === null || typeof value === 'number');\n};\nexport const isFixedShape4D = (shape) => isShape4D(shape) && shape[1] !== null && shape[2] !== null && shape[1] > 0 && shape[2] > 0;\nexport const isDynamicShape4D = (shape) => isShape4D(shape) && !isFixedShape4D(shape);\nexport function makeIsNDimensionalTensor(rank) {\n    function fn(pixels) {\n        try {\n            return pixels.shape.length === rank;\n        }\n        catch (err) {\n        }\n        return false;\n    }\n    return fn;\n}\nexport const isFourDimensionalTensor = makeIsNDimensionalTensor(4);\nexport const isThreeDimensionalTensor = makeIsNDimensionalTensor(3);\nexport const isTensor = (input) => input instanceof tf.Tensor;\nexport const isString = (el) => typeof el === 'string';\nexport const isValidModelType = (modelType) => typeof modelType === 'string' && ['layers', 'graph',].includes(modelType);\nexport class ModelDefinitionValidationError extends Error {\n    type;\n    constructor(type) {\n        super(type);\n        this.type = type;\n    }\n}\nexport const isValidModelDefinition = (modelDefinition) => {\n    if (modelDefinition === undefined) {\n        throw new ModelDefinitionValidationError(MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE.UNDEFINED);\n    }\n    if (!isValidModelType(modelDefinition.modelType ?? 'layers')) {\n        throw new ModelDefinitionValidationError(MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE.INVALID_MODEL_TYPE);\n    }\n    if (!modelDefinition.path && !modelDefinition._internals?.path) {\n        throw new ModelDefinitionValidationError(MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE.MISSING_PATH);\n    }\n    return true;\n};\nexport const hasValidChannels = (tensor) => tensor.shape.slice(-1)[0] === 3;\nexport const isNumber = (el) => typeof el === 'number';\nexport const isValidRange = (range) => Array.isArray(range) && range.length === 2 && range.every(isNumber);\n","import { ModelDefinitionValidationError, } from '../../../shared/src/constants';\nexport const warn = (msg) => {\n    console.warn(Array.isArray(msg) ? msg.join('\\n') : msg);\n};\nexport function isProgress(p) { return p !== undefined && typeof p === 'function'; }\nexport function isSingleArgProgress(p) { return isProgress(p) && p.length <= 1; }\nexport const isMultiArgTensorProgress = (p, output, progressOutput) => {\n    if (!isProgress(p) || p.length <= 1) {\n        return false;\n    }\n    if (progressOutput === undefined && output === 'tensor') {\n        return true;\n    }\n    return progressOutput === 'tensor';\n};\nexport const isAborted = (abortSignal) => {\n    if (abortSignal) {\n        return abortSignal.aborted;\n    }\n    return false;\n};\nexport async function wrapGenerator(gen, postNext) {\n    let result;\n    for (result = await gen.next(); !result.done; result = await gen.next()) {\n        if (postNext) {\n            await postNext(result.value);\n        }\n    }\n    return result.value;\n}\nexport function nonNullable(value) {\n    return value !== null && value !== undefined;\n}\nexport function processAndDisposeOfTensor(tf, tensor, ..._processFns) {\n    const processFns = _processFns.filter(nonNullable);\n    if (processFns.length) {\n        const processedTensor = tf.tidy(() => processFns.reduce((reducedTensor, processFn) => processFn(reducedTensor), tensor));\n        if (!tensor.isDisposed && tensor !== processedTensor) {\n            tensor.dispose();\n        }\n        return processedTensor;\n    }\n    return tensor;\n}\nexport const errIsModelDefinitionValidationError = (err) => err instanceof ModelDefinitionValidationError;\n","import { MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE, } from \"../../../shared/src/types\";\nconst WARNING_DEPRECATED_MODEL_DEFINITION_URL = 'https://upscalerjs.com/documentation/troubleshooting#deprecated-model-definition-function';\nexport const WARNING_DEPRECATED_MODEL_DEFINITION_FN = [\n    'Passing a model definition as a function is deprecated and will be removed in a future version.',\n    'To leverage model lifecycle methods, use the setup and teardown methods.',\n    `For more information, see ${WARNING_DEPRECATED_MODEL_DEFINITION_URL}.`,\n].join(' ');\nconst WARNING_UNDEFINED_PADDING_URL = 'https://upscalerjs.com/documentation/troubleshooting#padding-is-undefined';\nexport const WARNING_UNDEFINED_PADDING = [\n    '\"padding\" is undefined, but \"patchSize\" is explicitly defined.',\n    'Without padding, patches of images often have visible artifacting at the seams. Defining an explicit padding will resolve the artifacting.',\n    `For more information, see ${WARNING_UNDEFINED_PADDING_URL}.`,\n    'To hide this warning, pass an explicit padding of \"0\".',\n].join(' ');\nconst WARNING_PROGRESS_WITHOUT_PATCH_SIZE_URL = 'https://upscalerjs.com/documentation/troubleshooting#progress-specified-without-patch-size';\nexport const WARNING_PROGRESS_WITHOUT_PATCH_SIZE = [\n    'The \"progress\" callback was provided but \"patchSize\" was not defined.',\n    'Without a \"patchSize\", the \"progress\" callback will never be called.',\n    `For more information, see ${WARNING_PROGRESS_WITHOUT_PATCH_SIZE_URL}.`,\n].join(' ');\nconst ERROR_INVALID_TENSOR_PREDICTED_URL = 'https://upscalerjs.com/documentation/troubleshooting#invalid-predicted-tensor';\nexport const ERROR_INVALID_TENSOR_PREDICTED = (shape) => [\n    `The tensor returned by the model was not a valid rank-4 tensor. It's shape is ${JSON.stringify(shape)}.}`,\n    'UpscalerJS only supports models returning valid image-like data in four dimensional form.',\n    `For more information, see ${ERROR_INVALID_TENSOR_PREDICTED_URL}.`,\n].join(' ');\nconst ERROR_INVALID_MODEL_PREDICTION_URL = 'https://upscalerjs.com/documentation/troubleshooting#invalid-model-prediction';\nexport const ERROR_INVALID_MODEL_PREDICTION = [\n    'The model output was not a valid tensor. UpscalerJS only supports models returning valid tensors.',\n    'This is likely an error with the model itself, not UpscalerJS.',\n    `For more information, see ${ERROR_INVALID_MODEL_PREDICTION_URL}.`,\n].join(' ');\nexport const GET_UNDEFINED_TENSORS_ERROR = new Error('No defined tensors were passed to concatTensors');\nexport class AbortError extends Error {\n    message = 'The upscale request received an abort signal';\n}\nconst ERROR_INVALID_MODEL_TYPE_URL = 'https://upscalerjs.com/documentation/troubleshooting#invalid-model-type';\nconst WARNING_INPUT_SIZE_AND_PATCH_SIZE_URL = 'https://upscalerjs.com/documentation/troubleshooting#input-size-and-patch-size';\nconst ERROR_WITH_MODEL_INPUT_SHAPE_URL = 'https://upscalerjs.com/documentation/troubleshooting#error-with-model-input-shape';\nexport const ERROR_INVALID_MODEL_TYPE = (modelType) => ([\n    `You've provided an invalid model type: ${JSON.stringify(modelType)}. Accepted types are \"layers\" and \"graph\".`,\n    `For more information, see ${ERROR_INVALID_MODEL_TYPE_URL}.`,\n].join(' '));\nexport const ERROR_MODEL_DEFINITION_BUG = 'There is a bug with the upscaler code. Please report this.';\nexport const WARNING_INPUT_SIZE_AND_PATCH_SIZE = [\n    'You have provided a patchSize, but the model definition already includes an input size.',\n    'Your patchSize will be ignored.',\n    `For more information, see ${WARNING_INPUT_SIZE_AND_PATCH_SIZE_URL}.`,\n].join(' ');\nexport const ERROR_WITH_MODEL_INPUT_SHAPE = (inputShape) => [\n    `Expected model to have a rank-4 compatible input shape. Instead got: ${JSON.stringify(inputShape)}.`,\n    `For more information, see ${ERROR_WITH_MODEL_INPUT_SHAPE_URL}.`,\n].join(' ');\nexport const GET_INVALID_SHAPED_TENSOR = (shape) => new Error(`Invalid shape provided to getWidthAndHeight, expected tensor of rank 3 or 4: ${JSON.stringify(shape)}`);\nexport const GET_INVALID_PATCH_SIZE = (patchSize) => new Error([\n    `Invalid patch size: ${patchSize}. Patch size must be greater than 0.`,\n].join(' '));\nexport const GET_INVALID_PATCH_SIZE_AND_PADDING = (patchSize, padding) => new Error([\n    `Invalid patch size and padding: ${patchSize} and ${padding}. Patch size must be greater than padding * 2.`,\n].join(' '));\nconst WARNING_PATCH_SIZE_INDIVISIBLE_BY_DIVISIBILITY_FACTOR_URL = 'https://upscalerjs.com/documentation/troubleshooting#patch-size-indivisible-by-divisibility-factor';\nexport const GET_WARNING_PATCH_SIZE_INDIVISIBLE_BY_DIVISIBILITY_FACTOR = (patchSize, divisibilityFactor, upscaledPatchSize) => [\n    `Invalid patch size: ${patchSize}. The model has a defined divibility factor of ${divisibilityFactor} and patch size must be a multiple of this number.`,\n    `Patch size has been scaled up to ${upscaledPatchSize}.`,\n    `\\nFor more information, see ${WARNING_PATCH_SIZE_INDIVISIBLE_BY_DIVISIBILITY_FACTOR_URL}.`,\n].join(' ');\nexport const MODEL_INPUT_SIZE_MUST_BE_SQUARE = new Error([\n    'Model input sizes must be square. If you are using a model with a non-square input size and would like to request support,',\n    'please file a feature request at https://github.com/thekevinscott/upscalerjs',\n].join(' '));\nexport const MODEL_CONFIGURATION_MISSING_PATH_AND_INTERNALS_URL = 'https://upscalerjs.com/documentation/troubleshooting#missing-path-and-internals';\nexport const GET_MODEL_CONFIGURATION_MISSING_PATH_AND_INTERNALS = (modelConfiguration) => [\n    'Provided model configuration is missing both a \"path\" and \"_internals\". A valid path to a model JSON file must be provided.',\n    `For more information, see ${MODEL_CONFIGURATION_MISSING_PATH_AND_INTERNALS_URL}.`,\n    `The model configuration provided was: ${JSON.stringify(modelConfiguration)}`,\n].join(' ');\nexport function getModelDefinitionError(error, modelDefinition) {\n    switch (error) {\n        case MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE.INVALID_MODEL_TYPE:\n            return new Error(ERROR_INVALID_MODEL_TYPE(modelDefinition?.modelType));\n        case MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE.MISSING_PATH:\n            return new Error(GET_MODEL_CONFIGURATION_MISSING_PATH_AND_INTERNALS(modelDefinition));\n        default:\n            return new Error(ERROR_MODEL_DEFINITION_BUG);\n    }\n}\n","import { isAborted, } from './utils';\nimport { isTensor, } from '../../../shared/src/constants';\nimport { AbortError, } from './errors-and-warnings';\nexport const makeTick = (tf, signal, awaitNextFrame) => async (result) => {\n    if (awaitNextFrame) {\n        await tf.nextFrame();\n    }\n    if (isAborted(signal)) {\n        if (Array.isArray(result)) {\n            result.forEach(r => r?.dispose());\n        }\n        else if (isTensor(result)) {\n            result.dispose();\n        }\n        throw new AbortError();\n    }\n};\n","import { makeTick, } from './makeTick';\nimport { processAndDisposeOfTensor, wrapGenerator, } from './utils';\nexport const isWarmupSizeByPatchSize = (size) => {\n    if (!size || typeof size !== 'object') {\n        return false;\n    }\n    return 'patchSize' in size && typeof size.patchSize === 'number';\n};\nexport const isNumericWarmupSize = (size) => {\n    return Boolean(size) && typeof size === 'number' && size > 0;\n};\nconst ERROR_INVALID_WARMUP_VALUE_URL = 'https://upscalerjs.com/documentation/troubleshooting#invalid-warmup-value';\nexport const ERROR_INVALID_WARMUP_VALUE = (size) => ([\n    'Invalid value passed to warmup in warmupSizes:',\n    JSON.stringify(size),\n    `For more information, see ${ERROR_INVALID_WARMUP_VALUE_URL}.`,\n].join('\\n'));\nexport const getInvalidValueError = (size) => new Error(ERROR_INVALID_WARMUP_VALUE(size));\nconst getWidthAndHeight = (size) => {\n    if (isWarmupSizeByPatchSize(size)) {\n        const { patchSize, } = size;\n        return patchSize;\n    }\n    return size;\n};\nexport async function* warmup(tf, modelPackage, sizes) {\n    const { model, modelDefinition, } = await modelPackage;\n    for (const size of sizes) {\n        if (!isWarmupSizeByPatchSize(size) && !isNumericWarmupSize(size)) {\n            throw getInvalidValueError(size);\n        }\n        const warmupSize = getWidthAndHeight(size);\n        let dummyTensor = tf.zeros([1, warmupSize, warmupSize, 3,]);\n        yield [dummyTensor,];\n        const fns = [\n            modelDefinition.preprocess,\n            (t) => model.predict(t),\n            modelDefinition.postprocess,\n        ].filter(Boolean);\n        for (const fn of fns) {\n            dummyTensor = processAndDisposeOfTensor(tf, dummyTensor, fn);\n            yield [dummyTensor,];\n        }\n        dummyTensor.dispose();\n        yield;\n    }\n}\nexport const getSizesAsArray = (sizes) => {\n    if (Array.isArray(sizes)) {\n        for (const size of sizes) {\n            if (!isWarmupSizeByPatchSize(size) && !isNumericWarmupSize(size)) {\n                throw getInvalidValueError(sizes);\n            }\n        }\n        return sizes;\n    }\n    else if (isWarmupSizeByPatchSize(sizes) || isNumericWarmupSize(sizes)) {\n        return [sizes,];\n    }\n    throw getInvalidValueError(sizes);\n};\nexport const cancellableWarmup = async (tf, modelPackage, sizes, { signal = undefined, awaitNextFrame = false, } = {}, internalArgs) => {\n    const tick = makeTick(tf, signal || internalArgs.signal, awaitNextFrame);\n    await tick();\n    await wrapGenerator(warmup(tf, modelPackage, getSizesAsArray(sizes)), tick);\n};\n","import { isLayersModel, } from './isLayersModel';\nimport { ERROR_WITH_MODEL_INPUT_SHAPE, GET_INVALID_PATCH_SIZE, GET_WARNING_PATCH_SIZE_INDIVISIBLE_BY_DIVISIBILITY_FACTOR, MODEL_INPUT_SIZE_MUST_BE_SQUARE, WARNING_INPUT_SIZE_AND_PATCH_SIZE, WARNING_UNDEFINED_PADDING, GET_INVALID_PATCH_SIZE_AND_PADDING, WARNING_DEPRECATED_MODEL_DEFINITION_FN, } from './errors-and-warnings';\nimport { isShape4D, isFixedShape4D, } from '../../../shared/src/constants';\nimport { warn, } from './utils';\nexport const parseModelDefinition = (modelDefinition) => ({\n    ...modelDefinition,\n});\nexport function isModelDefinitionFn(modelDefinition) { return typeof modelDefinition === 'function'; }\nexport function getModelDefinitionOrModelDefinitionFnAsModelDefinition(tf, modelDefinition) {\n    if (isModelDefinitionFn(modelDefinition)) {\n        warn(WARNING_DEPRECATED_MODEL_DEFINITION_FN);\n        return modelDefinition(tf);\n    }\n    return modelDefinition;\n}\nexport async function getModel(tf, modelDefinition) {\n    const modelDef = getModelDefinitionOrModelDefinitionFnAsModelDefinition(tf, modelDefinition);\n    if (modelDef.setup) {\n        await modelDef.setup(tf);\n    }\n    return modelDef;\n}\nexport function loadTfModel(tf, modelPath, modelType) {\n    if (modelType === 'graph') {\n        return tf.loadGraphModel(modelPath);\n    }\n    return tf.loadLayersModel(modelPath);\n}\nconst getBatchInputShape = (tf, model) => {\n    if (isLayersModel(tf, model)) {\n        return model.layers[0].batchInputShape;\n    }\n    return model.inputs[0].shape;\n};\nexport const getModelInputShape = (tf, { model, }) => {\n    const batchInputShape = getBatchInputShape(tf, model);\n    if (!isShape4D(batchInputShape)) {\n        throw new Error(ERROR_WITH_MODEL_INPUT_SHAPE(batchInputShape));\n    }\n    return batchInputShape;\n};\nexport const getPatchSizeAsMultiple = (divisibilityFactor, patchSize) => {\n    return Math.ceil(patchSize / divisibilityFactor) * divisibilityFactor;\n};\nexport const parsePatchAndInputShapes = (tf, modelPackage, { patchSize, padding, }, imageSize) => {\n    const modelInputShape = getModelInputShape(tf, modelPackage);\n    if (patchSize !== undefined) {\n        if (patchSize <= 0) {\n            throw GET_INVALID_PATCH_SIZE(patchSize);\n        }\n        if (padding !== undefined && padding * 2 >= patchSize) {\n            throw GET_INVALID_PATCH_SIZE_AND_PADDING(patchSize, padding);\n        }\n    }\n    if (isFixedShape4D(modelInputShape)) {\n        if (patchSize !== undefined) {\n            warn(WARNING_INPUT_SIZE_AND_PATCH_SIZE);\n        }\n        if (modelInputShape[1] !== modelInputShape[2]) {\n            throw MODEL_INPUT_SIZE_MUST_BE_SQUARE;\n        }\n        return {\n            patchSize: modelInputShape[1],\n            padding,\n            modelInputShape,\n        };\n    }\n    if (patchSize !== undefined && padding === undefined) {\n        warn(WARNING_UNDEFINED_PADDING);\n    }\n    const { divisibilityFactor, } = modelPackage.modelDefinition;\n    if (divisibilityFactor !== undefined) {\n        if (patchSize !== undefined) {\n            const multipliedPatchSize = getPatchSizeAsMultiple(divisibilityFactor, patchSize);\n            if (multipliedPatchSize !== patchSize) {\n                warn(GET_WARNING_PATCH_SIZE_INDIVISIBLE_BY_DIVISIBILITY_FACTOR(patchSize, divisibilityFactor, multipliedPatchSize));\n            }\n            return {\n                patchSize: multipliedPatchSize,\n                padding,\n                modelInputShape: [null, multipliedPatchSize, multipliedPatchSize, 3,],\n            };\n        }\n        return {\n            patchSize: undefined,\n            padding: undefined,\n            modelInputShape: [\n                null,\n                getPatchSizeAsMultiple(divisibilityFactor, imageSize[1]),\n                getPatchSizeAsMultiple(divisibilityFactor, imageSize[2]),\n                3,\n            ],\n        };\n    }\n    return {\n        patchSize,\n        padding,\n        modelInputShape: undefined,\n    };\n};\n","export const isLayersModel = (tf, model) => model instanceof tf.LayersModel;\n","import { isValidRange, isThreeDimensionalTensor, isFourDimensionalTensor, isFixedShape4D, isTensor, } from '../../../shared/src/constants';\nimport { GET_INVALID_SHAPED_TENSOR, GET_UNDEFINED_TENSORS_ERROR, } from './errors-and-warnings';\nimport { nonNullable, } from './utils';\nexport const padInput = (tf, inputShape) => (pixels) => {\n    const pixelsHeight = pixels.shape[1];\n    const pixelsWidth = pixels.shape[2];\n    if (isFixedShape4D(inputShape) && (inputShape[1] > pixelsHeight || inputShape[2] > pixelsWidth)) {\n        return tf.tidy(() => {\n            const height = Math.max(pixelsHeight, inputShape[1]);\n            const width = Math.max(pixelsWidth, inputShape[2]);\n            const rightTensor = tf.zeros([1, pixelsHeight, width - pixelsWidth, 3,]);\n            const bottomTensor = tf.zeros([1, height - pixelsHeight, width, 3,]);\n            const topTensor = tf.concat([pixels, rightTensor,], 2);\n            const final = tf.concat([topTensor, bottomTensor,], 1);\n            return final;\n        });\n    }\n    return pixels;\n};\nexport const trimInput = (tf, imageSize, scale) => (pixels) => {\n    const height = imageSize[1] * scale;\n    const width = imageSize[2] * scale;\n    if (height < pixels.shape[1] || width < pixels.shape[2]) {\n        return tf.tidy(() => tf.slice(pixels, [0, 0, 0,], [1, height, width, 3,]));\n    }\n    return pixels;\n};\nexport const scaleOutput = (range) => (pixels) => {\n    const endingRange = isValidRange(range) ? range[1] : 255;\n    return pixels.clipByValue(0, endingRange).mul(endingRange === 1 ? 255 : 1);\n};\nexport const getWidthAndHeight = (tensor) => {\n    if (isFourDimensionalTensor(tensor)) {\n        return [tensor.shape[1], tensor.shape[2],];\n    }\n    if (isThreeDimensionalTensor(tensor)) {\n        return [tensor.shape[0], tensor.shape[1],];\n    }\n    throw GET_INVALID_SHAPED_TENSOR(tensor.shape);\n};\nexport const scaleIncomingPixels = (tf, range) => (tensor) => {\n    if (isValidRange(range) && range[1] === 1) {\n        return tf.mul(tensor, 1 / 255);\n    }\n    return tensor;\n};\nexport const tensorAsClampedArray = (tf, tensor) => tf.tidy(() => {\n    const [height, width,] = tensor.shape;\n    const fill = tf.fill([height, width,], 255).expandDims(2);\n    return tensor.clipByValue(0, 255).concat([fill,], 2).dataSync();\n});\nexport function getCopyOfInput(input) { return (isTensor(input) ? input.clone() : input); }\nexport function concatTensors(tf, tensors, axis = 0) {\n    const definedTensors = tensors.filter(nonNullable);\n    if (definedTensors.length === 0) {\n        throw GET_UNDEFINED_TENSORS_ERROR;\n    }\n    const concatenatedTensor = tf.concat(definedTensors, axis);\n    tensors.forEach(tensor => tensor?.dispose());\n    return concatenatedTensor;\n}\n;\n","const get1DPatch = (total, idx, patchSize, padding) => {\n    let preOrigin = idx;\n    const prePadding = idx === 0 ? 0 : patchSize === total ? 0 : padding;\n    const isBeyondBounds = preOrigin + patchSize > total;\n    let postOrigin = isBeyondBounds ? patchSize - (total - preOrigin) : 0;\n    const postPadding = isBeyondBounds ? 0 : patchSize === total ? 0 : padding;\n    const prePaddingAdjusted = isBeyondBounds ? 0 : prePadding;\n    let postSize = patchSize - (isBeyondBounds ? postOrigin : 0);\n    if (isBeyondBounds) {\n        preOrigin = total - patchSize;\n    }\n    preOrigin -= prePaddingAdjusted;\n    postOrigin += prePaddingAdjusted;\n    postSize -= prePaddingAdjusted + postPadding;\n    const increment = patchSize > total ? total : patchSize - prePadding - postPadding;\n    return {\n        pre: {\n            origin: preOrigin,\n            size: patchSize,\n        },\n        post: {\n            origin: postOrigin,\n            size: postSize,\n        },\n        increment,\n    };\n};\nexport const getPatchesFromImage = ([width, height,], patchSize, padding) => {\n    const patches = [];\n    let x = 0;\n    let y = 0;\n    while (y < height) {\n        const { pre: { origin: preOriginY, size: preSizeY, }, post: { origin: postOriginY, size: postSizeY, }, increment: yIncrement, } = get1DPatch(height, y, Math.min(patchSize, height), padding);\n        const row = [];\n        while (x < width) {\n            const { pre: { origin: preOriginX, size: preSizeX, }, post: { origin: postOriginX, size: postSizeX, }, increment: xIncrement, } = get1DPatch(width, x, Math.min(patchSize, width), padding);\n            row.push({\n                pre: {\n                    origin: [preOriginY, preOriginX,],\n                    size: [preSizeY, preSizeX,],\n                },\n                post: {\n                    origin: [postOriginY, postOriginX,],\n                    size: [postSizeY, postSizeX,],\n                },\n            });\n            x += xIncrement;\n        }\n        patches.push(row);\n        x = 0;\n        y += yIncrement;\n    }\n    return patches;\n};\n","import { wrapGenerator, warn, isProgress, isMultiArgTensorProgress, processAndDisposeOfTensor, isSingleArgProgress, } from './utils';\nimport { parsePatchAndInputShapes, } from './model-utils';\nimport { scaleIncomingPixels, padInput, trimInput, scaleOutput, concatTensors, getCopyOfInput, } from './tensor-utils';\nimport { isTensor, isFourDimensionalTensor, } from '../../../shared/src/constants';\nimport { makeTick, } from './makeTick';\nimport { ERROR_INVALID_MODEL_PREDICTION, ERROR_INVALID_TENSOR_PREDICTED, WARNING_PROGRESS_WITHOUT_PATCH_SIZE, } from './errors-and-warnings';\nimport { getPatchesFromImage, } from './image-utils';\nexport const getPercentageComplete = (row, col, columns, total) => {\n    const index = row * columns + col + 1;\n    const percent = index / total;\n    return percent;\n};\nexport const executeModel = (model, pixels) => {\n    const predictedPixels = model.predict(pixels);\n    if (!isTensor(predictedPixels)) {\n        throw new Error(ERROR_INVALID_MODEL_PREDICTION);\n    }\n    if (isFourDimensionalTensor(predictedPixels)) {\n        return predictedPixels;\n    }\n    throw new Error(ERROR_INVALID_TENSOR_PREDICTED(predictedPixels.shape));\n};\nexport async function* processPixels(tf, pixels, { output, progress, progressOutput, }, modelPackage, { originalImageSize, patchSize, padding = 0, }, { tensorAsBase64, }) {\n    const { model, modelDefinition, } = modelPackage;\n    const scale = modelDefinition.scale ?? 1;\n    if (patchSize) {\n        const [height, width,] = pixels.shape.slice(1);\n        const patches = getPatchesFromImage([width, height,], patchSize, padding);\n        yield;\n        let upscaledTensor;\n        const total = patches.length * patches[0].length;\n        for (let rowIdx = 0; rowIdx < patches.length; rowIdx++) {\n            const row = patches[rowIdx];\n            const columns = row.length;\n            let colTensor;\n            yield [colTensor, upscaledTensor,];\n            for (let colIdx = 0; colIdx < columns; colIdx++) {\n                const { pre, post, } = row[colIdx];\n                yield [upscaledTensor, colTensor,];\n                const slicedPixels = pixels.slice([0, ...pre.origin,], [-1, ...pre.size,]);\n                yield [upscaledTensor, colTensor, slicedPixels,];\n                const prediction = executeModel(model, slicedPixels);\n                slicedPixels.dispose();\n                yield [upscaledTensor, colTensor, prediction,];\n                const startSlice = [0, post.origin[0] * scale, post.origin[1] * scale,];\n                const endSlice = [-1, post.size[0] * scale, post.size[1] * scale,];\n                const slicedPrediction = prediction.slice(startSlice, endSlice);\n                prediction.dispose();\n                yield [upscaledTensor, colTensor, slicedPrediction,];\n                const processedPrediction = processAndDisposeOfTensor(tf, slicedPrediction, modelDefinition.postprocess, scaleOutput(modelDefinition.outputRange));\n                yield [upscaledTensor, colTensor, processedPrediction,];\n                if (progress !== undefined && isProgress(progress)) {\n                    const percent = getPercentageComplete(rowIdx, colIdx, columns, total);\n                    if (isSingleArgProgress(progress)) {\n                        progress(percent);\n                    }\n                    else {\n                        const squeezedTensor = processedPrediction.squeeze();\n                        const sliceData = {\n                            row: rowIdx,\n                            col: colIdx,\n                            patchCoordinates: {\n                                pre,\n                                post,\n                            },\n                        };\n                        if (isMultiArgTensorProgress(progress, output, progressOutput)) {\n                            progress(percent, squeezedTensor, sliceData);\n                        }\n                        else {\n                            const src = tensorAsBase64(tf, squeezedTensor);\n                            squeezedTensor.dispose();\n                            progress(percent, src, sliceData);\n                        }\n                    }\n                }\n                yield [upscaledTensor, colTensor, processedPrediction,];\n                colTensor = concatTensors(tf, [colTensor, processedPrediction,], 2);\n                processedPrediction.dispose();\n                yield [upscaledTensor, colTensor,];\n            }\n            upscaledTensor = concatTensors(tf, [upscaledTensor, colTensor,], 1);\n            colTensor.dispose();\n            yield [upscaledTensor,];\n        }\n        const processedUpscaledTensor = processAndDisposeOfTensor(tf, upscaledTensor.clone(), trimInput(tf, originalImageSize, scale));\n        upscaledTensor?.dispose();\n        yield [processedUpscaledTensor,];\n        const squeezedTensor = processedUpscaledTensor.squeeze();\n        processedUpscaledTensor.dispose();\n        return squeezedTensor;\n    }\n    if (progress) {\n        warn(WARNING_PROGRESS_WITHOUT_PATCH_SIZE);\n    }\n    const prediction = executeModel(model, pixels);\n    yield [prediction,];\n    const postprocessedTensor = processAndDisposeOfTensor(tf, prediction.clone(), modelDefinition.postprocess, scaleOutput(modelDefinition.outputRange), trimInput(tf, originalImageSize, scale));\n    prediction.dispose();\n    yield [postprocessedTensor,];\n    const squeezedTensor = postprocessedTensor.squeeze();\n    postprocessedTensor.dispose();\n    return squeezedTensor;\n}\nexport async function* upscale(tf, input, args, modelPackage, { getImageAsTensor, tensorAsBase64, }) {\n    const parsedInput = getCopyOfInput(input);\n    const startingPixels = await getImageAsTensor(tf, parsedInput);\n    yield startingPixels;\n    const imageSize = startingPixels.shape;\n    const { patchSize, padding, modelInputShape, } = parsePatchAndInputShapes(tf, modelPackage, args, imageSize);\n    const preprocessedPixels = processAndDisposeOfTensor(tf, startingPixels, modelPackage.modelDefinition.preprocess, scaleIncomingPixels(tf, modelPackage.modelDefinition.inputRange), modelInputShape ? padInput(tf, modelInputShape) : undefined);\n    yield preprocessedPixels;\n    const gen = processPixels(tf, preprocessedPixels, {\n        output: args.output,\n        progressOutput: args.progressOutput,\n        progress: args.progress,\n    }, modelPackage, {\n        originalImageSize: imageSize,\n        patchSize,\n        padding,\n    }, {\n        tensorAsBase64,\n    });\n    let result = await gen.next();\n    yield result.value;\n    while (!result.done) {\n        result = await gen.next();\n        if (Array.isArray(result.value)) {\n            yield [...result.value, preprocessedPixels,];\n        }\n        else if (isTensor(result.value)) {\n            yield [result.value, preprocessedPixels,];\n        }\n        else {\n            yield preprocessedPixels;\n        }\n    }\n    preprocessedPixels.dispose();\n    const upscaledPixels = result.value;\n    if (args.output === 'tensor') {\n        return upscaledPixels;\n    }\n    const base64Src = tensorAsBase64(tf, upscaledPixels);\n    upscaledPixels.dispose();\n    return base64Src;\n}\n;\nexport async function cancellableUpscale(tf, input, { signal, awaitNextFrame, ...args }, internalArgs, { checkValidEnvironment, ...internalConfig }) {\n    checkValidEnvironment(input, {\n        output: args.output,\n        progressOutput: args.progressOutput,\n    });\n    const tick = makeTick(tf, signal || internalArgs.signal, awaitNextFrame);\n    await tick();\n    const upscaledPixels = await wrapGenerator(upscale(tf, input, args, internalArgs, internalConfig), tick);\n    await tick();\n    return upscaledPixels;\n}\n","import DefaultUpscalerModel from '@upscalerjs/default-model';\nimport { cancellableWarmup, } from './warmup';\nimport { cancellableUpscale, } from './upscale';\nimport { getModel, } from './model-utils';\nconst DEFAULT_MODEL = DefaultUpscalerModel;\nexport function getUpscaler({ tf, getUpscaleOptions, checkValidEnvironment, getImageAsTensor, tensorAsBase64, loadModel, }) {\n    class Upscaler {\n        _opts;\n        _model;\n        ready;\n        _abortController = new AbortController();\n        constructor(opts = {}) {\n            this._opts = {\n                ...opts,\n            };\n            this._model = loadModel(tf, getModel(tf, this._opts.model || DEFAULT_MODEL));\n            this.ready = new Promise((resolve, reject) => {\n                this._model.then(() => cancellableWarmup(tf, this._model, (this._opts.warmupSizes || []), undefined, {\n                    signal: this._abortController.signal,\n                })).then(resolve).catch(reject);\n            });\n        }\n        async execute(image, options) {\n            const internals = {\n                checkValidEnvironment,\n                getImageAsTensor,\n                tensorAsBase64,\n            };\n            await this.ready;\n            const modelPackage = await this._model;\n            return cancellableUpscale(tf, image, getUpscaleOptions(options), {\n                ...modelPackage,\n                signal: this._abortController.signal,\n            }, internals);\n        }\n        upscale = this.execute.bind(this);\n        warmup = async (warmupSizes = [], options) => {\n            await this.ready;\n            return cancellableWarmup(tf, this._model, warmupSizes, options, {\n                signal: this._abortController.signal,\n            });\n        };\n        abort = () => {\n            this._abortController.abort();\n            this._abortController = new AbortController();\n        };\n        dispose = async () => {\n            await this.ready;\n            const { model, modelDefinition, } = await this._model;\n            if (modelDefinition.teardown) {\n                await modelDefinition.teardown(tf);\n            }\n            model.dispose();\n        };\n        getModel = () => this._model;\n    }\n    ;\n    return Upscaler;\n}\n;\n","const getOutputOption = (output) => {\n    if (output === 'tensor') {\n        return 'tensor';\n    }\n    return 'base64';\n};\nexport const getUpscaleOptions = ({ output, progressOutput, ...options } = {}) => {\n    return {\n        ...options,\n        output: getOutputOption(output),\n        progressOutput: getOutputOption(progressOutput || output),\n    };\n};\n","import { loadTfModel, parseModelDefinition, } from '../shared/model-utils';\nimport { ERROR_MODEL_DEFINITION_BUG, getModelDefinitionError, } from '../shared/errors-and-warnings';\nimport { isValidModelDefinition, } from '../../../shared/src/constants';\nimport { errIsModelDefinitionValidationError, } from '../shared/utils';\nexport const CDN_PATH_DEFINITIONS = {\n    'jsdelivr': (packageName, version, path) => `https://cdn.jsdelivr.net/npm/${packageName}@${version}/${path}`,\n    'unpkg': (packageName, version, path) => `https://unpkg.com/${packageName}@${version}/${path}`,\n};\nexport const CDNS = [\n    'jsdelivr',\n    'unpkg',\n];\nexport const getLoadModelErrorMessage = (errs, modelPath, internals) => new Error([\n    `Could not resolve URL ${modelPath} for package ${internals?.name}@${internals?.version}`,\n    'Errors include:',\n    ...errs.map(([cdn, err,]) => `- ${cdn}: ${err.message}`),\n].join('\\n'));\nexport async function fetchModel(tf, modelConfiguration) {\n    const { modelType, _internals, path: modelPath, } = modelConfiguration;\n    if (modelPath) {\n        return await loadTfModel(tf, modelPath, modelType);\n    }\n    if (!_internals) {\n        throw new Error(ERROR_MODEL_DEFINITION_BUG);\n    }\n    const errs = [];\n    for (const cdn of CDNS) {\n        const getCDNFn = CDN_PATH_DEFINITIONS[cdn];\n        try {\n            const url = getCDNFn(_internals.name, _internals.version, _internals.path);\n            return await loadTfModel(tf, url, modelType);\n        }\n        catch (err) {\n            errs.push([cdn, err instanceof Error ? err : new Error(`There was an unknown error: ${JSON.stringify(err)}`),]);\n        }\n    }\n    throw getLoadModelErrorMessage(errs, modelPath || _internals.path, _internals);\n}\nexport const loadModel = async (tf, _modelDefinition) => {\n    const modelDefinition = await _modelDefinition;\n    try {\n        isValidModelDefinition(modelDefinition);\n    }\n    catch (err) {\n        if (errIsModelDefinitionValidationError(err)) {\n            throw getModelDefinitionError(err.type, modelDefinition);\n        }\n        throw new Error(ERROR_MODEL_DEFINITION_BUG);\n    }\n    const parsedModelDefinition = parseModelDefinition(modelDefinition);\n    const model = await fetchModel(tf, parsedModelDefinition);\n    return {\n        model,\n        modelDefinition: parsedModelDefinition,\n    };\n};\n","import * as tf from '@tensorflow/tfjs';\nimport { tensorAsClampedArray, } from '../shared/tensor-utils';\nimport { isString, isFourDimensionalTensor, isThreeDimensionalTensor, isTensor, } from '../../../shared/src/constants';\nconst ERROR_ENVIRONMENT_DISALLOWS_BASE64_URL = 'https://upscalerjs.com/documentation/troubleshooting#environment-disallows-base64';\nconst ERROR_ENVIRONMENT_DISALLOWS_STRING_INPUT_URL = 'https://upscalerjs.com/documentation/troubleshooting#environment-disallows-string-input';\nexport const getEnvironmentDisallowsStringInput = () => new Error([\n    'Environment does not support a string URL as an input format.',\n    `For more information, see ${ERROR_ENVIRONMENT_DISALLOWS_STRING_INPUT_URL}.`,\n].join('\\n'));\nexport const getEnvironmentDisallowsBase64 = () => new Error([\n    'Environment does not support base64 as an output format.',\n    `For more information, see ${ERROR_ENVIRONMENT_DISALLOWS_BASE64_URL}.`,\n].join('\\n'));\nexport const getInvalidTensorError = (input) => new Error([\n    `Unsupported dimensions for incoming pixels: ${input.shape.length}.`,\n    'Only 3 or 4 rank tensors are supported.',\n].join('\\n'));\nexport const getInvalidImageError = () => new Error([\n    'Failed to load image',\n].join(' '));\nexport const loadImage = (src) => new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = src;\n    img.crossOrigin = 'anonymous';\n    img.onload = () => resolve(img);\n    img.onerror = () => reject(getInvalidImageError());\n});\nconst fromPixels = (input) => tf.browser.fromPixelsAsync(input);\nconst getTensorFromInput = async (input, _tf) => {\n    if (isTensor(input)) {\n        return input;\n    }\n    if (isString(input)) {\n        const imgHTMLElement = await loadImage(input);\n        return fromPixels(imgHTMLElement);\n    }\n    return fromPixels(input);\n};\nexport const getImageAsTensor = async (tf, input) => {\n    const tensor = await getTensorFromInput(input, tf);\n    if (isThreeDimensionalTensor(tensor)) {\n        const expandedTensor = tensor.expandDims(0);\n        tensor.dispose();\n        return expandedTensor;\n    }\n    if (isFourDimensionalTensor(tensor)) {\n        return tensor;\n    }\n    throw getInvalidTensorError(tensor);\n};\nexport const isHTMLImageElement = (pixels) => {\n    try {\n        return pixels instanceof HTMLImageElement;\n    }\n    catch (err) {\n        return false;\n    }\n};\nexport const tensorAsBase64 = (tf, tensor) => {\n    const arr = tensorAsClampedArray(tf, tensor);\n    const [height, width,] = tensor.shape;\n    const imageData = new ImageData(width, height);\n    imageData.data.set(arr);\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        throw new Error('No context found');\n    }\n    ctx.putImageData(imageData, 0, 0);\n    return canvas.toDataURL();\n};\nconst checkIfValidEnvironment = (errFn) => {\n    try {\n        if ((new Image() && 'createElement' in document) !== true) {\n            throw errFn();\n        }\n    }\n    catch (err) {\n        throw errFn();\n    }\n};\nexport const checkValidEnvironment = (input, { output = 'base64', progressOutput, }) => {\n    if (typeof input === 'string') {\n        checkIfValidEnvironment(getEnvironmentDisallowsStringInput);\n    }\n    if (progressOutput === 'base64' || output === 'base64') {\n        checkIfValidEnvironment(getEnvironmentDisallowsBase64);\n    }\n};\n","import { getUpscaler, } from '../shared';\nimport * as tf from '@tensorflow/tfjs';\nexport * from '../shared';\nimport { getUpscaleOptions, } from './args.browser';\nimport { loadModel, } from './loadModel.browser';\nimport { getImageAsTensor, tensorAsBase64, checkValidEnvironment, } from './image.browser';\nexport default getUpscaler({\n    tf,\n    getUpscaleOptions,\n    loadModel,\n    getImageAsTensor,\n    tensorAsBase64,\n    checkValidEnvironment,\n});\n","import Upscaler from 'upscaler';\r\n\r\nimport { CanvasSD } from './Core/CanvasSD';\r\nimport { Implementation } from './Implementation';\r\n// import { Application } from '../';\r\nexport class AppUpscaler {\r\n    // app: Application;\r\n    canvasSD: CanvasSD;\r\n    implementation: Implementation;\r\n    host: HTMLElement;\r\n    divText: HTMLElement;\r\n    public static Init(id: string) {\r\n        new AppUpscaler(id);\r\n    }\r\n    constructor(id: string = 'main') {\r\n\r\n        // https://thekevinscott.github.io/UpscalerJS/#/?id=example\r\n\r\n        // const target = document.getElementById('target');\r\n        // const button = document.getElementById('button');\r\n        // const info = document.getElementById('info');\r\n\r\n\r\n        const path = 'https://raw.githubusercontent.com/NamjuLee/data/master/img/map/worldMapGlobeA_small.png';\r\n        // const path = 'https://raw.githubusercontent.com/NamjuLee/data/master/img/building%20footprint_02.jpg'\r\n\r\n        const img = new Image();\r\n\r\n        img.src = path;\r\n\r\n        const div = document.getElementById(id);\r\n\r\n        if (div) {\r\n            div.appendChild(img);\r\n        }\r\n        // button?.onclick = () => {\r\n        //   info.innerText = 'Upscaling...';\r\n        //   const start = new Date().getTime();\r\n\r\n        // img.onload = () => {\r\n\r\n        // };\r\n        // };\r\n\r\n        const upscaler = new Upscaler({\r\n            // // model: 'div2k/rdn-C3-D10-G64-G064-x2',\r\n            //   model: 'div2k-2x',\r\n            // scale: 2,\r\n        });\r\n        upscaler.upscale(path).then((upscaledImgSrc) => {\r\n            // console.log(upscaledImgSrc);\r\n            const imgResult = document.createElement('img');\r\n            imgResult.src = upscaledImgSrc as string;\r\n            // // target.innerHTML = '';\r\n            if (div) {\r\n                div.appendChild(imgResult);\r\n            }\r\n            // const ms = new Date().getTime() - start;\r\n            // info.innerText = `Upscaled in ${ms} ms`;\r\n            // console.log('upscaler done');\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n        // // this.app = app;\r\n        // console.log('id: ' + id + ', App Init!!!!!');\r\n        // const host = document.getElementById(id);\r\n        // if (host) { this.host = host; }\r\n        // this.InitHTML();\r\n        // // this.threeCore = new ThreeCore();\r\n        // // this.tfCore = new TFCore();\r\n        // this.canvasSD = new CanvasSD(this);\r\n        // this.implementation = new Implementation(this);\r\n    }\r\n    InitHTML() {\r\n        const btn0 = document.createElement('button');\r\n        btn0.style.width = '100px';\r\n        btn0.style.height = '20px';\r\n        btn0.style.marginLeft = '20px';\r\n        btn0.style.zIndex = '5';\r\n        // btn0.style.left = '20px';\r\n        // btn0.style.top = '20px';\r\n        // btn0.style.position = 'absolute';\r\n        btn0.name = 'Clear';\r\n        btn0.innerText = 'Clear';\r\n        btn0.value = 'Clear';\r\n        btn0.onclick = () => { console.log(this); this.canvasSD.Clear(); };\r\n\r\n        this.host.appendChild(btn0);\r\n        this.divText = document.createElement('div');\r\n        this.divText.id = 'classText';\r\n        this.divText.style.zIndex = '5';\r\n        // this.divText.style.left = '150px';\r\n        // this.divText.style.top = '20px';\r\n        // this.divText.style.position = 'absolute';\r\n        this.divText.innerText = 'class: ';\r\n        this.divText.style.marginLeft = '20px';\r\n        this.host.appendChild(this.divText);\r\n    }\r\n    Init(ctx: CanvasRenderingContext2D) {\r\n        // console.log('this is init...');\r\n    }\r\n    Clear() {\r\n        this.canvasSD.Clear();\r\n    }\r\n}\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n\r\n    constructor(id: string ) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n\r\n        AppUpscaler.Init(id)\r\n    }\r\n    public destroy() {\r\n        if (this.divHost) {\r\n            try {\r\n                while (this.divHost.firstChild) {\r\n                    this.divHost.removeChild(this.divHost.firstChild);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error in destroy method:', error);\r\n            }\r\n        } else {\r\n            console.warn('divHost is undefined in destroy method');\r\n        }\r\n    }\r\n}","export default function _OverloadYield(value, kind) {\n  this.v = value, this.k = kind;\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function _awaitAsyncGenerator(value) {\n  return new OverloadYield(value, 0);\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function AsyncGenerator(gen) {\n  var front, back;\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg),\n        value = result.value,\n        overloaded = value instanceof OverloadYield;\n      Promise.resolve(overloaded ? value.v : value).then(function (arg) {\n        if (overloaded) {\n          var nextKey = \"return\" === key ? \"return\" : \"next\";\n          if (!value.k || arg.done) return resume(nextKey, arg);\n          arg = gen[nextKey](arg).value;\n        }\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: !0\n        });\n        break;\n      case \"throw\":\n        front.reject(value);\n        break;\n      default:\n        front.resolve({\n          value: value,\n          done: !1\n        });\n    }\n    (front = front.next) ? resume(front.key, front.arg) : back = null;\n  }\n  this._invoke = function (key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n      back ? back = back.next = request : (front = back = request, resume(key, arg));\n    });\n  }, \"function\" != typeof gen[\"return\"] && (this[\"return\"] = void 0);\n}\nAsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function () {\n  return this;\n}, AsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n}, AsyncGenerator.prototype[\"throw\"] = function (arg) {\n  return this._invoke(\"throw\", arg);\n}, AsyncGenerator.prototype[\"return\"] = function (arg) {\n  return this._invoke(\"return\", arg);\n};","import AsyncGenerator from \"./AsyncGenerator.js\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}"],"names":["getInput","inputs","Array","isArray","isTensorArray","scale","name","version","meta","architecture","path","modelPath","modelType","_internals","inputRange","outputRange","setup","tf","Layer","layers","MultiplyBeta","constructor","super","this","beta","call","mul","_scale","PixelShuffle","computeOutputShape","inputShape","depthToSpace","getPixelShuffle","forEach","layer","serialization","registerClass","getESRGANModelDefinition","C","D","G","G0","T","patchSize","size","artifactReducing","sharpening","dataset","modelFileName","MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE","isShape4D","shape","Boolean","length","every","value","isFixedShape4D","makeIsNDimensionalTensor","rank","pixels","err","isFourDimensionalTensor","isThreeDimensionalTensor","isTensor","input","ModelDefinitionValidationError","Error","type","isNumber","el","isValidRange","range","warn","msg","console","join","isProgress","p","undefined","isMultiArgTensorProgress","output","progressOutput","async","wrapGenerator","gen","postNext","result","next","done","nonNullable","processAndDisposeOfTensor","tensor","_processFns","processFns","filter","processedTensor","tidy","reduce","reducedTensor","processFn","isDisposed","dispose","WARNING_DEPRECATED_MODEL_DEFINITION_FN","WARNING_UNDEFINED_PADDING","WARNING_PROGRESS_WITHOUT_PATCH_SIZE","ERROR_INVALID_MODEL_PREDICTION","GET_UNDEFINED_TENSORS_ERROR","AbortError","ERROR_INVALID_MODEL_TYPE","JSON","stringify","ERROR_MODEL_DEFINITION_BUG","WARNING_INPUT_SIZE_AND_PATCH_SIZE","MODEL_INPUT_SIZE_MUST_BE_SQUARE","GET_MODEL_CONFIGURATION_MISSING_PATH_AND_INTERNALS","modelConfiguration","makeTick","signal","awaitNextFrame","nextFrame","abortSignal","aborted","r","isWarmupSizeByPatchSize","isNumericWarmupSize","getInvalidValueError","ERROR_INVALID_WARMUP_VALUE","getWidthAndHeight","modelPackage","sizes","model","modelDefinition","warmupSize","dummyTensor","zeros","fns","preprocess","t","predict","postprocess","fn","getSizesAsArray","cancellableWarmup","tick","warmup","getModel","modelDef","isModelDefinitionFn","getModelDefinitionOrModelDefinitionFnAsModelDefinition","loadTfModel","loadGraphModel","loadLayersModel","getModelInputShape","batchInputShape","LayersModel","isLayersModel","getBatchInputShape","getPatchSizeAsMultiple","divisibilityFactor","Math","ceil","parsePatchAndInputShapes","imageSize","padding","modelInputShape","GET_INVALID_PATCH_SIZE","GET_INVALID_PATCH_SIZE_AND_PADDING","multipliedPatchSize","upscaledPatchSize","GET_WARNING_PATCH_SIZE_INDIVISIBLE_BY_DIVISIBILITY_FACTOR","padInput","pixelsHeight","pixelsWidth","height","max","width","rightTensor","bottomTensor","topTensor","concat","trimInput","slice","scaleOutput","endingRange","clipByValue","scaleIncomingPixels","concatTensors","tensors","axis","definedTensors","concatenatedTensor","get1DPatch","total","idx","preOrigin","prePadding","isBeyondBounds","postOrigin","postPadding","prePaddingAdjusted","postSize","pre","origin","post","increment","getPatchesFromImage","patches","x","y","preOriginY","preSizeY","postOriginY","postSizeY","yIncrement","min","row","preOriginX","preSizeX","postOriginX","postSizeX","xIncrement","push","getPercentageComplete","col","columns","executeModel","predictedPixels","progress","originalImageSize","tensorAsBase64","upscaledTensor","rowIdx","colTensor","colIdx","slicedPixels","prediction","startSlice","endSlice","slicedPrediction","processedPrediction","percent","squeezedTensor","squeeze","sliceData","patchCoordinates","src","processedUpscaledTensor","clone","postprocessedTensor","args","getImageAsTensor","parsedInput","getCopyOfInput","startingPixels","preprocessedPixels","processPixels","upscaledPixels","base64Src","cancellableUpscale","internalArgs","checkValidEnvironment","internalConfig","upscale","DEFAULT_MODEL","DefaultUpscalerModel","getOutputOption","CDN_PATH_DEFINITIONS","packageName","CDNS","getLoadModelErrorMessage","errs","internals","map","cdn","message","getEnvironmentDisallowsStringInput","getEnvironmentDisallowsBase64","loadImage","Promise","resolve","reject","img","Image","crossOrigin","onload","onerror","fromPixels","checkIfValidEnvironment","errFn","document","getUpscaleOptions","loadModel","opts","AbortController","execute","bind","warmupSizes","options","ready","_model","_abortController","abort","teardown","_opts","then","catch","image","_modelDefinition","UNDEFINED","includes","INVALID_MODEL_TYPE","MISSING_PATH","isValidModelDefinition","errIsModelDefinitionValidationError","error","getModelDefinitionError","parsedModelDefinition","parseModelDefinition","getCDNFn","url","fetchModel","_tf","imgHTMLElement","getTensorFromInput","expandedTensor","expandDims","getInvalidTensorError","arr","fill","dataSync","tensorAsClampedArray","imageData","ImageData","data","set","canvas","createElement","ctx","getContext","putImageData","toDataURL","AppUpscaler","id","canvasSD","implementation","host","divText","div","getElementById","appendChild","Upscaler","upscaledImgSrc","imgResult","InitHTML","btn0","style","marginLeft","zIndex","innerText","onclick","log","Clear","Init","Solution","divHost","destroy","firstChild","removeChild","_OverloadYield","kind","v","k","_awaitAsyncGenerator","AsyncGenerator","front","back","resume","key","arg","overloaded","OverloadYield","nextKey","settle","_invoke","request","_wrapAsyncGenerator","apply","arguments","prototype","Symbol","asyncIterator"],"sourceRoot":""}
{"version":3,"file":"static/js/30069.9ad2ecc1.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Geometry/Primatives/PointWorld.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Utility/Matrix4.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Utility/Vector3.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/WebGL/Model.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/WebGL/Transform.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/WebGL/VAO.ts"],"sourcesContent":["import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        this.scene.add(this);\r\n    }\r\n    render() {\r\n        //\r\n    }\r\n}","import { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\n\r\nimport { Shader } from '../../WebGL/Shader';\r\n\r\nclass PointShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    pMatrix: Float32Array;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n        this.pMatrix = pMatrix;\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n\r\n            this.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n\r\n            // gl.useProgram(this.program);\r\n            gl.useProgram(null); // Done setting up shader\r\n        }\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        // this.gl.useProgram(null);\r\n        this.gl.uniform1f(this.uAngle, angle);\r\n        this.gl.uniform1f(this.uPointSize, size);\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport class PointWorld extends GeometryBase {\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n\r\n        uniform mat4 uPMatrix;\r\n        uniform mat4 uMVMatrix;\r\n        uniform mat4 uCameraMatrix;\r\n\r\n        uniform mediump float uPointSize;\r\n        uniform float uAngle;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(cos(uAngle) * 0.8 + a_position.x, sin(uAngle) * 0.8 + a_position.y, a_position.z, 1.0);\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        uniform float uPointSize;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            float c =  uPointSize / 20.;\r\n            finalColor = vec4(0, 50, c, 1.0);\r\n        }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: PointShader;\r\n\r\n    size: number = 20.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        this.shader = new PointShader(gl, this.v, this.f, this.app.camera.projectionMatrix);\r\n\r\n        this.vao = new VAO(gl, 'dots', [0, 0, 0, 0.1, 0.1, 0, 0.1, -0.1, 0, -0.1, -0.1, 0, -0.1, 0.1, 0]);\r\n        this.vao.drawMode = gl.POINTS; // Most often the draw mode will be triangles, but in this instance we need Points\r\n        this.vao.noCulling = true;\r\n        this.vao.doBlending = true;\r\n\r\n        this.model = new Model(this.vao);\r\n        // this.isDone = true;\r\n    }\r\n    render() {\r\n        // console.log(gl);\r\n        this.size += 0.01;\r\n        let size = (Math.sin(this.size) * 10.0) + 20.0;\r\n        // gl.uniform1f(this.uPointSizeLoc, size);\r\n\r\n        // gl.uniform1f(this.uAngle, this.size);\r\n        // gl.drawArrays(gl.POINTS, 0, this.gVertCnt);\r\n        this.rotation += 0.03;\r\n\r\n        this.shader.activate();\r\n        this.shader.setPerspective(this.shader.pMatrix);\r\n        this.shader.set(size, this.rotation);\r\n        // this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.shader.setCameraMatrix(this.app.camera.viewMatrix);\r\n        this.shader.renderModel(this.model.preRender());\r\n    }\r\n}","import { Vector3 } from './Vector3';\r\n\r\nexport class Matrix4 {\r\n    raw: Float32Array;\r\n    // ....................................................................\r\n    // Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    // from glMatrix\r\n    static perspective(out: Float32Array, fovy: number, aspect: number , near: number, far: number ) {\r\n        let f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n    static ortho(out: number[], left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    }\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    // make the rows into the columns\r\n    static transpose(out: number[], a: number[]) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n        //  Calculate the determinant\r\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return null; }\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Operation\r\n\r\n    // https:// github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Matrix4 , v: number[]) {\r\n        let x = v[0], y = v[1], z = v[2], w = v[3];\r\n        let c1r1 = mat4[ 0], c2r1 = mat4[ 1], c3r1 = mat4[ 2], c4r1 = mat4[ 3],\r\n            c1r2 = mat4[ 4], c2r2 = mat4[ 5], c3r2 = mat4[ 6], c4r2 = mat4[ 7],\r\n            c1r3 = mat4[ 8], c2r3 = mat4[ 9], c3r3 = mat4[10], c4r3 = mat4[11],\r\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8]\t* v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9]\t* v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10]\t* v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11]\t* v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    // From glMatrix\r\n    // Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) { \r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n        //  Cache only the current line of the second matrix\r\n        let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\t\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    }\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array , rad: number, axis: number) {\r\n        let x = axis[0], y = axis[1], z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) { return null; }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\r\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\r\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return out;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat?: Float32Array ) {\r\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\r\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\r\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\r\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return false; }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8]\t* z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9]\t* z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10]\t* z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11]\t* z + out[15];\r\n    }\r\n    constructor() { \r\n        this.raw = Matrix4.identity(); \r\n    }\r\n    // ....................................................................\r\n    // Transformations Methods\r\n    vtranslate(v: Vector3) {\r\n        Matrix4.translate(this.raw, v.x, v.y, v.z);\r\n        return this; \r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.raw, x, y, z); \r\n        return this;\r\n    }\r\n    rotateY(rad: number) {\t\tMatrix4.rotateY(this.raw, rad); return this; }\r\n    rotateX(rad: number) {\t\tMatrix4.rotateX(this.raw, rad); return this; }\r\n    rotateZ(rad: number) {\t\tMatrix4.rotateZ(this.raw, rad); return this; }\r\n\r\n    vscale(vec3: Vector3) {\t\tMatrix4.scale(this.raw, vec3.x, vec3.y, vec3.z); return this; }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.raw, x, y, z); \r\n        return this; \r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.raw); \r\n        return this; \r\n    }\r\n\r\n    // ....................................................................\r\n    // Methods\r\n    // Bring is back to identity without changing the transform values.\r\n    resetRotation() {\t\r\n        for (let i = 0; i < this.raw.length; i++) {\r\n            if (i >= 12 && i <= 14) {continue; }\r\n            this.raw[i] = (i % 5 === 0) ? 1 : 0;  // only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // reset data back to identity.\r\n    reset() { \r\n        for (let i = 0; i < this.raw.length; i++) { this.raw[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n}","\r\nexport class Vector3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0 ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    magnitude(v?: Vector3) {\r\n        if (v === undefined) {return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z ); }\r\n        let x = v.x - this.x, y = v.y - this.y, z = v.y - this.z;\r\n        return Math.sqrt( x * x + y * y + z * z );\r\n    }\r\n\r\n    normalize() { \r\n        let mag = this.magnitude(); \r\n        this.x /= mag; this.y /= mag; this.z /= mag; \r\n        return this;\r\n    }\r\n    set(x: number, y: number, z: number) {\r\n         this.x = x; this.y = y; this.z = z;\t\r\n         return this;\r\n    }\r\n    multiScalar(v: number) { \r\n        this.x *= v; this.y *= v; this.z *= v; return this; \r\n    }\r\n    getArray() {\r\n         return [this.x, this.y, this.z]; }\r\n    getFloatArray() {\r\n         return new Float32Array([this.x, this.y, this.z]); }\r\n    clone() {\r\n         return new Vector3(this.x, this.y, this.z); \r\n    }\r\n} ","import { VAO } from './VAO';\r\nimport { Transform } from './Transform';\r\n\r\nexport class Model {\r\n    vao: VAO;\r\n    transform: Transform;\r\n    constructor(vao: VAO) {\r\n        this.transform = new Transform();\r\n        this.vao = vao;\r\n    }\r\n\r\n    setScale(x: number, y: number, z: number) {\r\n        this.transform.scale.set(x, y, z);\r\n        return this;\r\n    }\r\n    setPosition(x: number, y: number, z: number) {\r\n        this.transform.position.set(x, y, z);\r\n        return this;\r\n    }\r\n    setRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.set(x, y, z);\r\n        return this;\r\n    }\r\n\r\n    addScale(x: number, y: number, z: number) {\r\n        this.transform.scale.x += x; this.transform.scale.y += y; this.transform.scale.y += y;\r\n        return this;\r\n    }\r\n    addPosition(x: number, y: number, z: number) {\r\n        this.transform.position.x += x; this.transform.position.y += y; this.transform.position.z += z;\r\n        return this;\r\n    }\r\n    addRotation(x: number, y: number, z: number) {\r\n        this.transform.rotation.x += x; this.transform.rotation.y += y; this.transform.rotation.z += z;\r\n        return this;\r\n    }\r\n\r\n    preRender() {\r\n        this.transform.updateMatrix();\r\n        return this;\r\n    }\r\n}","// import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { Model } from './Model';\r\n\r\nexport enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_NAME = 'a_color',\r\n    ATTR_COLOR_LOC = 4,\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    norm: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_POSITION_NAME);\r\n        this.norm = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective = gl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix = gl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix = gl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture = gl.getUniformLocation(program, 'uMainTex');\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    vShader: WebGLShader | null;\r\n    fShader: WebGLShader | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertShaderSrc: string, fragShaderSrc: string, needValidate: boolean = true) {\r\n        this.gl = gl;\r\n        this.vShader = ShaderUtility.CreateShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertShaderSrc);\r\n        this.fShader = ShaderUtility.CreateShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragShaderSrc);\r\n\r\n        if (this.vShader && this.fShader) {\r\n            let program = ShaderUtility.CreateProgram(gl, this.vShader, this.fShader, needValidate);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.attribLoc = new AttribLocations(gl, this.program);\r\n                this.uniformLoc = new UniformLocations(gl, this.program);\r\n                return;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return;\r\n        }\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n        this.gl.useProgram(this.program); return this;\r\n    }\r\n    deactivate() {\r\n        this.gl.useProgram(null); return this;\r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) { this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData);\r\n        return this;\r\n    }\r\n    setModelMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modelMatrix, false, matData);\r\n        return this;\r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData);\r\n        return this;\r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    }\r\n    // Handle rendering a model\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.noCulling) { this.gl.disable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) { this.gl.enable(this.gl.BLEND); }\r\n\r\n        if (model.vao.indexCount) {\r\n            // console.log(model.vao.indexCount);\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n            this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n        if (model.vao.noCulling) { this.gl.enable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) { this.gl.disable(this.gl.BLEND); }\r\n\r\n        return this;\r\n\r\n    }\r\n}\r\n\r\nclass ShaderUtility {\r\n    static CreateProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.bindAttribLocation(program, ATTR.ATTR_POSITION_LOC, ATTR.ATTR_POSITION_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_NORMAL_LOC, ATTR.ATTR_NORMAL_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_UV_LOC, ATTR.ATTR_UV_NAME);\r\n\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n    static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n}","import { Vector3 } from '../Utility/Vector3';\r\nimport { Matrix4 } from '../Utility/Matrix4';\r\n\r\nexport class Transform {\r\n    static deg2Rad = Math.PI / 180; // Cache result, one less operation to do for each update.\r\n\r\n    position: Vector3;\r\n    scale: Vector3;\r\n    rotation: Vector3;\r\n    matView: Matrix4;\r\n    matNormal: Float32Array;\r\n\r\n    forward: Float32Array;\r\n    up: Float32Array;\r\n    right: Float32Array;\r\n\r\n    constructor() {\r\n        this.position = new Vector3(0, 0, 0);\t// Traditional X,Y,Z 3d position\r\n        this.scale = new Vector3(1, 1, 1);\t// How much to scale a mesh. Having a 1 means no scaling is done.\r\n        this.rotation = new Vector3(0, 0, 0);\t// Hold rotation values based on degrees, Object will translate it to radians\r\n        this.matView = new Matrix4();\t\t// Cache the results when calling updateMatrix\r\n        this.matNormal = new Float32Array(9);\t// This is a Mat3, raw array to hold the values is enough for what its used for\r\n\r\n        // Direction Vectors\r\n        this.forward = new Float32Array(4);\t// When rotating, keep track of what the forward direction is\r\n        this.up = new Float32Array(4);\t// what the up direction is, invert to get bottom\r\n        this.right = new Float32Array(4);\t// what the right direction is, invert to get left\r\n    }\r\n    updateMatrix() {\r\n        this.matView.reset() // Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(this.rotation.x * Transform.deg2Rad)\r\n            .rotateZ(this.rotation.z * Transform.deg2Rad)\r\n            .rotateY(this.rotation.y * Transform.deg2Rad)\r\n            .vscale(this.scale);\r\n\r\n        // Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.matNormal, this.matView.raw);\r\n\r\n        // Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw); // Z\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw); // Y\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw); // X\r\n\r\n        return this.matView.raw;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw);\r\n        return this;\r\n    }\r\n\r\n    getViewMatrix() { return this.matView.raw; }\r\n    getNormalMatrix() { return this.matNormal; }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0);\r\n        this.scale.set(1, 1, 1);\r\n        this.rotation.set(0, 0, 0);\r\n    }\r\n}\r\n","import { ATTR } from './Shader';\r\n\r\nexport enum DRAW_MODE {\r\n    //\r\n}\r\n\r\nexport class VAO {\r\n    name: string;\r\n\r\n    noCulling: boolean = true;\r\n    doBlending: boolean = true;\r\n\r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, name: string, aryVert: number[], aryInd?: number[] | null, aryNorm?: number[] | null, aryUV?: number[] | null) {\r\n        this.name = name;\r\n        this.drawMode = gl.TRIANGLES;\r\n\r\n        this.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(this.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            this.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            this.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            this.vertexCount = aryVert.length / this.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm !== null) {\r\n            this.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV !== null) {\r\n            // console.log(aryUV);\r\n            this.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            // console.log(this);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd !== null) {\r\n            this.bufIndex = gl.createBuffer();\r\n            this.indexCount = aryInd.length;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        }\r\n        // console.log(this);\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n    }\r\n\r\n}"],"names":["GeometryBase","constructor","scene","this","add","render","PointShader","Shader","gl","vertSrc","fragSrc","pMatrix","super","uPointSize","uAngle","program","setPerspective","getUniformLocation","useProgram","set","size","angle","uniform1f","PointWorld","app","v","f","vao","model","shader","rotation","canvas","initShader","camera","projectionMatrix","VAO","drawMode","POINTS","noCulling","doBlending","Model","Math","sin","activate","setCameraMatrix","viewMatrix","renderModel","preRender","Matrix4","static","a","Float32Array","out","fovy","aspect","near","far","tan","nf","left","right","bottom","top","lr","bt","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","x","y","z","w","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b","b0","b1","b2","b3","rad","s","c","cos","axis","t","b12","b20","b21","b22","len","sqrt","abs","mat","undefined","raw","identity","vtranslate","translate","rotateY","rotateX","rotateZ","vscale","vec3","scale","invert","resetRotation","i","length","reset","Vector3","magnitude","normalize","mag","multiScalar","getArray","getFloatArray","clone","transform","Transform","setScale","setPosition","position","setRotation","addScale","addPosition","addRotation","updateMatrix","ATTR","AttribLocations","norm","uv","getAttribLocation","ATTR_POSITION_NAME","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","perspective","modelMatrix","cameraMatrix","mainTexture","vertShaderSrc","fragShaderSrc","needValidate","attribLoc","uniformLoc","vShader","fShader","ShaderUtility","CreateShader","VERTEX_SHADER","FRAGMENT_SHADER","CreateProgram","console","error","deactivate","dispose","getParameter","CURRENT_PROGRAM","deleteProgram","matData","uniformMatrix4fv","setModelMatrix","getViewMatrix","bindVertexArray","disable","CULL_FACE","enable","BLEND","indexCount","drawElements","UNSIGNED_SHORT","drawArrays","vertexCount","vertexShader","fragmentShader","createProgram","attachShader","bindAttribLocation","ATTR_POSITION_LOC","ATTR_NORMAL_LOC","ATTR_UV_LOC","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","log","deleteShader","validateProgram","VALIDATE_STATUS","type","shaderString","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","matView","matNormal","forward","up","deg2Rad","updateDirection","getNormalMatrix","PI","DRAW_MODE","name","aryVert","aryInd","aryNorm","aryUV","bufVertices","bufNormals","bufUV","bufIndex","vertexComponentLen","TRIANGLES","createVertexArray","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","Uint16Array"],"sourceRoot":""}
{"version":3,"file":"static/js/36269.372b8021.chunk.js","mappings":"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","sources":["njslab/Raster/Color-canvas-3d-wireframe-template-renderer/ColorCanvas3DWireframe.ts","njslab/Raster/Color-canvas-3d-wireframe-template-renderer/index.ts"],"sourcesContent":["interface Camera {\n  position: { x: number; y: number; z: number };\n  rotation: { x: number; y: number };\n  zoom: number;\n  fov: number;\n  offset: { x: number; y: number };\n}\n\n\nexport class ColorCanvas3DWireframe {\n  public div: HTMLElement;\n  public renderer: RendererCanvas3DWireframe;\n  public pts = [];\n  public lns = [];\n  public t = 0.0;\n\n  constructor(id: string) {\n    this.div = document.getElementById(id);\n    this.renderer = new RendererCanvas3DWireframe(id);\n    this.renderer.pts = this.pts;\n    \n    // Initialize camera to look at color space center from 45 degrees\n    this.renderer.initializeCamera({\n      position: { x: 0, y: 0, z: 0 },\n      rotation: { \n        x: -Math.PI / 4,  // 45 degrees in radians\n        y: -Math.PI / 4   // 45 degrees in radians\n      },\n      zoom: 1,\n      fov: 500,\n      offset: { x: 0, y: 0 }\n    });\n    this.renderer.setCameraPos('iso')\n    this.init();\n    this.update();\n    this.render();\n  }\n  public ddd() {\n\n  }\n\n\n  public init() {\n    // TODO\n  }\n\n  public update() {\n    // TODO\n  }\n\n  public render() {\n    requestAnimationFrame(() => {\n      this.render();\n    });\n    this.update();\n    this.renderer.render();\n  }\n\n  public destroy() {\n    try {\n      while (this.div && this.div.lastElementChild) {\n        const lastChild = this.div.lastElementChild as Node;\n        this.div.removeChild(lastChild);\n      }\n    } catch (error) {\n      console.error(\"Error removing child elements:\", error);\n    }\n  }\n}\n\nexport class RendererCanvas3DWireframe {\n  public render: () => void;\n  public pts = [];\n  private camera: Camera;\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private dragging = false;\n  private panning = false;\n  private lastMouseX = 0;\n  private lastMouseY = 0;\n  private panStartX = 0;\n  private panStartY = 0;\n\n  constructor(id: string) {\n    const div = document.getElementById(id);\n    const bounding = div.getBoundingClientRect();\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = bounding.width;\n    this.canvas.height = bounding.height;\n    div.appendChild(this.canvas);\n\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.setupEventListeners();\n  }\n\n  public initializeCamera(camera: Camera) {\n    this.camera = camera;\n    this.render();\n  }\n  public setCameraPos (view = 'top') {\n    const setTopView = () =>{\n      this.camera.rotation.x = -Math.PI / 2;\n      this.camera.rotation.y = 0;\n    }\n    const setFrontView = () => {\n        this.camera.rotation.x = 0;\n        this.camera.rotation.y = 0;\n    }\n    const setIsometricView = () => {\n        this.camera.rotation.x = -Math.PI / 4;\n        this.camera.rotation.y = -Math.PI / 4;\n    }\n    switch (view) {\n      case 'top':\n        setTopView();\n        break;\n      case 'front':\n        setFrontView();\n        break;\n      case 'iso':\n        setIsometricView();\n        break;\n      default:\n        break;\n    }\n    this.render();\n  }\n  private rotate(point: { r: number; g: number; b: number }) {\n    const cosX = Math.cos(this.camera.rotation.x);\n    const sinX = Math.sin(this.camera.rotation.x);\n    const cosY = Math.cos(this.camera.rotation.y);\n    const sinY = Math.sin(this.camera.rotation.y);\n\n    // Center the point around the middle of the color space (127.5, 127.5, 127.5)\n    const centeredPoint = {\n      r: point.r - 127.5,\n      g: point.g - 127.5,\n      b: point.b - 127.5\n    };\n\n    let x = centeredPoint.r * cosY - centeredPoint.g * sinY;\n    let y = centeredPoint.r * sinY + centeredPoint.g * cosY;\n    let z = centeredPoint.b * cosX - y * sinX;\n    y = centeredPoint.b * sinX + y * cosX;\n\n    return { x, y, z };\n  }\n\n  private project(rotatedPoint: { x: number; y: number; z: number }) {\n    const scale = (this.camera.fov / (this.camera.fov + rotatedPoint.y)) * this.camera.zoom;\n    return {\n      x: rotatedPoint.x * scale + this.canvas.width / 2 + this.camera.offset.x,\n      y: -rotatedPoint.z * scale + this.canvas.height / 2 + this.camera.offset.y,\n    };\n  }\n\n  private setupEventListeners() {\n    this.canvas.addEventListener(\"mousedown\", this.handleMouseDown);\n    this.canvas.addEventListener(\"mousemove\", this.handleMouseMove);\n    this.canvas.addEventListener(\"mouseup\", this.handleMouseUp);\n    this.canvas.addEventListener(\"wheel\", this.handleWheel);\n    this.canvas.addEventListener(\"contextmenu\", (e) => e.preventDefault());\n  }\n\n  private handleMouseDown = (e: MouseEvent) => {\n    if (e.button === 2 || (e.button === 0 && e.altKey)) {\n      this.panning = true;\n      this.panStartX = e.clientX - this.camera.offset.x;\n      this.panStartY = e.clientY - this.camera.offset.y;\n    } else if (e.button === 0) {\n      this.dragging = true;\n    }\n    this.lastMouseX = e.clientX;\n    this.lastMouseY = e.clientY;\n  };\n\n  private handleMouseMove = (e: MouseEvent) => {\n    if (this.dragging) {\n      const dx = e.clientX - this.lastMouseX;\n      const dy = e.clientY - this.lastMouseY;\n      this.camera.rotation.x -= dy * 0.01;\n      this.camera.rotation.y += dx * 0.01;\n      this.lastMouseX = e.clientX;\n      this.lastMouseY = e.clientY;\n    } else if (this.panning) {\n      this.camera.offset.x = e.clientX - this.panStartX;\n      this.camera.offset.y = e.clientY - this.panStartY;\n    }\n  };\n\n  private handleMouseUp = () => {\n    this.dragging = false;\n    this.panning = false;\n  };\n\n  private handleWheel = (e: WheelEvent) => {\n    const mouseX = e.clientX - this.canvas.getBoundingClientRect().left;\n    const mouseY = e.clientY - this.canvas.getBoundingClientRect().top;\n\n    const prevZoom = this.camera.zoom;\n    const zoomSpeed = Math.max(0.001, this.camera.zoom * 0.02);\n\n    this.camera.zoom += e.deltaY * -zoomSpeed;\n    this.camera.zoom = Math.min(Math.max(this.camera.zoom, 0.1), 50);\n\n    const scaleChange = this.camera.zoom / prevZoom;\n\n    this.camera.offset.x -= (mouseX - this.canvas.width / 2 - this.camera.offset.x) * (scaleChange - 1);\n    this.camera.offset.y -= (mouseY - this.canvas.height / 2 - this.camera.offset.y) * (scaleChange - 1);\n  };\n\n  private rendering = () => {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.pts.forEach((point) => {\n      const rotated = this.rotate(point);\n      const projected = this.project(rotated);\n\n      const depthScale = (this.camera.fov / (this.camera.fov + rotated.y)) * this.camera.zoom;\n      let radius = 2 * depthScale;\n      radius = Math.max(0.1, radius);\n\n      this.ctx.beginPath();\n      this.ctx.arc(projected.x, projected.y, radius, 0, Math.PI * 2);\n      this.ctx.fillStyle = `rgba(${point.r}, ${point.g}, ${point.b}, 1.0)`;\n      this.ctx.fill();\n    });\n  };\n\n  public render = () => this.rendering();\n}","import { ColorCanvas3DWireframe } from './ColorCanvas3DWireframe';\n\nexport class Solution extends ColorCanvas3DWireframe {\n    constructor(id: string) {\n      super(id)\n    }\n    public init () {\n  \n      this.t = 0.0;\n      this.pts.push(...genRandomPt());\n      // this.pts.push(...genGridPt());\n  \n    }\n    public update() {\n  \n  \n      for (let i = 0; i < this.pts.length; ++i) {\n        // const offset = Math.cos((this.pts[i].x + this.pts[i].y) * this.t) * 2\n        // this.pts[i].z+= offset\n        // this.pts[i].b = (Math.cos(i * this.t * 0.1) + 0.5) * 255\n      }\n  \n  \n  \n      this.t += 0.01;\n    }\n  \n  }\n  \n  class Color {\n    public r: number = 0.0;\n    public g: number = 0.0;\n    public b: number = 0.0;\n    public radius: number = 1\n    constructor(r,g,b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n  }\n  \n  \n  const genRandomPt = (numPoints = 10000) => {\n    const pts = [];\n    for (let i = 0; i < numPoints; i++) {\n      const p = new Color(Math.random() * 255, Math.random() * 255, Math.random() * 255)\n      pts.push(p);\n    }\n    return pts;\n  };\n  \n  const genGridPt = (numPoints = 255) => {\n    const scale = 1;\n    const offset = 3\n    const pts = [];\n    for (let j = 0; j < numPoints; j+=offset) {\n      for (let i = 0; i < numPoints; i+=offset) {\n        const p = new Color(i * scale, j * scale, 0.0)\n        pts.push(p);\n      }\n    }\n    return pts;\n  };\n  "],"names":["ColorCanvas3DWireframe","constructor","id","div","renderer","pts","lns","t","this","document","getElementById","RendererCanvas3DWireframe","initializeCamera","position","x","y","z","rotation","Math","PI","zoom","fov","offset","setCameraPos","init","update","render","ddd","requestAnimationFrame","destroy","lastElementChild","lastChild","removeChild","error","console","camera","canvas","ctx","dragging","panning","lastMouseX","lastMouseY","panStartX","panStartY","handleMouseDown","e","button","altKey","clientX","clientY","handleMouseMove","dx","dy","handleMouseUp","handleWheel","mouseX","getBoundingClientRect","left","mouseY","top","prevZoom","zoomSpeed","max","deltaY","min","scaleChange","width","height","rendering","clearRect","forEach","point","rotated","rotate","projected","project","radius","beginPath","arc","fillStyle","r","g","b","fill","bounding","createElement","appendChild","getContext","setupEventListeners","setTopView","setFrontView","setIsometricView","cosX","cos","sinX","sin","cosY","sinY","centeredPoint","rotatedPoint","scale","addEventListener","preventDefault","Solution","super","push","genRandomPt","i","length","Color","numPoints","p","random"],"sourceRoot":""}
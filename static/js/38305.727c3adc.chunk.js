"use strict";(self.webpackChunkNJS_Lab=self.webpackChunkNJS_Lab||[]).push([[38305],{38305:(e,t,o)=>{o.r(t),o.d(t,{default:()=>L});var r=o(18489),i=o(78808),l=o(95475),s=o(69279),n=(o(32846),o(94452)),a=o(5674),y=o(3341),p=o(83689),u=o(90754),d=(o(83194),o(75476),o(65916)),h=o(90825),c=o(37299),v=o(95985),S=o(63573),b=o(62515),m=o(33298),C=o(50138),f=o(96980),g=o(91466),_=o(53815),k=o(18578),G=o(9366),Z=o(22773),w=o(22230),R=o(18814);const P=["atom","xml"],x={base:k.Z,key:"type",typeMap:{"simple-line":G.Z},errorContext:"symbol"},j={base:k.Z,key:"type",typeMap:{"picture-marker":Z.Z,"simple-marker":w.Z},errorContext:"symbol"},F={base:k.Z,key:"type",typeMap:{"simple-fill":R.Z},errorContext:"symbol"};let E=class extends((0,b.h)((0,f.Q)((0,m.q)((0,C.I)((0,g.M)((0,a.R)(S.Z))))))){constructor(){super(...arguments),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?(0,r.Z)({url:e},t):e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const o=e.layerDefinition.drawingInfo.renderer.symbol;o&&"esriSFS"===o.type&&(null===(t=o.outline)||void 0===t?void 0:t.style.includes("esriSFS"))&&(o.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,p.vt)(this.url,P)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=(0,n.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(y.r9).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const o=this.spatialReference,{data:r}=await(0,s.default)(l.Z.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,v.oR)(o)?void 0:null!==(t=o.wkid)&&void 0!==t?t:JSON.stringify(o)},signal:e});return r}_hasGeometry(e){var t,o;return null!==(t=null===(o=this.featureCollections)||void 0===o?void 0:o.some((t=>{var o,r;return(null===(o=t.featureSet)||void 0===o?void 0:o.geometryType)===e&&(null===(r=t.featureSet.features)||void 0===r?void 0:r.length)>0})))&&void 0!==t&&t}};(0,i._)([(0,u.Cb)()],E.prototype,"description",void 0),(0,i._)([(0,u.Cb)()],E.prototype,"featureCollections",void 0),(0,i._)([(0,d.r)("service","featureCollections",["featureCollection.layers"])],E.prototype,"readFeatureCollections",null),(0,i._)([(0,u.Cb)({type:c.Z,json:{name:"lookAtExtent"}})],E.prototype,"fullExtent",void 0),(0,i._)([(0,u.Cb)(_.id)],E.prototype,"id",void 0),(0,i._)([(0,u.Cb)(_.rn)],E.prototype,"legendEnabled",void 0),(0,i._)([(0,u.Cb)({types:x,json:{write:!0}})],E.prototype,"lineSymbol",void 0),(0,i._)([(0,u.Cb)({type:["show","hide"]})],E.prototype,"listMode",void 0),(0,i._)([(0,u.Cb)({types:j,json:{write:!0}})],E.prototype,"pointSymbol",void 0),(0,i._)([(0,u.Cb)({types:F,json:{write:!0}})],E.prototype,"polygonSymbol",void 0),(0,i._)([(0,u.Cb)({type:["GeoRSS"]})],E.prototype,"operationalLayerType",void 0),(0,i._)([(0,u.Cb)(_.HQ)],E.prototype,"url",void 0),(0,i._)([(0,u.Cb)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],E.prototype,"title",null),(0,i._)([(0,u.Cb)({readOnly:!0,json:{read:!1},value:"geo-rss"})],E.prototype,"type",void 0),E=(0,i._)([(0,h.j)("esri.layers.GeoRSSLayer")],E);const L=E}}]);
//# sourceMappingURL=38305.727c3adc.chunk.js.map
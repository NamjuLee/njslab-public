{"version":3,"file":"static/js/42393.305fb85b.chunk.js","mappings":"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","sources":["njslab/GIS/ReactMapGL-viz/Controller/index.tsx","njslab/GIS/ReactMapGL-viz/Core/index.ts","webpack://NJS-Lab/./src/njslab/GIS/ReactMapGL-viz/style.module.css?2057","njslab/GIS/ReactMapGL-viz/App.tsx","njslab/GIS/ReactMapGL-viz/index.tsx"],"sourcesContent":["import { Button } from 'antd';\nimport { takeScreenshot } from '../Core';\n\nconst Controller = ({ mapRef }) => {\n\n    const onCapture = (e) => {\n        const canvas = mapRef.getCanvas()\n\n        takeScreenshot(mapRef).then((dataURL) => {\n            // console.log(dataURL)\n\n            const img = new Image()\n            img.width = canvas.width\n            img.height = canvas.height\n            img.src = dataURL as string;\n            // img.onload = function () {\n            //   console.log('done')\n            //   ctx.drawImage(img, 0, 0)\n            // }\n\n\n            const link = document.createElement('a')\n            link.download = 'fileName.png'\n            link.href = dataURL as string;\n            link.click()\n\n        });\n    }\n\n    return (\n        <div>\n            <div>menu</div>\n\n            <Button type=\"text\" onClick={onCapture}>capture</Button>\n            {/* <Button type=\"text\" onClick={onCapture}>capture</Button> */}\n            {/* <Button type=\"text\" onClick={onCapture}>capture</Button> */}\n\n        </div>\n    )\n}\n\nexport default Controller","\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    // console.log({ canvasMapbox, customCanvas })\n    // const canvasMapbox = this.map.getCanvas(); // this.solution.deckGL.deckLayer.deck.canvas; // this.map.getCanvas(); //  document.querySelector(\".mapboxgl-canvas\") as HTMLCanvasElement;\n    const canvasOut = document.createElement('canvas')\n    canvasOut.width = canvasMapbox.width\n    canvasOut.height = canvasMapbox.height\n    const context = canvasOut.getContext('2d')\n    // console.log('context', context)\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0)\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height)\n    const dataURL = canvasOut.toDataURL()\n    const img = new Image()\n    img.width = canvasMapbox.width\n    img.height = canvasMapbox.height\n    img.src = dataURL\n    const link = document.createElement('a')\n    link.download = fileName\n    link.href = dataURL\n    link.click()\n    return dataURL\n}\n\nexport const takeScreenshot = (map) => {\n    return new Promise(function (resolve, reject) {\n        map.once('render', function () {\n            resolve(map.getCanvas().toDataURL())\n        })\n        /* trigger render */\n        map.setBearing(map.getBearing())\n    })\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"mapContainer\":\"style_mapContainer__WcUpI\",\"menu\":\"style_menu__a+qnp\"};","import mapboxgl from \"mapbox-gl\";\nimport Map, { Layer, Marker, Popup, Source } from \"react-map-gl\";\nimport { Suspense, useCallback, useState, useRef, useEffect } from \"react\";\n\n// import { Scene } from './Scene';\n\nimport Controller from \"./Controller/index\";\n\nimport { Button } from \"antd\";\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport styles from \"./style.module.css\";\n\nconst App = () => {\n  const mapRef = useRef();\n  const canvasRef = useRef();\n\n  const [hoverInfo, setHoverInfo] = useState(null);\n\n  const [viewport, setViewport] = useState({\n    latitude: 39.5,\n    longitude: -98.35,\n    zoom: 3.5,\n  });\n\n\n  const onHover = useCallback((event) => {\n    const county = event.features && event.features[0];\n    console.log(event.features, county);\n    // console.log(event.target.queryRenderedFeatures(event.point))\n\n    console.log(\"event\", event.target.boxZoom._map);\n\n    setHoverInfo({\n      longitude: event.lngLat.lng,\n      latitude: event.lngLat.lat,\n      countyName: county && county.properties.COUNTY,\n    });\n  }, []);\n\n  const onClick = useCallback((event) => {\n    const features = event.target.queryRenderedFeatures(event.point);\n    // Now 'features' contains information about the clicked features\n    // console.log(features);\n    //   };\n\n    if (event?.features?.length > 0) {\n      // Iterates through clicked features (in order of top-down) until it successfully\n      // triggers a callback that returns true.\n      console.log(event);\n      // event.features.some((clickedFeature) =>\n      //     Object.entries(mapClickHandlers).some(([label, handler]) =>\n      //         clickedFeature?.layer?.id.includes(label) && handler(clickedFeature, event)\n      //     )\n      // )\n    }\n    // }, [mapClickHandlers, drawMode])\n\n    // setViewport({\n    //     latitude: event.lngLat.lat,\n    //     longitude: event.lngLat.lng,\n    //     zoom: 3.5\n    // })\n  }, []);\n\n  const marker = {\n    latitude: 37.7577,\n    longitude: -122.4376,\n  };\n\n  const [data, setData] = useState({\n      type: 'FeatureCollection',\n      features: [],\n    });\n  \n    const layerID = 'my-layer';\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(\n            process.env.PUBLIC_URL + '/static/dataDummyReady/underserved_locations.geojson'\n          );\n  \n          if (!response.ok) {\n            throw new Error('Failed to load GeoJSON data');\n          }\n  \n          const geojsonData = await response.json(); // JSON 형식으로 변환\n          setData(geojsonData); // 상태에 올바른 GeoJSON 데이터 설정\n        } catch (error) {\n          console.error('Error fetching GeoJSON:', error);\n        }\n      };\n  \n      fetchData();\n    }, []);\n  \n    const layerStylePointCircle: any = {\n      id: layerID + '-circle',\n      type: 'circle',\n      paint: {\n        'circle-radius': 6,\n        'circle-color': '#4E3FC8',\n        'circle-opacity': 0.8,\n        'circle-stroke-width': 2,\n        'circle-stroke-color': '#fff',\n      },\n    };\n\n\n\n\n    const [dataPolygon, setDataPolygon] = useState({\n        type: 'FeatureCollection',\n        features: [],\n      });\n    \n      const layerIDPolygon = 'polygon-layer';\n    \n      // GeoJSON 데이터 불러오기\n      useEffect(() => {\n        const fetchData = async () => {\n          try {\n            const response = await fetch(\n              process.env.PUBLIC_URL + '/static/data/us_counties.geojson'\n            );\n    \n            if (!response.ok) {\n              throw new Error('Failed to load GeoJSON data');\n            }\n    \n            const geojsonData = await response.json();\n            setDataPolygon(geojsonData);\n          } catch (error) {\n            console.error('Error fetching GeoJSON:', error);\n          }\n        };\n    \n        fetchData();\n      }, []);\n\n      // Polygon 스타일 설정\n  const layerStyle: any = {\n    id: layerID,\n    type: 'fill', // 다각형 스타일\n    paint: {\n      'fill-color': '#3366cc', // 다각형 색상\n      'fill-opacity': 0.5, // 투명도 설정\n      'fill-outline-color': '#000', // 테두리 색상\n    },\n  };\n\n\n  return (\n    // <div ref={mapContainer} className={styles.mapContainer}>\n    // <div>\n    <div className={styles.mapContainer}>\n      <div className={styles.menu}>\n        <Controller mapRef={mapRef.current} />\n      </div>\n      <Suspense>\n        <Map\n          // @ts-ignore\n          mapLib={mapboxgl}\n          ref={mapRef}\n          initialViewState={{\n            longitude: -100,\n            latitude: 40,\n            zoom: 3.5,\n            // latitude: 37.7577,\n            // longitude: -122.4376,\n            // zoom: 8,\n          }}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            position: \"relative\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 0,\n            flex: 1,\n          }}\n          mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n          mapboxAccessToken={process.env.REACT_APP_MAPBOX}\n          dragRotate={false}\n          interactiveLayerIds={[\"my-layer-circle\"]}\n          onMouseMove={onHover}\n          onClick={onClick}\n          onMove={(evt) => setViewport(evt.viewState)}\n        >\n              <Source id={layerID} type=\"geojson\" data={data}>\n                <Layer {...layerStylePointCircle} />\n              </Source>\n\n\n              <Source id={layerIDPolygon} type=\"geojson\" data={dataPolygon}>\n                <Layer {...layerStyle} />\n              </Source>\n\n          {hoverInfo && (\n            <Popup\n              longitude={viewport.longitude}\n              latitude={viewport.latitude}\n              offset={[8, 8]}\n              closeButton={false}\n              className=\"z-10\"\n            >\n              <div className=\"p-2\">\n                <h3 className=\"font-bold\">{hoverInfo.name}</h3>\n                <p>No Broadband: {hoverInfo.noBroadband}%</p>\n                <p>Vote Share: {hoverInfo.voteShare}%</p>\n              </div>\n            </Popup>\n          )}\n        </Map>\n      </Suspense>\n    </div>\n  );\n};\nexport default App;\n","'use client'\r\n\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App'\r\nimport React from 'react';\r\n\r\nexport class Solution {\r\n  divHost: HTMLDivElement;\r\n  constructor(id: string) {\r\n    this.divHost = document.getElementById(id) as HTMLDivElement;\r\n    const div = document.createElement('div');\r\n    div.style.height = '100%';\r\n    div.style.width = '100%';\r\n    this.divHost.appendChild(div);\r\n\r\n    const root = ReactDOM.createRoot(div);\r\n\r\n    root.render(\r\n      // <React.StrictMode>\r\n      // <HelleApp /> syntax sugar\r\n      React.createElement(App, {})\r\n      // </React.StrictMode>\r\n    );\r\n  }\r\n  public destroy() {\r\n    try {\r\n      while (this.divHost && this.divHost.lastElementChild) {\r\n          const lastChild = this.divHost.lastElementChild as Node;\r\n          this.divHost.removeChild(lastChild);\r\n      }\r\n  } catch (error) {\r\n      console.error('Error removing child elements:', error);\r\n  }\r\n  \r\n  }\r\n}"],"names":["mapRef","type","onClick","e","canvas","getCanvas","map","Promise","resolve","reject","once","toDataURL","setBearing","getBearing","then","dataURL","img","Image","width","height","src","link","document","createElement","download","href","click","useRef","hoverInfo","setHoverInfo","useState","viewport","setViewport","latitude","longitude","zoom","onHover","useCallback","event","county","features","console","log","target","boxZoom","_map","lngLat","lng","lat","countyName","properties","COUNTY","queryRenderedFeatures","point","length","data","setData","layerID","useEffect","async","response","fetch","process","ok","Error","geojsonData","json","error","fetchData","layerStylePointCircle","id","paint","dataPolygon","setDataPolygon","layerStyle","className","styles","current","Suspense","mapLib","mapboxgl","ref","initialViewState","style","position","top","left","right","bottom","zIndex","flex","mapStyle","mapboxAccessToken","dragRotate","interactiveLayerIds","onMouseMove","onMove","evt","viewState","offset","closeButton","name","noBroadband","voteShare","Solution","constructor","divHost","this","getElementById","div","appendChild","ReactDOM","render","React","App","destroy","lastElementChild","lastChild","removeChild"],"sourceRoot":""}
{"version":3,"file":"static/js/44163.bbff87b5.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Core/Canvas.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Core/Renderer.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Core/Scene.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Geometry/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/Geometry/Primatives/MulitQuad.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/WebGL/Camera.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07-1/index.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nexport class Canvas {\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.host) {\r\n            this.app.host.appendChild(this.canvas);\r\n            this.canvas.width = this.app.host.clientWidth;\r\n            this.canvas.height = this.app.host.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl !== null) {\r\n            this.gl = gl;\r\n            this.gl.cullFace(gl.BACK);\t\t\t\t\t\t\t\t    // Back is also default\r\n            this.gl.frontFace(gl.CCW);\t\t\t\t\t\t\t\t    // Dont really need to set it, its ccw by default.\r\n            this.gl.enable(gl.DEPTH_TEST);\t\t\t\t\t\t\t    // Shouldn't use this, use something else to add depth detection\r\n            this.gl.enable(gl.CULL_FACE);\t\t\t\t\t\t\t    // Cull back face, so only show triangles that are created clockwise\r\n            this.gl.depthFunc(gl.LEQUAL);\t\t\t\t\t\t\t    // Near things obscure far things\r\n            this.gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\t// Setup default alpha blending\r\n        }\r\n\r\n        this.loop();\r\n    }\r\n    // fFitScreen = function(wp,hp) { return this.fSetSize(window.innerWidth * (wp || 1),window.innerHeight * (hp || 1)); }\r\n\r\n    loop() {\r\n        this.clear(this.gl);\r\n        requestAnimationFrame(() => { this.loop(); });\r\n\r\n        this.app.renderer.render();\r\n        // console.log('working');\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n\r\n        gl.cullFace(gl.BACK);\t\t\t\t\t\t\t\t// Back is also default\r\n        gl.frontFace(gl.CCW);\t\t\t\t\t\t\t\t// Dont really need to set it, its ccw by default.\r\n        gl.enable(gl.DEPTH_TEST);\t\t\t\t\t\t\t// Shouldn't use this, use something else to add depth detection\r\n        gl.enable(gl.CULL_FACE);\t\t\t\t\t\t\t// Cull back face, so only show triangles that are created clockwise\r\n        gl.depthFunc(gl.LEQUAL);\t\t\t\t\t\t\t// Near things obscure far things\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\t// Setup default alpha blending\r\n        gl.clearColor(1.0, 1.0, 1.0, 1.0);\t// Set clear color\r\n\r\n        // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n        // gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n}\r\n","import { NGL3dApp } from '..';\r\n\r\nexport class Renderer {\r\n    app: NGL3dApp;\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n    }\r\n    render() {\r\n        if (this.app.camera) { this.app.camera.updateViewMatrix(); }\r\n\r\n        // console.log(gl);\r\n\r\n        // console.log(this.app.scene.geometries);\r\n\r\n        this.app.scene.geometries.forEach((e) => { e.render(); });\r\n\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { GeometryBase } from '../Geometry/Core/Base';\r\n\r\nexport class Scene {\r\n    NGL3dApp: NGL3dApp;\r\n\r\n    geometries: GeometryBase[] = [];\r\n\r\n    constructor(NGL3dApp: NGL3dApp) {\r\n        this.NGL3dApp = NGL3dApp;\r\n    }\r\n    add(mesh: GeometryBase) {\r\n        this.geometries.push(mesh);\r\n    }\r\n}","\r\nimport { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\nimport { Shader, ATTR } from '../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\n// import { vaoCommon } from '../../WebGL/vaoCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[], pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n            gl.useProgram(this.program); // Done setting up shader\r\n            let uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n            // gl.useProgram(null); // Done setting up shader\r\n        }\r\n\r\n    }\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends GeometryBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat4 uCameraMatrix;\r\n\r\n    uniform vec3 uColor[4];\t//Color Array\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) { finalColor = color; }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    t: number = 0.0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO(incAxis: boolean = true) {\r\n        let verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        let p;\t// Temp letiable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(half);\r\n            verts.push(half);\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(-half);\r\n            verts.push(-half);\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(p);\r\n            verts.push(p);\t\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(p);\r\n            verts.push(p);\t\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n        }\r\n\r\n        if (incAxis) {\r\n            // x axis\r\n            verts.push(-1.1);\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(1);\t\t// c2\r\n\r\n            verts.push(1.1);\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // y axis\r\n            verts.push(0);      // x1\r\n            verts.push(-1.1);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(2);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(1.1);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(2);\t\t// c2\r\n\r\n            // z axis\r\n            verts.push(0);\t\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(-1.1);\t// z1\r\n            verts.push(3);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(1.1);\t// z2\r\n            verts.push(3);\t\t// c2\r\n        }\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.vao = new VAO(this.gl, 'grid', verts); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.vao.drawMode = this.gl.LINES;\r\n        this.vao.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.vao.vertexComponentLen = 4;\r\n        this.vao.vertexCount = verts.length / this.vao.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.vao.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.vao.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.vao.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vao.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mvaoCache[\"grid\"] = this.vao;\r\n        return this.vao;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col, this.app.camera.projectionMatrix);\r\n        this.vao = this.GetVAO();\r\n        this.model = new Model(this.vao);\r\n    }\r\n    render() {\r\n        // his.shader.activate();\r\n        // this.ro += 0.04;\r\n        // this.shader.set(this.ro);\r\n        // this.shader.renderModel(this.model);\r\n\r\n        // let p = this.model.transform.position;\t\t// Just an pointer to transform position, make code smaller\r\n        // console.log(p);\r\n        // let angle = Math.atan2(p.y, p.x)  + (1 * this.t);\t\t// Calc the current angle plus 1 degree per second rotation\r\n        // let radius = Math.sqrt(p.x * p.x + p.y * p.y);\t// Calc the distance from origin.\r\n        // let scale = Math.max(0.2,  Math.abs(Math.sin(angle)) * 1.2  );   // Just messing with numbers and seeing what happens :)\r\n        // console.log(angle, radius);\r\n\r\n        // this.model.setScale(scale, scale, 1);\r\n        // this.model.setPosition( radius * Math.cos(angle), radius * Math.sin(angle), 0 );\r\n        // this.model.transform.rotation.z += 15 * this.t;\r\n        // this.model.transform.rotation.x += 30 * this.t;\r\n        // this.model.transform.rotation.y += 60 * this.t;\r\n\r\n        this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.t = 0.01;\r\n    }\r\n}","import { Vector3 } from '../../Utility/Vector3';\r\n\r\nimport { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\n\r\nimport { NGL3dApp } from '../..';\r\n\r\nimport { Shader } from '../../WebGL/Shader';\r\nimport { GeometryBase } from '../Core/Base';\r\n\r\nclass ShaderQuad extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    pMatrix: Float32Array;\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\r\n        this.pMatrix = pMatrix;\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n\r\n            this.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n\r\n            // gl.useProgram(this.program);\r\n            gl.useProgram(null); // Done setting up shader\r\n        }\r\n    }\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        // this.gl.useProgram(null);\r\n        this.gl.uniform1f(this.uAngle, angle);\r\n        this.gl.uniform1f(this.uPointSize, size);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class MulitQuad extends GeometryBase {\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\t//Standard position data.\r\n        in vec2 a_uv;\r\n\r\n        uniform mat4 uPMatrix;\r\n        uniform mat4 uMVMatrix;\r\n        uniform mat4 uCameraMatrix;\r\n\r\n        out vec2 uv;\r\n\r\n        void main(void) {\r\n            uv = a_uv;\r\n            gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n\r\n    f = `#version 300 es\r\n\r\n    precision mediump float;\r\n    in vec2 uv;\r\n\r\n    out vec4 finalColor;\r\n\r\n    void main(void) {\r\n\r\n        //Square Border\r\n        float c = (uv.x <= 0.1 || uv.x >=0.9 || uv.y <= 0.1 || uv.y >= 0.9)? 0.0 : 1.0;\r\n\r\n        finalColor = vec4(c,c,c,1.0-c);\r\n        // finalColor = vec4(1.0, 0.0, 1.0, 1.0);\r\n\r\n        // //Circle\r\n        // //  /*\r\n        // vec2 delta = uv - vec2(0.5,0.5); //delta position from center;\r\n        // float dist = 0.5 - sqrt(delta.x*delta.x + delta.y*delta.y);\r\n\r\n        // float border = 0.01;\r\n        // float a = 0.0;\r\n        // if(dist > border) a = 1.0;\r\n        // else if(dist > 0.0) a = dist / border;\r\n\r\n        // finalColor = vec4(0.0,0.0,0.0,a);\r\n        // //  */\r\n    }\r\n    `;\r\n    app: NGL3dApp;\r\n    vao: VAO;\r\n    shader: ShaderQuad;\r\n    model: Model;\r\n\r\n    size: number = 20.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        let aVert = [-0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0];\r\n\r\n        let aUV = [0., 0., 0., 1., 1., 1., 1., 0.];\r\n        let aIndex = [0, 1, 2, 2, 3, 0];\r\n\r\n        // var\taIndex = [ ], //0,1,2, 2,3,0\r\n        // aUV = [ ], //0,0, 0,1, 1,1, 1,0\r\n        // aVert = [];\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            // Calculate a random size, y rotation and position for the quad\r\n            let size = 0.2 + (0.8 * Math.random()),\t\t// Random Quad Size in the range of 0.2 - 1.0\r\n                half = size * 0.5,\t\t\t\t\t\t// Half of size, this is the radius for rotation\r\n                angle = Math.PI * 2 * Math.random(),\t// Random angle between 0 - 360 degrees in radians\r\n                dx = half * Math.cos(angle),\t\t\t// Calc the x distance, used as an offset for the random position\r\n                dy = half * Math.sin(angle),\t\t\t// Calc the y distance, for same offset but used in z\r\n                x = -2.5 + (Math.random() * 5),\t\t\t// Random position between -2.5 - 2.5\r\n                y = -2.5 + (Math.random() * 5),\r\n                z = 2.5 - (Math.random() * 5),\r\n                p = i * 4;\t\t\t\t\t\t\t\t// Index of the first vertex of a quad\r\n\r\n            // Build the 4 points of the quad\r\n            aVert.push(x - dx, y + half, z - dy);\t\t// TOP LEFT\r\n            aVert.push(x - dx, y - half, z - dy);\t\t// BOTTOM LEFT\r\n            aVert.push(x + dx, y - half, z + dy);\t\t// BOTTOM RIGHT\r\n            aVert.push(x + dx, y + half, z + dy);\t\t// TOP RIGHT\r\n\r\n            aUV.push(0, 0, 0, 1, 1, 1, 1, 0);\t\t// Quad's UV\r\n            aIndex.push(p, p + 1, p + 2, p + 2, p + 3, p);\t// Quad's Index\r\n        }\r\n\r\n        // var mesh = this.app.canvas.gl.fCreateMeshVAO('MultiQuad', aIndex, aVert, null, aUV);\r\n        // mesh.noCulling = true;\r\n        // mesh.doBlending = true;\r\n        // return mesh;\r\n\r\n        this.shader = new ShaderQuad(this.app.canvas.gl, this.v, this.f, this.app.camera.projectionMatrix);\r\n        this.vao = new VAO(app.canvas.gl, 'MultiQuad', aVert, aIndex, undefined, aUV);\r\n        this.vao.noCulling = true;\r\n        this.vao.doBlending = true;\r\n\r\n        this.model = new Model(this.vao);\r\n\r\n    }\r\n    render() {\r\n        // console.log(this);\r\n        this.size += 0.01;\r\n        // let size = (Math.sin(this.size) * 10.0) + 20.0;\r\n\r\n        this.model.transform.position = new Vector3(0, 0, this.model.transform.position.z + -0.01);\r\n\r\n        this.shader.activate();\r\n        this.shader.setPerspective(this.shader.pMatrix);\r\n        // this.shader.set(size,  this.rotation);\r\n        // this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.shader.setCameraMatrix(this.app.camera.viewMatrix);\r\n        this.shader.renderModel(this.model.preRender());\r\n\r\n    }\r\n}","import { Matrix4 } from '../Utility/Matrix4';\r\nimport { Transform } from './Transform';\r\n\r\nexport enum CAMERA_MODE {\r\n    FREE = 0,\r\n    ORBIT = 1\r\n\r\n}\r\n\r\nexport class Camera {\r\n\r\n    projectionMatrix: Float32Array;\r\n    viewMatrix: Float32Array;\r\n    transform: Transform;\r\n\r\n    mode: CAMERA_MODE;\r\n\r\n    constructor(gl: WebGL2RenderingContext, fov: number = 45, near: number = 0.1, far: number = 100) {\r\n        // Setup the perspective matrix\r\n        this.projectionMatrix = new Float32Array(16);\r\n        var ratio = gl.canvas.width / gl.canvas.height;\r\n        Matrix4.perspective(this.projectionMatrix, fov || 45, ratio, near || 0.1, far || 100.0);\r\n\r\n        this.transform = new Transform();\t\t// Setup transform to control the position of the camera\r\n        this.viewMatrix = new Float32Array(16);\t// Cache the matrix that will hold the inverse of the transform.\r\n\r\n        this.mode = CAMERA_MODE.ORBIT;\t\t// Set what sort of control mode to use.\r\n    }\r\n\r\n    panX(v: number) {\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; } //  Panning on the X Axis is only allowed when in free mode\r\n        this.updateViewMatrix();\r\n        this.transform.position.x += this.transform.right[0] * v;\r\n        this.transform.position.y += this.transform.right[1] * v;\r\n        this.transform.position.z += this.transform.right[2] * v;\r\n    }\r\n\r\n    panY(v: number) {\r\n        this.updateViewMatrix();\r\n        this.transform.position.y += this.transform.up[1] * v;\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; }// Can only move up and down the y axix in orbit mode\r\n        this.transform.position.x += this.transform.up[0] * v;\r\n        this.transform.position.z += this.transform.up[2] * v;\r\n    }\r\n\r\n    panZ(v: number) {\r\n        this.updateViewMatrix();\r\n        if (this.mode === CAMERA_MODE.ORBIT) {\r\n            this.transform.position.z += v; // orbit mode does translate after rotate, so only need to set Z, the rotate will handle the rest.\r\n        } else {\r\n            // in freemode to move forward, we need to move based on our forward which is relative to our current rotation\r\n            this.transform.position.x += this.transform.forward[0] * v;\r\n            this.transform.position.y += this.transform.forward[1] * v;\r\n            this.transform.position.z += this.transform.forward[2] * v;\r\n        }\r\n    }\r\n\r\n    // To have different modes of movements, this function handles the view matrix update for the transform object.\r\n    updateViewMatrix() {\r\n        // Optimize camera transform update, no need for scale nor rotateZ\r\n        if (this.mode === CAMERA_MODE.FREE) {\r\n            this.transform.matView.reset()\r\n                .vtranslate(this.transform.position)\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad);\r\n\r\n        } else {\r\n            this.transform.matView.reset()\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad)\r\n                .vtranslate(this.transform.position);\r\n\r\n        }\r\n\r\n        this.transform.updateDirection();\r\n\r\n        // Cameras work by doing the inverse transformation on all meshes, the camera itself is a lie :)\r\n        Matrix4.invert(this.viewMatrix, this.transform.matView.raw);\r\n        return this.viewMatrix;\r\n    }\r\n}\r\n\r\nexport class CameraController {\r\n    canvas: HTMLCanvasElement;\r\n    camera: Camera;\r\n    rotateRate: number;\r\n    panRate: number;\r\n    zoomRate: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    initX: number;\r\n    initY: number;\r\n    prevX: number;\r\n    prevY: number;\r\n\r\n    onUpHandler: (e: MouseEvent) => void;\r\n    onMoveHandler: (e: MouseEvent) => void;\r\n\r\n    constructor(gl: WebGL2RenderingContext, camera: Camera) {\r\n        // var box = gl.canvas.getBoundingClientRect();\r\n        this.canvas = gl.canvas as HTMLCanvasElement;\t\t\t\t\t\t// Need access to the canvas html element, main to access events\r\n        this.camera = camera;\t\t\t\t\t\t\t// Reference to the camera to control\r\n\r\n        this.rotateRate = -300;\t\t\t\t\t\t\t// How fast to rotate, degrees per dragging delta\r\n        this.panRate = 5;\t\t\t\t\t\t\t\t// How fast to pan, max unit per dragging delta\r\n        this.zoomRate = 200;\t\t\t\t\t\t\t// How fast to zoom or can be viewed as forward/backward movement\r\n\r\n        this.offsetX = 10; // box.left;\t\t\t\t\t\t// Help calc global x,y mouse cords.\r\n        this.offsetY = 10; // box.top;\r\n\r\n        this.initX = 0;\t\t\t\t\t\t\t\t\t// Starting X,Y position on mouse down\r\n        this.initY = 0;\r\n        this.prevX = 0;\t\t\t\t\t\t\t\t\t// Previous X,Y position on mouse move\r\n        this.prevY = 0;\r\n\r\n        // // tslint:disable-next-line:no-any\r\n        this.onUpHandler = (e: MouseEvent) => (this.onMouseUp(e));\t// Cache func reference that gets bound and unbound a lot\r\n        this.onMoveHandler = (e: MouseEvent) => { this.onMouseMove(e); };\r\n\r\n        this.canvas.addEventListener('mousedown', (e) => { this.onMouseDown(e); });\t\t// Initializes the up and move events\r\n        this.canvas.addEventListener('mousewheel', (e) => { this.onMouseWheel(e); });\t// Handles zoom/forward movement\r\n    }\r\n\r\n    // Transform mouse x,y cords to something useable by the canvas.\r\n    // tslint:disable-next-line:no-any\r\n    getMouseVec2(e: any) {\r\n        return { x: e.pageX - this.offsetX, y: e.pageY - this.offsetY };\r\n    }\r\n\r\n    // Begin listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseDown(e: any) {\r\n        this.initX = this.prevX = e.pageX - this.offsetX;\r\n        this.initY = this.prevY = e.pageY - this.offsetY;\r\n\r\n        this.canvas.addEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.addEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n\r\n    // End listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseUp(e: any) {\r\n        this.canvas.removeEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.removeEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseWheel(e: any) {\r\n        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail))); // Try to map wheel movement to a number between -1 and 1\r\n        this.camera.panZ(delta * (this.zoomRate / this.canvas.height));\t\t// Keep the movement speed the same, no matter the height diff\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseMove(e: any) {\r\n        var x = e.pageX - this.offsetX,\t// Get X,y where the canvas's position is origin.\r\n            y = e.pageY - this.offsetY,\r\n            dx = x - this.prevX,\t\t// Difference since last mouse move\r\n            dy = y - this.prevY;\r\n\r\n        // When shift is being helt down, we pan around else we rotate.\r\n        if (!e.shiftKey) {\r\n            this.camera.transform.rotation.y += dx * (this.rotateRate / this.canvas.width);\r\n            this.camera.transform.rotation.x += dy * (this.rotateRate / this.canvas.height);\r\n        } else {\r\n            this.camera.panX(-dx * (this.panRate / this.canvas.width));\r\n            this.camera.panY(dy * (this.panRate / this.canvas.height));\r\n        }\r\n\r\n        this.prevX = x;\r\n        this.prevY = y;\r\n    }\r\n}","import { Canvas } from './Core/Canvas';\r\nimport { Renderer } from './Core/Renderer';\r\nimport { Scene } from './Core/Scene';\r\n\r\nimport { Camera, CameraController } from './WebGL/Camera';\r\n\r\nimport { GridAxis } from './Geometry/Primatives/GridAxis';\r\n\r\n// import { PointScreen } from './Geometry/Primatives/PointScreen';\r\n// import { PointWorld } from './Geometry/Primatives/PointWorld';\r\nimport { Quad } from './Geometry/Primatives/Quad';\r\nimport { MulitQuad } from './Geometry/Primatives/MulitQuad';\r\n\r\n// import { RectScreen } from './Geometry/CustomGeometry/RectScreen';\r\n// import { Rect } from './Geometry/CustomGeometry/Rect';\r\n\r\nexport class NGL3dApp {\r\n\r\n    host: HTMLElement;\r\n    canvas: Canvas;\r\n    renderer: Renderer;\r\n    scene: Scene;\r\n\r\n    camera: Camera;\r\n    cameraCtrl: CameraController;\r\n\r\n    constructor(id: string) {\r\n        console.log('id: ' + id + ', NGL3dApp 07-1 Init!!!!!');\r\n        const host = document.getElementById(id);\r\n        if (host) { this.host = host; }\r\n\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n        this.canvas = new Canvas(this);\r\n\r\n        this.camera = new Camera(this.canvas.gl);\r\n        this.camera.transform.position.set(0, 1, 3);\r\n        this.cameraCtrl = new CameraController(this.canvas.gl, this.camera);\r\n\r\n        let dd = new GridAxis(this);\r\n        // console.log(dd);\r\n\r\n        // let d = new PointScreen(this);\r\n        // console.log(d);\r\n\r\n        // let d1 = new PointWorld(this);\r\n        // console.log(d1);\r\n\r\n        let dd2 = new Quad(this);\r\n        // console.log(dd2);\r\n\r\n        // let dd3 = new Rect(this);\r\n        // console.log(dd3);\r\n\r\n        let dd5 = new MulitQuad(this);\r\n        // console.log(dd5);\r\n\r\n    }\r\n\r\n}\r\n\r\n// quad"],"names":["Canvas","constructor","app","gl","canvas","this","document","createElement","host","appendChild","width","clientWidth","height","clientHeight","getContext","cullFace","BACK","frontFace","CCW","enable","DEPTH_TEST","CULL_FACE","depthFunc","LEQUAL","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","loop","clear","requestAnimationFrame","renderer","render","clearColor","Renderer","camera","updateViewMatrix","scene","geometries","forEach","e","Scene","NGL3dApp","add","mesh","push","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","pMatrix","super","uPointSize","uAngle","program","setPerspective","useProgram","uColor","getUniformLocation","uniform3fv","renderModel","model","setModelMatrix","transform","getViewMatrix","bindVertexArray","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","GeometryBase","v","f","shader","ro","t","initShader","GetVAO","p","incAxis","verts","half","size","i","VAO","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","projectionMatrix","Model","activate","setCameraMatrix","viewMatrix","preRender","ShaderQuad","set","angle","uniform1f","MulitQuad","rotation","aVert","aUV","aIndex","Math","random","PI","dx","cos","dy","sin","x","y","z","undefined","noCulling","doBlending","position","Vector3","CAMERA_MODE","Camera","fov","near","far","mode","ratio","Matrix4","Transform","ORBIT","panX","right","panY","up","panZ","forward","FREE","matView","reset","vtranslate","rotateX","rotateY","updateDirection","raw","CameraController","rotateRate","panRate","zoomRate","offsetX","offsetY","initX","initY","prevX","prevY","onUpHandler","onMoveHandler","onMouseUp","onMouseMove","addEventListener","onMouseDown","onMouseWheel","getMouseVec2","pageX","pageY","removeEventListener","delta","max","min","wheelDelta","detail","shiftKey","id","cameraCtrl","console","log","getElementById","Quad"],"sourceRoot":""}
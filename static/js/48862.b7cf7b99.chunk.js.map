{"version":3,"file":"static/js/48862.b7cf7b99.chunk.js","mappings":"uIAAO,MAAMA,EAITC,YAAYC,EAAGC,EAAGC,GAAI,KAHfF,EAAY,EAAI,KAChBC,EAAY,EAAI,KAChBC,EAAY,EAEfC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,CACb,E,0BCJG,MAAME,EAaTL,YAAYM,GAA2B,IAAfC,EAAM,uDAAG,GAAG,KAR7BC,SAAG,OACHD,OAAiB,GAAI,KAErBE,cAAQ,OACRC,cAAQ,OACRC,UAAI,EAOPP,KAAKI,IAAMF,EACXF,KAAKG,OAASA,EACdH,KAAKQ,MACT,CAWOC,UACHC,EAAAA,GAAAA,IAAAA,MAAAA,OAA+BV,KAAKO,KACxC,CACOI,QAAQC,GAEXZ,KAAKa,QACT,CAEOA,SACHb,KAAKO,KAAKO,SAASC,IAAIf,KAAKI,IAAIP,EAAGG,KAAKI,IAAIN,EAAGE,KAAKI,IAAIL,EAC5D,CACQS,OACJR,KAAKK,SAAW,IAAIW,EAAAA,IAAwB,CAAEC,MAAO,WACrDjB,KAAKM,SAAW,IAAIU,EAAAA,IAAqBhB,KAAKG,OAAQ,GAAI,IAC1DH,KAAKO,KAAO,IAAIS,EAAAA,IAAWhB,KAAKM,SAAUN,KAAKK,UAC/CL,KAAKO,KAAKO,SAASC,IAAIf,KAAKI,IAAIP,EAAGG,KAAKI,IAAIN,EAAGE,KAAKI,IAAIL,GACxDC,KAAKO,KAAKW,SAAWlB,KACrBU,EAAAA,GAAAA,IAAAA,MAAAA,IAA4BV,KAAKO,KACrC,EC/CG,MAAMY,EAOTvB,YAAYwB,GAAgC,IAAjBC,EAAS,uDAAG,GAAE,KANlCD,GAAgB,GAAG,KACnBf,cAAQ,OACRC,cAAQ,OACRC,UAAI,OACJc,UAAoB,GAGvBrB,KAAKoB,GAAKA,EACVpB,KAAKqB,UAAYA,EACjBrB,KAAKQ,MACT,CACOG,UACHW,QAAQC,IAAI,QAChB,CACOV,SACHb,KAAKoB,GAAGI,SAAQ,CAACpB,EAAKqB,KAClBzB,KAAKM,SAASoB,WAAWZ,SAASa,OAAOF,EAAGrB,EAAIP,EAAGO,EAAIN,EAAGM,EAAIL,EAAE,IAEpEC,KAAKM,SAASoB,WAAWZ,SAASc,aAAc,CACpD,CACOpB,OACH,MAAMY,EAAKpB,KAAKoB,GAAGS,KAAKzB,GAAQ,IAAIY,EAAAA,IAAcZ,EAAIP,EAAGO,EAAIN,EAAGM,EAAIL,KAG9D+B,EADS,IAAId,EAAAA,IAAuBI,GACrBW,UAAU/B,KAAKqB,WACpCrB,KAAKM,UAAW,IAAIU,EAAAA,KAAuBgB,cAAcF,GACzD9B,KAAKK,SAAW,IAAIW,EAAAA,IAAwB,CAACC,MAAO,WAEpDjB,KAAKO,KAAO,IAAIS,EAAAA,IAAWhB,KAAKM,SAAUN,KAAKK,UAE/CL,KAAKO,KAAKW,SAAWlB,KACrBU,EAAAA,GAAAA,IAAAA,MAAAA,IAA4BV,KAAKO,KACrC,E,0ECpCG,MAAM0B,EAUTrC,YAAYsC,GAAa,KATlBC,YAAM,OACNC,aAAO,OACPC,SAAG,OACHC,EAAY,EAAI,KAChBC,YAAM,OACNC,WAAK,OACLC,cAAQ,OACRC,cAAQ,OACPC,kBAAY,OAkDZC,KAAO,KACX5C,KAAK2C,aAAeE,sBAAsB7C,KAAK4C,MAC/C5C,KAAK0C,SAAS7B,SACdb,KAAKa,OAAOb,KAAKwC,OACjBxC,KAAKyC,SAASK,OAAO9C,KAAKwC,MAAOxC,KAAKuC,QACtCvC,KAAKsC,GAAK,GAAI,EArDdtC,KAAKoC,QAAUW,SAASC,eAAed,GACvClC,KAAKiD,YACT,CACQA,aACJjD,KAAKwC,MAAQ,IAAIxB,EAAAA,IACjBhB,KAAKkD,MAAM,GACXlD,KAAKwC,MAAMW,YAAa,EAExBnC,EAAAA,IAAAA,WAAAA,IAA8B,EAAG,EAAG,GAEpChB,KAAKyC,SAAW,IAAIzB,EAAAA,IAAoB,CAAEoC,WAAW,EAAMC,OAAO,IAClErD,KAAKyC,SAASa,cAActD,KAAKoC,QAAQmB,YAAcvD,KAAKoC,QAAQoB,cACpExD,KAAKyC,SAASgB,WAAWvB,GAAK,QAC9BlC,KAAKyC,SAASgB,WAAWC,MAAM5C,SAAW,WAC1Cd,KAAKyC,SAASkB,UAAUC,SAAU,EAClC5D,KAAKyC,SAASoB,QAAQ7D,KAAKoC,QAAQmB,YAAavD,KAAKoC,QAAQoB,cAC7DxD,KAAKoC,QAAQ0B,YAAY9D,KAAKyC,SAASgB,YAEvCzD,KAAKuC,OAAS,IAAIvB,EAAAA,IAAwB,GAAIhB,KAAKoC,QAAQmB,YAAcvD,KAAKoC,QAAQoB,aAAc,EAAG,KACvGxD,KAAK0C,SAAW,IAAIqB,EAAAA,cAAc/D,KAAKuC,OAAQvC,KAAKyC,SAASgB,YAC7DzD,KAAKuC,OAAOzB,SAASC,IAAI,IAAK,GAAI,IAClCf,KAAK0C,SAAS7B,SAEdb,KAAKmC,OAASnC,KAAKyC,SAASgB,WAE5BzD,KAAKQ,MACT,CACO0C,MAAMc,GACThE,KAAKwC,MAAMyB,WAAa,IAAIjD,EAAAA,IAAYgD,EAC5C,CACQxD,OACJR,KAAKkE,WAET,CACQA,YACJlE,KAAKyC,SAASgB,WAAWU,YAAeC,GAAkBpE,KAAKqE,aAAaD,GAC5EpE,KAAKyC,SAASgB,WAAWa,UAAaF,GAAkBpE,KAAKuE,WAAWH,GACxEpE,KAAKyC,SAASgB,WAAWe,YAAeJ,GAAkBpE,KAAKyE,aAAaL,GAC5EpE,KAAKyC,SAASgB,WAAWiB,iBAAiB,SAAUN,GAAkBpE,KAAK2E,cAAcP,KAEzFQ,OAAOF,iBAAiB,UAAU,IAAM1E,KAAK6E,kBAEjD,CACQA,iBACJ7E,KAAKuC,OAAOuC,OAAS9E,KAAKoC,QAAQmB,YAAcvD,KAAKoC,QAAQoB,aAC7DxD,KAAKuC,OAAOwC,yBACZ/E,KAAKyC,SAASoB,QAAQ7D,KAAKoC,QAAQmB,YAAavD,KAAKoC,QAAQoB,aACjE,CAWOwB,QACHhF,KAAK4C,MACT,CACOyB,aAAaD,GAChB,CAEGG,WAAWH,GACd,CAEGO,cAAcP,GACjB,CAEGa,eAAeb,GAClB,CAEGK,aAAaL,GAChB,CAEGc,aAAad,GAChB,CAEGvD,OAAO2B,GACV,CAEG/B,UAIH,IAHAmE,OAAOO,oBAAoB,UAAU,IAAMnF,KAAK6E,mBAChDO,qBAAqBpF,KAAK2C,cAC1B3C,KAAK2C,kBAAe0C,EACbrF,KAAKoC,QAAQkD,WAChBtF,KAAKoC,QAAQmD,YAAYvF,KAAKoC,QAAQkD,UAE9C,ECnGG,MAAME,UAAgCvD,EAezCrC,YAAY6F,GAAoE,IAAjBxE,EAAK,uDAAG,OACnEyE,MADgD,uDAAG,QAC1C,KAfND,mBAAa,OACbE,gBAAU,OAEVC,UAAY,IAAI5E,EAAAA,IAAkB,KAClC6E,MAAQ,IAAI7E,EAAAA,IAAgB,KAC5B8E,EAAI,IAAI9E,EAAAA,IAAgB,KAExB+E,YAAM,OACNC,YAAM,OAENC,UAAI,OACJC,UAAI,OAuIJC,WAAc3D,MAEpB,KAEM4D,aAAgBhC,MAAQ,KAYxBiC,YAAejC,MAAQ,KACvBK,aAAeL,IAClB,MAAMkC,EAAYtG,KAAKuG,QAAQnC,EAAGpE,KAAKyF,cAAcjD,MAAMjC,MAC3DP,KAAKqG,YAAY,CAACjC,IAAGkC,aAAW,EArJhCtF,EAAAA,IAAAA,WAAAA,IAA8B,EAAG,EAAG,GACpChB,KAAKyF,cAAgBA,EACrBzF,KAAKkD,MAAMjC,GAEXjB,KAAKwG,WACLxG,KAAKgF,OACT,CACOwB,WAEH,MAAMC,EAAe,IAAIzF,EAAAA,IAAmB,SAC5ChB,KAAKwC,MAAMkE,IAAID,GAEfzG,KAAK2F,WAAa,IAAI3E,EAAAA,IAAiB,SAAU,KACjDhB,KAAK2F,WAAW7E,SAASjB,EAAI,GAC7BG,KAAK2F,WAAWxC,YAAa,EAC7BnD,KAAKwC,MAAMkE,IAAI1G,KAAK2F,YAEpB3F,KAAKiG,KAAO,IAAIjF,EAAAA,IAAiB,GACjChB,KAAKiG,KAAKnF,SAASf,EAAI,KAEvBC,KAAKwC,MAAMkE,IAAI1G,KAAKiG,MAGpBjG,KAAKkG,KAAO,IAAIlF,EAAAA,IADC,GAC0B,IAAK,QAAU,SAC1DhB,KAAKkG,KAAKS,SAAS9G,GAAK+G,KAAKC,GAAK,EAClC7G,KAAKwC,MAAMkE,IAAI1G,KAAKkG,MAEpB,MAAM5F,EAAW,IAAIU,EAAAA,IALJ,OAMX8F,EAAY,IAAI9F,EAAAA,IAAwB,CAACC,MAAO,MAAU8F,KAAM/F,EAAAA,IAClEgG,aAAa,EAAMC,QAAS,IAEhCjH,KAAKgG,OAAS,IAAIhF,EAAAA,IAAWV,EAAUwG,GAGvC9G,KAAKwC,MAAMkE,IAAI1G,KAAKgG,QAIpB,MAAM3F,EAAW,IAAIW,EAAAA,IAAwB,CAAEC,MAAO,QAChDiG,EAAiB,IAAIlG,EAAAA,IAAqB,IAAM,GAAI,IACpDmG,EAAe,IAAInG,EAAAA,IAAWkG,EAAgB7G,GACpD8G,EAAaC,WAAW,GACxBpH,KAAK+F,OAASoB,EACdnH,KAAKwC,MAAMkE,IAAIS,EAYnB,CACOE,QAEP,CACIC,aAASpH,GACTF,KAAKkG,KAAKqB,QAAUrH,CACxB,CACIsH,aAAStH,GACTF,KAAKiG,KAAKsB,QAAUrH,CACxB,CACOqG,QAAQnC,EAAeqD,GAC1BzH,KAAK6F,MAAMhG,EAAKuE,EAAEsD,QAAU1H,KAAKyC,SAASgB,WAAWF,YAAe,EAAI,EACxEvD,KAAK6F,MAAM/F,GAAMsE,EAAEuD,QAAU3H,KAAKyC,SAASgB,WAAWD,aAAgB,EAAI,EAE1ExD,KAAK4F,UAAUgC,cAAc5H,KAAK6F,MAAO7F,KAAKuC,QAE9C,MAAMsF,EAAa7H,KAAK4F,UAAUkC,iBAAiB,IAAKL,IACxD,GAAII,EAAWE,OAAS,EASpB,OANA/H,KAAK8F,EAAE/E,IAAI8G,EAAW,GAAGG,MAAMnI,EAAGgI,EAAW,GAAGG,MAAMlI,EAAG+H,EAAW,GAAGG,MAAMjI,GAEzE8H,EAAW,GAAGI,SAAWjI,KAAK+F,QAC9B/F,KAAK+F,OAAOjF,SAASC,IAAI8G,EAAW,GAAGG,MAAMnI,EAAGgI,EAAW,GAAGG,MAAMlI,EAAG+H,EAAW,GAAGG,MAAMjI,GAGxF,CACH8H,aACA7B,YAAQX,GAKhB,MAAM6C,EAAkBlI,KAAK4F,UAAUkC,iBAAiB,CAAC9H,KAAKgG,SAC9D,OAAIkC,EAAgBH,OAAS,GAEzB/H,KAAK8F,EAAE/E,IAAImH,EAAgB,GAAGF,MAAMnI,EAAGqI,EAAgB,GAAGF,MAAMlI,EAAGoI,EAAgB,GAAGF,MAAMjI,GAC5FC,KAAK+F,OAAOjF,SAASC,IAAImH,EAAgB,GAAGF,MAAMnI,EAAGqI,EAAgB,GAAGF,MAAMlI,EAAGoI,EAAgB,GAAGF,MAAMjI,GACnG,CAAC8H,gBAAYxC,EAAWW,OAAQkC,SAJ3C,CAQJ,CACOrH,OAAO2B,GACVxC,KAAKmG,WAAW3D,GA2BhB,MAAM2F,EAAS,IAAInH,EAAAA,IACnBmH,EAAOC,cAAwB,KAAVxB,KAAKC,IAC1B7G,KAAK2F,WAAW7E,SAASuH,aAAaF,EAC1C,CAMOxD,cAAcP,GACjB,MAAMkC,EAAYtG,KAAKuG,QAAQnC,EAAGpE,KAAKyF,cAAcjD,MAAMjC,MAEvD+F,EAAUuB,YAAcvB,EAAUuB,WAAW,IAE7CvB,EAAUuB,WAAW,GAAGI,OAAO/G,SAASP,QAAQ2F,EAAUuB,WAAW,GAK7E,ECnKG,MAAMS,EAWT1I,YAAY6F,GAA+B,KAVpCA,mBAAa,OACbjD,WAAK,OAEZjC,KAAqB,GAQjBP,KAAKyF,cAAgBA,EACrBzF,KAAKwC,MAAQiD,EAAchD,SAASD,KACxC,CACO6E,QACH,IAAK,IAAI5F,EAAIzB,KAAKO,KAAKwH,OAAS,EAAGtG,GAAK,EAAGA,IAAK,CAC5C,IAAI8G,EAAMvI,KAAKO,KAAKkB,GACpBzB,KAAKwC,MAAMgG,OAAOD,EACtB,CAaJ,CACO7B,IAAInG,GAAmC,IAAjBgG,IAAO,yDAChCvG,KAAKwC,MAAMkE,IAAInG,GACXgG,GACAvG,KAAKO,KAAKkI,KAAKlI,EAEvB,CACOiI,OAAOjI,GACVP,KAAKwC,MAAMgG,OAAOjI,GAClBP,KAAKO,KAAKmI,OAAO1I,KAAKO,KAAKoI,QAAQpI,GAAO,EAC9C,EC1CG,MAAMqI,EAEThJ,YAAYiJ,GAAqB,KAD1BA,SAAG,EAEN7I,KAAK6I,IAAMA,CACf,CACOC,OAEP,E,eCJJ,MAAMC,EAQFnJ,YAAYsC,GAAkC,IAAtB8G,EAAU,uDAAG,OAAM,KANpC9G,QAAE,OACFO,cAAQ,OACRwG,YAAM,OACNzG,WAAK,OACLwG,WAAa,OAGhBD,EAAUF,IAAM7I,KAChBA,KAAKkC,GAAKA,EACVlC,KAAKgJ,WAAaA,EAElBhJ,KAAKkJ,cACT,CACOzI,UACHT,KAAKyC,SAAShC,SAClB,CACQyI,eACJlJ,KAAKyC,SAAW,IAAI+C,EAAwBxF,KAAMA,KAAKkC,GAAIlC,KAAKgJ,YAChEhJ,KAAKyC,SAAS0D,WAAc3D,GAAUxC,KAAKmJ,gBAC3CnJ,KAAKyC,SAAS4D,YAAejC,GAAMpE,KAAKqG,YAAYjC,GACpDpE,KAAKyC,SAAS2D,aAAgBhC,GAAMpE,KAAKoG,aAAahC,GACtDpE,KAAKwC,MAAQ,IAAI8F,EAAMtI,MACvBA,KAAKiJ,OAAS,IAAIL,EAAO5I,KAE7B,CACWwH,aAAStH,GAChBF,KAAKyC,SAAS+E,SAAWtH,CAC7B,CACWoH,aAASpH,GAChBF,KAAKyC,SAAS6E,SAAWpH,CAC7B,CACOmH,QACHrH,KAAKyC,SAAS4E,QACdrH,KAAKwC,MAAM6E,QAEXrH,KAAKgF,OACT,CAEOA,QACH,CAEGmE,gBACH,CAEG9C,YAAYjC,GAAU,CACtBgC,aAAahC,GAAU,EA/C5B2E,EACYF,SAAG,EAiDrB,S","sources":["njslab/Workshop/workshop-vector-Sandbox/NRenderer/Geometry/Vector3.ts","njslab/Workshop/workshop-vector-Sandbox/NRenderer/Geometry/Point3.ts","njslab/Workshop/workshop-vector-Sandbox/NRenderer/Geometry/SplineCurve.ts","njslab/Workshop/workshop-vector-Sandbox/NRenderer/Renderer/Base/Base.ts","njslab/Workshop/workshop-vector-Sandbox/NRenderer/Renderer/index.ts","njslab/Workshop/workshop-vector-Sandbox/NRenderer/Scene/index.ts","njslab/Workshop/workshop-vector-Sandbox/NRenderer/Common/index.ts","njslab/Workshop/workshop-vector-Sandbox/NRenderer/index.ts"],"sourcesContent":["export class Vector3 {\n    public x: number = 0.0;\n    public y: number = 0.0;\n    public z: number = 0.0;\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\n\n\n// ..................................................................\nexport const xAxis = () => {\n    return new Vector3(1, 0, 0);\n}\nexport const yAxis = () => {\n    return new Vector3(0, 1, 0);\n}\nexport const zAxis = () => {\n    return new Vector3(0, 0, 1);\n}\nexport const zero = () => {\n    return new Vector3(0, 0, 0);\n}\nexport const origin = () => {\n    return new Vector3(0, 0, 0);\n}\n// ..................................................................\n\nexport const distance = (v0: Vector3, v1: Vector3) => {\n    return Math.sqrt(distance2(v0, v1));\n}\nexport const distance2 = (v0: Vector3, v1: Vector3) => {\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\n}\nexport const dotProduct = (v1: Vector3, v2: Vector3) => {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n}\nexport const crossProduct = (v1: Vector3, v2: Vector3) => {\n    return new Vector3(\n        v1.y * v2.z - v1.z * v2.y,\n        v1.z * v2.x - v1.x * v2.z,\n        v1.x * v2.y - v1.y * v2.x\n    );\n}\nexport const normalize = (v: Vector3) => {\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len < 0.0001) {\n        return new Vector3(v.x, v.y, v.z);\n    }\n    return new Vector3(v.x / len, v.y / len, v.z / len);\n}\nexport const length = (v: Vector3) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n}\n\n// ..................................................................\nexport const multiply = (v: Vector3, s: number) => {\n    return scale(v, s);\n}\nexport const scale = (v: Vector3, s: number) => {\n    return new Vector3(v.x * s, v.y * s, v.z * s);\n}\nexport const sub = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\n}\nexport const add = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\n}\n","import * as THREE from 'three';\nimport SandBoxVector from '..';\nimport { Vector3 } from './Vector3'\n\nexport class Point3 {\n    // private _x: number;\n    // private _y: number;\n    // private _z: number;\n\n    public vec: Vector3;\n    public radius: number = 0.5;\n\n    public material: THREE.MeshBasicMaterial;\n    public geometry: THREE.SphereGeometry;\n    public mesh: THREE.Mesh;\n\n    // constructor(x: number, y: number, z: number, radius = 0.1) {\n    constructor(v: Vector3, radius = 0.1) {\n        // this._x = x;\n        // this._y = y;\n        // this._z = z;\n        this.vec = v;\n        this.radius = radius;\n        this.init();\n    }\n    // public get x () { return this._x; }\n    // public set x (v) { this._x = v; this.updateVec();}\n    // public get y () { return this._y; }\n    // public set y (v) { this._y = v; this.updateVec();}\n    // public get z () { return this._z; }\n    // public set z (v) { this._z = v; this.updateVec();}\n    // public set(x: number, y: number, z: number) {\n    //     this._x = x; this._y = y; this._z = z;\n    //     this.updateVec();\n    // }\n    public destroy() {\n        SandBoxVector.app.scene.remove(this.mesh);\n    }\n    public onClick(data: any) {\n\n        this.update();\n    }\n    // ...........................................................\n    public update() {\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n    }\n    private init() {\n        this.material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        this.geometry = new THREE.SphereGeometry(this.radius, 20, 20);\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n        this.mesh.userData = this;\n        SandBoxVector.app.scene.add(this.mesh);\n    }   \n}","import * as THREE from 'three';\nimport SandBoxVector from '..';\nimport { Vector3 } from './Vector3';\n\n// import { NURBSCurve } from ''\n\nexport class SplineCurve {\n    public vs: Vector3[] = [];\n    public material: THREE.LineBasicMaterial;\n    public geometry: THREE.BufferGeometry;\n    public mesh;\n    public divisions: number = 30\n\n    constructor(vs: Vector3[], divisions = 30) {\n        this.vs = vs;\n        this.divisions = divisions;\n        this.init();\n    }\n    public onClick() {\n        console.log('Curve')\n    }\n    public update() {\n        this.vs.forEach((vec, i) => {\n            this.geometry.attributes.position.setXYZ(i, vec.x, vec.y, vec.z);\n        });\n        this.geometry.attributes.position.needsUpdate = true;\n    }\n    public init() {\n        const vs = this.vs.map((vec) => new THREE.Vector3(vec.x, vec.y, vec.z));\n        // console.log(vs)\n        const curve =  new THREE.CatmullRomCurve3(vs);\n        const points = curve.getPoints(this.divisions);\n        this.geometry = new THREE.BufferGeometry().setFromPoints(points);\n        this.material = new THREE.LineBasicMaterial({color: 0xff0000 });\n\n        this.mesh = new THREE.Line(this.geometry, this.material);\n        // @ts-ignore\n        this.mesh.userData = this;\n        SandBoxVector.app.scene.add(this.mesh);\n    }\n}","import * as THREE from 'three';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\n\nexport class RendererThreeVectorSandboxBase {\n    public canvas: HTMLCanvasElement;\n    public hostDiv: HTMLElement;\n    public ctx: CanvasRenderingContext2D;\n    public t: number = 0.0;\n    public camera: THREE.PerspectiveCamera;\n    public scene: THREE.Scene;\n    public renderer: THREE.WebGLRenderer;\n    public controls: OrbitControls;\n    private requestFrame: number;\n    constructor(id: string) {\n        this.hostDiv = document.getElementById(id) as HTMLDivElement;\n        this.initCanvas();\n    }\n    private initCanvas() {\n        this.scene = new THREE.Scene();\n        this.setBG(0x000000)\n        this.scene.castShadow = true;\n\n        THREE.Object3D.DEFAULT_UP.set(0, 0, 1);\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(this.hostDiv.clientWidth / this.hostDiv.clientHeight);\n        this.renderer.domElement.id = 'Three';\n        this.renderer.domElement.style.position = 'absolute';\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n        this.hostDiv.appendChild(this.renderer.domElement);\n\n        this.camera = new THREE.PerspectiveCamera(30, this.hostDiv.clientWidth / this.hostDiv.clientHeight, 1, 5000);\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.camera.position.set(20, -20, 20);\n        this.controls.update();\n\n        this.canvas = this.renderer.domElement;\n\n        this.init();\n    }\n    public setBG(hexColor) {\n        this.scene.background = new THREE.Color(hexColor);\n    }\n    private init() {\n        this.eventBind();\n\n    }\n    private eventBind() {\n        this.renderer.domElement.onmousedown = (e: MouseEvent) => this.mouseDownPre(e);\n        this.renderer.domElement.onmouseup = (e: MouseEvent) => this.mouseUpPre(e);\n        this.renderer.domElement.onmousemove = (e: MouseEvent) => this.mouseMovePre(e);\n        this.renderer.domElement.addEventListener('click', (e: MouseEvent) => this.mouseClickPre(e))\n\n        window.addEventListener('resize', () => this.onWindowResize());\n\n    }\n    private onWindowResize() {\n        this.camera.aspect = this.hostDiv.clientWidth / this.hostDiv.clientHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n    }\n    private loop = () => {\n        this.requestFrame = requestAnimationFrame(this.loop);\n        this.controls.update();\n        this.update(this.scene);\n        this.renderer.render(this.scene, this.camera);\n        this.t += 0.01;\n\n        // console.log('rendering...');\n    }\n    // .............................................................................\n    public start() {\n        this.loop();\n    }\n    public mouseDownPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseUpPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseMovePre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDragPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public update(scene: THREE.Scene) {\n        // console.log(e);\n    }\n    public destroy() {\n        window.removeEventListener('resize', () => this.onWindowResize());\n        cancelAnimationFrame(this.requestFrame);\n        this.requestFrame = undefined;\n        while (this.hostDiv.lastChild) {\n            this.hostDiv.removeChild(this.hostDiv.lastChild);\n        }\n    }\n}\n\n\n","import * as THREE from 'three';\nimport SandboxVector from '..';\nimport { RendererThreeVectorSandboxBase } from './Base/Base'\n\nexport class RendererThreeVecSandbox extends RendererThreeVectorSandboxBase {\n    public sandboxVector: SandboxVector\n    public pointLight: THREE.PointLight\n\n    public rayCaster = new THREE.Raycaster();\n    public mouse = new THREE.Vector2();\n    public m = new THREE.Vector3();\n\n    public sphere: THREE.Mesh;\n    public ground: THREE.Mesh;\n\n    public axis: THREE.AxesHelper;\n    public grid: THREE.GridHelper;\n\n\n    constructor(sandboxVector: SandboxVector, id: string = 'main', color = '#000') {\n        super(id)\n        THREE.Object3D.DEFAULT_UP.set(0, 1, 0);\n        this.sandboxVector = sandboxVector;\n        this.setBG(color);\n\n        this.initPost();\n        this.start();\n    }\n    public initPost() {\n\n        const ambientLight = new THREE.AmbientLight(0x555555);\n        this.scene.add(ambientLight);\n\n        this.pointLight = new THREE.PointLight(0xffffff, 100);\n        this.pointLight.position.x = 10;\n        this.pointLight.castShadow = true;\n        this.scene.add(this.pointLight);\n\n        this.axis = new THREE.AxesHelper(5);\n        this.axis.position.z = 0.001;\n        // this.axis.rotation.y = -Math.PI / 2;\n        this.scene.add(this.axis);\n\n        const sizeGrid = 50\n        this.grid = new THREE.GridHelper(sizeGrid, 100, 0x444444, 0x323232);\n        this.grid.rotation.x = -Math.PI / 2;\n        this.scene.add(this.grid);\n\n        const geometry = new THREE.PlaneGeometry(sizeGrid, sizeGrid);\n        const materialG = new THREE.MeshBasicMaterial({color: 0x010101, side: THREE.DoubleSide, \n            transparent: true, opacity: 0\n        });\n        this.ground = new THREE.Mesh(geometry, materialG);\n        // this.ground.rotation.x = -Math.PI / 2; // Rotate to make it flat\n        // this.ground.position.set(0,-1,0)\n        this.scene.add(this.ground);\n\n        \n        // @ts-ignore\n        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        const geometrySphere = new THREE.SphereGeometry(0.05, 50, 50);\n        const objectSphere = new THREE.Mesh(geometrySphere, material);\n        objectSphere.translateX(1)\n        this.sphere = objectSphere\n        this.scene.add(objectSphere);\n\n\n        // let geometry = new THREE.SphereGeometry(1, 50, 50);\n        // let object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(-1)\n        // this.add(object);\n\n        // geometry = new THREE.SphereGeometry(1, 50, 50);\n        // object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(1)\n        // this.add(object);\n    }\n    public reset() {\n\n    }\n    set showGrid(v: boolean) {\n        this.grid.visible = v;\n    }\n    set showAxis(v: boolean) {\n        this.axis.visible = v;\n    }\n    public picking(e: MouseEvent, arrayMesh) {\n        this.mouse.x = (e.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;\n        this.mouse.y = -(e.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n        this.rayCaster.setFromCamera(this.mouse, this.camera);\n\n        const intersects = this.rayCaster.intersectObjects([ ...arrayMesh]);\n        if (intersects.length > 0) {\n            // console.log(intersects[0].object);\n            // console.log(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            this.m.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z);\n\n            if (intersects[0].object !== this.sphere) {\n                this.sphere.position.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            }\n            // console.log(intersects[0].object.userData);\n            return { \n                intersects, \n                ground: undefined \n            };\n\n        }\n\n        const intersectGround = this.rayCaster.intersectObjects([this.ground]);\n        if (intersectGround.length > 0) {\n            // console.log(intersectGround)\n            this.m.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z);\n            this.sphere.position.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z)\n            return {intersects: undefined, ground :intersectGround};\n        }\n\n        return undefined;\n    }\n    public update(scene: THREE.Scene) {\n        this.updatePost(scene)\n\n        // if (this.sandboxVector.scene) {\n        //     this.sandboxVector.scene.mesh.forEach((m: THREE.Mesh, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //     })\n\n        //     this.sandboxVector.scene.arrayArrow.forEach((m: THREE.ArrowHelper, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //         const vec = new THREE.Vector3(this.sandboxVector.scene.arrayPoint[i].velocity.x, this.sandboxVector.scene.arrayPoint[i].velocity.y, this.sandboxVector.scene.arrayPoint[i].velocity.z)\n        //         const len = vec.length() * 0.5\n        //         m.setLength(len, 0.1,  0.1)\n        //         m.setDirection(vec)\n        //     })\n\n        //     this.sandboxVector.scene.arrayLineMesh.forEach((ln, i) => {\n        //         const lnObj = this.sandboxVector.scene.arrayLine[i];\n        //         ln.geometry.attributes.position.setXYZ(0, lnObj.p0.vec.x, lnObj.p0.vec.y, lnObj.p0.vec.z);\n        //         ln.geometry.attributes.position.setXYZ(1, lnObj.p1.vec.x, lnObj.p1.vec.y, lnObj.p1.vec.z);\n        //         ln.geometry.attributes.position.needsUpdate = true;\n        //     })\n        // }\n\n        const matrix = new THREE.Matrix4();\n        matrix.makeRotationY(Math.PI * 0.011);\n        this.pointLight.position.applyMatrix4(matrix);\n    }\n    public updatePost = (scene: THREE.Scene) => { \n        \n    }\n    // .................................................... Event\n    public onMouseClick = (e) => {}\n    public mouseClickPre(e: MouseEvent): void {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n\n        if (intersect.intersects && intersect.intersects[0]) {\n            // console.log('---------------');\n            intersect.intersects[0].object.userData.onClick(intersect.intersects[0])\n        }\n\n        // this.sandboxVector.common.updateSelectedData(intersect);\n        // this.onMouseClick({e, intersect});\n    }\n    public onMouseMove = (e) => {}\n    public mouseMovePre= (e: MouseEvent) => {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n        this.onMouseMove({e, intersect});\n    }\n\n}\n","import * as THREE from 'three';\nimport SandboxVector from '..';\n\nexport class Scene {\n    public sandboxVector: SandboxVector;\n    public scene: THREE.Scene;\n\n    mesh: THREE.Mesh[] = [];\n    // arrayPoint: any = [];\n    // arrayArrow: any = [];\n\n    // arrayLine: any = []\n    // arrayLineMesh: THREE.Mesh[]  = []\n\n    constructor(sandboxVector: SandboxVector) {\n        this.sandboxVector = sandboxVector;\n        this.scene = sandboxVector.renderer.scene;\n    }\n    public reset() {\n        for (let i = this.mesh.length - 1; i >= 0; i--) {\n            let obj = this.mesh[i];\n            this.scene.remove(obj);\n        }\n\n        // for (let i = this.arrayArrow.length - 1; i >= 0; i--) {\n        //     let obj = this.arrayArrow[i];\n        //     this.scene.remove(obj);\n        // }\n\n        // this.mesh = [];\n        // this.arrayPoint = [];\n        // this.arrayArrow = [];\n\n        // this.arrayLine = []\n        // //    this.initPost()\n    }\n    public add(mesh: THREE.Mesh, picking = true) {\n        this.scene.add(mesh);\n        if (picking) {\n            this.mesh.push(mesh)\n        }\n    }\n    public remove(mesh: THREE.Mesh) {\n        this.scene.remove(mesh);\n        this.mesh.splice(this.mesh.indexOf(mesh), 1);\n    }\n    // public addArrow(vec, velocity) {\n    //     const arrowHelper = new THREE.ArrowHelper(velocity, vec, 1, '#f00');\n    //     this.arrayArrow.push(arrowHelper)\n    //     this.scene.add(arrowHelper);\n    // }\n    // public addPoint(v: any) {\n    //     // @ts-ignore\n    //     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n    //     const geometry = new THREE.SphereGeometry(0.1, 20, 20);\n    //     const object = new THREE.Mesh(geometry, material);\n    //     object.translateX(v.vec.x);\n    //     object.translateY(v.vec.z);\n    //     object.translateZ(v.vec.y);\n    //     this.add(object, v);\n    //     this.addArrow(v.vec, v.velocity);\n\n    // }\n    // public addLine(ln: any) {\n    //     this.arrayLine.push(ln)\n\n    //     const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n\n    //     const points = [];\n    //     points.push( new THREE.Vector3(ln.p0.vec.x, ln.p0.vec.y, ln.p0.vec.z ) );\n    //     points.push( new THREE.Vector3(ln.p1.vec.x, ln.p1.vec.y, ln.p1.vec.z ) );\n\n    //     const geometry = new THREE.BufferGeometry().setFromPoints( points );\n    //     const line = new THREE.Line( geometry, material );\n    //     // @ts-ignore\n    //     this.arrayLineMesh.push(line)\n    //     this.scene.add(line)\n    // }\n}","import * as THREE from 'three';\nimport SandboxVector from '..';\n\nexport class Common {\n    public app: SandboxVector\n    constructor(app: SandboxVector) {\n        this.app = app;\n    }\n    public pick() {\n\n    }\n}","import { RendererThreeVecSandbox } from './Renderer';\nimport { Scene } from './Scene';\nimport { Common } from './Common';\n\nexport * from './Geometry';\n\nclass NRenderer {\n    public static app: NRenderer;\n    public id: string;\n    public renderer: RendererThreeVecSandbox;\n    public common: Common;\n    public scene: Scene;\n    public themeColor = '#222';\n\n    constructor(id: string, themeColor = '#222') {\n        NRenderer.app = this;\n        this.id = id;\n        this.themeColor = themeColor;\n\n        this.initRenderer();\n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n    private initRenderer() {\n        this.renderer = new RendererThreeVecSandbox(this, this.id, this.themeColor);\n        this.renderer.updatePost = (scene) => this.updateBinding();\n        this.renderer.onMouseMove = (e) => this.onMouseMove(e);\n        this.renderer.onMouseClick = (e) => this.onMouseClick(e);\n        this.scene = new Scene(this);\n        this.common = new Common(this)\n\n    }\n    public set showAxis(v){\n        this.renderer.showAxis = v;\n    }\n    public set showGrid(v) {\n        this.renderer.showGrid = v;\n    }\n    public reset() {\n        this.renderer.reset();\n        this.scene.reset();\n\n        this.start();\n    }\n    // ..........................\n    public start() {\n        // TODO: \n    }\n    public updateBinding() {\n        // TODO: \n    }\n    public onMouseMove(e: any) { }\n    public onMouseClick(e: any) { }\n}\n\nexport default NRenderer"],"names":["Vector3","constructor","x","y","z","this","Point3","v","radius","vec","material","geometry","mesh","init","destroy","SandBoxVector","onClick","data","update","position","set","THREE","color","userData","SplineCurve","vs","divisions","console","log","forEach","i","attributes","setXYZ","needsUpdate","map","points","getPoints","setFromPoints","RendererThreeVectorSandboxBase","id","canvas","hostDiv","ctx","t","camera","scene","renderer","controls","requestFrame","loop","requestAnimationFrame","render","document","getElementById","initCanvas","setBG","castShadow","antialias","alpha","setPixelRatio","clientWidth","clientHeight","domElement","style","shadowMap","enabled","setSize","appendChild","OrbitControls","hexColor","background","eventBind","onmousedown","e","mouseDownPre","onmouseup","mouseUpPre","onmousemove","mouseMovePre","addEventListener","mouseClickPre","window","onWindowResize","aspect","updateProjectionMatrix","start","mouseDClickPre","mouseDragPre","removeEventListener","cancelAnimationFrame","undefined","lastChild","removeChild","RendererThreeVecSandbox","sandboxVector","super","pointLight","rayCaster","mouse","m","sphere","ground","axis","grid","updatePost","onMouseClick","onMouseMove","intersect","picking","initPost","ambientLight","add","rotation","Math","PI","materialG","side","transparent","opacity","geometrySphere","objectSphere","translateX","reset","showGrid","visible","showAxis","arrayMesh","offsetX","offsetY","setFromCamera","intersects","intersectObjects","length","point","object","intersectGround","matrix","makeRotationY","applyMatrix4","Scene","obj","remove","push","splice","indexOf","Common","app","pick","NRenderer","themeColor","common","initRenderer","updateBinding"],"sourceRoot":""}
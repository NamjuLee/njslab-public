{"version":3,"file":"static/js/49576.2c569abd.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Shader.ts"],"sourcesContent":["// import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\n// import { AttribLocations, UniformLocations } from './AttribLocations';\r\nimport { Model } from './Model';\r\n\r\nexport enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_NAME = 'a_color',\r\n    ATTR_COLOR_LOC = 4,\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    norm: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_POSITION_NAME);\r\n        this.norm = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\nexport class UniformLocations {\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    \r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    vShader: WebGLShader | null;\r\n    fShader: WebGLShader | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext , vertShaderSrc: string, fragShaderSrc: string, needValidate: boolean = true ) {\r\n        this.gl = gl;\r\n\r\n        this.vShader = ShaderUtility.CreateShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertShaderSrc);\r\n        this.fShader = ShaderUtility.CreateShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragShaderSrc);\r\n        \r\n        if (this.vShader && this.fShader ) { \r\n            let program = ShaderUtility.CreateProgram(gl, this.vShader, this.fShader, needValidate);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.attribLoc = new AttribLocations(gl, this.program);\r\n                this.uniformLoc = new UniformLocations(gl, this.program);\r\n                return;\r\n                // gl.useProgram(this.program);\r\n                // this.attribLoc = new AttribLocations(gl, this.program);\r\n                // this.uniformLoc = new UniformLocations(gl, this.program);\r\n                // gl.useProgram(null);\r\n                // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n            }\r\n\r\n            // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n        }\r\n    }\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n         this.gl.useProgram(this.program); return this; \r\n    }\r\n    deactivate() { \r\n        this.gl.useProgram(null); return this; \r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) {this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData); \r\n        return this; \r\n    }\r\n    setModelMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modelMatrix, false, matData); \r\n        return this; \r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData); \r\n        return this; \r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    } \r\n    // Handle rendering a model\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n        \r\n        if (model.vao.noCulling) {this.gl.disable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) {this.gl.enable(this.gl.BLEND); }\r\n        \r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0); \r\n        } else {\r\n            this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n        if (model.vao.noCulling) {this.gl.enable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) {this.gl.disable(this.gl.BLEND); }\r\n        \r\n        return this;\r\n    }\r\n}\r\n\r\nclass ShaderUtility {\r\n    static CreateProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null ) {return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.bindAttribLocation(program, ATTR.ATTR_POSITION_LOC, ATTR.ATTR_POSITION_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_NORMAL_LOC, ATTR.ATTR_NORMAL_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_UV_LOC, ATTR.ATTR_UV_NAME);\r\n        \r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n    static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n}"],"names":["ATTR","AttribLocations","constructor","gl","program","position","norm","uv","this","getAttribLocation","ATTR_POSITION_NAME","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","perspective","modelMatrix","cameraMatrix","mainTexture","getUniformLocation","Shader","vertShaderSrc","fragShaderSrc","needValidate","attribLoc","uniformLoc","vShader","fShader","ShaderUtility","CreateShader","VERTEX_SHADER","FRAGMENT_SHADER","CreateProgram","useProgram","activate","deactivate","dispose","getParameter","CURRENT_PROGRAM","deleteProgram","setPerspective","matData","uniformMatrix4fv","setModelMatrix","setCameraMatrix","preRender","renderModel","model","transform","getViewMatrix","bindVertexArray","vao","noCulling","disable","CULL_FACE","doBlending","enable","BLEND","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","static","vertexShader","fragmentShader","createProgram","attachShader","bindAttribLocation","ATTR_POSITION_LOC","ATTR_NORMAL_LOC","ATTR_UV_LOC","linkProgram","getProgramParameter","LINK_STATUS","error","getProgramInfoLog","console","log","deleteShader","validateProgram","VALIDATE_STATUS","type","shaderString","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog"],"sourceRoot":""}
{"version":3,"file":"static/js/50454.c920d00e.chunk.js","mappings":"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","sources":["njslab/Env/NNA/NJSCore/Utility/MathUtility.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/lib/enum.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/Core/GridSystemScreen.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/Core/GridSystemDynamic.ts","njslab/Env/NNA/NJSEngine/Addon/Clustering/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/Commands/CommandBase.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Base/Collision.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Base/GeometryBase.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/Point/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/Commands/CommandShape.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/ActiveCommand/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Projection/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/IO/IO.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Geometry/GeometryCommon.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/Core/PointCluster.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/Core/Renderer.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/Core/GraphClustering.ts","njslab/Env/NNA/NJSEngine/Addon/ClusteringCollisionBasedGraph/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Addon/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Renderer/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/Scene/index.ts","njslab/Env/NNA/NJSEngine/DrawingEngine/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/View/GraphView/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/View/HTMLView.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Controller/Controller.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/GASystem/GeneticAlgorithm/Core/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/GASystem/GeneticAlgorithm/GeneticAlgorithm.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/GASystem/GASystem.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/Analysis/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/Graph.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/Edge.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/Node.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/Tree/Tree.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphUtility/GraphUtility.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/GraphCore/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/RendererGraph/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/BoidsBehaviors/BoidsPath.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/BoidsBehaviors/Boid.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/AgencySystem/BoidsBehaviors/BoidsBehaviors.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/GraphSystem/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/VoxelSystem/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/Core/Core.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/IO/index.ts","njslab/Env/NNA/NJSEngine/NNAEngineV3/index.ts","njslab/GIS/Clustering/ClusteringCollisionBasedGraph/lib/index.ts"],"sourcesContent":["export const remap = (CValue: number, OldMin: number, OldMax: number, NewMin: number, NewMax: number): number => {\r\n  return (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n}\r\nexport const shuffle = (array: any) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    while (0 !== currentIndex) {\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\nexport const fahrenheit2celsius = (f: number ) => {\r\n  return (f-32) * 5.0/9.0\r\n}\r\nexport const celsius2fahrenheit = (c: number) => {\r\n  return 9.0/5.0 * c + 32\r\n}\r\nexport const kelvin2celsius = (k: number) => {\r\n  return (k-273.15)\r\n}\r\nexport const MilesFromMeters = (m: number) => {\r\n  return m * 0.00062137;\r\n}\r\nexport const MilesFromKM = (m: number) => {\r\n  return m * 0.62137119;\r\n}\r\n// ........................................................... geometry\r\nexport const toRadians = (degrees: number): number => {\r\n  return (degrees * (3.14159265358979 / 180.0)); // myDegree *=  3.141592 / 180 // degrees to radians\r\n}\r\n\r\nexport const toDegrees = (radians: number): number => {\r\n  return (radians * (180.0 / 3.14159265358979));  // myRadian *= 180 / 3.141592 //  radian to degrees\r\n}\r\n// ........................................................... random\r\nexport const getRandom = ()  => {\r\n  return Math.random();\r\n}\r\nexport const getRandomArbitrary = (min: number, max: number)  => {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nexport const getRandomInt = (min: number, max: number)  => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\nexport const getRandomIntFromRenage = (range: number)  => {\r\n  return Math.floor(Math.random() * range);\r\n}\r\nexport const getRandomIntsInclusive = (min: number, max: number, total: number)  => {\r\n  let out = [];\r\n  for (let i = 0; i < total; ++i) {\r\n      out.push(getRandomIntInclusive(min, max));\r\n  }\r\n  return out;\r\n}\r\nexport const getRandomIntInclusive = (min: number, max: number)  => {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nexport const getRandomItemWithStringList = (array: string[])  => {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\nexport const random = (seed: number) => {\r\n  var mask = 0xffffffff;\r\n  var m_w  = (123456789 + seed) & mask;\r\n  var m_z  = (987654321 - seed) & mask;\r\n\r\n  return function() {\r\n    m_z = (36969 * (m_z & 65535) + (m_z >>> 16)) & mask;\r\n    m_w = (18000 * (m_w & 65535) + (m_w >>> 16)) & mask;\r\n\r\n    var result = ((m_z << 16) + (m_w & 65535)) >>> 0;\r\n    result /= 4294967296;\r\n    return result;\r\n  }\r\n}\r\nexport const isIntersect = (p1x: number, p1y: number, q1x: number, q1y: number, p2x: number, p2y: number, q2x: number, q2y: number): boolean => {\r\n  // Find the four orientations needed for general and\r\n  // special cases\r\n  const o1 = orientation(p1x, p1y, q1x, q1y, p2x, p2y);\r\n  const o2 = orientation(p1x, p1x, q1x, q1y, q2x, q2y);\r\n  const o3 = orientation(p2x, p2y, q2x, q2y, p1x, p1y);\r\n  const o4 = orientation(p2x, p2y, q2x, q2y, q1x, q1y);\r\n\r\n  // General case\r\n  if (o1 !== o2 && o3 !== o4) { return true; }\r\n\r\n  // Special Cases\r\n  // p1, q1 and p2 are colinear and p2 lies on segment p1q1\r\n  if (o1 === 0 && onSegment(p1x, p1y, p2x, p2y, q1x, q1y)) { return true; }\r\n\r\n  // p1, q1 and q2 are colinear and q2 lies on segment p1q1\r\n  if (o2 === 0 && onSegment(p1x, p1y, q2x, q2y, q1x, q1y)) { return true; }\r\n\r\n  // p2, q2 and p1 are colinear and p1 lies on segment p2q2\r\n  if (o3 === 0 && onSegment(p2x, p2y, p1x, p1y, q2x, q2y)) { return true; }\r\n\r\n  // p2, q2 and q1 are colinear and q1 lies on segment p2q2\r\n  if (o4 === 0 && onSegment(p2x, p2y, q1x, q1y, q2x, q2y)) { return true; }\r\n\r\n  return false; // Doesn't fall in any of the above cases\r\n}\r\nexport const remapLongToSurface = (CValue: number, min: number, max: number) => { return (((CValue - (-180)) * (max - min)) / (180 - (-180)) + min); }\r\nexport const remapLatToSurface = (CValue: number, min: number, max: number)  => { return (((CValue - (-90)) * (max - min)) / (90 - (-90)) + min); }\r\nexport const remapLongToSurfaceNormal = (CValue: number)  => { return ((CValue - (-180)) * (1.0 - 0)) / (180 - (-180)); } // 0 to 1\r\nexport const remapLatToSurfaceNormal = (CValue: number)  => { return ((CValue - (-90)) * (1.0 - 0)) / (90 - (-90)); } // 0 to 1\r\nexport const remapLong = (CValue: number) => { return (CValue + 180) * Math.PI * 2 / 360 * -1; } // -1 for reversing direction\r\nexport const remapLat = (CValue: number) => { return (CValue + 90) * Math.PI / 180; }\r\nexport const onSegment = (px: number, py: number, qx: number, qy: number, rx: number, ry: number): boolean => {\r\n  if (qx <= Math.max(px, rx) && qx >= Math.min(px, rx) && qy <= Math.max(py, ry) && qy >= Math.min(py, ry)) { return true; }\r\n  return false;\r\n}\r\nexport const orientation = (px: number, py: number, qx: number, qy: number, rx: number, ry: number): number => {\r\n  // See https://www.geeksforgeeks.org/orientation-3-ordered-points/\r\n  // for details of below formula.\r\n  const val = (qy - py) * (rx - qx) - (qx - px) * (ry - qy);\r\n\r\n  if (val === 0) { return 0; } // colinear\r\n\r\n  return (val > 0) ? 1 : 2; // clock or counterclock wise\r\n}\r\n\r\nexport const lineLineIntersection = (Ax: number, Ay: number, Bx: number, By: number, Cx: number, Cy: number, Dx: number, Dy: number): number[] | undefined => { \r\n    // Line AB represented as a1x + b1y = c1  \r\n    const a1:number = By - Ay; \r\n    const b1 = Ax - Bx; \r\n    const c1 = a1 * (Ax) + b1 * (Ay); \r\n\r\n    // Line CD represented as a2x + b2y = c2  \r\n    const a2 = Dy - Cy; \r\n    const b2 = Cx - Dx; \r\n    const c2 = a2 * (Cx) + b2 * (Cy); \r\n\r\n    const determinant = a1 * b2 - a2 * b1; \r\n\r\n    if (determinant === 0) \r\n    { \r\n        // The lines are parallel. This is simplified  \r\n        // by returning a pair of FLT_MAX  \r\n        return undefined; // new Point(double.MaxValue, double.MaxValue); \r\n    } \r\n    else\r\n    { \r\n        const x = (b2 * c1 - b1 * c2) / determinant; \r\n        const y = (a1 * c2 - a2 * c1) / determinant; \r\n        return [x, y];\r\n    } \r\n}\r\nexport const distance2d = (v0x: number, v0y: number, v1x: number, v1y: number): number => {\r\n  return Math.sqrt((v0x - v1x) * (v0x - v1x) + (v0y - v1y) * (v0y - v1y));\r\n  // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\r\n}\r\nexport const getUUID = () => {   // reference : https://jsfiddle.net/briguy37/2MVFd/\r\n  let d = new Date().getTime();\r\n  let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c: string) {\r\n      // eslint-disable-next-line\r\n      let r = (d + Math.random() * 16) % 16 | 0;\r\n      d = Math.floor(d / 16);\r\n      // eslint-disable-next-line\r\n      return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n  });\r\n  return uuid;\r\n}","\r\nexport enum OPTIMIZER {\r\n    NONE = 'NONE',\r\n    GRID = 'GRID',\r\n    GRID_SCREEN = 'GRID_SCREEN',\r\n    COLLISION = 'COLLISION',\r\n    AGENT = 'AGENT',\r\n}","import { NVector3 } from '../lib';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\n// import { AGeometryBase } from '../../../../Common/Base/AGeometryBase';\r\n// import { GridBased } from '../';\r\n\r\nexport class GridSystemScreen {\r\n\r\n    public xInterval: number = 0;\r\n    public yInterval: number = 0;\r\n    public rx: number = 9;\r\n    public ry: number = 7;\r\n    public cells: Cell[][] = [];\r\n\r\n    public points: NVector3[] = [];\r\n\r\n    constructor() {\r\n\r\n    }\r\n    public update(width: number, height: number): void {\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        this.initGrid(width, height);\r\n        // }\r\n    }\r\n    private initGrid(width: number, height: number) {\r\n        this.cells = [];\r\n        this.xInterval = width / (this.rx - 1);\r\n        this.yInterval = height / (this.ry - 1);\r\n\r\n        for(let y = 0; y < this.ry; y++){\r\n            const cellList: Cell[] = [];\r\n            for(let x = 0; x < this.rx; x++) {\r\n                cellList.push(new Cell(this, x, y));\r\n            }\r\n            this.cells.push(cellList);\r\n        }\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const p = this.points[i];\r\n            this.getCellAtPoint(p).push(p);\r\n        }\r\n        for(let y = 0; y < this.ry; ++y){\r\n            for(let x = 0; x < this.rx; ++x) {\r\n                if(this.cells[y][x].points.length < 2) {\r\n                    this.cells[y][x].isRenderable = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n        let i: number = (Math.round(dp.x / this.xInterval));\r\n        let j: number = (Math.round(dp.y / this.yInterval));\r\n        if (i >= this.rx) { i = this.rx - 1; }\r\n        if (j >= this.ry) { j = this.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return this.cells[j][i];\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D){\r\n        for(let y = 0; y < this.cells.length; y++){\r\n            for(let x = 0; x < this.cells[y].length; x++) {\r\n                // if(this.cells[y][x]){\r\n                this.cells[y][x].draw(ctx);\r\n                // }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Cell {\r\n    grid: GridSystemScreen;\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    vec: NVector3;\r\n    vecRender: NVector3;\r\n    xI: number;\r\n    yI: number;\r\n    isHover: boolean = false;\r\n    points: NVector3[] = []\r\n    _isRenderable: boolean = true;\r\n    constructor(grid: GridSystemScreen, xI: number, yI: number) {\r\n    this.grid = grid;\r\n    this.xI = xI;\r\n    this.yI = yI;\r\n    this.vec = new NVector3(xI * this.grid.xInterval, yI * this.grid.yInterval);\r\n    // this.geometries = [];\r\n    }\r\n    public push(geo: NVector3){\r\n        geo.isRenderable = false;\r\n        this.points.push(geo);\r\n        this.vecRender = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vecRender.x += this.points[i].x;\r\n            this.vecRender.y += this.points[i].y;\r\n        }\r\n        this.vecRender.x /= this.points.length;\r\n        this.vecRender.y /= this.points.length;\r\n    }\r\n    public get isRenderable() {\r\n        return this._isRenderable;\r\n    }\r\n    public set isRenderable(v: boolean) {\r\n        if(!v) {\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.points[i].isRenderable = true;\r\n            }\r\n            this.points = [];\r\n        }\r\n        this._isRenderable = v;\r\n    }\r\n    // public IsInside(m: NVector3) {\r\n    // if(Distance(this.vec, m ) < this.r1 + 2) {\r\n    // this.isHover = true;\r\n    // return true;\r\n    // } else {\r\n    // this.isHover = false;\r\n    // return false;\r\n    // }\r\n    // }\r\n    public draw(ctx: CanvasRenderingContext2D, isPanning: boolean = false) {\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n    //     console.log(isPanning)\r\n        if (!this.isRenderable) { return; }\r\n        if (isPanning) {\r\n            this.vecRender = new NVector3(0, 0, 0);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vecRender.x += this.points[i].x;\r\n                this.vecRender.y += this.points[i].y;\r\n            }\r\n            this.vecRender.x /= this.points.length;\r\n            this.vecRender.y /= this.points.length;\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n        // ctx.beginPath();\r\n        // ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        // ctx.closePath();\r\n        const r = 5 + this.points.length * 0.1;\r\n        ctx.fillStyle = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.stroke = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.fill();\r\n        // console.log(this.geometries.length);\r\n        ctx.beginPath();\r\n        ctx.arc(this.vecRender.x, this.vecRender.y, r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        // ctx.stroke();\r\n        ctx.fill();\r\n\r\n        // this.grid.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.geometries, this.vecRender, this.r0, this.r1, this.isHover);\r\n    }\r\n}","import { NVector3 } from '../lib';\r\n// import { GTYPE } from '../../../../../../../lib/Enumeration';\r\n// import { AGeometryBase } from '../../../../Common/Base/AGeometryBase';\r\n// import { GridBased } from '../';\r\n\r\nexport class GridSystemDynamic {\r\n\r\n    public xInterval: number = 0;\r\n    public yInterval: number = 0;\r\n    public width = 0;\r\n    public height = 0;\r\n    public rx: number = 9;\r\n    public ry: number = 7;\r\n    public cells: Cell[][] = [];\r\n\r\n    public points: NVector3[] = [];\r\n\r\n    public minP: NVector3 = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n    public maxP: NVector3 = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n\r\n    constructor() {\r\n        /* */\r\n    }\r\n    public update(width: number, height: number): void {\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        this.initGrid(width, height);\r\n        // }\r\n    }\r\n    private initGrid(width: number, height: number) {\r\n        // console.log(width);\r\n        this.minP = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n        this.maxP = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const v = this.points[i];\r\n            if (this.minP.x > v.x) { this.minP.x = v.x; }\r\n            if (this.minP.y > v.y) { this.minP.y = v.y; }\r\n            if (this.minP.z > v.z) { this.minP.z = v.z; }\r\n\r\n            if (this.maxP.x < v.x) { this.maxP.x = v.x; }\r\n            if (this.maxP.y < v.y) { this.maxP.y = v.y; }\r\n            if (this.maxP.z < v.z) { this.maxP.z = v.z; }\r\n        }\r\n    //     console.log(this);\r\n\r\n        this.cells = [];\r\n        this.width = (this.maxP.x - this.minP.x);\r\n        this.height = (this.maxP.y - this.minP.y);\r\n\r\n    //     console.log('width', this.width, 'height', this.height)\r\n\r\n        this.xInterval = this.width / (this.rx - 1);\r\n        this.yInterval = this.height / (this.ry - 1);\r\n        \r\n    //     console.log('this.xInterval', this.xInterval, 'this.yInterval', this.yInterval)\r\n\r\n        for(let y = 0; y < this.ry; y++){\r\n            const cellList: Cell[] = [];\r\n            for(let x = 0; x < this.rx; x++) {\r\n                cellList.push(new Cell(this, x, y));\r\n            }\r\n            this.cells.push(cellList);\r\n        }\r\n\r\n        for(let i = 0 ; i < this.points.length; ++i){\r\n            const p = this.points[i];\r\n            this.getCellAtPoint(p).push(p);\r\n        }\r\n        for(let y = 0; y < this.ry; ++y){\r\n            for(let x = 0; x < this.rx; ++x) {\r\n                if(this.cells[y][x].points.length < 1) {\r\n                    this.cells[y][x].isRenderable = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n        // let dp: NVector3 = vec.Sub(this);\r\n        let i: number = (Math.round((dp.x - this.minP.x ) / this.xInterval));\r\n        let j: number = (Math.round((dp.y - this.minP.y  ) / this.yInterval));\r\n        if (i >= this.rx) { i = this.rx - 1; }\r\n        if (j >= this.ry) { j = this.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return this.cells[j][i];\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D){\r\n\r\n        for(let y = 0; y < this.cells.length; y++){\r\n            for(let x = 0; x < this.cells[y].length; x++) {\r\n                // if(this.cells[y][x]){\r\n                this.cells[y][x].draw(ctx);\r\n                // }\r\n            }\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.minP.x, this.minP.y, this.maxP.x - this.minP.x, this.maxP.y - this.minP.y);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nclass Cell {\r\n\r\n    grid: GridSystemDynamic;\r\n    r0: number = 32 * 0.5;\r\n    r1: number = 48 * 0.5;\r\n    vec: NVector3;\r\n    vecRender: NVector3;\r\n    xI: number;\r\n    yI: number;\r\n    isHover: boolean = false;\r\n    points: NVector3[] = []\r\n    _isRenderable: boolean = true;\r\n\r\n    constructor(grid: GridSystemDynamic, xI: number, yI: number) {\r\n    this.grid = grid;\r\n    this.xI = xI;\r\n    this.yI = yI;\r\n    this.vec = new NVector3(grid.minP.x + (xI * this.grid.xInterval), grid.minP.y + (yI * this.grid.yInterval));\r\n//     console.log('x', this.vec.x, 'y', this.vec.y, )\r\n    // this.geometries = [];\r\n    }\r\n    public push(geo: NVector3){\r\n        geo.isRenderable = false;\r\n        this.points.push(geo);\r\n        this.vecRender = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vecRender.x += this.points[i].x;\r\n            this.vecRender.y += this.points[i].y;\r\n        }\r\n        this.vecRender.x /= this.points.length;\r\n        this.vecRender.y /= this.points.length;\r\n    }\r\n    public get isRenderable() {\r\n        return this._isRenderable;\r\n    }\r\n    public set isRenderable(v: boolean) {\r\n        if(!v) {\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.points[i].isRenderable = true;\r\n            }\r\n            this.points = [];\r\n        }\r\n        this._isRenderable = v;\r\n    }\r\n    // public IsInside(m: NVector3) {\r\n    // if(Distance(this.vec, m ) < this.r1 + 2) {\r\n    // this.isHover = true;\r\n    // return true;\r\n    // } else {\r\n    // this.isHover = false;\r\n    // return false;\r\n    // }\r\n    // }\r\n    public draw(ctx: CanvasRenderingContext2D, isPanning: boolean = false) {\r\n        if (!this.isRenderable) { \r\n            ctx.beginPath();\r\n            ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n            ctx.closePath();\r\n            ctx.stroke();    \r\n            return; \r\n        }\r\n\r\n\r\n\r\n        // console.log(isPanning)\r\n        if (isPanning) {\r\n            this.vecRender = new NVector3(0, 0, 0);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vecRender.x += this.points[i].x;\r\n                this.vecRender.y += this.points[i].y;\r\n            }\r\n            this.vecRender.x /= this.points.length;\r\n            this.vecRender.y /= this.points.length;\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n        // ctx.beginPath();\r\n        // ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        // ctx.closePath();\r\n        const r = 5 + this.points.length * 0.1;\r\n        ctx.fillStyle = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.stroke = `rgba(${r * 10}, 0, 0, 1)`;\r\n        // ctx.fill();\r\n        // console.log(this.geometries.length);\r\n        ctx.beginPath();\r\n        ctx.arc(this.vecRender.x, this.vecRender.y, r, 0, Math.PI * 2);\r\n        ctx.closePath();\r\n        // ctx.stroke();\r\n        ctx.fill();\r\n\r\n\r\n        // ctx.fillStyle = '#ffffff';\r\n        // ctx.beginPath();\r\n        // ctx.arc(this.vec.x, this.vec.y, 20, 0, Math.PI * 2);\r\n        // ctx.closePath();\r\n        // // ctx.stroke();\r\n        // ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(this.vec.x - this.grid.xInterval * 0.5, this.vec.y - this.grid.yInterval * 0.5, this.grid.xInterval, this.grid.yInterval);\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n\r\n        // this.grid.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.geometries, this.vecRender, this.r0, this.r1, this.isHover);\r\n    }\r\n}","import { NVector3 } from './lib';\r\nimport { OPTIMIZER } from './lib/enum';\r\nimport { GridSystemScreen } from './Core/GridSystemScreen';\r\nimport { GridSystemDynamic } from './Core/GridSystemDynamic';\r\n\r\nexport { OPTIMIZER }\r\nexport class Clustering {\r\n    optimizerType: OPTIMIZER;\r\n\r\n    optimizer: GridSystemDynamic | GridSystemScreen;\r\n\r\n    mv: NVector3 = new NVector3(0, 0);\r\n\r\n    inspection: boolean = true;\r\n\r\n    constructor(optimizer: OPTIMIZER) {\r\n        this.optimizerType = optimizer;\r\n        \r\n        switch (optimizer) {\r\n            case OPTIMIZER.GRID_SCREEN:\r\n                this.optimizer = new GridSystemScreen();\r\n                break;\r\n            case OPTIMIZER.GRID:\r\n                this.optimizer = new GridSystemDynamic();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        console.debug('clustering... v 0.1.5')\r\n    }\r\n    public push(vs: NVector3[], width: number, height: number) {\r\n        this.optimizer.points = vs;\r\n        this.update(width, height);\r\n    }\r\n    public mouseInteraction(x: number, y: number){\r\n        this.mv = this.optimizer.getCellAtPoint(new NVector3(x, y)).vec;\r\n    }\r\n    public update(width: number, height: number) {\r\n        this.optimizer.update(width, height);\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isStationary: boolean, width: number, height: number) {\r\n        if (isStationary) {\r\n            this.update(width, height);\r\n        }\r\n        this.optimizer.render(ctx)\r\n\r\n        if(this.mv){\r\n            ctx.fillStyle = '#00ff00';\r\n            ctx.beginPath();\r\n            ctx.arc(this.mv.x, this.mv.y,9, 0.0, 3.14 * 2)\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        \r\n\r\n    }\r\n\r\n}","import { MOUSE_TYPE, COMMAND, MouseEventData } from '../../lib'\r\nimport { ActiveCommandController } from '../';\r\nexport class CommandBase {\r\n    activeCommandController: ActiveCommandController;\r\n    type: COMMAND = COMMAND.SELECT;\r\n\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n\r\n        this.activeCommandController = activeCommandController;\r\n\r\n    }\r\n    public mouseEvent(e: MouseEventData) {\r\n        // console.log(e.type)\r\n        switch (e.type) {\r\n            case MOUSE_TYPE.LEFT:\r\n                this.MouseLeftClickPre(e); return;\r\n            case MOUSE_TYPE.MIDDLE:\r\n                this.MouseMiddleClickPre(e); return;\r\n            case MOUSE_TYPE.RIGHT:\r\n                this.MouseRightClickPre(e); return;\r\n            case MOUSE_TYPE.DOUBLE:\r\n                this.MouseDoubleClickPre(e); return;\r\n            case MOUSE_TYPE.MOVE:\r\n                this.MouseMovePre(e); return;\r\n            case MOUSE_TYPE.DRAG:\r\n                this.MouseDragPre(e); return;\r\n            case MOUSE_TYPE.DOWN:\r\n                this.MouseDownPre(e); return;\r\n            case MOUSE_TYPE.UP:\r\n                this.MouseUpPre(e); return;\r\n            case MOUSE_TYPE.WHEEL:\r\n                this.MouseWheelPre(e); return;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n     // .......................................................\r\n     public MouseDown(e: MouseEventData) {/* */ }\r\n     public MouseDownPre(e: MouseEventData) {\r\n        //  this.scene.MouseDown(e.x, e.y);\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = this.activeCommandController.drawingEngine.geometryCommon.find(e.x, e.y);\r\n        // console.log(this.activeCommandController.drawingEngine.scene.capture);\r\n\r\n        this.MouseDown(e);\r\n     }\r\n     public MouseLeftClick(e: MouseEventData) {/* */ }\r\n     public MouseLeftClickPre(e: MouseEventData) {\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = this.activeCommandController.drawingEngine.geometryCommon.find(e.x, e.y);\r\n\r\n        if(this.activeCommandController.drawingEngine.scene.capture){\r\n            this.activeCommandController.drawingEngine.scene.capture.isSelected = !this.activeCommandController.drawingEngine.scene.capture.isSelected;\r\n        } else {\r\n            this.activeCommandController.drawingEngine.geometryCommon.resetSelections();\r\n            // this.activeCommandController.drawingEngine.scene.resetSelections();\r\n        }\r\n\r\n        // console.log(this.activeCommandController.drawingEngine.scene.capture)\r\n        //  this.scene.MouseLeftClick(e.x, e.y);\r\n         this.MouseLeftClick(e);\r\n     }\r\n     public MouseMiddleClick(e: MouseEventData) {/* */ }\r\n     public MouseMiddleClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseMiddleClick(e.x, e.y);\r\n         this.MouseMiddleClick(e);\r\n     }\r\n     public MouseRightClick(e: MouseEventData) { /* */ }\r\n     public MouseRightClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseRightClick(e.x, e.y);\r\n         this.MouseRightClick(e);\r\n     }\r\n     public MouseUp(e: MouseEventData) { /* */ }\r\n     public MouseUpPre(e: MouseEventData) {\r\n        //  this.scene.MouseUp(e.x, e.y);\r\n\r\n        this.activeCommandController.drawingEngine.scene.capture = undefined;\r\n        // console.log('this.activeCommandController.drawingEngine.scene.capture', this.activeCommandController.drawingEngine.scene.capture)\r\n        this.MouseUp(e);\r\n \r\n     }\r\n     public MouseDoubleClick(e: MouseEventData) {/* */ }\r\n     public MouseDoubleClickPre(e: MouseEventData) {\r\n        //  this.scene.MouseDoubleClick(e.x, e.y);\r\n         this.MouseDoubleClick(e);\r\n     }\r\n     public MouseMove(e: MouseEventData) {/* */ }\r\n     public MouseMovePre(e: MouseEventData) {\r\n\r\n        this.activeCommandController.drawingEngine.geometryCommon.updateHover(e.x, e.y);\r\n        //  this.scene.MouseMove(e.x, e.y);\r\n         this.MouseMove(e);\r\n     }\r\n     public MouseDrag(e: MouseEventData) {/* */ }\r\n     public MouseDragPre(e: MouseEventData) {\r\n        //  this.scene.MouseDrag(e.x, e.y);\r\n        if (this.activeCommandController.drawingEngine.scene.capture) {\r\n            const mv = this.activeCommandController.drawingEngine.projection.toMap(e.x, e.y); \r\n            this.activeCommandController.drawingEngine.scene.capture.translate(e.x, e.y, mv[0], mv[1]);\r\n        }\r\n         this.MouseDrag(e);\r\n     }\r\n     public MouseWheel(e: MouseEventData) {/* */ }\r\n     public MouseWheelPre(e: MouseEventData) {\r\n        //  this.scene.MouseWheel(e.x, e.y, e.wheel);\r\n         // console.log(\"drag\");\r\n         this.MouseWheel(e);\r\n     }\r\n}","import { NVector3 } from '../../lib';\r\nimport { GeometryBase } from './GeometryBase';\r\nexport class Collision {\r\n    geometryBase: GeometryBase;\r\n\r\n    isCollided: boolean = false;\r\n\r\n    neighborShapes: GeometryBase[] = [];\r\n\r\n    minVec: NVector3;\r\n    maxVec: NVector3;\r\n\r\n    isVisited: boolean = false;\r\n    numOrder: number = -1;\r\n\r\n    constructor(geometryBase: GeometryBase) {\r\n        this.geometryBase = geometryBase;\r\n        const r = 5;\r\n        this.minVec = new NVector3(this.geometryBase.v.x - r, this.geometryBase.v.y - r, 0);\r\n        this.maxVec = new NVector3(this.geometryBase.v.x + r, this.geometryBase.v.y + r, 0);\r\n    }\r\n    public Reset(){\r\n        this.neighborShapes = [];\r\n        this.numOrder = -1;\r\n        this.geometryBase.numVisit = 0;\r\n        this.geometryBase.isCollapse = false;\r\n        this.isCollided = false;\r\n        this.isVisited = false;\r\n    }\r\n}","import { ACTIVE_UI, getUUID } from '../../lib';\r\nimport { Scene } from '../../Scene';\r\nimport { Collision } from './Collision';\r\nimport { NVector3 } from '../../lib';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    public v: NVector3;\r\n    public type: ACTIVE_UI;\r\n    public id: string = '';\r\n    numVisit: number = 0;\r\n\r\n    public isCollapse: boolean = false;\r\n\r\n    public isHidden: boolean = false;\r\n    public isRenderable: boolean = true;\r\n\r\n    public isSelected: boolean = false;\r\n    public isHover: boolean = false;\r\n    public collision: Collision;\r\n\r\n    constructor(scene: Scene, x: number, y: number) {\r\n        this.scene = scene;\r\n        this.v = new NVector3(x, y, 0);\r\n        this.id = getUUID();\r\n        \r\n        this.collision = new Collision(this);\r\n    }\r\n    public toJson() {\r\n        return { };\r\n    }\r\n    public translate(x: number, y: number, long: number, lat: number) {\r\n\r\n    }\r\n    public isInside(x: number, y: number): boolean {\r\n        return false;\r\n    }\r\n    public update(isPanning: boolean, toScreen: (x: number, y: number) => number[]) {\r\n        /* */\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        /* */\r\n    }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        /* */\r\n    }\r\n}","import { GeometryBase } from '../Base/GeometryBase';\r\nimport { ACTIVE_UI, NVector3, distanceToXY } from '../../lib';\r\n\r\nimport { Scene } from '../../Scene';\r\n\r\nimport { Collision } from '../Base/Collision';\r\n\r\nexport interface IPoint {\r\n    x: number,\r\n    y: number,\r\n    z: number,\r\n}\r\n\r\nexport class CPoint extends GeometryBase {\r\n    \r\n    r: number = 5;\r\n    id: string;\r\n    t: number = 0.0;\r\n    color = '#00ff00';\r\n    colorHover = '#0ffff0';\r\n\r\n    collision: Collision;\r\n\r\n    constructor(scene: Scene, param: IPoint) {\r\n        super(scene, param.x, param.y);\r\n        this.type = ACTIVE_UI.point;\r\n        this.v = new NVector3(param.x, param.y, param.z);\r\n    }\r\n    public translate(x: number, y: number, long: number, lat: number) {\r\n        this.v.x = x;\r\n        this.v.y = y;\r\n        this.v.long = long;\r\n        this.v.lat = lat;\r\n    }\r\n    public isInside(x: number, y: number): boolean {\r\n        if (distanceToXY(this.v.x, this.v.y, x, y) < this.r + 3) {\r\n            this.isHover = true;\r\n            return true;\r\n        }\r\n        this.isHover = false;\r\n        return false;\r\n    }\r\n    public update(isPanning: boolean, toScreen: ( x: number, y: number) => number[] ) {\r\n        if (isPanning && this.scene.drawingEngine.projection.isCustom) {\r\n            const sv = toScreen(this.v.long, this.v.lat);\r\n            this.v.x = sv[0];\r\n            this.v.y = sv[1];\r\n        }\r\n    }\r\n    public toJson() {\r\n        return { x: this.v.x, y: this.v.y }\r\n    }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n\r\n        let r = this.r + (Math.sin(this.t))\r\n        if(this.isHover) {\r\n            r += 3;\r\n            ctx.fillStyle = this.colorHover;\r\n        } else {\r\n            ctx.fillStyle = this.color;\r\n        }\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(this.v.x, this.v.y, r  , 0.0, Math.PI * 2.0 );\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        if(this.isSelected) {\r\n            ctx.lineWidth =3;\r\n            ctx.strokeStyle = '#ffffff';\r\n            ctx.stroke();\r\n        }\r\n        \r\n        this.t += 0.06;\r\n    }\r\n\r\n}","import { COMMAND, MouseEventData } from '../../lib'\r\nimport { CommandBase } from './CommandBase';\r\nimport { ActiveCommandController } from '../';\r\nimport { CPoint } from '../../Geometry/Point';\r\nexport class CommandSelect extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.SELECT;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n    //     console.log('sel' , e)\r\n    }\r\n}\r\nexport class CommandPoint extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.POINT;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n        const p = new CPoint(this.activeCommandController.drawingEngine.scene, {x: e.x, y: e.y, z : 0})\r\n        const mv = this.activeCommandController.drawingEngine.projection.toMap(e.x, e.y);\r\n        p.v.long = mv[0];\r\n        p.v.lat = mv[1];\r\n\r\n        this.activeCommandController.drawingEngine.scene.addGeometry(p);\r\n        // console.log(this.activeCommandController.hasShift)\r\n        if(this.activeCommandController.hasShift) { return }\r\n        this.activeCommandController.drawingEngine.setCommand();\r\n    }\r\n}\r\nexport class CommandLine extends CommandBase {\r\n    constructor(activeCommandController: ActiveCommandController) {\r\n        super(activeCommandController);\r\n        this.type = COMMAND.LINE;\r\n\r\n    }\r\n    public MouseLeftClick(e: MouseEventData) {\r\n    //     console.log('line' , e)\r\n    }\r\n}","// import { MouseEventData } from '../../../../Core/EventInteraction';\r\nimport { DrawingEngine } from '../';\r\nimport { CommandBase } from './Commands/CommandBase';\r\nimport { CommandSelect, CommandPoint, CommandLine } from './Commands/CommandShape';\r\n\r\nimport { COMMAND } from '../lib'\r\n\r\nimport { fetchJson } from '../../../NJSCore/IO';\r\nimport { CPoint } from '../Geometry/Point';\r\n\r\nexport class ActiveCommandController {\r\n    drawingEngine: DrawingEngine;\r\n\r\n    \r\n    activeCommand: CommandBase;\r\n    public commands: any = {};\r\n\r\n    hasShift: boolean = false;\r\n    inspection: boolean = false;\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n\r\n        this.commands = {\r\n            SELECT : new CommandSelect(this),\r\n            POINT : new CommandPoint(this),\r\n            LINE : new CommandLine(this),\r\n        }\r\n\r\n        // this.commands.Line = new CommandBase(this);\r\n        // this.commands.Point = new CommandBase(this);\r\n        // this.commands.Line = new CommandBase(this);\r\n\r\n        this.activeCommand = this.commands[COMMAND.SELECT];\r\n    }\r\n    public setCommander(commander: string) {\r\n        switch (commander) {\r\n            case 'save':\r\n            //     console.log('save!!');\r\n                break;\r\n            case 'load':\r\n            //     console.log('load!!');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // console.log(commander);\r\n        switch (commander as COMMAND) {\r\n            case COMMAND.SELECT:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            case COMMAND.POINT:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            case COMMAND.LINE:\r\n                // console.log(commander);\r\n                this.activeCommand = this.commands[commander];\r\n                // console.log(this.activeCommand);\r\n                break;\r\n            // case 'point':\r\n            //     this.activeCommand = this.commands[commander];\r\n            //     break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    public apiCall(command: string): any {\r\n\r\n\r\n        switch (command ) {\r\n            case 'getSelectedCPoint':\r\n                return this.drawingEngine.geometryCommon.getSelCPoint();\r\n            case 'importZipData':\r\n                return this.popZipData();\r\n            case 'importClustering':\r\n                return this.drawingEngine.addon.InitClustering();\r\n            case 'importClusteringCollision':\r\n                return this.drawingEngine.addon.InitClusteringCollision();\r\n\r\n            case 'save':\r\n                return this.drawingEngine.geometryCommon.toJson();\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    public async popZipData (){\r\n                \r\n        const json = await fetchJson('https://raw.githubusercontent.com/NamjuLee/data/master/US/zip.json');\r\n    //     console.log(json);\r\n        let count = 0;\r\n        for(let i of json['pos']) {\r\n            // console.log(i);\r\n\r\n            const p = this.greatePointByGeoPos(i[0], i[1]);\r\n            p.t += Math.random() * 10;\r\n            if(count++ > 2000) { return; }\r\n        }\r\n    \r\n\r\n    }\r\n    public greatePointByGeoPos(long: number, lat: number) {\r\n        const spos = this.drawingEngine.projection.toScreen(long, lat);\r\n        const p = new CPoint(this.drawingEngine.scene, {x: spos[0], y: spos[1], z: 0 });\r\n        p.v.long = long;\r\n        p.v.lat = lat;\r\n        this.drawingEngine.scene.addGeometry(p);\r\n        return p;\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nexport class Projection{\r\n    drawingEngine: DrawingEngine;\r\n    public isCustom: boolean = false;\r\n    constructor(drawingEngine: DrawingEngine){\r\n        this.drawingEngine = drawingEngine;\r\n\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.toMap = projection.toMap;\r\n        this.toScreen = projection.toScreen;\r\n        this.isCustom = true;\r\n    }\r\n    public toScreen(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n    public toMap(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n}","import { DrawingEngine } from '../';\r\n// import firebase from 'firebase';\r\n\r\nexport class IO {\r\n    public drawingEngine: DrawingEngine;\r\n\r\n\r\n    firebaseConfig = {\r\n        apiKey: \"AIzaSyA1yKg85WGZoshbk8xR23cXr3SwpqXVgIc\",\r\n        authDomain: \"njs-data.firebaseapp.com\",\r\n        projectId: \"njs-data\",\r\n        storageBucket: \"njs-data.appspot.com\",\r\n        messagingSenderId: \"635991152770\",\r\n        appId: \"1:635991152770:web:722f5356e0d14cea50fc9b\"\r\n      };\r\n\r\n    // ref: firebase.database.Reference;\r\n\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n\r\n        // let fbdatabase = firebase.initializeApp(this.firebaseConfig);\r\n        // console.log('fbdb', fbdatabase);\r\n    \r\n        // // let db = fbdatabase.database();\r\n        // // this.ref = db.ref('drawingEngine');\r\n        // // console.log(this.ref);\r\n    \r\n        // // let data = {\r\n        // //     name:'mlData',\r\n        // //     score: '120'\r\n        // // }\r\n        // // this.sendData(data);\r\n\r\n        // // this.ref.on('value', this.getData, this.getError);\r\n    }\r\n    public sendData(data: {}) {\r\n        // let result = this.ref.push(data);\r\n        // console.log(result.key);\r\n    }\r\n\r\n    public getData = (d: any) => {\r\n        let data = d.val();\r\n    //     console.log('get data', data);\r\n        \r\n        for(let i in data) {\r\n        //     console.log(i, data[i]);\r\n        }\r\n    }\r\n    public getError = (d: any) => {\r\n        console.error(d);\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { GeometryBase } from './Base/GeometryBase';\r\nexport class GeometryCommon{\r\n    drawingEngine: DrawingEngine;\r\n    constructor(drawingEngine: DrawingEngine){\r\n        this.drawingEngine = drawingEngine;\r\n\r\n    }\r\n    public find(x: number, y: number): GeometryBase | undefined {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            if (this.drawingEngine.scene.geoDict[key].isInside(x, y)) {\r\n                return this.drawingEngine.scene.geoDict[key];\r\n            }\r\n        }\r\n        return undefined\r\n    }\r\n    public resetSelections(){\r\n        for (let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            this.drawingEngine.scene.geometryList[i].isSelected = false;\r\n        }\r\n    }\r\n    public getAllVecFromCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            vs.push(this.drawingEngine.scene.pointList[i].v);\r\n        }\r\n        return vs;\r\n    }\r\n    public getAllFromCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            vs.push(this.drawingEngine.scene.pointList[i]);\r\n        }\r\n        return vs;\r\n    }\r\n    public getSelCPoint(){\r\n        const vs = [];\r\n        for (let i = 0 ; i < this.drawingEngine.scene.pointList.length; ++i) {\r\n            if (this.drawingEngine.scene.pointList[i].isSelected) {\r\n                vs.push(this.drawingEngine.scene.pointList[i]);\r\n            }\r\n        }\r\n        return vs;\r\n    }\r\n    public updateHover(x: number, y: number) {\r\n        for (let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            this.drawingEngine.scene.geometryList[i].isInside(x, y)\r\n        }\r\n    }\r\n    public toJson() {\r\n        const data = [];\r\n        for(let i = 0 ; i < this.drawingEngine.scene.geometryList.length; ++i) {\r\n            data.push(this.drawingEngine.scene.geometryList[i].toJson());\r\n        }\r\n        return data;\r\n    }\r\n}","import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\nimport { distance, NVector3 } from '../../Clustering/lib';\r\nimport { Renderer } from './Renderer';\r\n\r\nexport class PointCluster {\r\n    public renderer: Renderer;\r\n    public points: CPoint[];\r\n    public r0: number = 32 * 0.5;\r\n    public r1: number = 48 * 0.5;\r\n    public isHover: boolean = false;\r\n    public isVisited: boolean = false;\r\n    public boundingBoxMin: NVector3 = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n    public boundingBoxMax: NVector3 = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n    public minVec: NVector3;\r\n    public maxVec: NVector3;\r\n    public vec = new NVector3(0, 0, 0);\r\n    private t: number = 1.0;\r\n    private GridResolution = 85;\r\n    private tempVecGridList: NVector3[] = [];\r\n    private tempGeoGridList: CPoint[][][] = [];\r\n\r\n    constructor(renderer: Renderer, geometries: CPoint[]) {\r\n        this.renderer = renderer;\r\n        this.points = geometries;\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].v.x;\r\n            this.vec.y += this.points[i].v.y;\r\n            this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        // for(let i = 0; i < this.geometries.length; ++i) {\r\n        // this.geometries[i].isAniEasing = true;\r\n        // this.geometries[i].tVec = this.vec;\r\n        // }\r\n    }\r\n    public IsInside(m: NVector3) {\r\n        if(distance(this.vec, m ) < this.r1) {\r\n            this.isHover = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.activeMouseCursor.SetActiveCursorHovering();\r\n            // this.points[0].scene.annotationInstance.renderer.needFocus = true;\r\n            // this.points[0].scene.annotationInstance.activeCommandController.acProperties.hasHovering = true;\r\n            return true;\r\n        } else {\r\n            this.isHover = false;\r\n            return false;\r\n        }\r\n    }\r\n    public AddPost(geo: CPoint) {\r\n        // @ts-ignore\r\n        if(this.points.includes(geo)) { return; }\r\n        this.points.push(geo);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n        this.vec.x += this.points[i].v.x;\r\n        this.vec.y += this.points[i].v.y;\r\n        this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n    }\r\n    public NeedDecompose() {\r\n        if (this.boundingBoxMax.x - this.boundingBoxMin.x > this.GridResolution) { return true; }\r\n        if (this.boundingBoxMax.y - this.boundingBoxMin.y > this.GridResolution) { return true; }\r\n        return false;\r\n    }\r\n    public Split() {\r\n        this.DeepRemove();\r\n        const xNum = (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.x - this.boundingBoxMin.x) / this.GridResolution;\r\n        const yNum = (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution < 1 ? 1: (this.boundingBoxMax.y - this.boundingBoxMin.y) / this.GridResolution;\r\n        const grid = this.buildGrid(xNum, yNum);\r\n        this.BuildSubCluster(grid, xNum, yNum);\r\n    }\r\n    public Merge(other: PointCluster){\r\n        this.points.concat(other.points);\r\n        this.vec = new NVector3(0, 0, 0);\r\n        for(let i = 0; i < this.points.length; ++i) {\r\n            this.vec.x += this.points[i].v.x;\r\n            this.vec.y += this.points[i].v.y;\r\n            this.UpdateBoundingBox(this.points[i].v);\r\n        }\r\n        this.vec.x /= this.points.length;\r\n        this.vec.y /= this.points.length;\r\n        this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n        this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n        other.DeepRemove();\r\n    }\r\n    public DeepRemove(){\r\n        this.renderer.RemoveCluster(this);\r\n    }\r\n    public buildGrid(xNum: number, yNum: number) {\r\n        this.tempGeoGridList = []\r\n        let gridList = [];;\r\n        for(let y = 0; y < yNum; ++y) {\r\n            const theY = this.boundingBoxMin.y + y * this.GridResolution;\r\n            const geoMat: CPoint[][] = [];\r\n            for(let x = 0; x < xNum; ++x) {\r\n                const theX = this.boundingBoxMin.x + x * this.GridResolution;\r\n                gridList.push(new NVector3(theX, theY));\r\n                const geoList: CPoint[]= [];\r\n                geoMat.push(geoList);\r\n            }\r\n            this.tempGeoGridList.push(geoMat);\r\n        }\r\n        this.tempVecGridList = gridList;\r\n        return gridList;\r\n    }\r\n    public BuildSubCluster(vs: NVector3[], xNum: number, yNum: number){\r\n        for(let i = 0 ; i < this.points.length; ++i) {\r\n            this.GetCellAtPoint(this.points[i].v, xNum, yNum).push(this.points[i]);\r\n        }\r\n        for(let y = 0; y < this.tempGeoGridList.length; ++y) {\r\n            for(let x = 0; x < this.tempGeoGridList[y].length; ++x) {\r\n            if(this.tempGeoGridList[y][x]) {\r\n                if (this.tempGeoGridList[y][x].length === 1) {\r\n                    this.tempGeoGridList[y][x][0].collision.Reset();\r\n                } else if(this.tempGeoGridList[y][x].length > 1) {\r\n                    this.renderer.clustersRPoint.push(new PointCluster(this.renderer, this.tempGeoGridList[y][x]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private GetCellAtPoint(tv: NVector3, xNum: number, yNum: number) {\r\n        let dp: NVector3 = new NVector3(tv.x - this.boundingBoxMin.x, tv.y - this.boundingBoxMin.y);\r\n        // let dp: NVector3 = new NVector3(this.boundingBoxMin.x - tv.x, this.boundingBoxMin.y - tv.y);\r\n        let i: number = Math.round(dp.x / this.GridResolution);\r\n        let j: number = Math.round(dp.y / this.GridResolution);\r\n        if (i >= xNum) { i = xNum - 1; }\r\n        if (j >= yNum) { j = yNum - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        i = Math.round(i);\r\n        j = Math.round(j);\r\n        // console.log(j, i);\r\n        // console.log(this.tempGeoGridList)\r\n        return this.tempGeoGridList[j][i];\r\n    }\r\n    public Draw(ctx: CanvasRenderingContext2D, renderer: Renderer, isPanning: boolean) {\r\n        this.UpdateTimeer();\r\n\r\n        if (isPanning) {\r\n            this.vec = new NVector3(0, 0, 0);\r\n            this.boundingBoxMin = new NVector3(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\r\n            this.boundingBoxMax = new NVector3(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);\r\n            for(let i = 0; i < this.points.length; ++i) {\r\n                this.vec.x += this.points[i].v.x;\r\n                this.vec.y += this.points[i].v.y;\r\n                this.UpdateBoundingBox(this.points[i].v);\r\n            }\r\n            this.vec.x /= this.points.length;\r\n            this.vec.y /= this.points.length;\r\n            this.minVec = new NVector3(this.vec.x - this.r1, this.vec.y - this.r1, 0);\r\n            this.maxVec = new NVector3(this.vec.x + this.r1, this.vec.y + this.r1, 0);\r\n            // this.vec.y -= this.r * 0.5 // offset the ghost center along y\r\n        }\r\n\r\n        // renderer.optimizer.optimizer.optimizer.renderer.draw.shape.cluster.DrawingPresetClustering(ctx, this.points, this.vec, this.r0, this.r1, this.isHover, this.t);\r\n        \r\n        if(renderer.optimizer.inspection) {\r\n            ctx.beginPath();\r\n            ctx.rect(this.minVec.x, this.minVec.y, this.maxVec.x - this.minVec.x, this.maxVec.y - this.minVec.y)\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\r\n            ctx.fill();\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.rect(this.boundingBoxMin.x, this.boundingBoxMin.y, this.boundingBoxMax.x - this.boundingBoxMin.x, this.boundingBoxMax.y - this.boundingBoxMin.y)\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n            if (this.tempVecGridList.length > 0) {\r\n                for(let i = 0 ; i < this.tempVecGridList.length; ++i) {\r\n                    ctx.beginPath();\r\n                    ctx.rect(this.tempVecGridList[i].x, this.tempVecGridList[i].y, this.GridResolution, this.GridResolution);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    private UpdateTimeer(){\r\n        if (true ) {\r\n            this.t -= 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionA;\r\n            this.t = this.t < 0.4 ? 0.4 : this.t;\r\n        } else {\r\n            this.t += 0.1; // this.points[0].scene.annotationInstance.customization.themeCurrent.properties.timeTransitionB;\r\n            this.t = this.t > 1 ? 1 : this.t;\r\n        }\r\n    }\r\n    private UpdateBoundingBox(vec: NVector3){\r\n        this.boundingBoxMin.x = vec.x < this.boundingBoxMin.x ? vec.x : this.boundingBoxMin.x;\r\n        this.boundingBoxMin.y = vec.y < this.boundingBoxMin.y ? vec.y : this.boundingBoxMin.y;\r\n        this.boundingBoxMax.x = vec.x > this.boundingBoxMax.x ? vec.x : this.boundingBoxMax.x;\r\n        this.boundingBoxMax.y = vec.y > this.boundingBoxMax.y ? vec.y : this.boundingBoxMax.y;\r\n    }\r\n}","import { PointCluster } from './PointCluster';\r\nimport { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\nimport { ClusteringCollisionBasedGraph } from '../';\r\n\r\nexport class Renderer {\r\n    public clustersRPoint: PointCluster[] = [];\r\n    public optimizer: ClusteringCollisionBasedGraph;\r\n    constructor(optimizer: ClusteringCollisionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n    public InitGeometry(){\r\n        this.clustersRPoint = [];\r\n    }\r\n    public addClusterByGeometries(geo: CPoint[][] ) {\r\n        for(let i = 0; i < geo.length; ++i) {\r\n            this.clustersRPoint.push(new PointCluster(this, geo[i]));\r\n        }\r\n    }\r\n    public RemoveCluster(cluster: PointCluster ){\r\n        this.clustersRPoint.splice(this.clustersRPoint.indexOf(cluster), 1);\r\n\r\n    }\r\n    public Render(ctx: CanvasRenderingContext2D, isStationary: boolean): void {\r\n    //     console.log(this.clustersRPoint.length);\r\n        if (this.clustersRPoint.length > 0) {\r\n            for(let i = 0 ; i < this.clustersRPoint.length; ++i) {\r\n                this.clustersRPoint[i].Draw(ctx, this, isStationary);\r\n            }\r\n        }\r\n\r\n    }\r\n}","import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\nimport { PointCluster } from './PointCluster';\r\nimport { ClusteringCollisionBasedGraph } from '..';\r\n\r\nimport { distance, AABBintersect2D } from '../../../../../../GIS/Clustering/ClusteringCollisionBasedGraph/lib';\r\n\r\nexport class GraphClustering {\r\n    public optimizer: ClusteringCollisionBasedGraph;\r\n    public pointList: CPoint[] = []\r\n    // listNPoint: CPoint[] = []\r\n\r\n    constructor(optimizer: ClusteringCollisionBasedGraph) {\r\n        this.optimizer = optimizer;\r\n    }\r\n\r\n    public update(): void {\r\n        this.updatePoints();\r\n\r\n        // 1: build connectivity based on collision\r\n        // this.listNPoint = this.BuildConnectivity(this.listNPoint);\r\n        this.pointList = this.BuildConnectivity(this.pointList);\r\n        this.initGeometry();\r\n        // 2: construct clusters graph based on the connectivity\r\n        const geoList = this.buildGraph(this.pointList);\r\n\r\n        if (geoList !== undefined) {\r\n            this.addClusterByGeometries(geoList);\r\n            // // 3: recursive checking for the collision while repositioning clusters\r\n            this.PostUpdateCollisionBasedonGraph();\r\n\r\n            const graphs = this.NeedDecompose();\r\n            if (graphs.length > 0) {\r\n                // 4: tessellate big clusters based on a resolution\r\n                this.SplitClusters(graphs);\r\n                // 5: post-process for merging based on a tolerance\r\n                this.PostMergeCluster();\r\n            }\r\n        }\r\n    }\r\n    public initGeometry() {\r\n        this.optimizer.renderer.InitGeometry();\r\n    }\r\n    public addClusterByGeometries(outGraphList: CPoint[][]) {\r\n        this.optimizer.renderer.addClusterByGeometries(outGraphList);\r\n    }\r\n    private updatePoints() {\r\n        this.pointList = [];\r\n\r\n        for (let i = 0; i < this.optimizer.points.length; ++i) {\r\n            if (this.optimizer.points[i].isHidden ||\r\n                !this.optimizer.points[i].isRenderable) {\r\n                continue\r\n            } else {\r\n                const pt = this.optimizer.points[i];\r\n                pt.collision.Reset();\r\n                this.pointList.push(pt)\r\n            }\r\n        }\r\n\r\n    }\r\n    private BuildConnectivity(listPoints: CPoint[]) {\r\n        for (let i = 0; i < listPoints.length; ++i) {\r\n            const pt = listPoints[i];\r\n            for (let j = i + 1; j < listPoints.length; ++j) {\r\n                const other = listPoints[j];\r\n\r\n                // @ts-ignore\r\n                if (!other.isCollapse && other !== pt && AABBintersect2D([pt.collision.minVec, pt.collision.maxVec], [other.collision.minVec, other.collision.maxVec])) {\r\n                    pt.collision.isCollided = true;\r\n                    pt.isCollapse = true;\r\n                    pt.numVisit = 0;\r\n                    pt.collision.neighborShapes.push(other);\r\n                    other.collision.isCollided = true;\r\n                    other.isCollapse = true;\r\n                    other.numVisit = 0;\r\n                    other.collision.neighborShapes.push(pt);\r\n                    // other.collision.neighborShapes.push(pt);\r\n                    // pt.collision.numOrder = numOrder++;\r\n                    // break;\r\n                }\r\n            }\r\n        }\r\n        return listPoints;\r\n    }\r\n    private buildGraph(listPoints: CPoint[]) {\r\n        let outList: CPoint[][] = [];\r\n        for (let i = 0; i < listPoints.length; ++i) {\r\n            let ptList: CPoint[] = [];\r\n            let queue = [listPoints[i]];\r\n            queue[0].collision.isVisited = true;\r\n            ptList.push(queue[0]);\r\n            let safeguard = 0;\r\n            let current = undefined;\r\n            while ((current = queue.shift()) !== undefined) {\r\n                for (let i = 0; i < current.collision.neighborShapes.length; ++i) {\r\n                    if (!current.collision.neighborShapes[i].collision.isVisited) {\r\n                        current.collision.neighborShapes[i].collision.isVisited = true;\r\n                        queue.push(current.collision.neighborShapes[i] as CPoint);\r\n                        ptList.push(current.collision.neighborShapes[i] as CPoint);\r\n                    }\r\n                }\r\n                if (safeguard++ > 1000) { console.debug('fail to optimize'); return; }\r\n            }\r\n            if (ptList.length > 1) {\r\n                outList.push(ptList);\r\n            }\r\n        }\r\n        return outList;\r\n    }\r\n    public PostUpdateCollisionBasedonGraph() {\r\n        // for (let i = 0; i < this.optimizer.renderer.clustersNPoint.length; ++i) {\r\n        //     this.UpdateByQueue(this.optimizer.renderer.clustersNPoint[i], this.listNPoint);\r\n        // }\r\n        for (let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            this.UpdateByQueue(this.optimizer.renderer.clustersRPoint[i], this.pointList);\r\n        }\r\n    }\r\n    private UpdateByQueue(cluster: PointCluster, geometries: CPoint[]) {\r\n        let remain = 0;\r\n        const queue = [...geometries]\r\n        while (queue.length) {\r\n            const geo = queue.shift();\r\n\r\n            if (geo) {\r\n                // console.log(queue.length);\r\n                // safeguard and performance optimization\r\n                if (geo.numVisit > 100) { geo.numVisit = 0; break; }\r\n                if (queue.length === 0) {\r\n                    if (geometries.length < remain++) { break; }\r\n                }\r\n                // end safeguard and performance optimization\r\n                if (!geo.collision.isCollided) {\r\n                    // @ts-ignore\r\n                    if (AABBintersect2D([geo.collision.minVec, geo.collision.maxVec], [cluster.minVec, cluster.maxVec])) {\r\n                        geo.collision.isCollided = true;\r\n                        geo.isCollapse = true;\r\n                        geo.numVisit = 0;\r\n                        cluster.AddPost(geo);\r\n                    } else {\r\n                        geo.numVisit++;\r\n                        queue.push(geo);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private NeedDecompose() {\r\n        const clusterGraph = [];\r\n\r\n        for (let i = 0; i < this.optimizer.renderer.clustersRPoint.length; ++i) {\r\n            if (this.optimizer.renderer.clustersRPoint[i].NeedDecompose()) {\r\n                clusterGraph.push(this.optimizer.renderer.clustersRPoint[i]);\r\n            }\r\n        }\r\n        return clusterGraph;\r\n    }\r\n    private SplitClusters(clusters: PointCluster[]) {\r\n        for (let i = 0; i < clusters.length; ++i) {\r\n            clusters[i].Split();\r\n        }\r\n    }\r\n    private PostMergeCluster() {\r\n        this.PostMergeClusterCompute(this.optimizer.renderer.clustersRPoint);\r\n    }\r\n    private PostMergeClusterCompute(clusters: PointCluster[]) {\r\n        for (let i = 0; i < clusters.length - 1; ++i) {\r\n            const cluster = clusters[i];\r\n            for (let j = i + 1; j < clusters.length; ++j) {\r\n                const other = clusters[j]\r\n                if (!other.isVisited) {\r\n                    // @ts-ignore\r\n                    if (distance(cluster.vec, other.vec) < cluster.r1 + 20) {\r\n                        other.isVisited = true;\r\n                        cluster.Merge(other);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { NVector3 } from '../Clustering/lib';\r\n\r\nimport { Renderer } from './Core/Renderer';\r\nimport { GraphClustering } from './Core/GraphClustering';\r\nimport { CPoint } from '../../DrawingEngine/Geometry/Point';\r\n\r\nexport class ClusteringCollisionBasedGraph {\r\n\r\n    graphClustering: GraphClustering;\r\n    renderer: Renderer;\r\n\r\n    mv: NVector3 = new NVector3(0, 0);\r\n\r\n    inspection: boolean = true;\r\n\r\n    points: CPoint[] = [];\r\n\r\n    constructor() {\r\n        this.graphClustering = new GraphClustering(this);\r\n        this.renderer = new Renderer(this);\r\n    }\r\n    public push(vs: CPoint[]) {\r\n        this.points = vs;\r\n        this.update();\r\n    }\r\n    public mouseInteraction(x: number, y: number){\r\n        // this.mv = this.optimizer.getCellAtPoint(new NVector3(x, y)).vec;\r\n    }\r\n    public update(): void {\r\n        this.graphClustering.update();\r\n        // console.log(this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming);\r\n        // if (this.optimizer.optimizer.optimizer.renderer.annotationInstance.activeCommandController.acProperties.isZooming) {\r\n        // this.initGrid(width, height);\r\n        // }\r\n    //     console.log(this);\r\n    }\r\n    public getCellAtPoint(dp: NVector3) {\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isStationary: boolean) {\r\n        this.renderer.Render(ctx, isStationary)\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { MouseEventData, MOUSE_TYPE } from '../lib';\r\nimport { Clustering, OPTIMIZER } from '../../Addon/Clustering/';\r\nimport { ClusteringCollisionBasedGraph } from '../../Addon/ClusteringCollisionBasedGraph';\r\n\r\nexport class Addon {\r\n    drawingEngine: DrawingEngine;\r\n    clustering: Clustering | undefined = undefined;\r\n    clusteringCollisionBasedGraph: ClusteringCollisionBasedGraph | undefined = undefined;\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    async InitClustering() {\r\n        return import('../../Addon/Clustering/').then(({ Clustering }) => {\r\n\r\n            const  vs = this.drawingEngine.geometryCommon.getAllVecFromCPoint();\r\n\r\n            this.clustering = new Clustering(OPTIMIZER.GRID);\r\n            this.clustering.optimizer.rx = 9;\r\n            this.clustering.optimizer.ry = 5;\r\n            this.clustering.push(vs , this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n\r\n\r\n        }).catch(err => {\r\n        //     console.log('Stop loading clustering Addon.'); console.log(err);\r\n        }); \r\n    }\r\n    async InitClusteringCollision() {\r\n        return import('../../Addon/Clustering/').then(({ Clustering }) => {\r\n\r\n            const  vs = this.drawingEngine.geometryCommon.getAllFromCPoint();\r\n\r\n            this.clusteringCollisionBasedGraph = new ClusteringCollisionBasedGraph();\r\n            // this.clusteringCollisionBasedGraph.optimizer.rx = 9;\r\n            // this.clusteringCollisionBasedGraph.optimizer.ry = 5;\r\n            this.clusteringCollisionBasedGraph.push(vs);\r\n\r\n\r\n        }).catch(err => {\r\n        //     console.log('Stop loading clustering Addon.'); console.log(err);\r\n        }); \r\n    }\r\n\r\n    \r\n    public mouseInteraction(e: MouseEventData) {\r\n        switch (e.type) {\r\n            case MOUSE_TYPE.LEFT:\r\n                break;\r\n            case MOUSE_TYPE.MIDDLE:\r\n                break;\r\n            case MOUSE_TYPE.RIGHT:\r\n                break;\r\n            case MOUSE_TYPE.DOUBLE:\r\n                break;\r\n            case MOUSE_TYPE.MOVE:\r\n                this.clustering?.mouseInteraction(e.x, e.y);\r\n                break;\r\n            case MOUSE_TYPE.DRAG:\r\n                break;\r\n            case MOUSE_TYPE.DOWN:\r\n                break;\r\n            case MOUSE_TYPE.UP:\r\n                break;\r\n            case MOUSE_TYPE.WHEEL:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.clustering?.render(ctx, isPanning, this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n        // this.clusteringCollisionBasedGraph?.render(ctx, isPanning, this.drawingEngine.renderer.ctx.canvas.width, this.drawingEngine.renderer.ctx.canvas.height);\r\n        this.clusteringCollisionBasedGraph?.render(ctx, isPanning);\r\n    }\r\n\r\n}","import { DrawingEngine } from '../'\r\n\r\nexport class Customization {\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n}\r\n\r\nexport class Renderer {\r\n\r\n    public drawingEngine: DrawingEngine;\r\n\r\n    private lastCalledTime: number = Date.now();\r\n    private delta: number = 1;\r\n    public fps: number = 30;\r\n\r\n    public ctx: CanvasRenderingContext2D;\r\n\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.ctx = ctx;\r\n        this.update(isPanning);\r\n        this.renderPost(ctx, isPanning);\r\n     }\r\n    public update( isPanning: boolean) {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            this.drawingEngine.scene.geoDict[key].update( isPanning, this.drawingEngine.projection.toScreen );\r\n        }\r\n     }\r\n    public renderPost(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        for (let key in this.drawingEngine.scene.geoDict) {\r\n            this.drawingEngine.scene.geoDict[key].renderPost(ctx, isPanning );\r\n        }\r\n        this.ComputeFPS();\r\n    }\r\n    private ComputeFPS(){\r\n        this.delta = (Date.now() - this.lastCalledTime )/1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n    }\r\n}","import { DrawingEngine } from '../';\r\nimport { ACTIVE_UI } from '../lib';\r\nimport { GeometryBase } from '../Geometry/Base/GeometryBase';\r\nimport { CPoint } from '../Geometry/Point';\r\n\r\nexport class Scene {\r\n    public drawingEngine: DrawingEngine;\r\n    \r\n    public _capture: GeometryBase | undefined = undefined; \r\n    public geometryList : GeometryBase[] = [];\r\n    public pointList : CPoint[] = [];\r\n\r\n    public geoDict: any = {};\r\n    constructor(drawingEngine: DrawingEngine) {\r\n        this.drawingEngine = drawingEngine;\r\n    }\r\n    public get capture(): GeometryBase | undefined {\r\n        return this._capture;\r\n    }\r\n    public set capture(g: GeometryBase | undefined) {\r\n        if (g) {\r\n            this.drawingEngine.ableToPan = false;\r\n        } else {\r\n            this.drawingEngine.ableToPan = true;\r\n        }\r\n        // console.log(g);\r\n        this._capture = g;\r\n    }\r\n    public addGeometry(g: GeometryBase) {\r\n        this.geoDict[g.id] = g;\r\n        this.geometryList.push(g);\r\n        if(g.type === ACTIVE_UI.point) {\r\n            this.pointList.push(g as CPoint);\r\n        }\r\n    }\r\n\r\n}","\r\nimport { MouseEventData } from './lib';\r\n\r\nimport { ActiveCommandController } from './ActiveCommand';\r\nimport { Projection } from './Projection';\r\nimport { IO } from './IO/IO';\r\nimport { GeometryCommon } from './Geometry/GeometryCommon';\r\nimport { Addon } from './Addon';\r\nimport { Renderer } from './Renderer';\r\nimport { Scene } from './Scene';\r\nimport { KeyboardEventData } from '../../NJSCore';\r\n\r\n// import { tensor2d, tidy, Tensor2D } from '@tensorflow/tfjs';\r\n// import * as tf from '@tensorflow/tfjs';\r\n\r\n\r\nexport class DrawingEngine {\r\n\r\n    public activeCommand: ActiveCommandController;\r\n    public projection: Projection;\r\n    public geometryCommon: GeometryCommon;\r\n    public scene: Scene;\r\n    public addon: Addon;\r\n    public renderer: Renderer;\r\n    public io: IO;\r\n\r\n    _ableToPan: boolean = true;\r\n\r\n    constructor() {\r\n        this.io = new IO(this);\r\n        this.addon = new Addon(this);\r\n        this.projection = new Projection(this);\r\n        this.geometryCommon = new GeometryCommon(this);\r\n        this.activeCommand = new ActiveCommandController(this);\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n    }\r\n\r\n    public apiCall(command: string): any {\r\n        return this.activeCommand.apiCall(command);\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.projection.updateProjection(projection);\r\n    }\r\n    public setCommand(command: string = 'SELECT') {\r\n    //     console.log(command);\r\n        this.activeCommand.setCommander(command);\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        this.activeCommand.activeCommand.mouseEvent(m);\r\n\r\n        this.addon.mouseInteraction(m);\r\n    }\r\n    public keyEvent(m: KeyboardEventData){\r\n        // this.activeCommand.activeCommand.k(m);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.renderer.render(ctx, isPanning);\r\n\r\n        this.addon.render(ctx, isPanning);\r\n    }\r\n    public set ableToPan(v: boolean) {\r\n        this._ableToPan = v;\r\n        this.bindAbleToPan(v);\r\n        // this.definition.app.ableToPan = v;\r\n    }\r\n    public bindAbleToPan(v: boolean){\r\n\r\n    }\r\n}","import { APP } from '../../lib';\r\nimport { HTMLView } from '../HTMLView';\r\nexport class GraphView {\r\n    HTMLView: HTMLView;\r\n    div: HTMLElement;\r\n    constructor(HTMLView: HTMLView) {\r\n        this.HTMLView = HTMLView;\r\n\r\n        this.initPanel();\r\n    }\r\n    public remove(){\r\n        this.HTMLView.networkUI = undefined;\r\n        // this.HTMLView.app.definition.app.divHost.removeChild(this.div);\r\n    }\r\n    public initPanel(){\r\n\r\n        let div = document.createElement('div');\r\n        div.style.width = '200px';\r\n        div.style.height = '400px';\r\n        div.style.background = '#ffffff';\r\n        div.style.position = 'absolute';\r\n        div.style.zIndex = '10';\r\n\r\n        div.style.top = '100px'; //this.HTMLView.app.definition.app.divHost.style.top + 'px';\r\n        // div.style.left = this.HTMLView.app.definition.app.divHost.clientWidth + 'px';\r\n\r\n\r\n        let top = document.createElement('div');\r\n        top.style.width = '100%';\r\n        top.style.height = '60px';\r\n        top.style.background = '#efefef';\r\n        top.style.position = 'relative';\r\n        top.style.zIndex = '11';\r\n        // top.style.padding = '5px';\r\n        top.textContent = 'NNA V3 controller'\r\n\r\n        let isPressed = false;\r\n        let prePos: number[] = [0 , 0];\r\n\r\n        top.ondrag = (e: MouseEvent) => {\r\n        //     console.log('reall?', e);\r\n        }\r\n        top.onmouseenter = (e: MouseEvent ) => {\r\n        //     console.log('onmouseenter?', e);\r\n        }\r\n        top.ondrag = (e: MouseEvent ) => {\r\n        //     console.log('ondrag?', e);\r\n        }\r\n        top.onmousemove = (e: MouseEvent ) => {\r\n            if (isPressed) {\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n            //     console.log(xOff, yOff);\r\n            //     console.log(+div.style.top);\r\n            //     console.log(div.clientLeft, parseFloat(div.style.left));\r\n                div.style.top = parseFloat(div.style.top) + yOff +'px';\r\n                div.style.left = parseFloat(div.style.left) + xOff +'px';\r\n            //     console.log('drgggg?', e);\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n        }\r\n        top.onmousedown = (e: MouseEvent ) => {\r\n        //     console.log('down', e);\r\n            prePos[0] = e.clientX;\r\n            prePos[1] = e.clientY;\r\n            isPressed = true;\r\n        }\r\n        top.onmouseup = (e: MouseEvent ) => {\r\n        //     console.log('up', e);\r\n            isPressed = false;\r\n        }\r\n        top.onmouseout = (e: MouseEvent ) => {\r\n            if (isPressed) {\r\n            //     console.log('onmouseout', e);\r\n                const xOff = e.clientX - prePos[0];\r\n                const yOff = e.clientY - prePos[1];\r\n            //     console.log(xOff, yOff);\r\n            //     console.log(+div.style.top);\r\n            //     console.log(div.clientLeft, parseFloat(div.style.left));\r\n                div.style.top = parseFloat(div.style.top) + yOff +'px';\r\n                div.style.left = parseFloat(div.style.left) + xOff +'px';\r\n            //     console.log('drgggg?', e);\r\n\r\n                prePos[0] = e.clientX;\r\n                prePos[1] = e.clientY;\r\n            }\r\n        }\r\n        // top.style.top = '100px';\r\n        // top.style.left = '100px';\r\n\r\n        div.appendChild(top);\r\n        \r\n        let btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Import'\r\n        btn.onclick = () => {\r\n            // this.HTMLView.app.importDummyData();\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Origin'\r\n        btn.onclick = () => {\r\n            this.HTMLView.app.apiCall(APP.NETWORK, 'addOrigin' , undefined);\r\n        };\r\n        div.appendChild(btn);\r\n\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Destin'\r\n        btn.onclick = () => {\r\n        //     console.log('nna');\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Destin'\r\n        btn.onclick = () => {\r\n        //     console.log('nna');\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        btn = document.createElement('button');\r\n        btn.style.height = '70px';\r\n        btn.style.width = '60px';\r\n        btn.style.zIndex = '13;'\r\n        btn.style.position = 'relative';\r\n        btn.textContent = 'Destin'\r\n        btn.onclick = () => {\r\n        //     console.log('nna');\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        // this.HTMLView.app.definition.app.divHost.appendChild(div);\r\n\r\n        \r\n        btn = document.createElement('button');\r\n        btn.style.top = '0px';\r\n        btn.style.left = '180px';\r\n        btn.style.height = '20px';\r\n        btn.style.width = '20px';\r\n        btn.style.zIndex = '13';\r\n        btn.style.position = 'absolute';\r\n        btn.style.padding = '0px';\r\n        btn.style.zIndex = '20';\r\n        // btn.style.background = '#ff0000';\r\n        // btn.style.color = '#ffffff';\r\n        btn.textContent = 'X'\r\n        btn.onclick = () => {\r\n            this.remove();\r\n        };\r\n        div.appendChild(btn);\r\n\r\n        this.div = div;\r\n    }\r\n}","import { NNAEngineV3 } from '..';\r\nimport { GraphView } from './GraphView';\r\nexport class HTMLView {\r\n    app: NNAEngineV3;\r\n    networkUI: GraphView | undefined = undefined;\r\n    constructor(app: NNAEngineV3) {\r\n        this.app = app;\r\n\r\n\r\n        // this.init();\r\n    //     console.log('NNAEngineV3 view');\r\n    }\r\n    public reset(){\r\n        this.removePanelNetwork();\r\n    }\r\n    public initPanelNetwork(){\r\n        if(!this.networkUI){\r\n            this.networkUI = new GraphView(this);\r\n        }\r\n    }\r\n    public removePanelNetwork(){\r\n        if(this.networkUI){\r\n            this.networkUI.remove();\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\n","import { NNAEngineV3 } from '..';\r\nimport { MOUSE_TYPE, MouseEventData, APP, NVector3 } from '../lib';\r\n\r\n// import { CPoint } from '../../../NJSEngine/DrawingEngine/Geometry/Point';\r\n\r\n// import { fetchJson } from '../IO';\r\nexport class Controller {\r\n    nnaEngine: NNAEngineV3;\r\n    inspection: boolean = true;\r\n    m: NVector3 = new NVector3(0, 0);\r\n\r\n    dataOrigins: undefined | any = undefined;\r\n    destinationOrigins: undefined | any = undefined;\r\n\r\n\r\n    constructor(app: NNAEngineV3) {\r\n        this.nnaEngine = app;\r\n    }\r\n    public async execution(app: APP, action: string, data: any) {\r\n        if (app === APP.NETWORK) {\r\n            // this.ACTIVATED_APP = APP.NNA; \r\n\r\n            if (action === 'initPanel'){ \r\n                this.nnaEngine.view.initPanelNetwork();\r\n            }\r\n            if (action === 'addOrigin'){ \r\n                this.dataOrigins = data;\r\n                // const vs = this.nnaEngine.definition.drawingEngine.apiCall('getSelectedCPoint');\r\n                // console.log(vs);\r\n                this.nnaEngine.core.graphSystem.initByCPoint(data);\r\n                // this.nnaEngine.core.graphSystem.graphCore.updatePropagation(vs, [] );\r\n                // this.view.initPanelNetwork();\r\n            }\r\n            if (action === 'addOrigins'){ \r\n                this.dataOrigins = data;\r\n                // const vs = this.nnaEngine.definition.drawingEngine.apiCall('getSelectedCPoint');\r\n            //     console.log('addOrigins');\r\n                if (this.dataOrigins){\r\n                    this.nnaEngine.core.graphSystem.initByCPoints(this.dataOrigins);\r\n                }\r\n                // this.nnaEngine.core.graphSystem.graphCore.updatePropagation(vs, [] );\r\n                // this.view.initPanelNetwork();\r\n            }\r\n            if (action === 'addDestinations'){ \r\n                this.destinationOrigins = data;\r\n                // const vs = this.nnaEngine.definition.drawingEngine.apiCall('getSelectedCPoint');\r\n            //     console.log('addDestinations', this.destinationOrigins);\r\n                if (this.destinationOrigins){\r\n                    this.nnaEngine.core.graphSystem.initByCPointsBackpro(this.destinationOrigins);\r\n                }\r\n                // this.nnaEngine.core.graphSystem.graphCore.updatePropagation(vs, [] );\r\n                // this.view.initPanelNetwork();\r\n            }\r\n\r\n\r\n        }\r\n        if (app === APP.AGENCY) {\r\n            if (action === 'runAgent'){ \r\n                this.nnaEngine.core.graphSystem.initAgentVis();\r\n            }\r\n        }\r\n\r\n        if (app === APP.GA) {\r\n            if (action === 'pathOptimization'){ \r\n                if (data){\r\n                    this.nnaEngine.core.agencySystem.gaSystem.initByCPoint(data);\r\n                }\r\n            }\r\n        }\r\n\r\n        // ......................................\r\n\r\n\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        this.m.x = m.x;\r\n        this.m.y = m.y;\r\n        // console.log(m);\r\n        switch (m.type) {\r\n            case MOUSE_TYPE.DOWN:\r\n                // this.definition.MousePress(m);\r\n                break;\r\n            case MOUSE_TYPE.LEFT:\r\n                // console.log('click');\r\n                \r\n                this.nnaEngine.core.graphSystem.getPath(m.x, m.y);\r\n\r\n                // if(app === APP.GA) {\r\n                //     // console.log(this.nnaEngine.definition.drawingEngine.scene.geometryList.length);\r\n                //     // // this.app.core.agencySystem.gaSystem.mouseClick(m.x, m.y);\r\n                //     // this.nnaEngine.core.agencySystem.gaSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // } \r\n\r\n                // if(app === APP.NETWORK) {\r\n                // //     console.log('dddddddddddddddddd');\r\n                //     // this.nnaEngine.core.graphSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // }\r\n\r\n                // this.definition.MouseClick(m);\r\n                break;\r\n            case MOUSE_TYPE.MOVE:\r\n\r\n                // this.nnaEngine.core.graphSystem.getPath(m.x, m.y);\r\n                // if(app === APP.GA && this.nnaEngine.definition.drawingEngine.scene.capture) {\r\n                //     // console.log(this.app.definition.drawingEngine.scene.capture)\r\n                //     // console.log(this.app.definition.drawingEngine.scene.geometry.length);\r\n                //     // this.app.core.agencySystem.gaSystem.mouseClick(m.x, m.y);\r\n                //     this.nnaEngine.core.agencySystem.gaSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // } \r\n\r\n                // if(app === APP.NETWORK) {\r\n                //     // console.log('dddddddddddddddddd');\r\n                //     this.nnaEngine.core.graphSystem.initByCPoint(this.nnaEngine.definition.drawingEngine.scene.pointList);\r\n                // }\r\n                // // this.definition.MouseMove(m);\r\n                break;\r\n            case MOUSE_TYPE.DRAG:\r\n\r\n                if (this.dataOrigins) {\r\n                    this.nnaEngine.core.graphSystem.initByCPoints(this.dataOrigins);\r\n                //     console.log(this.dataOrigins);\r\n                //     console.log('drag...');\r\n                }\r\n\r\n\r\n                if (this.destinationOrigins){\r\n                    this.nnaEngine.core.graphSystem.initByCPointsBackpro(this.destinationOrigins);\r\n                }\r\n\r\n                if(this.nnaEngine.core.agencySystem.gaSystem.pointData) {\r\n                    this.nnaEngine.core.agencySystem.update();\r\n                }\r\n\r\n                break;    \r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n}","import { shuffle, NVector3 } from '../../../../../lib';\r\nexport class Node{\r\n    vec: NVector3;\r\n    id: number = -1;\r\n    constructor(x: number, y: number, long: number, lat: number){\r\n        this.vec = new NVector3(x, y, 0);\r\n        this.vec.long = long;\r\n        this.vec.lat = lat;\r\n    }\r\n    public distanceTo(node: Node){\r\n        return this.vec.distanceTo(node.vec);\r\n    }\r\n}\r\nexport class Path{\r\n    pathsOrigin: Node[] = [];\r\n    nodes: (Node | undefined)[] = [];\r\n    fitness = 0.0;\r\n    distance = 0;\r\n    constructor(pathsOrigin: Node[] ){\r\n        this.pathsOrigin = pathsOrigin;\r\n        this.nodes = [];\r\n        this.fitness = 0.0;\r\n        this.distance = 0;\r\n\r\n        for(let i = 0 ; i < this.pathsOrigin.length; ++i){\r\n            this.nodes.push(undefined);\r\n        }\r\n    }\r\n    public generateIndividual(){\r\n        for(let cityIndex = 0; cityIndex < this.pathsOrigin.length; ++cityIndex){\r\n            this.setCityInit(cityIndex, this.pathsOrigin[cityIndex]);\r\n        }\r\n        shuffle(this.nodes);\r\n    }\r\n    public setCityInit(i: number, city: Node){\r\n        this.nodes[i] = city;\r\n        this.fitness = 0.0;\r\n        this.distance = 0;\r\n    }\r\n    public getFitness(){\r\n        if (this.fitness === 0){\r\n            this.fitness = 1.0 / (this.getDistance());\r\n        }\r\n        return this.fitness;\r\n    }\r\n    public getDistance(){\r\n        if (this.distance === 0){\r\n            let tourDistance = 0;\r\n            for (let i = 0 ; i < this.nodes.length; ++i ){\r\n                let fromNode = this.nodes[i];\r\n\r\n                if(fromNode){\r\n                    let otherNode = undefined\r\n                    if (i === this.nodes.length -1 ){\r\n                        otherNode = this.nodes[0];\r\n                    } else{\r\n                        otherNode = this.nodes[i+1];\r\n                    }\r\n\r\n                    if(otherNode){\r\n                        tourDistance += fromNode.distanceTo(otherNode);\r\n                    }\r\n                }\r\n \r\n            }\r\n            this.distance = tourDistance;\r\n        }\r\n        return this.distance;\r\n    }\r\n    public containsCity(city: Node): boolean{\r\n        for(let i = 0 ; i < this.nodes.length; ++i) {\r\n            if(this.nodes[i] === city) { return true }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport class Population{\r\n    paths: (Path | undefined) [] = [];\r\n    constructor(nodes: Node[] , populationSize: number, initialise: boolean){\r\n        this.paths = [];\r\n        for(let i = 0; i <populationSize; ++i){\r\n            this.paths.push(undefined);\r\n        }\r\n        if (initialise){\r\n            for(let i = 0 ; i <populationSize; ++i){\r\n                let newTour = new Path(nodes);\r\n                newTour.generateIndividual();\r\n                this.paths[i] = newTour;\r\n            }\r\n        }\r\n    }\r\n    public getFittestPath(){\r\n        let fittest: undefined | Path = this.paths[0];\r\n        for(let i = 0; i < this.paths.length; ++i){\r\n            let other = this.paths[i];\r\n            if (fittest && other){\r\n                if (fittest.getFitness() <= other.getFitness()){\r\n                    fittest = other;\r\n                }\r\n            }\r\n        }\r\n        return fittest;\r\n    }\r\n}","// \"\"\"\r\n// This Python code is based on Java code by Lee Jacobson found in an article\r\n// entitled \"Applying a genetic algorithm to the travelling salesman problem\"\r\n// that can be found at: http://goo.gl/cJEY1\r\n// https://gist.github.com/turbofart/3428880\r\n// \"\"\"\r\nimport { Population, Node, Path } from './Core';\r\n\r\nexport class GeneticAlgorithm {\r\n    private nodes: Node[];\r\n    private mutationRate: number;\r\n    private nodeSize: number;\r\n    private elitism: boolean;\r\n    constructor (tourmanager: Node[], mutationRate=0.05, nodeSize=5, elitism=true){\r\n        this.nodes = tourmanager\r\n        this.mutationRate = mutationRate\r\n        this.nodeSize = nodeSize\r\n        this.elitism = elitism\r\n    }\r\n    public evolvePopulation(pop: Population){\r\n        const newPopulation = new Population(this.nodes, pop.paths.length, false)\r\n        let elitismOffset = 0\r\n        if (this.elitism){\r\n            const thePath = pop.getFittestPath();\r\n            if (thePath){\r\n                newPopulation.paths[0] = thePath;\r\n                elitismOffset = 1\r\n            }\r\n        }\r\n        for(let i = elitismOffset; i < newPopulation.paths.length; ++i){\r\n            let parent1 = this.tournamentSelection(pop)\r\n            let parent2 = this.tournamentSelection(pop);\r\n            if (parent1 && parent2){\r\n                let child = this.crossover(parent1, parent2);\r\n                newPopulation.paths[i] = child;\r\n            }\r\n        }\r\n        for(let i = elitismOffset; i < newPopulation.paths.length; ++i){\r\n            let path = newPopulation.paths[i];\r\n            if (path) {\r\n                this.mutate(path);\r\n            }\r\n        }\r\n        return newPopulation\r\n    }\r\n    private crossover(parent1: Path, parent2: Path){\r\n        let child = new Path(this.nodes);\r\n        \r\n        let startPos = Math.floor(Math.random() * parent1.nodes.length);\r\n        let endPos = Math.floor(Math.random() * parent1.nodes.length);\r\n        \r\n        for (let i = 0; i < child.nodes.length; ++i){\r\n            const place = parent1.nodes[i];\r\n            if (place){\r\n                if (startPos < endPos && i > startPos && i < endPos) {\r\n                    child.setCityInit(i, place);\r\n                } else if(startPos > endPos){\r\n                    if ((i < startPos && i > endPos) === false ){\r\n                        child.setCityInit(i, place);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < parent2.nodes.length; ++i){\r\n            const place = parent2.nodes[i];\r\n            if(place){\r\n                if (child.containsCity(place) === false ){\r\n                    for (let ii = 0; ii < child.nodes.length; ++ii){\r\n                        if (child.nodes[ii] === undefined){\r\n                            child.setCityInit(ii, place);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return child;\r\n    }\r\n    private mutate(path: Path){\r\n        for(let tourPos1 = 0; tourPos1 < path.nodes.length; ++tourPos1){\r\n            if (Math.random() < this.mutationRate){\r\n                let tourPos2 = Math.floor(path.nodes.length * Math.random());\r\n                \r\n                let city1 = path.nodes[tourPos1];\r\n                let city2 = path.nodes[tourPos2];\r\n                \r\n                if(city1 && city2){\r\n                    path.setCityInit(tourPos2, city1);\r\n                    path.setCityInit(tourPos1, city2);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    private tournamentSelection(pop: Population){\r\n        let populationNew = new Population(this.nodes, this.nodeSize, false)\r\n        for (let i = 0; i < this.nodeSize; ++i){\r\n            let randomId = Math.floor(Math.random() * pop.paths.length);\r\n            populationNew.paths[i] = pop.paths[randomId];\r\n        }\r\n        let fittest = populationNew.getFittestPath();\r\n        return fittest;\r\n    }\r\n}\r\n","import { Population, Path, Node } from './GeneticAlgorithm/Core';\r\nimport { GeneticAlgorithm } from './GeneticAlgorithm/GeneticAlgorithm';\r\nimport { random } from '../../../lib';\r\n// import { CPoint  } from '../../../../DrawingEngine/Geometry/Point';\r\nimport { AgencySystem } from '..';\r\nexport class GASystem{\r\n    agencySystem: AgencySystem;\r\n    cities: Node[];\r\n    placesAll: Node[];\r\n    ga: GeneticAlgorithm;\r\n    pop: Population;\r\n    pathFittest: Path | undefined = undefined;\r\n    timer = 0;\r\n    cost = Number.MAX_VALUE;\r\n    pos: number[][] = [];\r\n    // pointData: CPoint[] | undefined = undefined;\r\n    pointData: any | undefined = undefined;\r\n\r\n    random: () => number;\r\n    constructor(agencySystem: AgencySystem, seed: number = 0){\r\n        this.agencySystem = agencySystem;\r\n        this.random = random(seed);\r\n        this.pos = [];\r\n\r\n        // let n_cities = 5;\r\n\r\n        // for(let i = 0 ; i < n_cities; ++i ) {\r\n        //     let x = (this.random() * 700) + 50\r\n        //     let y = (this.random() * 700) + 50\r\n        //     this.posByMouse.push([x, y]);\r\n        // }\r\n\r\n        this.init();\r\n    }\r\n    public mouseClick(x: number, y: number){\r\n        // this.posByMouse.push([x, y]);\r\n        // this.init();\r\n    }\r\n    public init(){\r\n        let population_size = 5\r\n        let mutationRate= 0.1;\r\n        let tournamentSize = this.pos.length ; // 10\r\n\r\n        // # Setup cities and tour\r\n        this.placesAll = [];\r\n\r\n        for(let i = 0 ; i < this.pos.length; ++i ) {\r\n            // let pos = this.pos[i]\r\n            // const goePos = this.agencySystem.nnaEngine.app.definition.app.projection.ToMap(pos[0], pos[1]);\r\n            // const place = new Node(pos[0], pos[1], goePos[0], goePos[1] );\r\n            // place.id = this.placesAll.length;\r\n            // this.placesAll.push(place)\r\n        }\r\n\r\n        // # Initialize population\r\n        this.pop = new Population(this.placesAll, population_size, true)\r\n\r\n        this.pathFittest = this.pop.getFittestPath();\r\n        if (this.pathFittest){\r\n        //     console.log(\"Initial distance: \" + (this.pathFittest.getDistance()))\r\n        }\r\n\r\n        // # Evolve population\r\n        this.ga = new GeneticAlgorithm(this.placesAll, mutationRate, tournamentSize)\r\n    }\r\n    public initByCPoint(pointData: any | undefined) {\r\n        // public initByCPoint(pointData: CPoint[] | undefined) {\r\n        // console.log(pointData)\r\n\r\n        if (pointData !== undefined){\r\n            this.pointData = pointData;\r\n        }\r\n\r\n\r\n        if(this.pointData) { \r\n            let population_size = 5\r\n            let mutationRate= 0.1;\r\n            let tournamentSize = this.pointData.length ; // 10\r\n\r\n            // # Setup cities and tour\r\n            this.placesAll = [];\r\n\r\n            for(let i = 0 ; i < this.pointData.length; ++i ) {\r\n                let pos = this.pointData[i]\r\n                const goePos = this.agencySystem.nnaEngine.app.toMap(pos[0], pos[1]);\r\n                const place = new Node(pos[0], pos[1], goePos[0], goePos[1] );\r\n                place.vec = pos.v;\r\n                place.id = this.placesAll.length;\r\n                this.placesAll.push(place)\r\n            }\r\n\r\n            // # Initialize population\r\n            this.pop = new Population(this.placesAll, population_size, true)\r\n\r\n            this.pathFittest = this.pop.getFittestPath();\r\n            if (this.pathFittest){\r\n            //     console.log(\"Initial distance: \" + (this.pathFittest.getDistance()))\r\n            }\r\n\r\n            // # Evolve population\r\n            this.ga = new GeneticAlgorithm(this.placesAll, mutationRate, tournamentSize)\r\n        }\r\n    }\r\n    public optimize() {\r\n        this.pop = this.ga.evolvePopulation(this.pop)\r\n        this.pathFittest = this.pop.getFittestPath()\r\n        if(this.pathFittest) {\r\n            const result = this.pathFittest.getDistance();\r\n            if (result < this.cost ){\r\n            //     console.log('iter optimization' , this.timer);\r\n            //     console.log(\"Final distance: \", result)\r\n            //     console.log(\"Solution:\")\r\n            //     console.log(this.pathFittest)\r\n                this.cost = result;\r\n            }\r\n            this.timer++\r\n        }\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPan: boolean) {\r\n        this.optimize();\r\n\r\n        ctx.fillStyle = '#ff0000';\r\n        ctx.strokeStyle = '#ff0000';\r\n        ctx.lineWidth  = 1;\r\n\r\n        if (isPan) {\r\n            for(let i = 0 ; i < this.placesAll.length; ++i) {\r\n                // const geoPos = this.agencySystem.nnaEngine.app.definition.app.projection.ToScreen(this.placesAll[i].vec.long, this.placesAll[i].vec.lat);\r\n                // this.placesAll[i].vec.x = geoPos[0];\r\n                // this.placesAll[i].vec.y = geoPos[1];\r\n\r\n                // ctx.beginPath();\r\n                // const place =this.placesAll[i];\r\n                // ctx.arc(place.vec.x, place.vec.y, 10, 0, Math.PI * 2);\r\n                // ctx.closePath();\r\n                // ctx.fill();\r\n            }\r\n            \r\n        }\r\n\r\n        if (this.pathFittest) {\r\n            for(let i = 0 ; i < this.pathFittest.nodes.length -1; i++) {\r\n                let p0 = this.pathFittest.nodes[i];\r\n                let p1 = this.pathFittest.nodes[i+1];\r\n                if (p0 && p1) {\r\n\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(p0.vec.x, p0.vec.y);\r\n                    ctx.lineTo(p1.vec.x, p1.vec.y);\r\n                    ctx.closePath();\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        for(let i = 0 ; i < this.placesAll.length; ++i) {\r\n            ctx.beginPath();\r\n            const place =this.placesAll[i];\r\n            ctx.arc(place.vec.x, place.vec.y, 10, 0, Math.PI * 2);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        // console.log('rnding...');\r\n\r\n    }\r\n}\r\n","import { Core } from '../Core';\r\nimport {GASystem } from './GASystem/GASystem';\r\nexport class AgencySystem {\r\n\r\n    nnaEngine: Core\r\n\r\n    gaSystem: GASystem;\r\n    constructor(nnaEngine: Core) {\r\n        this.nnaEngine = nnaEngine;\r\n\r\n        this.gaSystem = new GASystem(this);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.gaSystem.render(ctx, isPanning);\r\n    }\r\n    public mouseClick(x: number, y: number){\r\n        this.gaSystem.mouseClick(x, y);\r\n    } \r\n    public update() {\r\n        this.gaSystem.initByCPoint(undefined);\r\n    }\r\n\r\n}","import { GraphSystem } from '..';\r\nexport class Analysis {\r\n    gs: GraphSystem;\r\n    constructor(gs: GraphSystem) {\r\n        this.gs = gs;\r\n\r\n    }\r\n}","import { NVector3, NLine } from '../../../../lib';\nimport { Edge, Node } from '.'\nimport { Tree } from '../Tree/Tree';\nimport { GraphCore } from '..';\n\nexport class GraphData {\n    public nodes: Node[] = [];\n    public edges: Edge[] = [];\n    public minPt: NVector3 = new NVector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    public maxPt: NVector3 = new NVector3(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\n}\n\n\nexport class Graph {\n    public graphCore: GraphCore\n    public nodes: Node[] = [];\n    public edges: Edge[] = [];\n    public minPt: NVector3 = new NVector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    public maxPt: NVector3 = new NVector3(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE);\n\n\n    public nodeOrigin: Node;\n\n    public constructor(graphCore: GraphCore) {\n        this.graphCore = graphCore;\n    }\n    public initGraph(lns: NLine[]) {\n        this.nodes = [];\n        this.edges = [];\n        this.AddEdgeByLines(lns);\n        return true;\n    }\n    public AddEdgeByLines(lns: NLine[]) {\n        let nodes: Node[] = [];\n        for (let i = 0; i < lns.length; ++i) {\n            let p0: NVector3 = lns[i].p0;\n            let p1: NVector3 = lns[i].p1;\n\n            // bounding box\n            if (this.minPt.long > p0.long) { this.minPt.long = p0.long; }\n            if (this.minPt.lat > p0.lat) { this.minPt.lat = p0.lat; }\n            if (this.minPt.elevation > p0.elevation) { this.minPt.elevation = p0.elevation; }\n            if (this.maxPt.long < p0.long) { this.maxPt.long = p0.long; }\n            if (this.maxPt.lat < p0.lat) { this.maxPt.lat = p0.lat; }\n            if (this.maxPt.elevation < p0.elevation) { this.maxPt.elevation = p0.elevation; }\n\n            if (this.minPt.long > p1.long) { this.minPt.long = p1.long; }\n            if (this.minPt.lat > p1.lat) { this.minPt.lat = p1.lat; }\n            if (this.minPt.elevation > p1.elevation) { this.minPt.elevation = p1.elevation; }\n            if (this.maxPt.long < p1.long) { this.maxPt.long = p1.long; }\n            if (this.maxPt.lat < p1.lat) { this.maxPt.lat = p1.lat; }\n            if (this.maxPt.elevation < p1.elevation) { this.maxPt.elevation = p1.elevation; }\n\n            nodes.push(this.AddNode(p0));\n            nodes.push(this.AddNode(p1));\n        }\n\n        // let svec = this.graphCore.gs.nnaEngine.app.definition.app.projection.ToScreen(this.minPt.long, this.minPt.lat);\n        // this.minPt.x = svec[0];\n        // this.minPt.y = svec[1];\n        // svec = this.graphCore.gs.nnaEngine.app.definition.app.projection.ToScreen(this.maxPt.long, this.maxPt.lat);\n        // this.maxPt.x = svec[0];\n        // this.maxPt.y = svec[1];\n\n        for (let i = 0; i < nodes.length; i += 2) {\n            this.AddEdge(nodes[i], nodes[i + 1]);\n        }\n    }\n    public AddEdge(n1: Node, n2: Node): Edge | undefined {\n        if (n1 === n2) return undefined;\n\n        const testedEdge = this.FindEdge(n1, n2);\n        if (testedEdge !== undefined) {\n            return testedEdge;\n        }\n\n        let edge = new Edge(n1, n2);\n        edge.id = this.edges.length;\n        this.edges.push(edge);\n        return edge;\n    }\n    public AddNode(p: NVector3): Node {\n        for (let i = 0; i < this.nodes.length; ++i) {\n            if (p.distanceTo(this.nodes[i].point) < 0.1) {\n                return this.nodes[i];\n            }\n        }\n        let node = new Node(p);\n        node.id = this.nodes.length;\n        this.nodes.push(node);\n        return node;\n    }\n\n    // ..............................................................\n\n    public FindEdge(n0: Node, n1: Node): Edge | undefined {\n        for (let i = 0; i < this.edges.length; ++i) {\n            if ((this.edges[i].n0 === n0 && this.edges[i].n1 === n1) || (this.edges[i].n0 === n1 && this.edges[i].n1 === n0)) {\n                return this.edges[i];\n            }\n        }\n        return undefined;\n    }\n    /*\n    public Node FindClosestNode(Point3d p) {\n        if (nodes.Count === 0) return null;\n        let index = -1;\n        double disMin = double.MaxValue;\n        for (let i = 0; i < this.nodes.length; ++i) {\n            double d = this.nodes[i].point.distanceTo(p);\n            if (d < disMin) {\n                index = i;\n                disMin = d;\n            }\n        }\n        return this.nodes[index];\n    }\n    */\n    public FindClosestNode(p: NVector3): Node | undefined {\n        if (this.nodes.length === 0) return undefined;\n        let index = -1;\n        let disMin = Number.MAX_VALUE;\n        for (let i = 0; i < this.nodes.length; ++i) {\n            let d = this.nodes[i].point.distanceTo(p);\n            if (d < disMin) {\n                index = i;\n                disMin = d;\n            }\n        }\n        return this.nodes[index];\n    }\n    public updatePropagation(originTree: Tree[], Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) {\n        for (let i = 0; i < this.nodes.length; ++i) {\n            this.nodes[i].networkDistance = -1;\n            this.nodes[i].euclideanDistance = -1;\n        }\n\n        for (let i = 0; i < originTree.length; ++i) {\n            let n: Node = this.nodes[originTree[i].nodeOrigin.id];\n            n.networkDistance = 0.0;\n            n.euclideanDistance = 0.0;\n            this.updatePropagationByNode(n, Optimizer, Beta);\n        }\n\n    }\n    public updatePropagationByNodes(origins: Node [], Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) { //, PixelMap pMap, transitionCostDelegate cost) {\n        // this.Optimizer = Optimizer;\n \n        // this.nodeOrigin = origin;\n\n    //     console.log(origins);\n \n        for(let i = 0; i < this.nodes.length; ++i) { this.nodes[i].reset(); }\n \n        for(let i = 0 ; i < origins.length; ++i) {\n            let origin = origins[i];\n            origin.networkDistance = 0.0;\n            origin.euclideanDistance = 0.0;\n            let queue: Node[] = [];\n            queue.push(origins[i]);\n            \n            for (let i = 0; i < 1000000; ++i) {\n                if (queue.length === 0) { break; }\n                let current: Node = queue[0];\n                let dis = current.point.distanceToGeo(origin.point);\n                if (current.euclideanDistance === -1 || dis < current.euclideanDistance) {\n                    current.euclideanDistance = current.point.distanceToGeo(origin.point);\n                }\n    \n                queue.shift();\n                for (let j = 0; j < current.nodes.length; ++j) {\n                    let np: Node = current.nodes[j];\n                    let newcost = Optimizer(current, np, Beta);\n                    let result = (current.networkDistance + newcost);\n                    let newtemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\n                    if (np.networkDistance === -1.0 || newtemp < np.networkDistance) {\n                        np.networkDistance = newtemp;\n                        queue.push(np);\n                    }\n                }\n            }\n        }\n     }\n    public updatePropagationByNode(origin: Node, Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) { //, PixelMap pMap, transitionCostDelegate cost) {\n       // this.Optimizer = Optimizer;\n\n       this.nodeOrigin = origin;\n\n       for(let i = 0; i < this.nodes.length; ++i) { this.nodes[i].reset(); }\n\n        let queue: Node[] = [];\n        queue.push(origin);\n        for (let i = 0; i < 1000000; ++i) {\n            if (queue.length === 0) { break; }\n            let current: Node = queue[0];\n            let dis = current.point.distanceToGeo(origin.point);\n            if (current.euclideanDistance === -1 || dis < current.euclideanDistance) {\n                current.euclideanDistance = current.point.distanceToGeo(origin.point);\n            }\n\n            queue.shift();\n            for (let j = 0; j < current.nodes.length; ++j) {\n                let np: Node = current.nodes[j];\n                let newcost = Optimizer(current, np, Beta);\n                let result = (current.networkDistance + newcost);\n                let newtemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\n                if (np.networkDistance === -1.0 || newtemp < np.networkDistance) {\n                    np.networkDistance = newtemp;\n                    queue.push(np);\n                }\n            }\n        }\n    }\n    public updateBackpropagation(vs: NVector3[]): Node[][] {\n        \n\n        let paths: Node[][] = [];\n        let i = 0; let j = 0; let k = 0;\n\n        for (i = 0; i < vs.length; ++i) {\n            let destination: Node = this.FindClosestNode(vs[i]) as Node;\n            // this.nodeDestinations[i] = destination;\n            let path: Node[] = [];\n            if (destination.networkDistance !== -1.0) {\n                path.push(this.nodes[destination.id]);\n                let current: Node = destination;\n                for (j = 0; j < 100000; ++j) {\n                    let smallest: Node = current;\n                    smallest.countVisit++;\n                    for (k = 0; k < current.nodes.length; ++k) {\n                        let np: Node = current.nodes[k];\n                        if (np.networkDistance < smallest.networkDistance) {\n                            smallest = np;\n                        }\n                    }\n                    if (smallest === current) {\n                        path.push(this.nodeOrigin); // start node\n                        // path[0].euclideanDistance = path[0].point.distanceTo(this.nodeOrigin.point);\n                        paths.push(path);\n                        break;\n                    }\n                    current = smallest;\n                    path.push(this.nodes[current.id]);\n\n                    // if (current === this.destination) { break; }\n                }\n            }\n\n        }\n        // this.paths = paths;\n        return paths;\n    }\n\n}","import { Node } from '.'\r\nimport { NVector3, CONNECTIVITY } from '../../../../lib';\r\nexport class Edge {\r\n\r\n    public id: number = -1;\r\n    public n0: Node;\r\n    public n1: Node;\r\n    public mp: NVector3;\r\n    public CONNECTIVITY: CONNECTIVITY;\r\n\r\n    constructor(n0: Node, n1: Node){\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n\r\n        this.n0.edges.push(this);\r\n        this.n1.edges.push(this);\r\n\r\n        n0.nodes.push(n1);\r\n        n1.nodes.push(n0);\r\n\r\n        this.mp = this.GetMidPoint();\r\n        this.CONNECTIVITY = CONNECTIVITY.CONNECTED;\r\n    }\r\n    public GetMidPoint(): NVector3 {\r\n        return NVector3.getMidVec(this.n0.point, this.n1.point);\r\n    }\r\n    public updateScreenPos( toScreen: (x: number, y: number) => number[] ) {\r\n        this.n0.updateScreenPos(toScreen);\r\n        this.n1.updateScreenPos(toScreen);\r\n    }\r\n}","import { NVector3 } from '../../../../lib';\r\nimport { Edge } from '.'\r\n\r\nexport class Node {\r\n    public id: number = -1;\r\n    public point: NVector3;\r\n    public edges: Edge[] = [];\r\n    public nodes: Node[] = [];\r\n\r\n    public networkDistance: number = -1;\r\n    public euclideanDistance: number = 0;\r\n\r\n    public countVisit: number = 0;\r\n\r\n    public countOrigin: number = 1;\r\n    public countDestination: number = 1;\r\n\r\n    public countVisitTemp: number = 0;\r\n\r\n    constructor(vec: NVector3) {\r\n        this.point = new NVector3(vec.x, vec.y, vec.z);\r\n        this.point.lat = vec.lat;\r\n        this.point.long = vec.long;\r\n    }\r\n    public reset(): void{\r\n        this.networkDistance = -1;\r\n        this.euclideanDistance = 0.0;\r\n        this.countVisit = 0;\r\n        this.countVisitTemp = 0;\r\n    }\r\n    public deepCopy(): Node {\r\n        let n = new Node(this.point);\r\n        n.id = this.id;\r\n        return n;\r\n    }\r\n    public updateScreenPos( toScreen: (x: number, y: number) => number[] ) {\r\n        const sv = toScreen(this.point.long, this.point.lat);\r\n        this.point.x = sv[0];\r\n        this.point.y = sv[1];\r\n    }\r\n}","import { GraphCore } from '..';\r\nimport { Node, Edge } from '../Graph';\r\nimport { NVector3, NPolyline } from '../../../../lib';\r\nexport class Tree {\r\n    public gc: GraphCore;\r\n\r\n    public Optimizer: (current: Node, np: Node, Beta: number) => number;\r\n    // public transitionCostDelegate Optimizer;\r\n    // public delegate double transitionCostDelegate(Node n0, Node n1, double Beta);\r\n\r\n    public edges: Edge[] = [];\r\n    public nodes: Node[] = [];\r\n\r\n    public nodeDestinations: Node[] = [];\r\n    public nodeOrigin: Node;\r\n    public pointOrigin: NVector3;\r\n\r\n    public polylines: NPolyline[] = [];\r\n\r\n    public paths: Node[][] = [];\r\n\r\n    constructor(gc: GraphCore, p: NVector3) {\r\n        this.gc = gc;\r\n        this.duplicateGraph();\r\n        this.updateOriginByPt(p);\r\n    }\r\n    public updateOriginByPt(p: NVector3) {\r\n        let n = this.gc.graph.FindClosestNode(p);\r\n        if(n){\r\n            this.nodeOrigin = this.nodes[n.id];\r\n            this.pointOrigin = new NVector3(p.x, p.y, p.z);\r\n        }\r\n\r\n    }\r\n    public updatePropagation(Optimizer: (current: Node, np: Node, Beta: number) => number, Beta: number) { //, PixelMap pMap, transitionCostDelegate cost) {\r\n        this.Optimizer = Optimizer;\r\n        \r\n        for (let i = 0; i < this.nodes.length; ++i) {\r\n            this.nodes[i].networkDistance = -1;\r\n        }\r\n\r\n        let queue: Node[] = [];\r\n        this.nodeOrigin.networkDistance = 0;\r\n        queue.push(this.nodeOrigin);\r\n        for (let i = 0; i < 1000000; ++i) {\r\n            if (queue.length === 0) { break; }\r\n            let current: Node = queue[0];\r\n            current.euclideanDistance = current.point.distanceTo(this.nodeOrigin.point);\r\n            queue.shift();\r\n            for (let j = 0; j < current.nodes.length; ++j) {\r\n                let np: Node = current.nodes[j];\r\n                let newcost = Optimizer(current, np, Beta);\r\n                let result = (current.networkDistance + newcost);\r\n                let newtemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\r\n                if (np.networkDistance === -1.0 || newtemp < np.networkDistance) {\r\n                    np.networkDistance = newtemp;\r\n                    queue.push(np);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public updateBackpropagation(desID: number[]): Node[][] {\r\n        this.nodeDestinations = [];\r\n\r\n        let paths: Node[][] = [];\r\n        let i = 0; let j = 0; let k = 0;\r\n        for (i = 0; i < desID.length; ++i) {\r\n            let destination: Node = this.nodes[desID[i]];\r\n            this.nodeDestinations[i] = destination;\r\n            let path: Node[] = [];\r\n            if (destination.networkDistance !== -1.0) {\r\n                path.push(this.nodes[destination.id]);\r\n                let current: Node = destination;\r\n                for (j = 0; j < 100000; ++j) {\r\n                    let smallest: Node = current;\r\n                    smallest.countVisit++;\r\n                    for (k = 0; k < current.nodes.length; ++k) {\r\n                        let np: Node = current.nodes[k];\r\n                        if (np.networkDistance < smallest.networkDistance) {\r\n                            smallest = np;\r\n                        }\r\n                    }\r\n                    if (smallest === current) {\r\n                        path.push(this.nodeOrigin); // start node\r\n                        path[0].euclideanDistance = path[0].point.distanceTo(this.nodeOrigin.point);\r\n                        paths.push(path);\r\n\r\n                        break;\r\n                    }\r\n                    current = smallest;\r\n                    path.push(this.nodes[current.id]);\r\n\r\n                    // if (current === this.destination) { break; }\r\n                }\r\n            }\r\n\r\n        }\r\n        this.paths = paths;\r\n        return paths;\r\n    }\r\n    public GetPathsPolylines(min: number, max: number): NPolyline[] {\r\n        let pls: NPolyline[] = [];\r\n        for (let i = 0; i < this.paths.length; ++i) {\r\n            let pl: NPolyline = new NPolyline();\r\n            for (let j = 0; j < this.paths[i].length; ++j) {\r\n                pl.push(this.paths[i][j].point);\r\n            }\r\n            if (min < this.paths[i][0].networkDistance && this.paths[i][0].networkDistance < max) {\r\n                pls.push(pl);\r\n            }\r\n        }\r\n        this.polylines = pls;\r\n        return this.polylines;\r\n    }\r\n\r\n    public duplicateGraph(): void {\r\n        let i = 0;\r\n        let id0 = -1;\r\n        let id1 = -1;\r\n\r\n        this.nodes = []; // new Node[this.gc.graph.nodes.Count];\r\n        this.edges = []; // new Edge[this.gc.graph.edges.Count];\r\n\r\n        for (i = 0; i < this.gc.graph.nodes.length; ++i) {\r\n            this.nodes.push(this.gc.graph.nodes[i].deepCopy());\r\n        }\r\n        for (i = 0; i < this.gc.graph.edges.length; ++i) {\r\n            id0 = this.gc.graph.edges[i].n0.id;\r\n            id1 = this.gc.graph.edges[i].n1.id;\r\n            let e: Edge = new Edge(this.nodes[id0], this.nodes[id1]);\r\n            e.id = this.gc.graph.edges[i].id;\r\n            this.edges.push(e); ;\r\n        }\r\n    }\r\n}","import { meterFromGeoGPSPos } from '../../../lib';\r\n\r\nimport { Node } from '../GraphCore/Graph/Node';\r\n\r\nexport const costFnDistanceGeo = (p0: Node, p1: Node, beta: number = 0.0002) => {\r\n    return meterFromGeoGPSPos(p1.point, p0.point);\r\n}\r\nexport const costFnDistance = (p0: Node, p1: Node, beta: number = 0.0002) => {\r\n    return p1.point.distanceTo(p0.point);\r\n}\r\nexport const decayNegative = (d: number, beta: number) => {\r\n    let result = getDecay(d, beta);\r\n    if (result > 0.999) {\r\n        result = 0.999;\r\n    }\r\n    return result;\r\n}\r\nexport const decayPositive = (d: number, beta: number) => {\r\n    let result = getDecay(d, beta);\r\n    result = 1 - result;\r\n    if (result > 0.999) {\r\n        result = 0.999;\r\n    }\r\n    return result;\r\n}\r\nexport const getDecay = (cost: number, b: number = 1.0) => { // 0.002 // 0.999\r\n    return Math.pow(1 - b, cost);\r\n}\r\nexport const getGravityFalloff = (x: number, strength: number, Beta: number) => {\r\n    return strength * Math.exp(-Beta * x * x);\r\n}","import { GraphSystem } from '..';\r\nimport { NVector3, NLine } from '../../../lib'\r\nimport { Graph } from './Graph';\r\nimport { Tree } from './Tree/Tree';\r\n\r\nimport { costFnDistanceGeo } from '../GraphUtility/GraphUtility';\r\n\r\nexport class GraphCore {\r\n\r\n\r\n    public gs: GraphSystem;\r\n    public trees: Tree[] = [];\r\n   // public List<int> idOrigin;\r\n    public destinations: NVector3[] = [];\r\n    public idDestination: number[] = [];\r\n    public graph: Graph;\r\n    constructor(gs: GraphSystem) {\r\n        this.gs = gs;\r\n        this.trees = [];\r\n        this.destinations = [];\r\n        this.idDestination = [];\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.graph = new Graph(this);\r\n        this.graph.initGraph(lns);\r\n    }\r\n    public setUnit(unit: string) {\r\n        \r\n    }\r\n    public computePath(origins: NVector3[], destinations: NVector3[], BETA: number = 0.002) {\r\n        this.trees = [];\r\n        let oWeight: number[] = [];\r\n        let dWeight: number[] = [];\r\n        this.computePathWeighted(origins, oWeight, destinations, dWeight, BETA);\r\n    }\r\n    public computePathWeighted(origins: NVector3[], oWeight: number[], destinations: NVector3[], dWeight: number[], BETA: number = 0.002) {\r\n        while (origins.length < oWeight.length) { oWeight.push(1); }\r\n        while (destinations.length < dWeight.length) { dWeight.push(1); }\r\n\r\n        this.updatePropagation(origins, oWeight);\r\n        this.updateBackpropagation(destinations, dWeight);\r\n        this.mergeAgents();\r\n    }\r\n    public updatePropagation(origins: NVector3[], oWeight: number[]) {\r\n\r\n        for (let i = 0; i < origins.length; ++i) {\r\n            let p = origins[i];\r\n\r\n            if (i === this.trees.length -1) {\r\n                if (this.trees[i].pointOrigin.distanceToGeo(p) < 0.1) {\r\n                    this.trees[i].updatePropagation(costFnDistanceGeo, 0.002);\r\n                }\r\n                else {\r\n                    this.trees[i].updateOriginByPt(p);\r\n                    this.trees[i].updatePropagation(costFnDistanceGeo, 0.002);\r\n                }\r\n            }\r\n            else {\r\n                let tree: Tree = new Tree(this, p);\r\n                tree.updatePropagation(costFnDistanceGeo, 0.002);\r\n                this.trees.push(tree);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n    public updateBackpropagation(destination: NVector3[], dWeight: number[], BETA: number = 0.002) {\r\n\r\n        for (let i = 0; i < destination.length; ++i) {\r\n            if (i === this.destinations.length - 1) {\r\n                if (destination[i].distanceToGeo(this.destinations[i]) < 0.1) {\r\n                    this.idDestination.push(this.idDestination[i]);\r\n                }\r\n                else {\r\n                    let n = this.graph.FindClosestNode(destination[i]);\r\n                    if (n){\r\n                        this.idDestination[i] = n.id;\r\n                        this.destinations[i] = destination[i];\r\n                    }\r\n \r\n                }\r\n            }\r\n            else {\r\n                let n = this.graph.FindClosestNode(destination[i]);\r\n                if (n){\r\n                    this.idDestination.push(n.id);\r\n                    this.destinations.push(destination[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.trees.length; ++i) {\r\n            let tree = this.trees[i];\r\n            tree.updateBackpropagation(this.idDestination);\r\n        }\r\n    }\r\n    public mergeAgents() {\r\n        this.graph.updatePropagation(this.trees, costFnDistanceGeo, 0.002);\r\n\r\n        for (let i = 0; i < this.trees.length; ++i) {\r\n            for (let j = 0; j < this.trees[i].nodes.length; ++j) {\r\n                this.graph.nodes[j].countVisit += this.trees[i].nodes[j].countVisit;\r\n                this.graph.nodes[j].countOrigin += this.trees[i].nodes[j].countOrigin;\r\n                this.graph.nodes[j].countDestination += this.trees[i].nodes[j].countDestination;\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","\r\nimport { getFalseColor, COLORBLENDING, NVector3, distanceToXY } from '../../../lib';\r\n\r\nimport { GraphSystem } from '..';\r\n\r\nimport { Node } from '../GraphCore/Graph/Node';\r\nimport { BoidsBehaviors } from '../../AgencySystem/BoidsBehaviors/BoidsBehaviors';\r\n\r\n\r\nclass Properties {\r\n    lineWidth = 0.5;\r\n    strokeStyle = 'rgba(0, 255, 0, 0.5)';\r\n}\r\n\r\nexport class RendererGraph {\r\n    gs: GraphSystem;\r\n    \r\n    BoidsBehaviors: BoidsBehaviors | undefined = undefined;\r\n\r\n    start: NVector3;\r\n    end: NVector3;\r\n\r\n    path: Node[][] = [];\r\n    selPath: Node[] | undefined = undefined;\r\n\r\n    time: number = 0.0;\r\n\r\n    properties: Properties = new Properties();\r\n\r\n    constructor(gs: GraphSystem) {\r\n        this.gs = gs;\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        \r\n        ctx.lineWidth = this.properties.lineWidth;\r\n        ctx.strokeStyle = this.properties.strokeStyle;\r\n\r\n        // console.log(this.gs.graphCore.graph.edges.length);\r\n        if(this.gs.graphCore.graph?.edges){\r\n            for (let i = 0; i < this.gs.graphCore.graph.edges.length; ++i) {\r\n                const edge = this.gs.graphCore.graph.edges[i];\r\n\r\n                if(isPanning) {\r\n                    edge.updateScreenPos(this.gs.nnaEngine.app.toScreen);\r\n            \r\n                } \r\n                // else {\r\n                    // console.log(edge.n0.networkDistance);\r\n                    ctx.beginPath();\r\n                    const cols = getFalseColor(edge.n0.networkDistance * 0.001);\r\n                    ctx.strokeStyle = `rgba(${cols[0]}, ${cols[1]}, ${cols[2]}, 1.0) `\r\n                    ctx.moveTo(edge.n0.point.x, edge.n0.point.y);\r\n                    ctx.lineTo(edge.n1.point.x, edge.n1.point.y);\r\n                    ctx.stroke();\r\n\r\n                    const dis = edge.n0.point.distanceToGeo(edge.n1.point); // * 0.000621371;\r\n\r\n                    if( !isPanning && this.gs.nnaEngine.app.controller.inspection){\r\n                        ctx.font = \"10px Arial\";\r\n                        ctx.fillStyle = '#000000';\r\n                        ctx.fillText( `${dis.toFixed(2)}`, edge.n0.point.x + (edge.n1.point.x - edge.n0.point.x) * 0.5, edge.n0.point.y + (edge.n1.point.y - edge.n0.point.y) * 0.5);\r\n                        // ctx.fillText( `${Math.round(edge.n0.networkDistance)}`, edge.n0.point.x + (edge.n1.point.x - edge.n0.point.x) * 0.5, edge.n0.point.y + (edge.n1.point.y - edge.n0.point.y) * 0.5  )\r\n                        // ctx.fillText(`${Math.round(edge.n0.networkDistance)}`, edge.n1.point.x, edge.n1.point.y  )\r\n                    }\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        ctx.fillStyle = \"#ffffff\";\r\n        // console.log(this.start.x, this.start.y);\r\n        if(this.start) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.start.x, this.start.y, 5, 0, Math.PI * 2.0);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n        if(this.end) {\r\n            ctx.beginPath();\r\n            ctx.arc(this.end.x, this.end.y, 15, 0, Math.PI * 2.0);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        }\r\n\r\n        let selPathId = -1;\r\n        let dis = Number.MAX_SAFE_INTEGER;\r\n        const mx = this.gs.nnaEngine.app.controller.m.x;\r\n        const my = this.gs.nnaEngine.app.controller.m.y;\r\n\r\n        ctx.globalCompositeOperation = COLORBLENDING.COLOR_DODGE;\r\n        for(let j = 0 ; j < this.path.length; ++j) {\r\n            ctx.strokeStyle = 'rgba(255, 255, 10, 1)'\r\n            ctx.lineWidth = 2.4;\r\n            ctx.setLineDash([5, 4]);\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.path[j][0].point.x, this.path[j][0].point.y);\r\n            let theDis = distanceToXY(this.path[j][0].point.x, this.path[j][0].point.y, mx, my)\r\n            if(theDis < dis) { dis = theDis; selPathId = j; }\r\n            for(let i = 1 ; i < this.path[j].length; ++i) {\r\n\r\n                if(this.path[j][i]){\r\n                    ctx.lineTo(this.path[j][i].point.x, this.path[j][i].point.y);\r\n                    theDis = distanceToXY(this.path[j][i].point.x, this.path[j][i].point.y, mx, my)\r\n                    if(theDis < dis) { dis = theDis; selPathId = j; }\r\n                }\r\n            }\r\n\r\n            \r\n            // ctx.closePath();\r\n            ctx.stroke();\r\n            ctx.lineDashOffset = this.time * -5;\r\n            ctx.setLineDash([]);\r\n        }\r\n\r\n        if(this.path.length > 0 && dis < 10) {\r\n            this.selPath = this.path[selPathId];\r\n            ctx.beginPath();\r\n            ctx.moveTo(this.selPath[0].point.x, this.selPath[0].point.y);\r\n            for(let i = 1 ; i < this.selPath.length; ++i) {\r\n                if(this.selPath[i]){\r\n                    ctx.lineTo(this.selPath[i].point.x, this.selPath[i].point.y);\r\n                }\r\n            }\r\n            ctx.lineWidth = 4.4;\r\n            ctx.stroke();\r\n            ctx.lineDashOffset = this.time * -5;\r\n            ctx.setLineDash([]);\r\n        } else {\r\n            this.selPath = undefined;\r\n        }\r\n\r\n        ctx.globalCompositeOperation = COLORBLENDING.SOURCE_OVER;\r\n        // console.log(this.gs.graphCore.trees)\r\n\r\n        this.time+=0.1;\r\n\r\n\r\n        if(this.BoidsBehaviors) {\r\n            this.BoidsBehaviors.Update();\r\n            this.BoidsBehaviors.Render(ctx);\r\n        }\r\n    }\r\n    public getPath(x: number, y: number) {\r\n        if(this.selPath) {\r\n        //     console.log('detecting...', this.selPath);\r\n        }\r\n    }\r\n}","import { NVector3 } from '../../../lib';\nexport class BoidsPath {\n    r: number = 5;\n    nodes: NVector3[];\n    constructor(r: number) {\n        this.nodes = [];\n        this.r = r;\n    }\n    public AddNode(node: NVector3): void {\n        this.nodes.push(node);\n    }\n    public GetNodes(): NVector3[] {\n        let p: NVector3[] = [];\n        for (let i = 0; i < this.nodes.length; ++i) {\n            p.push(new NVector3(this.nodes[i].x, this.nodes[i].y, 0));\n            // p.push(this.nodes[i]);\n        }\n        return p;\n    }\n}","import { NVector3, remap } from '../../../lib';\nimport { BoidsPath } from './BoidsPath';\nexport class Boid {\n    public static MAX_VELOCITY: number = 5;\n    public static MAX_FORCE: number = 3;\n\n    // Collision avoidance\n    public static MAX_AVOID_AHEAD: number = 50;\n    public static AVOID_FORCE: number = 600;\n\n    // Queuing\n    public static MAX_QUEUE_AHEAD: number = 30;\n    public static MAX_QUEUE_RADIUS: number = 30;\n\n    // Separation\n    public static MAX_SEPARATION: number = 2.0;\n    public static SEPARATION_RADIUS: number = 30;\n\n    public MAX_FORCE: number;\n    public position: NVector3;\n    public velocity: NVector3;\n    public maxVelocity: number;\n    public desired: NVector3;\n    public steering: NVector3;\n    public mass: number;\n    public boidsPath: BoidsPath;\n    public currentNode: number;\n    public pathDir: number;\n    public rotation: number;\n    public vec: NVector3;\n    public preVec: NVector3[];\n\n    public avoidance: NVector3;\n    public ahead: NVector3;\n    public alpha: number;\n\n    isOriented: boolean;\n    activeBase64ID: string = ' ';\n    angle: number;\n    constructor(posX: number, posY: number, totalMass: number) {\n        // Boid.MAX_FORCE = Boid.MAX_VELOCITY * 3;\n        Boid.MAX_FORCE = Boid.MAX_VELOCITY; // * Math.random() * 2;\n        this.MAX_FORCE = Boid.MAX_FORCE;\n        this.position = new NVector3(posX, posY);\n        this.velocity = new NVector3(-1, -2);\n        this.desired = new NVector3(0, 0);\n        this.steering = new NVector3(0, 0);\n        this.vec = new NVector3(0, 0);\n        this.rotation = 0;\n        this.mass = totalMass;\n        // this.path = undefined;\n        this.currentNode = 0;\n        this.pathDir = 1;\n        this.angle = 0;\n        this.isOriented = false;\n\n        this.avoidance = new NVector3(0, 0);\n\n        this.maxVelocity = this.MAX_FORCE * (0.8 + Math.random() * 0.6);\n\n        this.Truncate(this.velocity, this.maxVelocity);\n        this.preVec = [];\n        // x = position.x;\n        // y = position.y;\n\n        // graphics.lineStyle(2, 0xffaabb);\n        // graphics.beginFill(0xFF0000);\n        // graphics.moveTo(0, 0);\n        // graphics.lineTo(0, -20);\n        // graphics.lineTo(10, 20);\n        // graphics.lineTo(-10, 20);\n        // graphics.lineTo(0, -20);\n        // graphics.endFill();\n\n        // graphics.moveTo(0, 0);\n        // this.activeBase64ID = '';\n    }\n    // GetNeighborAhead(): Boid {\n    // let ret: Boid | undefined = undefined;\n    // let qa: NVector3 = this.velocity.Clone();\n\n    // qa.Normalize();\n    // qa.Scale(Boid.MAX_QUEUE_AHEAD);\n\n    // this.ahead = this.position.Clone().Add(qa);\n\n    // for (let i = 0; i < Game.instance.boids.length; i++) {\n    //     let neighbour: Boid = Game.instance.boids[i];\n    //     let d: Number = this.Distance(ahead, neighbour.position);\n\n    //     if (neighbour != this && d <= Boid.MAX_QUEUE_RADIUS) {\n    //         ret = neighbour;\n    //         break;\n    //     }\n    // }\n\n    // return ret;\n    // }\n\n    // Queue(): NVector3 {\n    //     let v: NVector3 = this.velocity.Clone();\n    //     let brake: NVector3 = new NVector3(0, 0);\n    //     let neighbour: Boid = this.GetNeighborAhead();\n\n    //     if (neighbour != null) {\n    //         brake.x = -this.steering.x * 0.8;\n    //         brake.y = -this.steering.y * 0.8;\n\n    //         v.Scale(-1);\n    //         brake = brake.Add(v);\n    //         brake = brake.Add(this.Separation());\n\n    //         if (this.Distance(this.position, neighbour.position) <= Boid.MAX_QUEUE_RADIUS) {\n    //             this.velocity.Scale(0.3);\n    //         }\n    //     }\n\n    //     // Used to render the brake force vector on the screen\n    //     braking = brake;\n\n    //     return brake;\n    // }\n\n    // // Link: http://gamedev.tutsplus.com/tutorials/implementation/the-three-simple-rules-of-flocking-behaviors-alignment-cohesion-and-separation/\n    // separation(): NVector3 {\n    //     let force: NVector3 = new NVector3();\n    //     let neighborCount: int = 0;\n\n    //     for (let i: int = 0; i < Game.instance.boids.length; i++) {\n    //         let b: Boid = Game.instance.boids[i];\n\n    //         if (b != this && distance(b, this) <= SEPARATION_RADIUS) {\n    //             force.x += b.position.x - this.position.x;\n    //             force.y += b.position.y - this.position.y;\n    //             neighborCount++;\n    //         }\n    //     }\n\n    //     if (neighborCount != 0) {\n    //         force.x /= neighborCount;\n    //         force.y /= neighborCount;\n\n    //         force.scaleBy(-1);\n    //     }\n\n    //     force.normalize();\n    //     force.scaleBy(MAX_SEPARATION);\n\n    //     return force;\n    // }\n    public CollisionAvoidance(): NVector3 {\n        let tv: NVector3 = this.velocity.Clone();\n        tv.normalize();\n        tv.scale(Boid.MAX_AVOID_AHEAD * this.velocity.Length() / this.maxVelocity);\n\n        this.ahead = this.position.Clone().Add(tv);\n\n        let mostThreatening = undefined; // Obstacle\n\n        // for (let i = 0; i < Game.instance.obstacles.length; i++) {\n        //     // let obstacle: Obstacle = Game.instance.obstacles[i];\n        //     // let collision: Boolean = obstacle is Circle ?lineIntersecsCircle(this.position, this.ahead, obstacle as Circle) : lineIntersecsRectangle(this.position, this.ahead, obstacle as Rectangle);\n\n        //     if (collision && (mostThreatening == null || this.Distance(this.position, obstacle) < this.Distance(this.position, mostThreatening))) {\n        //         mostThreatening = obstacle;\n        //     }\n        // }\n\n        if (mostThreatening !== undefined) {\n            this.alpha = 0.4; // make the boid a little bit transparent to indicate it is colliding\n\n            // this.avoidance.x = this.ahead.x - mostThreatening.center.x;\n            // this.avoidance.y = this.ahead.y - mostThreatening.center.y;\n\n            this.avoidance.normalize();\n            this.avoidance.scale(Boid.AVOID_FORCE);\n        } else {\n            this.alpha = 1; // make the boid opaque to indicate there is no collision.\n            this.avoidance.scale(0); // nullify the this.avoidance force\n        }\n\n        return this.avoidance;\n    }\n    public Distance(a: NVector3, b: NVector3): number {\n        return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n    }\n    public Truncate(v: NVector3, max: number): void {\n        let i: number = max / v.Length();\n        i = i < 1.0 ? i : 1.0;\n        v.scale(i);\n    }\n    public GetAngle(vector: NVector3): number {\n        return Math.atan2(vector.y, vector.x);\n    }\n    public Update(): void {\n        // steering = Seek(Flock.mouse);\n        this.steering = this.PathFollowing();\n\n        if (true) {\n            // let width = 500\n            // let doorway: NVector3 = new NVector3(width / 2, -100);\n\n            // steering = seek(doorway);\n            this.steering = this.steering.Add(this.CollisionAvoidance());\n            // this.steering = this.steering.Add(this.Queue());\n        }\n\n        this.Truncate(this.steering, this.MAX_FORCE);\n        this.steering.scale(1 / this.mass);\n\n        this.velocity = this.velocity.Add(this.steering);\n        this.Truncate(this.velocity, this.maxVelocity);\n\n        this.position = this.position.Add(this.velocity);\n\n        if (this.isOriented) {\n            let v = new NVector3(this.velocity.x, this.velocity.y);\n            // let v = new NVector3(this.velocity.x - this.vec.x, this.velocity.y - this.vec.y).Normalize();\n            this.rotation = v.GetAngle();\n        }\n\n        this.vec = new NVector3(this.position.x, this.position.y);\n        this.AddVecHistory();\n    }\n    public AddVecHistory() {\n        this.preVec.push(new NVector3(this.vec.x, this.vec.y));\n        if (this.preVec.length > 20) { this.preVec.shift(); }\n    }\n    public Render(ctx: CanvasRenderingContext2D) {\n        if (true) {\n            // this.DrawForces(ctx);\n            this.DrawTail(ctx);\n        }\n\n        if (this.activeBase64ID !== ' ') {\n            ctx.globalCompositeOperation = 'source-over';\n            let img = new Image();\n            img.src = this.activeBase64ID;\n            ctx.save();\n            ctx.globalAlpha = 0.85;\n            ctx.translate(this.vec.x, this.vec.y);\n            ctx.rotate(this.rotation);\n            ctx.drawImage(img, -img.width / 2, -img.width / 2);\n            ctx.restore();\n            ctx.globalCompositeOperation = 'lighter';\n        } else {\n            ctx.beginPath();\n            ctx.fillStyle = 'rgba(0,255,0,0.7)';\n            ctx.arc(this.vec.x, this.vec.y, 5, 0, 3.14 * 2);\n        }\n        ctx.closePath();\n        ctx.fill();\n        // this.DrawShape(ctx);\n\n    }\n    DrawTail(ctx: CanvasRenderingContext2D) {\n        let i = this.preVec.length;\n        while (i--) {\n            ctx.beginPath();\n            ctx.fillStyle = `rgba(0,255,0,${remap(i, 0.0, this.preVec.length, 0.01, 0.175)})`;\n            ctx.arc(this.preVec[i].x, this.preVec[i].y, remap(i, 0.0, this.preVec.length, 0.1, 10), 0, 3.14 * 2);\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n    public DrawShape(ctx: CanvasRenderingContext2D) {\n        ctx.fillStyle = '#FF0000';\n\n        ctx.lineWidth = 0.1;\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, -20);\n        ctx.lineTo(10, 20);\n        ctx.lineTo(-10, 20);\n        ctx.lineTo(0, -20);\n        ctx.closePath();\n\n        ctx.moveTo(0, 0);\n    }\n    public DrawForces(ctx: CanvasRenderingContext2D): void {\n        let velocity: NVector3 = this.velocity.Clone();\n        let steering: NVector3 = this.steering.Clone();\n        let desired: NVector3 = this.desired.Clone();\n\n        velocity.normalize();\n        steering.normalize();\n        desired.normalize();\n\n        // Force vectors\n        // if (!BoidsBehaviors.showForces) {\n        this.DrawForceVector(ctx, velocity, '#00FF00');\n        this.DrawForceVector(ctx, desired, '#0000FF');\n        // }\n    }\n    public DrawForceVector(ctx: CanvasRenderingContext2D, force: NVector3, color: string, scale: number = 100): void {\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(this.vec.x, this.vec.y);\n        ctx.lineTo(this.vec.x + force.x * scale, this.vec.y + force.y * scale);\n        ctx.closePath();\n        ctx.stroke();\n    }\n    private Seek(target: NVector3): NVector3 {\n        let force: NVector3;\n\n        this.desired = target.Sub(this.position);\n        this.desired.normalize();\n        this.desired.scale(this.maxVelocity);\n\n        force = this.desired.Sub(this.velocity);\n\n        return force;\n    }\n    private PathFollowing(): NVector3 {\n        let target: NVector3 | undefined = undefined;\n\n        let nodes: NVector3[] = this.boidsPath.GetNodes();\n\n        target = nodes[this.currentNode];\n\n        if (this.Distance(this.position, target) <= this.boidsPath.r) {\n            this.currentNode += this.pathDir;\n\n            if (this.currentNode >= nodes.length || this.currentNode < 0) {\n                this.pathDir *= -1;\n                this.currentNode += this.pathDir;\n            }\n        }\n        return target !== undefined ? this.Seek(target) : new NVector3(0, 0, 0);\n    }\n}","import { NVector3, getRandomArbitrary } from '../../../lib';\nimport { BoidsPath } from './BoidsPath';\nimport { Boid } from './Boid';\n\nimport { Node } from '../../GraphSystem/GraphCore/Graph/Node';\n\n// import { AppDrawing } from '../../AppDrawing/AppDrawing';\n\n// http://www.red3d.com/cwr/steer/\n\n// https://Flockdevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-path-following--Flockdev-8769\n// https://Flockdevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-leader-following--Flockdev-10810\n// https://Flockdevelopment.tutsplus.com/tutorials/understanding-steering-behaviors-queue--Flockdev-14365\n\n// https://gamedevelopment.tutsplus.com/series/understanding-steering-behaviors--gamedev-12732\nexport class BoidsBehaviors {\n    public static mouse: NVector3 = new NVector3(100, 100, 0);\n    public static width: number = 400;\n    public static height: number = 400;\n    public static showForces: boolean = false;\n    public static instance: BoidsBehaviors;\n    public boids: Boid[] = [];\n    public boidsPath: BoidsPath;\n    // public forces: Sprite;\n    public t: number;\n    isOriented: boolean;\n    activeBase64ID: string;\n    constructor(width: number, height: number) {\n        BoidsBehaviors.instance = this;\n        BoidsBehaviors.width = width;\n        BoidsBehaviors.height = height;\n        this.isOriented = false;\n        this.t = 0.0;\n        // this.initPath(new BoidsPath(20));\n        // addEventListener(Event.ADDED_TO_STAGE, init);\n    }\n    public InitPathByAPolyline(boidsPath: BoidsPath, numBoid: number = 7) {\n        this.boidsPath = boidsPath;\n        this.InitBoid(numBoid);\n    }\n    public InitPathByNode(boidsPath: Node[], numBoid: number = 7) {\n    //     console.log(boidsPath)\n        this.boidsPath = new BoidsPath(10);\n\n        for(let i = 0 ; i < boidsPath.length; ++i) {\n            if(boidsPath[i]){\n                this.boidsPath.AddNode(boidsPath[i].point);\n            }\n        }\n        this.InitBoid(numBoid);\n    }\n    public InitPath(boidsPath: BoidsPath, numPath: number = 8, numBoid: number = 7) {\n        this.boidsPath = boidsPath;\n        this.Init(numPath, numBoid);\n    }\n    public Init(numPath: number, numBoid: number): void {\n        this.reset();\n        this.boidsPath.r = 30;\n\n        // Add path nodescircles\n        let maxPathNodes: number = numPath;\n        for (let i = 0; i < maxPathNodes; i++) {\n            let node: NVector3 = new NVector3(BoidsBehaviors.width * i / maxPathNodes + 50, BoidsBehaviors.height * Math.random() * 0.8 + 20, 0);\n            // let node: NVector3 = new NVector3(this.boidsPath.nodes[0].x, this.boidsPath.nodes[0].y);\n            this.boidsPath.AddNode(node);\n        }\n        this.InitBoid(numBoid);\n    }\n    public InitBoid(numBoid: number = 7) {\n        let boid: Boid;\n        for (let i = 0; i < numBoid; i++) {\n            boid = new Boid(BoidsBehaviors.width / 2 + Math.random() * 50, 20 * Math.random(), 20 + Math.random() * 20);\n            boid.activeBase64ID = this.activeBase64ID;\n            boid.boidsPath = this.boidsPath;\n            this.boids.push(boid);\n        }\n\n        // this.forces = new Sprite();\n\n        // addChild(forces);\n\n        // addChild(new Button(Boids.width - 80, Boids.height - 60, \"Reload\", Boids.instance.init));\n        // addChild(new Button(Boids.width - 130, Boids.height - 60, \" + \", IncreasePathRadius));\n        // addChild(new Button(Boids.width - 180, Boids.height - 60, \" - \", DecreasePathRadius));\n        // addChild(new Button(Boids.width - 260, Boids.height - 60, \"Forces\", ToggleShowForces));\n    }\n    public ShiftSpeed(min: number, max: number) {\n        for (let b of this.boids) {\n            b.maxVelocity = getRandomArbitrary(min, max);\n        }\n    }\n    public IncreasePathRadius(): void {\n        BoidsBehaviors.showForces = true;\n        this.boidsPath.r += 2;\n    }\n    public DecreasePathRadius(): void {\n        BoidsBehaviors.showForces = true;\n        this.boidsPath.r -= 2;\n    }\n    public ToggleShowForces(): void {\n        BoidsBehaviors.showForces = !BoidsBehaviors.showForces;\n    }\n    public ShiftRadius(v: number) {\n        this.boidsPath.r = v;\n    }\n    public ShiftForce(min: number, max: number) {\n        for (let b of this.boids) {\n            b.maxVelocity = getRandomArbitrary(min, max);\n        }\n    }\n    public ShiftOriented(v: boolean) {\n        for (let b of this.boids) {\n            b.isOriented = v;\n        }\n    }\n    public reset(): void {\n        // while (numChildren) {\n        //     removeChildAt(0);\n        // }\n        // boids.length = 0;\n        // path.getNodes().length = 0;\n        // showForces = false;\n\n        // stage.removeEventListener(MouseEvent.CLICK, ToggleShowForces);\n    }\n    public Update(): void {\n        for (let i = 0; i < this.boids.length; i++) { this.boids[i].Update(); }\n        if (this.t > 16) { this.t = 0; }\n        this.t += 0.5;  // AppDrawing.app.cCanvas.delta;\n    }\n    public Render(ctx: CanvasRenderingContext2D) {\n        ctx.globalCompositeOperation = 'lighter';\n        this.drawPath(ctx);\n        for (let i = 0; i < this.boids.length; i++) {\n            this.boids[i].Render(ctx);\n            // this.drawForces(ctx, this.boids[i]);\n        }\n        ctx.globalCompositeOperation = 'source-over';\n    }\n    public drawPath(ctx: CanvasRenderingContext2D): void {\n        let nodes: NVector3[] = this.boidsPath.GetNodes();\n        for (let i: number = 0; i < nodes.length; ++i) {\n            this.drawPathPoint(ctx, nodes[i], '#FF00CC');\n\n            if (BoidsBehaviors.showForces) {\n                this.drawCircle(ctx, nodes[i], 'gray', this.boidsPath.r);\n            }\n        }\n\n        ctx.beginPath();\n        ctx.lineWidth = 0.2;\n        ctx.strokeStyle = '#ffffff';\n        ctx.setLineDash([4, 4]);\n        ctx.lineDashOffset = -this.t;\n        ctx.moveTo(nodes[0].x, nodes[0].y);\n        for (let i = 1; i < nodes.length; ++i) { ctx.lineTo(nodes[i].x, nodes[i].y); }\n        // ctx.closePath();\n        ctx.stroke();\n        ctx.setLineDash([0, 0]);\n\n        ctx.beginPath();\n        ctx.lineWidth = 0.3;\n        ctx.strokeStyle = '#000000';\n        ctx.setLineDash([4, 8]);\n        ctx.lineDashOffset = -this.t;\n        ctx.moveTo(nodes[0].x, nodes[0].y);\n        for (let i = 1; i < nodes.length; ++i) { ctx.lineTo(nodes[i].x, nodes[i].y); }\n        // ctx.closePath();\n        ctx.stroke();\n        ctx.setLineDash([0, 0]);\n    }\n    public drawPathPoint(ctx: CanvasRenderingContext2D, force: NVector3, color: string): void {\n\n        ctx.fillStyle = 'rgba(255,0,0,0.6)';\n        ctx.beginPath();\n        ctx.arc(force.x, force.y, 2.5, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        // forces.graphics.lineStyle(1, 0x323232);\n        // forces.graphics.beginFill(0xFF5000);\n        // forces.graphics.drawCircle(force.x, force.y, 6);\n        // forces.graphics.endFill();\n    }\n    public drawCircle(ctx: CanvasRenderingContext2D, force: NVector3, color: string, radius: number): void {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(force.x, force.y, 2, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n\n        // forces.graphics.lineStyle(1, 0x323232);\n        // //forces.graphics.beginFill(0xFF5000);\n        // forces.graphics.drawCircle(force.x, force.y, radius);\n        // //forces.graphics.endFill();\n    }\n    public set IsOrient(v: boolean) {\n        this.isOriented = v;\n        this.ShiftOriented(v);\n    }\n    public get IsOrient() {\n        return this.isOriented;\n    }\n}","import { Core } from '../Core';\r\nimport { NVector3, NLine } from '../../lib';\r\nimport { Analysis } from './Analysis';\r\nimport { GraphCore } from './GraphCore';\r\nimport { RendererGraph } from './RendererGraph';\r\nimport { Node } from './GraphCore/Graph/Node';\r\n\r\n// import { CPoint } from '../../../DrawingEngine/Geometry/Point';\r\n\r\nimport { costFnDistanceGeo } from './GraphUtility/GraphUtility';\r\n\r\nimport { BoidsBehaviors } from '../AgencySystem/BoidsBehaviors/BoidsBehaviors';\r\n\r\nexport class GraphSystem {\r\n    nnaEngine: Core\r\n    analysis: Analysis;\r\n    graphCore: GraphCore;\r\n    renderGraph: RendererGraph;\r\n\r\n    constructor(nnaEngine: Core) {\r\n        this.nnaEngine = nnaEngine;\r\n        this.analysis = new Analysis(this);\r\n        this.graphCore = new GraphCore(this);\r\n        this.renderGraph = new RendererGraph(this)\r\n\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.graphCore.initGraph(lns);\r\n    }\r\n\r\n    public setUnit(unit: string) {\r\n        this.graphCore.setUnit(unit);\r\n    }\r\n    public computePath(origin: NVector3[], destination: NVector3[], BETA: number = 0.002) {\r\n        this.graphCore.computePath(origin, destination, BETA);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.renderGraph.render(ctx, isPanning);\r\n    }\r\n    public mouseClick(x: number, y: number) {\r\n        // console.log('ddd');\r\n        this.initTwoPoint();\r\n        // this.computePath([this.start], [this.end])\r\n        const n = this.graphCore.graph.FindClosestNode(this.renderGraph.start);\r\n        const cost = (p0: Node, p1: Node, beta: number = 0.0002): number => {\r\n            return p1.point.distanceTo(p0.point) * 0.5;\r\n        }\r\n        if (n){\r\n            this.graphCore.graph.updatePropagationByNode(n, cost, 0.02);\r\n        }\r\n\r\n    }\r\n    public getPath(x: number, y: number){\r\n        this.renderGraph.getPath(x,y);\r\n    }\r\n    public initByCPoints(cps: any){\r\n        // public initByCPoints(cps: CPoint[]){\r\n        const nodes: Node[] = [];\r\n        for(let i = 0 ; i < cps.length; ++i) {\r\n            const n = this.graphCore.graph.FindClosestNode(cps[i].v) as Node;\r\n            nodes.push(n);\r\n        }\r\n        this.graphCore.graph.updatePropagationByNodes(nodes, costFnDistanceGeo, 0.02);\r\n\r\n    }\r\n    public initByCPointsBackpro(cps: any){\r\n        // public initByCPointsBackpro(cps: CPoint[]){\r\n        const nodes: NVector3[] = [];\r\n        for(let i = 0 ; i < cps.length; ++i) {\r\n            // const n = this.graphCore.graph.FindClosestNode(cps[i].v) as Node;\r\n            nodes.push(cps[i].v);\r\n        }\r\n        const path = this.graphCore.graph.updateBackpropagation(nodes);\r\n    //     console.log(path);\r\n        this.renderGraph.path = path;\r\n    }\r\n    public initByCPoint(cps: any){\r\n        // public initByCPoint(cps: CPoint[]){\r\n        // console.log(cps.length);\r\n\r\n        if(cps.length > 0) {\r\n            const start = cps[0].v;\r\n            const ends: NVector3[] = [];\r\n    \r\n            for(let i = 1 ; i < cps.length; ++i) {\r\n                ends.push(cps[i].v);\r\n            }\r\n\r\n            // const vs = cps.shift() as CPoint;\r\n            // this.end = cps[cps.length -2].v\r\n            const n = this.graphCore.graph.FindClosestNode(start) as Node;\r\n            this.renderGraph.start = n.point; // cps[cps.length -1].v\r\n            // const cost = (p0: Node, p1: Node, beta: number = 0.0002): number => {\r\n            //     return p1.point.distanceTo(p0.point) * 0.5;\r\n            // }\r\n            if (n){\r\n                this.graphCore.graph.updatePropagationByNode(n, costFnDistanceGeo, 0.02);\r\n\r\n                // const vEnds: NVector3[] = []; \r\n                // for(let i = 0 ; i < cps.length; ++i) {\r\n                //     this.end = cps[i].v;\r\n                //     vEnds.push(cps[i].v);\r\n                // }\r\n                // console.log(vEnds);\r\n\r\n                const path = this.graphCore.graph.updateBackpropagation(ends);\r\n                // console.log(path);\r\n                this.renderGraph.path = path;\r\n                this.initAgentVis();\r\n\r\n            }\r\n        }\r\n    }\r\n    public initAgentVis(){\r\n        if(this.renderGraph.path[0] && this.renderGraph.BoidsBehaviors === undefined){\r\n            this.renderGraph.BoidsBehaviors = new BoidsBehaviors(500, 500);\r\n            this.renderGraph.BoidsBehaviors?.InitPathByNode(this.renderGraph.path[0], 10);\r\n        }\r\n    }\r\n    public initTwoPoint(){\r\n       \r\n        const width = (this.graphCore.graph.maxPt.x - this.graphCore.graph.minPt.x);\r\n        const height = (this.graphCore.graph.maxPt.y - this.graphCore.graph.minPt.y);\r\n\r\n        // console.log(width, height);\r\n        \r\n        let x = this.graphCore.graph.minPt.x + (width * Math.random());\r\n        let y = this.graphCore.graph.minPt.y+ (height * Math.random());\r\n\r\n        this.renderGraph.start = this.graphCore.graph.nodes[ Math.floor((this.graphCore.graph.nodes.length -1) * Math.random()) ].point;\r\n\r\n        x = this.graphCore.graph.minPt.x + (width * Math.random());\r\n        y = this.graphCore.graph.minPt.y+ (height * Math.random());\r\n        // this.end = new NVector3(x, y, 0);\r\n\r\n        this.renderGraph.end = this.graphCore.graph.nodes[ Math.floor((this.graphCore.graph.nodes.length -1) * Math.random()) ].point;\r\n\r\n    }\r\n\r\n}","import { Core } from '../Core';\r\nexport class VoxelSystem {\r\n    nnaEngine: Core\r\n    constructor(nnaEngine: Core) {\r\n        this.nnaEngine = nnaEngine;\r\n\r\n    }\r\n}","import { AgencySystem } from './AgencySystem';\r\nimport { GraphSystem } from './GraphSystem';\r\nimport { VoxelSystem } from './VoxelSystem';\r\nimport { NNAEngineV3 } from '..';\r\nimport { NVector3, NLine } from '../lib'\r\n\r\nexport class Core {\r\n    app: NNAEngineV3;\r\n    agencySystem: AgencySystem;\r\n    graphSystem: GraphSystem;\r\n    voxelSystem: VoxelSystem;\r\n\r\n    constructor(app: NNAEngineV3) {\r\n        this.app = app;\r\n        this.agencySystem = new AgencySystem(this);\r\n        this.graphSystem = new GraphSystem(this);\r\n        this.voxelSystem = new VoxelSystem(this);\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.graphSystem.initGraph(lns);\r\n    }\r\n\r\n    public setUnit(unit: string) {\r\n        this.graphSystem.setUnit(unit);\r\n    }\r\n    public computePath(origin: NVector3[], destination: NVector3[], BETA: number = 0.002) {\r\n        this.graphSystem.computePath(origin, destination, BETA);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        // console.log('working');\r\n        this.graphSystem.render(ctx, isPanning);\r\n        this.agencySystem.render(ctx, isPanning)\r\n\r\n               // if(this.sandbox.definition) {\r\n\r\n        //     for(let i = 0 ; i < this.renderer.length; ++i) {\r\n        //         this.renderer[i](ctx, this.isPanning);\r\n        //     }\r\n\r\n\r\n        //     this.sandbox.definition.render(ctx, this.isPanning);\r\n\r\n        //     if(this.sandbox.definition.controller.isInspectionMode) {\r\n                ctx.fillStyle = \"#ffffff\";\r\n                ctx.font = \"12px Arial\";\r\n\r\n                const geoPos = this.app.toMap(this.app.controller.m.x, this.app.controller.m.y);\r\n                ctx.fillText(`Lat: ${geoPos[0]}, Lon: ${geoPos[1]}, Zoom level: `, 150, 20 );\r\n                // ctx.fillText(`Lat: ${geoPos[0]}, Lon: ${geoPos[1]}, Zoom level: ${this.sandbox.mapView.zoom}`, this.sandbox.mapView.width * 0.5 - 150, 20 );\r\n                // ctx.fillText(`FPS: ${Math.floor(this.app.core.graphSystem.nnaEngine. .definition.nnaEngineV3.fps)}`, this.sandbox.mapView.width * 0.5 - 150, 40 );\r\n                // ctx.fillText(`Activated App: ${this.sandbox.definition.ACTIVATED_APP}`, this.sandbox.mapView.width * 0.5 - 150, 60 );\r\n        //     }\r\n        // }\r\n        \r\n    }\r\n}","import { NNAEngineV3 } from '..';\r\nexport class IO {\r\n    NNAEngineV3: NNAEngineV3;\r\n    constructor(NNAEngineV3: NNAEngineV3){\r\n        this.NNAEngineV3 = NNAEngineV3;\r\n    }\r\n    public async importCSV(path: string){ // http://localhost:8080/src/assets/data.txt\r\n\r\n    //     console.log('import');\r\n\r\n        // let file = 'torus.obj';\r\n        // return fetch(`${NJSLoader.path}/3dData/${file}`)\r\n        // return fetch(path, {mode: 'no-cors'})\r\n        return fetch(path)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // console.log(d);\r\n                // if (njslabSandboxStatic.app.appVisGL3D) {\r\n                //     njslabSandboxStatic.app.appVisGL3D.activeCommands.LoadOBJ(d);\r\n                // }\r\n                return d;\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n\r\n    }\r\n}\r\n","import { APP, MouseEventData, KeyboardEventData, NVector3, NLine, CSVData, getAllUrlParams } from './lib';\r\nimport { HTMLView } from './View/HTMLView';\r\nimport { Controller } from './Controller/Controller';\r\nimport { Core } from './Core/Core';\r\nimport { IO } from './IO';\r\n\r\nexport class NNAEngineV3 {\r\n\r\n    view: HTMLView;\r\n    core: Core;\r\n    io: IO;\r\n    controller: Controller;\r\n\r\n    data: CSVData;\r\n\r\n    lastCalledTime: number = Date.now();;\r\n    fps: number = 30;\r\n    delta: number = 1;\r\n\r\n    public toScreen(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n    public toMap(x: number, y: number){\r\n        return [x, y];\r\n    }\r\n\r\n    constructor() {\r\n        this.controller = new Controller(this);\r\n        this.view = new HTMLView(this);\r\n        this.core = new Core(this);\r\n        this.io = new IO(this);\r\n        const param = getAllUrlParams();\r\n        // console.log('=---')\r\n        // console.log(param);\r\n        // console.log('NNAEngineV3 is running...')\r\n\r\n\r\n\r\n        // const request = new Request('http://njslab.com/NJSLabEnv/NY_street_lat_long.csv');\r\n\r\n        // fetch(request, {mode: 'no-cors'}).then( (response) => {\r\n        //     // Convert to JSON\r\n        //     return response.text();\r\n        // }).then( (j) => {\r\n        //     // Yay, `j` is a JavaScript object\r\n        // //     console.log('jjjjjjjjjjjjjj', j)\r\n        //     // console.log(JSON.stringify(j));\r\n        // }).catch((error) => {\r\n        // //     console.log('Request failed', error)\r\n        // }).then((d: any) => {\r\n        // //     console.log('dddddddddddddddddddddddddd');\r\n        // //     console.log(d);\r\n        // }\r\n        // );\r\n\r\n    }\r\n    // https://cors-anywhere.herokuapp.com/http://njslab.com/NJSLabEnv/NY_street_lat_long.csv\r\n    public importDummyData(url: string = 'https://raw.githubusercontent.com/NamjuLee/data/master/NYC/NY_street_lat_long.csv'){\r\n    // public importDummyData(url: string = 'http://njslab.com/NJSLabEnv/NY_street_lat_long.csv'){\r\n        // this.io.importCSV(``).then( (d: any) => {\r\n        this.io.importCSV(url).then( (d: any) => {\r\n        //     console.log(d);\r\n            this.data = new CSVData();\r\n            this.data.ComputeCSV(d);\r\n            this.data.initLines((x: number, y: number) => this.toScreen(x, y));\r\n\r\n            this.core.graphSystem.initGraph(this.data.lineTest);\r\n        });\r\n    }\r\n    public updateProjection(projection: { toMap: (x: number, y: number) => number[] , toScreen: (x: number, y: number) => number[]} ){\r\n        this.toScreen = projection.toScreen;\r\n        this.toMap = projection.toMap;\r\n    }\r\n    public apiCall(app: APP, action: string, data: any | undefined) {\r\n        this.controller.execution(app, action, data);\r\n    }\r\n    public initGraph(lns: NLine[]) {\r\n        this.core.initGraph(lns);\r\n    }\r\n    public reset(){\r\n        this.view.reset();\r\n    }\r\n    public setUnit(unit: string) {\r\n        this.core.setUnit(unit);\r\n    }\r\n    public computePath(origin: NVector3[], destination: NVector3[], BETA: number = 0.002) {\r\n        this.core.computePath(origin, destination, BETA);\r\n    }\r\n    public mouseEvent(m: MouseEventData){\r\n        // console.log(m);\r\n        this.controller.mouseEvent(m);\r\n    }\r\n    public keyEvent(e: KeyboardEventData){\r\n        // this.controller.ke(m);\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, isPanning: boolean) {\r\n        this.core.render(ctx, isPanning)\r\n        \r\n        if(isPanning) {\r\n            if (this.data) {\r\n                // this.data.updateProjection(this.definition.app.projection.ToScreen);\r\n            }\r\n        }\r\n\r\n        if (this.data) {\r\n            // this.data.render(ctx, this.definition.app.projection.ToScreen, this.definition.controller.m.x, this.definition.controller.m.y);\r\n        }\r\n\r\n        // console.log('222');\r\n       this.ComputeFPS();\r\n        // console.log('render');\r\n    }\r\n    private ComputeFPS(){\r\n        this.delta = (Date.now() - this.lastCalledTime )/1000;\r\n        this.lastCalledTime = Date.now();\r\n        this.fps = 1 / this.delta;\r\n    }\r\n}","\nexport const AABBintersect2D = (v0: NVector3[], v1: NVector3[]): boolean => {\n    const v0minX = v0[0].x;\n    const v0maxX = v0[1].x;\n    const v1minX = v1[0].x;\n    const v1maxX = v1[1].x;\n    const v0minY = v0[0].y;\n    const v0maxY = v0[1].y;\n    const v1minY = v1[0].y;\n    const v1maxY = v1[1].y;\n    // const v0minZ = 0;\n    // const v0maxZ = 0;\n    // const v1minZ = 0;\n    // const v1maxZ = 0;\n    return (v0minX <= v1maxX && v0maxX >= v1minX) &&\n        (v0minY <= v1maxY && v0maxY >= v1minY); // &&\n    // (v0minZ <= v1maxZ && v0maxZ >= v1minZ);\n};\nexport const distance = (v0: NVector3, v1: NVector3): number => {\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\n    // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\n}\n\nexport class NVector3 {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public lon: number = 0;\n    public lat: number = 0;\n    public elevation: number = 0;\n\n    public d: boolean = true;\n    public isRenderable: boolean = true;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\n\n\nexport class CPoint {\n    public vec: NVector3;\n    public id: string = '';\n    public numVisit: number = 0;\n    public radius: number = 10;\n\n    public isCollapse: boolean = false;\n\n    public isHidden: boolean = false;\n    public isRenderable: boolean = true;\n\n    public isSelected: boolean = false;\n    public isHover: boolean = false;\n    public collision: Collision;\n    constructor(x: number, y: number) {\n        this.vec = new NVector3(x, y, 0);\n        this.updateBounding();\n    }\n    public updateBounding() {\n        this.collision = new Collision(this);\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.arc(this.vec.x, this.vec.y, this.radius, 0, Math.PI * 2);\n        ctx.closePath();\n        if (this.isCollapse) {\n            ctx.fillStyle = '#f00';\n        } else {\n            ctx.fillStyle = '#0f0';\n        }\n        ctx.fill();\n\n        this.renderBoundingBox(ctx)\n    }\n    public renderBoundingBox(ctx: CanvasRenderingContext2D){\n        ctx.beginPath();\n        ctx.rect(\n            this.collision.minVec.x, this.collision.minVec.y, \n            (this.collision.maxVec.x - this.collision.minVec.x),\n            (this.collision.maxVec.y - this.collision.minVec.y)\n            )\n        ctx.stroke();\n    }\n}\nexport class Collision {\n    base: CPoint;\n    isCollided: boolean = false;\n\n    neighborShapes: CPoint[] = [];\n\n    minVec: NVector3;\n    maxVec: NVector3;\n\n    isVisited: boolean = false;\n    numOrder: number = -1;\n\n    constructor(base: CPoint) {\n        this.base = base;\n        const r = this.base.radius;\n        this.minVec = new NVector3(this.base.vec.x - r, this.base.vec.y - r, 0);\n        this.maxVec = new NVector3(this.base.vec.x + r, this.base.vec.y + r, 0);\n    }\n    public Reset(){\n        this.neighborShapes = [];\n        this.numOrder = -1;\n        this.base.numVisit = 0;\n        this.base.isCollapse = false;\n        this.isCollided = false;\n        this.isVisited = false;\n    }\n}"],"names":["remap","CValue","OldMin","OldMax","NewMin","NewMax","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getRandomArbitrary","min","max","seed","mask","m_w","m_z","result","getUUID","d","Date","getTime","replace","c","r","toString","OPTIMIZER","GridSystemScreen","constructor","xInterval","yInterval","rx","ry","cells","points","update","width","height","this","initGrid","y","cellList","x","push","Cell","i","p","getCellAtPoint","isRenderable","dp","round","j","render","ctx","draw","grid","xI","yI","r0","r1","vec","vecRender","isHover","_isRenderable","NVector3","geo","v","isPanning","beginPath","rect","closePath","stroke","fillStyle","arc","PI","fill","GridSystemDynamic","minP","Number","MAX_SAFE_INTEGER","maxP","MIN_SAFE_INTEGER","z","Clustering","optimizer","optimizerType","mv","inspection","GRID_SCREEN","GRID","console","debug","vs","mouseInteraction","isStationary","CommandBase","activeCommandController","type","COMMAND","mouseEvent","e","MOUSE_TYPE","MouseLeftClickPre","MouseMiddleClickPre","MouseRightClickPre","MouseDoubleClickPre","MouseMovePre","MouseDragPre","MouseDownPre","MouseUpPre","MouseWheelPre","MouseDown","drawingEngine","scene","capture","geometryCommon","find","MouseLeftClick","isSelected","resetSelections","MouseMiddleClick","MouseRightClick","MouseUp","undefined","MouseDoubleClick","MouseMove","updateHover","MouseDrag","projection","toMap","translate","MouseWheel","Collision","geometryBase","isCollided","neighborShapes","minVec","maxVec","isVisited","numOrder","Reset","numVisit","isCollapse","GeometryBase","id","isHidden","collision","toJson","long","lat","isInside","toScreen","renderPost","CPoint","param","super","t","color","colorHover","ACTIVE_UI","distanceToXY","isCustom","sv","sin","lineWidth","strokeStyle","CommandSelect","CommandPoint","addGeometry","hasShift","setCommand","CommandLine","ActiveCommandController","activeCommand","commands","SELECT","POINT","LINE","setCommander","commander","apiCall","command","getSelCPoint","popZipData","addon","InitClustering","InitClusteringCollision","json","fetchJson","count","greatePointByGeoPos","spos","Projection","updateProjection","IO","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getData","data","val","getError","error","sendData","GeometryCommon","key","geoDict","geometryList","getAllVecFromCPoint","pointList","getAllFromCPoint","PointCluster","renderer","geometries","boundingBoxMin","boundingBoxMax","GridResolution","tempVecGridList","tempGeoGridList","UpdateBoundingBox","IsInside","m","distance","AddPost","includes","NeedDecompose","Split","DeepRemove","xNum","yNum","buildGrid","BuildSubCluster","Merge","other","concat","RemoveCluster","gridList","theY","geoMat","theX","geoList","GetCellAtPoint","clustersRPoint","tv","Draw","UpdateTimeer","Renderer","InitGeometry","addClusterByGeometries","cluster","splice","indexOf","Render","GraphClustering","updatePoints","BuildConnectivity","initGeometry","buildGraph","PostUpdateCollisionBasedonGraph","graphs","SplitClusters","PostMergeCluster","outGraphList","pt","listPoints","AABBintersect2D","outList","ptList","queue","current","safeguard","shift","UpdateByQueue","remain","clusterGraph","clusters","PostMergeClusterCompute","ClusteringCollisionBasedGraph","graphClustering","Addon","clustering","clusteringCollisionBasedGraph","async","then","canvas","catch","err","lastCalledTime","now","delta","fps","ComputeFPS","Scene","_capture","g","ableToPan","DrawingEngine","io","_ableToPan","keyEvent","bindAbleToPan","GraphView","HTMLView","div","initPanel","remove","networkUI","document","createElement","style","background","position","zIndex","top","textContent","isPressed","prePos","ondrag","onmouseenter","onmousemove","xOff","clientX","yOff","clientY","parseFloat","left","onmousedown","onmouseup","onmouseout","appendChild","btn","onclick","app","APP","padding","reset","removePanelNetwork","initPanelNetwork","Controller","nnaEngine","dataOrigins","destinationOrigins","action","view","core","graphSystem","initByCPoint","initByCPoints","initByCPointsBackpro","initAgentVis","agencySystem","gaSystem","getPath","pointData","Node","distanceTo","node","Path","pathsOrigin","nodes","fitness","generateIndividual","cityIndex","setCityInit","city","getFitness","getDistance","tourDistance","fromNode","otherNode","containsCity","Population","populationSize","initialise","paths","newTour","getFittestPath","fittest","GeneticAlgorithm","tourmanager","mutationRate","nodeSize","elitism","evolvePopulation","pop","newPopulation","elitismOffset","thePath","parent1","tournamentSelection","parent2","child","crossover","path","mutate","startPos","endPos","place","ii","tourPos1","tourPos2","city1","city2","populationNew","randomId","GASystem","cities","placesAll","ga","pathFittest","timer","cost","MAX_VALUE","pos","init","mouseClick","tournamentSize","population_size","goePos","optimize","isPan","p0","p1","moveTo","lineTo","AgencySystem","Analysis","gs","Graph","graphCore","edges","minPt","maxPt","MIN_VALUE","nodeOrigin","initGraph","lns","AddEdgeByLines","elevation","AddNode","AddEdge","n1","n2","testedEdge","FindEdge","edge","Edge","point","n0","FindClosestNode","index","disMin","updatePropagation","originTree","Optimizer","Beta","networkDistance","euclideanDistance","n","updatePropagationByNode","updatePropagationByNodes","origins","origin","dis","distanceToGeo","np","newcost","newtemp","updateBackpropagation","k","destination","smallest","countVisit","mp","CONNECTIVITY","GetMidPoint","updateScreenPos","countOrigin","countDestination","countVisitTemp","deepCopy","Tree","gc","nodeDestinations","pointOrigin","polylines","duplicateGraph","updateOriginByPt","graph","desID","GetPathsPolylines","pls","pl","NPolyline","id0","id1","costFnDistanceGeo","meterFromGeoGPSPos","GraphCore","trees","destinations","idDestination","setUnit","unit","computePath","BETA","computePathWeighted","oWeight","dWeight","mergeAgents","tree","Properties","RendererGraph","BoidsBehaviors","start","end","selPath","time","properties","cols","getFalseColor","controller","font","fillText","toFixed","selPathId","mx","my","globalCompositeOperation","COLORBLENDING","setLineDash","theDis","lineDashOffset","Update","BoidsPath","GetNodes","Boid","posX","posY","totalMass","MAX_FORCE","velocity","maxVelocity","desired","steering","mass","boidsPath","currentNode","pathDir","rotation","preVec","avoidance","ahead","alpha","isOriented","activeBase64ID","angle","MAX_VELOCITY","Truncate","CollisionAvoidance","mostThreatening","Clone","normalize","scale","MAX_AVOID_AHEAD","Length","Add","AVOID_FORCE","Distance","a","b","sqrt","GetAngle","vector","atan2","PathFollowing","AddVecHistory","DrawTail","img","Image","src","save","globalAlpha","rotate","drawImage","restore","DrawShape","DrawForces","DrawForceVector","force","Seek","target","Sub","MAX_QUEUE_AHEAD","MAX_QUEUE_RADIUS","MAX_SEPARATION","SEPARATION_RADIUS","boids","instance","InitPathByAPolyline","numBoid","InitBoid","InitPathByNode","InitPath","numPath","Init","maxPathNodes","boid","ShiftSpeed","IncreasePathRadius","showForces","DecreasePathRadius","ToggleShowForces","ShiftRadius","ShiftForce","ShiftOriented","drawPath","drawPathPoint","drawCircle","radius","IsOrient","mouse","GraphSystem","analysis","renderGraph","initTwoPoint","cps","ends","VoxelSystem","Core","voxelSystem","geoPos","NNAEngineV3","fetch","response","text","getAllUrlParams","importDummyData","url","importCSV","CSVData","ComputeCSV","initLines","lineTest","execution","v0","v1","v0minX","v0maxX","v1minX","v1maxX","v0minY","v0maxY","v1minY","v1maxY","lon","updateBounding","renderBoundingBox","base"],"sourceRoot":""}
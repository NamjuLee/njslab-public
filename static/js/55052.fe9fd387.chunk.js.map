{"version":3,"file":"static/js/55052.fe9fd387.chunk.js","mappings":"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","sources":["njslab/Tools/Sound-viz-amplitude/index.ts"],"sourcesContent":["import { RendererCanvas } from '../../../lib'\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n    public renderer: Renderer;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id)\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.width = '1000px';\r\n        div.style.height = '600px';\r\n\r\n        this.divHost.appendChild(div);\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n\r\n        this.renderer = new Renderer(div);\r\n\r\n        // console.log(this.renderer);\r\n        // !! you should execute it for rendering\r\n        // this.start();\r\n    }\r\n    public destroy() {\r\n        if (this.divHost) {\r\n            try {\r\n                while (this.divHost.firstChild) {\r\n                    this.divHost.removeChild(this.divHost.firstChild);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error in destroy method:', error);\r\n            }\r\n        } else {\r\n            console.warn('divHost is undefined in destroy method');\r\n        }\r\n    }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n\r\n    constructor(div: any) {\r\n        super(div);\r\n        this.canvas.style.position = 'relative';\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n\r\n        // TODO\r\n        // You code goes here for one time operation\r\n        // \r\n\r\n\r\n        this.start();\r\n\r\n\r\n\r\n\r\n        const canvas = this.canvas\r\n        const ctx = this.ctx\r\n    \r\n        // const canvasWidth = canvas.width;\r\n        // const canvasHeight = canvas.height;\r\n        // const centerY = canvasHeight / 2;\r\n    \r\n        // const amplitude = canvasHeight / 4; // 파형 높이\r\n        // const timeScale = 0.01; // 시간 배율\r\n    \r\n        // // 브라우저에서 마이크 접근\r\n        // navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\r\n        //   const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        //   const analyser = audioContext.createAnalyser();\r\n        //   const source = audioContext.createMediaStreamSource(stream);\r\n    \r\n        //   // 마이크 입력을 AnalyserNode에 연결\r\n        //   source.connect(analyser);\r\n    \r\n        //   analyser.fftSize = 1024; // FFT 크기\r\n        //   const bufferLength = analyser.frequencyBinCount; // fftSize / 2\r\n        //   const frequencyData = new Uint8Array(bufferLength); // 주파수 데이터를 저장할 배열\r\n    \r\n        //   function drawWave() {\r\n        //     requestAnimationFrame(drawWave);\r\n    \r\n        //     // AnalyserNode에서 주파수 데이터 가져오기\r\n        //     analyser.getByteFrequencyData(frequencyData);\r\n    \r\n        //     // 가장 강한 주파수를 찾기\r\n        //     const maxAmplitude = Math.max(...frequencyData);\r\n        //     const peakFrequencyIndex = frequencyData.indexOf(maxAmplitude);\r\n        //     const nyquist = audioContext.sampleRate / 2;\r\n        //     const frequency = (peakFrequencyIndex / bufferLength) * nyquist; // 주파수 계산\r\n    \r\n        //     // 캔버스 초기화\r\n        //     ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n        //     ctx.fillStyle = '#000';\r\n        //     ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    \r\n        //     // 축 그리기\r\n        //     ctx.strokeStyle = '#555';\r\n        //     ctx.lineWidth = 1;\r\n        //     ctx.beginPath();\r\n        //     ctx.moveTo(0, centerY);\r\n        //     ctx.lineTo(canvasWidth, centerY);\r\n        //     ctx.stroke();\r\n    \r\n        //     // 사인파 그리기\r\n        //     ctx.strokeStyle = '#ff0000';\r\n        //     ctx.lineWidth = 2;\r\n        //     ctx.beginPath();\r\n        //     for (let x = 0; x < canvasWidth; x++) {\r\n        //       const t = x * timeScale; // 시간 계산\r\n        //       const y = centerY - Math.sin(2 * Math.PI * frequency * t) * amplitude;\r\n        //       if (x === 0) ctx.moveTo(x, y);\r\n        //       else ctx.lineTo(x, y);\r\n        //     }\r\n        //     ctx.stroke();\r\n    \r\n        //     // 코사인파 그리기\r\n        //     ctx.strokeStyle = '#00ff00';\r\n        //     ctx.lineWidth = 2;\r\n        //     ctx.beginPath();\r\n        //     for (let x = 0; x < canvasWidth; x++) {\r\n        //       const t = x * timeScale; // 시간 계산\r\n        //       const y = centerY - Math.cos(2 * Math.PI * frequency * t) * amplitude;\r\n        //       if (x === 0) ctx.moveTo(x, y);\r\n        //       else ctx.lineTo(x, y);\r\n        //     }\r\n        //     ctx.stroke();\r\n    \r\n        //     // 주파수 정보 표시\r\n        //     ctx.fillStyle = '#ffffff';\r\n        //     ctx.font = '16px Arial';\r\n        //     ctx.fillText(`Frequency: ${frequency.toFixed(2)} Hz`, 10, 20);\r\n        //   }\r\n    \r\n        //   drawWave(); // 시각화 함수 호출\r\n        // }).catch((err) => {\r\n        //   console.error('마이크 접근 실패:', err);\r\n        // });\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        const canvasWidth = canvas.width;\r\n        const canvasHeight = canvas.height;\r\n        const centerY = canvasHeight / 2;\r\n    \r\n        const timeScale = 0.01; // 시간 단위 (X축)\r\n        const maxAmplitude = canvasHeight / 2; // 파형 최대 높이\r\n    \r\n        const frequenciesOverTime = []; // 시간 흐름에 따른 주파수 데이터 저장\r\n        const amplitudesOverTime = []; // 시간 흐름에 따른 진폭 데이터 저장\r\n    \r\n        // 마이크 입력 가져오기\r\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\r\n          const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n          const analyser = audioContext.createAnalyser();\r\n          const source = audioContext.createMediaStreamSource(stream);\r\n    \r\n          // 필터 설정 (기본적인 배경 잡음 제거)\r\n          const highPassFilter = audioContext.createBiquadFilter();\r\n          highPassFilter.type = \"highpass\";\r\n          highPassFilter.frequency.value = 100; // 100Hz 이하 제거\r\n    \r\n          const lowPassFilter = audioContext.createBiquadFilter();\r\n          lowPassFilter.type = \"lowpass\";\r\n          lowPassFilter.frequency.value = 8000; // 8000Hz 이상 제거\r\n    \r\n          source.connect(highPassFilter);\r\n          highPassFilter.connect(lowPassFilter);\r\n          lowPassFilter.connect(analyser);\r\n    \r\n          analyser.fftSize = 1024;\r\n          const bufferLength = analyser.frequencyBinCount;\r\n          const frequencyData = new Uint8Array(bufferLength);\r\n    \r\n          function drawWave() {\r\n            requestAnimationFrame(drawWave);\r\n    \r\n            // 주파수 데이터 가져오기\r\n            analyser.getByteFrequencyData(frequencyData);\r\n    \r\n            const maxAmplitudeValue = Math.max(...frequencyData); // 최대 진폭 계산\r\n            const peakFrequencyIndex = frequencyData.indexOf(maxAmplitudeValue); // 진폭이 가장 큰 주파수의 인덱스\r\n            const nyquist = audioContext.sampleRate / 2; // Nyquist 주파수 (샘플레이트 절반)\r\n            const frequency = (peakFrequencyIndex / bufferLength) * nyquist; // 현재 주파수 계산\r\n    \r\n            // 새 데이터 추가\r\n            frequenciesOverTime.push(frequency);\r\n            amplitudesOverTime.push(maxAmplitudeValue / 255); // 진폭 (0~1 사이로 정규화)\r\n            if (frequenciesOverTime.length > canvasWidth) {\r\n              frequenciesOverTime.shift(); // 오래된 데이터 제거\r\n              amplitudesOverTime.shift(); // 오래된 데이터 제거\r\n            }\r\n    \r\n            // 캔버스 초기화\r\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n            ctx.fillStyle = '#000';\r\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    \r\n            // 축 그리기\r\n            ctx.strokeStyle = '#555';\r\n            ctx.lineWidth = 1;\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, centerY);\r\n            ctx.lineTo(canvasWidth, centerY);\r\n            ctx.stroke();\r\n    \r\n            // 시간 흐름에 따른 사인파 그리기 (진폭 반영)\r\n            ctx.strokeStyle = '#ff0000';\r\n            ctx.lineWidth = 2;\r\n            ctx.beginPath();\r\n            for (let x = 0; x < frequenciesOverTime.length; x++) {\r\n              const frequency = frequenciesOverTime[x];\r\n              const amplitude = amplitudesOverTime[x] * maxAmplitude; // 진폭 반영\r\n              const t = x * timeScale; // 시간 계산\r\n              const y = centerY - Math.sin(2 * Math.PI * frequency * t) * amplitude;\r\n              if (x === 0) ctx.moveTo(x, y);\r\n              else ctx.lineTo(x, y);\r\n            }\r\n            ctx.stroke();\r\n    \r\n            // 시간 흐름에 따른 코사인파 그리기 (진폭 반영)\r\n            ctx.strokeStyle = '#00ff00';\r\n            ctx.lineWidth = 2;\r\n            ctx.beginPath();\r\n            for (let x = 0; x < frequenciesOverTime.length; x++) {\r\n              const frequency = frequenciesOverTime[x];\r\n              const amplitude = amplitudesOverTime[x] * maxAmplitude; // 진폭 반영\r\n              const t = x * timeScale; // 시간 계산\r\n              const y = centerY - Math.cos(2 * Math.PI * frequency * t) * amplitude;\r\n              if (x === 0) ctx.moveTo(x, y);\r\n              else ctx.lineTo(x, y);\r\n            }\r\n            ctx.stroke();\r\n    \r\n            // 현재 주파수 및 진폭 정보 표시\r\n            ctx.fillStyle = '#ffffff';\r\n            ctx.font = '16px Arial';\r\n            ctx.fillText(`Current Frequency: ${frequency.toFixed(2)} Hz`, 10, 20);\r\n            ctx.fillText(`Amplitude: ${maxAmplitudeValue.toFixed(0)}`, 10, 40);\r\n          }\r\n    \r\n          drawWave(); // 시각화 시작\r\n        }).catch((err) => {\r\n          console.error('마이크 접근 실패:', err);\r\n        });\r\n    \r\n\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D): void {\r\n        // TODO\r\n        // You code goes here for the rending loop\r\n\r\n\r\n        // !! can stop render after this frame.\r\n        // this.isStatic = true;\r\n    }\r\n\r\n}\r\n\r\n\r\n"],"names":["Solution","constructor","id","divHost","renderer","this","document","getElementById","style","display","alignItems","div","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","firstChild","removeChild","error","console","warn","RendererCanvas","super","canvas","position","start","ctx","canvasWidth","canvasHeight","centerY","timeScale","maxAmplitude","frequenciesOverTime","amplitudesOverTime","navigator","mediaDevices","getUserMedia","audio","then","stream","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","source","createMediaStreamSource","highPassFilter","createBiquadFilter","type","frequency","value","lowPassFilter","connect","fftSize","bufferLength","frequencyBinCount","frequencyData","Uint8Array","drawWave","requestAnimationFrame","getByteFrequencyData","maxAmplitudeValue","Math","max","peakFrequencyIndex","indexOf","nyquist","sampleRate","push","length","shift","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","x","amplitude","t","y","sin","PI","cos","font","fillText","toFixed","catch","err","render"],"sourceRoot":""}
{"version":3,"file":"static/js/57119.812553d9.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-vector/baseWireFrame/index.ts","njslab/Workshop/workshop-vector/workshop-vector-3d-01.ts"],"sourcesContent":["export class Canvas3DWireframe {\n  public div: HTMLElement;\n  public renderer: RendererCanvas3DWireframe;\n  public pts = [];\n  public t = 0.0;\n  constructor(id: string) {\n    this.div = document.getElementById(id);\n    this.renderer = new RendererCanvas3DWireframe(id);\n    this.renderer.pts = this.pts;\n\n    this.init();\n    this.update();\n    this.render();\n  }\n  public init() {\n    // TODO\n  }\n  public update() {\n    // TODO\n  }\n  public render() {\n    requestAnimationFrame(() => {\n      this.render();\n    });\n    this.update();\n    this.renderer.render();\n  }\n  public destroy() {\n    // this.renderer.destroy();\n    try {\n      while (this.div && this.div.lastElementChild) {\n        const lastChild = this.div.lastElementChild as Node;\n        this.div.removeChild(lastChild);\n      }\n    } catch (error) {\n      console.error(\"Error removing child elements:\", error);\n    }\n  }\n}\n\nexport class RendererCanvas3DWireframe {\n  public render: () => void;\n\n  public pts = [];\n  constructor(id) {\n    const div = document.getElementById(id);\n    const bounding = div.getBoundingClientRect();\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = bounding.width;\n    canvas.height = bounding.height;\n    div.appendChild(canvas);\n\n    const ctx = canvas.getContext(\"2d\");\n\n    let angleX = -Math.PI / 2;\n    let angleY = 0;\n    let dragging = false;\n    let panning = false;\n    let zoom = 1;\n    let lastMouseX = 0;\n    let lastMouseY = 0;\n    let offsetX = 0;\n    let offsetY = 0;\n    let panStartX = 0;\n    let panStartY = 0;\n    let fov = 500;\n\n    const rotate = (point, angleX, angleY) => {\n      const cosX = Math.cos(angleX);\n      const sinX = Math.sin(angleX);\n      const cosY = Math.cos(angleY);\n      const sinY = Math.sin(angleY);\n\n      // (swap Y and Z for Z-up)\n      let x = point.x * cosY - point.y * sinY;\n      let y = point.x * sinY + point.y * cosY;\n\n      let z = point.z * cosX - y * sinX;\n      y = point.z * sinX + y * cosX;\n\n      return { x, y, z };\n    };\n\n    const project = (point) => {\n      const scale = (fov / (fov + point.y)) * zoom; // Z-axis is now vertical\n      return {\n        x: point.x * scale + canvas.width / 2 + offsetX,\n        y: -point.z * scale + canvas.height / 2 + offsetY, // Invert Z for canvas Y-axis\n      };\n    };\n\n    const rendering = () => {\n      // requestAnimationFrame(() => {\n      //   rendering();\n      // });\n      // console.log('rendering...', this.pts)\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      this.pts.forEach((point) => {\n        const rotated = rotate(point, angleX, angleY);\n        const projected = project(rotated);\n\n        const depthScale = (fov / (fov + rotated.y)) * zoom;\n        let radius = 2 * depthScale;\n        radius = radius < 0.1 ? 0.1 : radius;\n\n        ctx.beginPath();\n        ctx.arc(projected.x, projected.y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = point.color ? point.color : \"#f00\";\n        ctx.fill();\n      });\n    };\n    this.render = () => rendering();\n\n    canvas.addEventListener(\"mousedown\", (e) => {\n      if (e.button === 2) {\n        dragging = true;\n      } else if (e.button === 0) {\n        if (e.altKey) {\n          dragging = true;\n        } else {\n          panning = true;\n          panStartX = e.clientX - offsetX;\n          panStartY = e.clientY - offsetY;\n        }\n      }\n      lastMouseX = e.clientX;\n      lastMouseY = e.clientY;\n    });\n\n    canvas.addEventListener(\"mousemove\", (e) => {\n      if (dragging) {\n        const dx = e.clientX - lastMouseX;\n        const dy = e.clientY - lastMouseY;\n        angleX -= dy * 0.01;\n        angleY += dx * 0.01;\n        lastMouseX = e.clientX;\n        lastMouseY = e.clientY;\n        //   rendering();\n      } else if (panning) {\n        offsetX = e.clientX - panStartX;\n        offsetY = e.clientY - panStartY;\n        //   rendering();\n      }\n    });\n\n    canvas.addEventListener(\"mouseup\", () => {\n      dragging = false;\n      panning = false;\n    });\n\n    canvas.addEventListener(\"contextmenu\", (e) => {\n      e.preventDefault();\n    });\n\n    canvas.addEventListener(\"wheel\", (e) => {\n      const mouseX = e.clientX - canvas.getBoundingClientRect().left;\n      const mouseY = e.clientY - canvas.getBoundingClientRect().top;\n\n      const prevZoom = zoom;\n      const zoomSpeed = Math.max(0.001, zoom * 0.02); // zoom speed based on zoom level\n\n      zoom += e.deltaY * -zoomSpeed;\n      zoom = Math.min(Math.max(zoom, 0.1), 50);\n\n      const scaleChange = zoom / prevZoom;\n\n      offsetX -= (mouseX - canvas.width / 2 - offsetX) * (scaleChange - 1);\n      offsetY -= (mouseY - canvas.height / 2 - offsetY) * (scaleChange - 1);\n\n      // rendering();\n    });\n\n    rendering();\n  }\n}\n","import { Canvas3DWireframe  } from './baseWireFrame';\r\n\r\nexport class Solution extends Canvas3DWireframe {\r\n  constructor(id: string) {\r\n    super(id)\r\n  }\r\n  public init () {\r\n\r\n    this.t = 0.0;\r\n    this.pts.push(...genGridPt());\r\n\r\n  }\r\n  public update() {\r\n\r\n\r\n\r\n    for (let i = 0; i < this.pts.length; ++i) {\r\n      // const offset = Math.cos((this.pts[i].x + this.pts[i].y) * this.t) * 2\r\n      // this.pts[i].z+= offset\r\n\r\n      this.pts[i].z = Math.cos(i * this.t * 0.1)\r\n    }\r\n\r\n\r\n\r\n    this.t += 0.01;\r\n  }\r\n\r\n}\r\n\r\nclass Vector3 {\r\n  public x: number = 0.0;\r\n  public y: number = 0.0;\r\n  public z: number = 0.0;\r\n  public r: number = 10\r\n  public color = '#f0f'\r\n  constructor(x, y, z) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n  }\r\n  public render(ctx: CanvasRenderingContext2D) {\r\n      ctx.fillStyle = this.color;\r\n      ctx.beginPath();\r\n      ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2.0);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n  }\r\n}\r\n\r\n\r\nconst genRandomPt = (numPoints = 100) => {\r\n  const pts = [];\r\n  for (let i = 0; i < numPoints; i++) {\r\n    // const p = {\r\n    //   x: (Math.random() - 0.5) * 500,\r\n    //   y: (Math.random() - 0.5) * 500,\r\n    //   z: (Math.random() - 0.5) * 500,\r\n    // }\r\n    const p = new Vector3((Math.random() - 0.5) * 500, (Math.random() - 0.5) * 500, (Math.random() - 0.5) * 500)\r\n    pts.push(p);\r\n  }\r\n  return pts;\r\n};\r\n\r\nconst genGridPt = (numPoints = 5) => {\r\n  const scale = 20;\r\n  const pts = [];\r\n  for (let j = -numPoints; j < numPoints; j++) {\r\n    for (let i = -numPoints; i < numPoints; i++) {\r\n      // pts.push({\r\n      //   x: i * scale,\r\n      //   y: j * scale,\r\n      //   z: 0.0,\r\n      // });\r\n      const p = new Vector3(i * scale, j * scale, 0.0)\r\n      pts.push(p);\r\n    }\r\n  }\r\n  return pts;\r\n};\r\n"],"names":["Canvas3DWireframe","constructor","id","div","renderer","pts","t","this","document","getElementById","RendererCanvas3DWireframe","init","update","render","requestAnimationFrame","destroy","lastElementChild","lastChild","removeChild","error","console","bounding","getBoundingClientRect","canvas","createElement","width","height","appendChild","ctx","getContext","angleX","Math","PI","angleY","dragging","panning","zoom","lastMouseX","lastMouseY","offsetX","offsetY","panStartX","panStartY","fov","rendering","clearRect","forEach","point","rotated","cosX","cos","sinX","sin","cosY","sinY","x","y","z","rotate","projected","scale","project","radius","beginPath","arc","fillStyle","color","fill","addEventListener","e","button","altKey","clientX","clientY","dx","dy","preventDefault","mouseX","left","mouseY","top","prevZoom","zoomSpeed","max","deltaY","min","scaleChange","Solution","super","push","genGridPt","i","length","Vector3","r","closePath","numPoints","j","p"],"sourceRoot":""}
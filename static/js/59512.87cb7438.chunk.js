"use strict";(self.webpackChunkNJS_Lab=self.webpackChunkNJS_Lab||[]).push([[59512],{59512:(e,t,i)=>{i.r(t),i.d(t,{default:()=>A});var a=i(18489),r=i(27366),l=i(76200),n=i(10064),o=i(92026),s=i(97642),c=i(66978),h=i(35995),p=i(49861),d=i(63780),u=(i(25243),i(38511)),v=i(69912),m=i(90724),y=i(10323),f=i(17775),_=i(11936),b=i(6061),g=i(29598),w=i(45948),S=i(42537),C=i(32718),T=i(31009);class Z{constructor(e,t,i,r){let l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};this._mainMethod=t,this._transferLists=i,this._listeners=[],this._promise=(0,T.bA)(e,(0,a.Z)((0,a.Z)({},l),{},{schedule:r})).then((e=>{if(void 0===this._thread){this._thread=e,this._promise=null,l.hasInitialize&&this.broadcast({},"initialize");for(const e of this._listeners)this._connectListener(e)}else e.close()})),this._promise.catch((t=>C.Z.getLogger("esri.core.workers.WorkerHandle").error("Failed to initialize ".concat(e," worker: ").concat(t))))}on(e,t){const i={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(i),this._connectListener(i),(0,S.kB)((()=>{i.removed=!0,(0,d.Od)(this._listeners,i),this._thread&&(0,o.pC)(i.threadHandle)&&i.threadHandle.remove()}))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,i){if(this._thread){const a=this._transferLists[e],r=a?a(t):[];return this._thread.invoke(e,t,{transferList:r,signal:i})}return this._promise?this._promise.then((()=>((0,c.k_)(i),this.invokeMethod(e,t,i)))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(e,t))):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then((t=>{e.removed||(e.threadHandle=t)}))}}class L extends Z{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;super("LercWorker","_decode",{_decode:e=>[e.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,i){return e&&0!==e.byteLength?this.invoke({buffer:e,options:t},i):Promise.resolve(null)}release(){--this.ref<=0&&(D.forEach(((e,t)=>{e===this&&D.delete(t)})),this.destroy())}}const D=new Map;let O=class extends((0,f.Z)((0,_.Y)((0,b.q)((0,g.I)((0,s.R)(y.Z)))))){constructor(){super(...arguments),this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=D.get((0,o.Wg)(e));return t||((0,o.pC)(e)?(t=new L((t=>e.schedule(t))),D.set(e,t)):(t=new L,D.set(null,t))),++t.ref,t}()}normalizeCtorArgs(e,t){return"string"==typeof e?(0,a.Z)({url:e},t):e}destroy(){this._lercDecoder=(0,o.RY)(this._lercDecoder)}readVersion(e,t){let i=t.currentVersion;return i||(i=9.3),i}load(e){const t=(0,o.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new n.Z("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(c.r9).then((()=>this._fetchImageService(t)))),Promise.resolve(this)}fetchTile(e,t,i,a){const r=(0,o.pC)((a=a||{signal:null}).signal)?a.signal:a.signal=(new AbortController).signal,n={responseType:"array-buffer",signal:r},s={noDataValue:a.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,i,a))).then((()=>(0,l.default)(this.getTileUrl(e,t,i),n))).then((e=>this._lercDecoder.decode(e.data,s,r))).then((e=>{var t;return{values:e.pixelData,width:e.width,height:e.height,maxZError:null===(t=e.fileInfo)||void 0===t?void 0:t.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue}}))}getTileUrl(e,t,i){const r=!this.tilemapCache&&this.supportsBlankTile,l=(0,h.B7)((0,a.Z)((0,a.Z)({},this.parsedUrl.query),{},{blankTile:!r&&null}));return"".concat(this.parsedUrl.path,"/tile/").concat(e,"/").concat(t,"/").concat(i).concat(l?"?"+l:"")}async queryElevation(e,t){const{ElevationQuery:a}=await i.e(35887).then(i.bind(i,35887));return(0,c.k_)(t),(new a).query(this,e,t)}async createElevationSampler(e,t){const{ElevationQuery:a}=await i.e(35887).then(i.bind(i,35887));return(0,c.k_)(t),(new a).createSampler(this,e,t)}_fetchTileAvailability(e,t,i,a){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,i,a):Promise.resolve("unknown")}async _fetchImageService(e){var t;if(this.sourceJSON)return this.sourceJSON;const i={query:(0,a.Z)({f:"json"},this.parsedUrl.query),responseType:"json",signal:e},r=await(0,l.default)(this.parsedUrl.path,i);r.ssl&&(this.url=null===(t=this.url)||void 0===t?void 0:t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};(0,r._)([(0,p.Cb)({json:{read:{source:"copyrightText"}}})],O.prototype,"copyright",void 0),(0,r._)([(0,p.Cb)({readOnly:!0,type:m.Z})],O.prototype,"heightModelInfo",void 0),(0,r._)([(0,p.Cb)({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],O.prototype,"path",void 0),(0,r._)([(0,p.Cb)({type:["show","hide"]})],O.prototype,"listMode",void 0),(0,r._)([(0,p.Cb)({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],O.prototype,"minScale",void 0),(0,r._)([(0,p.Cb)({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],O.prototype,"maxScale",void 0),(0,r._)([(0,p.Cb)({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],O.prototype,"opacity",void 0),(0,r._)([(0,p.Cb)({type:["ArcGISTiledElevationServiceLayer"]})],O.prototype,"operationalLayerType",void 0),(0,r._)([(0,p.Cb)()],O.prototype,"sourceJSON",void 0),(0,r._)([(0,p.Cb)({json:{read:!1},value:"elevation",readOnly:!0})],O.prototype,"type",void 0),(0,r._)([(0,p.Cb)(w.HQ)],O.prototype,"url",void 0),(0,r._)([(0,p.Cb)()],O.prototype,"version",void 0),(0,r._)([(0,u.r)("version",["currentVersion"])],O.prototype,"readVersion",null),O=(0,r._)([(0,v.j)("esri.layers.ElevationLayer")],O),O.prototype.fetchTile.__isDefault__=!0;const A=O},17775:(e,t,i)=>{i.d(t,{Z:()=>h});var a=i(27366),r=(i(59486),i(49861)),l=(i(63780),i(25243),i(38511)),n=i(69912),o=i(71466),s=i(23638),c=i(78952);const h=e=>{let t=class extends e{constructor(){super(...arguments),this.copyright=null,this.minScale=0,this.maxScale=0,this.spatialReference=null,this.tileInfo=null,this.tilemapCache=null}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}get supportsBlankTile(){return this.version>=10.2}readTilemapCache(e,t){return t.capabilities&&t.capabilities.includes("Tilemap")?new s.y({layer:this}):null}};return(0,a._)([(0,r.Cb)({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),(0,a._)([(0,r.Cb)()],t.prototype,"minScale",void 0),(0,a._)([(0,l.r)("service","minScale")],t.prototype,"readMinScale",null),(0,a._)([(0,r.Cb)()],t.prototype,"maxScale",void 0),(0,a._)([(0,l.r)("service","maxScale")],t.prototype,"readMaxScale",null),(0,a._)([(0,r.Cb)({type:c.Z})],t.prototype,"spatialReference",void 0),(0,a._)([(0,r.Cb)({readOnly:!0})],t.prototype,"supportsBlankTile",null),(0,a._)([(0,r.Cb)(o.h)],t.prototype,"tileInfo",void 0),(0,a._)([(0,r.Cb)()],t.prototype,"tilemapCache",void 0),(0,a._)([(0,l.r)("service","tilemapCache",["capabilities"])],t.prototype,"readTilemapCache",null),(0,a._)([(0,r.Cb)()],t.prototype,"version",void 0),t=(0,a._)([(0,n.j)("esri.layers.mixins.ArcGISCachedService")],t),t}},23638:(e,t,i)=>{i.d(t,{y:()=>L});var a,r=i(18489),l=i(27366),n=i(76200),o=i(85015),s=i(59896),c=i(10064),h=i(41691),p=i(32718),d=i(16054),u=i(27546),v=i(66978),m=i(94172),y=i(99346),f=i(35995),_=i(49861),b=i(63780),g=i(89125),w=i(69912),S=i(87960),C=i(84652);class T{constructor(){this.location={left:0,top:0,width:0,height:0},this._allAvailability="unknown",this.byteSize=40}getAvailability(e,t){if("unknown"!==this._allAvailability)return this._allAvailability;const i=(e-this.location.top)*this.location.width+(t-this.location.left),a=i%8,r=i>>3,l=this._tileAvailabilityBitSet;return r<0||r>l.length?"unknown":l[r]&1<<a?"available":"unavailable"}_updateFromData(e){const t=this.location.width,i=this.location.height;let a=!0,r=!0;const l=Math.ceil(t*i/8),n=new Uint8Array(l);let o=0;for(let s=0;s<e.length;s++){const t=s%8;e[s]?(r=!1,n[o]|=1<<t):a=!1,7===t&&++o}r?this._allAvailability="unavailable":a?this._allAvailability="available":(this._allAvailability="unknown",this._tileAvailabilityBitSet=n,this.byteSize+=n.length)}static fromDefinition(e,t){const i=e.service.request||n.default,{row:a,col:l,width:o,height:s}=e,h={query:{f:"json"}};return t=t?(0,r.Z)((0,r.Z)({},h),t):h,i(function(e){let t;if("vector-tile"===e.service.type)t="".concat(e.service.url,"/tilemap/").concat(e.level,"/").concat(e.row,"/").concat(e.col,"/").concat(e.width,"/").concat(e.height);else{const i=e.service.tileServers;t="".concat(i&&i.length?i[e.row%i.length]:e.service.url,"/tilemap/").concat(e.level,"/").concat(e.row,"/").concat(e.col,"/").concat(e.width,"/").concat(e.height)}const i=e.service.query;return i&&(t="".concat(t,"?").concat(i)),t}(e),t).then((e=>e.data)).catch((e=>{if(e&&e.details&&422===e.details.httpStatus)return{location:{top:a,left:l,width:o,height:s},valid:!0,data:(0,b.a9)(o*s,0)};throw e})).then((e=>{if(e.location&&(e.location.top!==a||e.location.left!==l||e.location.width!==o||e.location.height!==s))throw new c.Z("tilemap:location-mismatch","Tilemap response for different location than requested",{response:e,definition:{top:a,left:l,width:o,height:s}});return T.fromJSON(e)}))}static fromJSON(e){T._validateJSON(e);const t=new T;return t.location=Object.freeze((0,C.d9)(e.location)),t._updateFromData(e.data),Object.freeze(t)}static _validateJSON(e){if(!e||!e.location)throw new c.Z("tilemap:missing-location","Location missing from tilemap response");if(!1===e.valid)throw new c.Z("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new c.Z("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new c.Z("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new c.Z("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}}function Z(e){return"".concat(e.level,"/").concat(e.row,"/").concat(e.col,"/").concat(e.width,"/").concat(e.height)}let L=a=class extends((0,h.p)(o.Z)){constructor(e){super(e),this._pendingTilemapRequests={},this._availableLevels={},this.levels=5,this.cacheByteSize=2*s.Y8.MEGABYTES,this.request=n.default,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new d.Z(this.cacheByteSize),this.addHandles([(0,m.YP)((()=>{const{layer:e}=this;return[null===e||void 0===e?void 0:e.parsedUrl,null===e||void 0===e?void 0:e.tileServers,null===e||void 0===e?void 0:e.apiKey,null===e||void 0===e?void 0:e.customParameters]}),(()=>this._initializeTilemapDefinition())),(0,m.YP)((()=>{var e,t;return null===(e=this.layer)||void 0===e||null===(t=e.tileInfo)||void 0===t?void 0:t.lods}),(e=>this._initializeAvailableLevels(e)),m.tX)]),this._initializeTilemapDefinition()}castLevels(e){return e<=2?(p.Z.getLogger(this.declaredClass).error("Minimum levels for Tilemap is 3, but got ",e),3):e}get size(){return 1<<this.levels}fetchTilemap(e,t,i,a){if(!this._availableLevels[e])return Promise.reject(new c.Z("tilemap-cache:level-unavailable","Level ".concat(e," is unavailable in the service")));const l=this._tmpTilemapDefinition,n=this._tilemapFromCache(e,t,i,l);if(n)return Promise.resolve(n);const o=a&&a.signal;return a=(0,r.Z)((0,r.Z)({},a),{},{signal:null}),new Promise(((e,t)=>{(0,v.fu)(o,(()=>t((0,v.zE)())));const i=Z(l);let r=this._pendingTilemapRequests[i];if(!r){r=T.fromDefinition(l,a).then((e=>(this._tilemapCache.put(i,e,e.byteSize),e)));const e=()=>delete this._pendingTilemapRequests[i];this._pendingTilemapRequests[i]=r,r.then(e,e)}r.then(e,t)}))}getAvailability(e,t,i){if(!this._availableLevels[e])return"unavailable";const a=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return a?a.getAvailability(t,i):"unknown"}fetchAvailability(e,t,i,a){return this._availableLevels[e]?this.fetchTilemap(e,t,i,a).catch((e=>e)).then((a=>{if(a instanceof T){const r=a.getAvailability(t,i);if("unavailable"===r)throw new c.Z("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i});return r}if((0,v.D_)(a))throw a;return"unknown"})):Promise.reject(new c.Z("tilemap-cache:level-unavailable","Level ".concat(e," is unavailable in the service")))}fetchAvailabilityUpsample(e,t,i,a,r){a.level=e,a.row=t,a.col=i;const l=this.layer.tileInfo;l.updateTileInfo(a);const n=this.fetchAvailability(e,t,i,r).catch((e=>{if((0,v.D_)(e))throw e;if(l.upsampleTile(a))return this.fetchAvailabilityUpsample(a.level,a.row,a.col,a);throw e}));return this._fetchAvailabilityUpsamplePrefetch(a.id,e,t,i,r,n),n}async _fetchAvailabilityUpsamplePrefetch(e,t,i,l,n,o){if(!this._prefetchingEnabled)return;const s="prefetch-".concat(e);if(this.handles.has(s))return;const c=new AbortController;o.then((()=>c.abort()),(()=>c.abort()));let h=!1;const p={remove(){h||(h=!0,c.abort())}};if(this.handles.add(p,s),await(0,y.MU)(10,c.signal).catch((()=>{})),h||(h=!0,this.handles.remove(s)),(0,v.Hc)(c))return;const d=new S.f(e,t,i,l),u=(0,r.Z)((0,r.Z)({},n),{},{signal:c.signal}),m=this.layer.tileInfo;for(let r=0;a._prefetches.length<a._maxPrefetch&&m.upsampleTile(d);++r){const e=this.fetchAvailability(d.level,d.row,d.col,u);a._prefetches.push(e);const t=()=>{a._prefetches.removeUnordered(e)};e.then(t,t)}}_initializeTilemapDefinition(){var e;if(!this.layer.parsedUrl)return;const{parsedUrl:t,apiKey:i,customParameters:a}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:t.path,query:(0,f.B7)((0,r.Z)((0,r.Z)((0,r.Z)({},t.query),a),{},{token:null!==i&&void 0!==i?i:null===(e=t.query)||void 0===e?void 0:e.token})),tileServers:this.layer.tileServers,request:this.request,type:this.layer.type},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,i,a){a.level=e,a.row=t-t%this.size,a.col=i-i%this.size;const r=Z(a);return this._tilemapCache.get(r)}_initializeAvailableLevels(e){this._availableLevels={},e&&e.forEach((e=>this._availableLevels[e.level]=!0))}get test(){const e=this;return{get prefetchingEnabled(){return e._prefetchingEnabled},set prefetchingEnabled(t){e._prefetchingEnabled=t},hasTilemap:(t,i,a)=>!!e._tilemapFromCache(t,i,a,e._tmpTilemapDefinition)}}};L._maxPrefetch=4,L._prefetches=new u.Z({initialSize:a._maxPrefetch}),(0,l._)([(0,_.Cb)({constructOnly:!0,type:Number})],L.prototype,"levels",void 0),(0,l._)([(0,g.p)("levels")],L.prototype,"castLevels",null),(0,l._)([(0,_.Cb)({readOnly:!0,type:Number})],L.prototype,"size",null),(0,l._)([(0,_.Cb)({constructOnly:!0,type:Number})],L.prototype,"cacheByteSize",void 0),(0,l._)([(0,_.Cb)({constructOnly:!0})],L.prototype,"layer",void 0),(0,l._)([(0,_.Cb)({constructOnly:!0})],L.prototype,"request",void 0),L=a=(0,l._)([(0,w.j)("esri.layers.support.TilemapCache")],L)},71466:(e,t,i)=>{i.d(t,{d:()=>n,h:()=>l});var a=i(18489),r=i(22824);const l={type:r.Z,json:{origins:{service:{read:{source:["tileInfo","minScale","maxScale","minLOD","maxLOD"],reader:n}}}}};function n(e,t,i,l){if(!e)return null;const{minScale:n,maxScale:o,minLOD:s,maxLOD:c}=t;if(null!=s&&null!=c)return l&&l.ignoreMinMaxLOD?r.Z.fromJSON(e):r.Z.fromJSON((0,a.Z)((0,a.Z)({},e),{},{lods:e.lods.filter((e=>{let{level:t}=e;return null!=t&&t>=s&&t<=c}))}));if(0!==n&&0!==o){const t=e=>Math.round(1e4*e)/1e4,i=n?t(n):1/0,l=o?t(o):-1/0;return r.Z.fromJSON((0,a.Z)((0,a.Z)({},e),{},{lods:e.lods.filter((e=>{const a=t(e.scale);return a<=i&&a>=l}))}))}return r.Z.fromJSON(e)}}}]);
//# sourceMappingURL=59512.87cb7438.chunk.js.map
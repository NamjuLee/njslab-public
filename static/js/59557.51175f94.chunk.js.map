{"version":3,"file":"static/js/59557.51175f94.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_04/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Geometry/Point.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Geometry/PointShader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/Modal.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/VAO.ts"],"sourcesContent":["import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        this.scene.add(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n}","import { RTN, VAO } from '../WebGL/VAO';\r\nimport { Modal } from '../WebGL/Modal';\r\nimport { PointShader } from './PointShader';\r\n\r\nimport { NGL3dApp } from '..';\r\nimport { GeometryBase } from './Core/Base';\r\n\r\nexport class Point extends GeometryBase {\r\n    vOld = `#version 300 es\r\n        in vec3 a_position;\r\n\r\n        uniform float uPointSize;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n    fOld = `#version 300 es\r\n        precision mediump float;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            finalColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        }\r\n    `;\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n\r\n        uniform mediump float uPointSize;\r\n        uniform float uAngle;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(cos(uAngle) * 0.8 + a_position.x, sin(uAngle) * 0.8 + a_position.y, a_position.z, 1.0);\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        uniform float uPointSize;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            float c = (40. - uPointSize ) / 20.;\r\n            finalColor = vec4(c, c, c, 1.0);\r\n        }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    mesh: RTN;\r\n    modal: Modal;\r\n    shader: PointShader;\r\n\r\n    size: number = 2.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        this.shader = new PointShader(gl, this.v, this.f);\r\n\r\n        this.mesh = VAO.createMeshVAO(gl, 'dots', [0, 0, 0, 0.1, 0.1, 0, 0.1, -0.1, 0, -0.1, -0.1, 0, -0.1, 0.1, 0]);\r\n        this.mesh.drawMode = gl.POINTS; // Most often the draw mode will be triangles, but in this instance we need Points\r\n\r\n        this.modal = new Modal(this.mesh);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        // console.log(gl);\r\n        this.size += 0.01;\r\n        let size = (Math.sin(this.size) * 10.0) + 30.0;\r\n        // gl.uniform1f(this.uPointSizeLoc, size);\r\n\r\n        // gl.uniform1f(this.uAngle, this.size);\r\n        // gl.drawArrays(gl.POINTS, 0, this.gVertCnt);\r\n        this.rotation += 0.02;\r\n\r\n        this.shader.activate();\r\n        this.shader.set(size, this.rotation);\r\n        this.shader.renderModal(this.modal);\r\n    }\r\n}","import { Shader } from '../WebGL/Shader';\r\n\r\nexport class PointShader extends Shader {\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            this.uniformLoc.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uniformLoc.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n        }\r\n        gl.useProgram(null); // Done setting up shader\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        this.gl.uniform1f(this.uniformLoc.uPointSize, size);\r\n        this.gl.uniform1f(this.uniformLoc.uAngle, angle);\r\n        return this;\r\n    }\r\n\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}","import { RTN } from './VAO';\r\n\r\nexport class Modal {\r\n    mesh: RTN;\r\n    constructor(meshData: RTN) {\r\n        this.mesh = meshData;\r\n    }\r\n\r\n    // Things to do before its time to render\r\n    preRender() {\r\n        // TODO :: Update transform Matrix in future lesson\r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { AttribLocations } from './AttribLocations';\r\nimport { Modal } from './Modal';\r\n\r\nexport class UniformLoc {\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLoc;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertShaderSrc: string, fragShaderSrc: string) {\r\n        this.program = GLShaderCommon.getShaderProgram(gl, vertShaderSrc, fragShaderSrc, true);\r\n\r\n        if (this.program != null) {\r\n            this.gl = gl;\r\n            gl.useProgram(this.program);\r\n            this.attribLoc = new AttribLocations(gl, this.program);\r\n            this.uniformLoc = new UniformLoc();\r\n            // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n        }\r\n\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n        this.gl.useProgram(this.program); return this;\r\n    }\r\n    deactivate() {\r\n        this.gl.useProgram(null); return this;\r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) { this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    }\r\n    // Handle rendering a modal\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n            this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}","import { ATTR } from './AttribLocations';\r\n\r\nexport enum DRAW_MODE {\r\n    //\r\n}\r\n\r\nexport class RTN {\r\n    name: string;\r\n\r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n}\r\n\r\nexport class VAO {\r\n\r\n    static createMeshVAO(gl: WebGL2RenderingContext, name: string, aryVert: number[], aryInd?: number[], aryNorm?: number[], aryUV?: number[]) {\r\n        let rtn = new RTN();\r\n        rtn.name = name;\r\n        rtn.drawMode = gl.TRIANGLES;\r\n\r\n        rtn.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(rtn.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            rtn.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            rtn.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            rtn.vertexCount = aryVert.length / rtn.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm != null) {\r\n            rtn.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV != null) {\r\n            rtn.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd != null) {\r\n            rtn.bufIndex = gl.createBuffer();\r\n            rtn.indexCount = aryInd.length;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, rtn.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n        return rtn;\r\n    }\r\n    constructor() {\r\n        //\r\n    }\r\n}"],"names":["GeometryBase","constructor","scene","this","add","render","gl","Point","app","super","vOld","fOld","v","f","mesh","modal","shader","size","rotation","canvas","initShader","PointShader","VAO","drawMode","POINTS","Modal","Math","sin","activate","set","renderModal","Shader","vertSrc","fragSrc","program","uniformLoc","uPointSize","getUniformLocation","uAngle","useProgram","angle","uniform1f","GLShaderCommon","static","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","createProgram","console","error","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","ATTR","AttribLocations","position","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","meshData","preRender","UniformLoc","vertShaderSrc","fragShaderSrc","attribLoc","deactivate","dispose","getParameter","CURRENT_PROGRAM","bindVertexArray","vao","indexCount","drawElements","UNSIGNED_SHORT","drawArrays","vertexCount","DRAW_MODE","RTN","name","bufVertices","bufNormals","bufUV","bufIndex","vertexComponentLen","aryVert","aryInd","aryNorm","aryUV","rtn","TRIANGLES","createVertexArray","undefined","createBuffer","length","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","Uint16Array"],"sourceRoot":""}
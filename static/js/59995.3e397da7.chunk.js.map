{"version":3,"file":"static/js/59995.3e397da7.chunk.js","mappings":"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","sources":["njslab/Raster/Color-canvas-3d-wireframe-template/index.ts"],"sourcesContent":["\r\nexport class Solution {\r\n  div: HTMLElement;\r\n  renderer: RenderWireframe;\r\n  pts = []\r\n  t = 0.0;\r\n  constructor(id: string) {\r\n    this.div = document.getElementById(id);\r\n\r\n    this.renderer = new RenderWireframe(id);\r\n\r\n    this.pts =  genRandomPt();\r\n    this.renderer.pts = this.pts;\r\n    \r\n\r\n    this.upadte();\r\n  }\r\n  public upadte () {\r\n    requestAnimationFrame(() => { this.upadte(); });\r\n\r\n\r\n    for(let i = 0 ; i < this.pts.length; ++i) {\r\n        this.pts[i].x += Math.cos( (this.pts[i].z + this.pts[i].y) * this.t * 0.1) * 2\r\n    }\r\n\r\n    this.t += 0.001;\r\n  }\r\n  public destroy() {\r\n    // this.renderer.destroy();\r\n    try {\r\n      while (this.div && this.div.lastElementChild) {\r\n        const lastChild = this.div.lastElementChild as Node;\r\n        this.div.removeChild(lastChild);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error removing child elements:\", error);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst genRandomPt = (numPoints = 100) => {\r\n    const pts = []\r\n    for (let i = 0; i < numPoints; i++) {\r\n        pts.push({\r\n        x: (Math.random()) * 255,\r\n        y: (Math.random()) * 255,\r\n        z: (Math.random()) * 255,\r\n      });\r\n    }\r\n    return pts;\r\n  };\r\n  \r\nconst genGridPt = (numPoints = 5) => {\r\n    const scale = 10;\r\n    const pts = []\r\n    for (let j = -numPoints ; j < numPoints; j++) {\r\n      for (let i = -numPoints; i < numPoints; i++) {\r\n        pts.push({\r\n          x: i * scale,\r\n          y: j * scale,  // Z-axis is up, so keep Y constant (ground plane)\r\n          z: 0,\r\n        });\r\n      }\r\n    }\r\n    return pts;\r\n}\r\n\r\n\r\nclass RenderWireframe {\r\n    pts = []\r\n    constructor(id) {\r\n      const div = document.getElementById(id);\r\n      const bounding = div.getBoundingClientRect();\r\n      const canvas = document.createElement(\"canvas\");\r\n      canvas.width = bounding.width;\r\n      canvas.height = bounding.height;\r\n      div.appendChild(canvas);\r\n  \r\n      const ctx = canvas.getContext(\"2d\");\r\n  \r\n      let angleX = -Math.PI / 2;\r\n      let angleY = 0;\r\n      let dragging = false;\r\n      let panning = false;\r\n      let zoom = 1;\r\n      let lastMouseX = 0;\r\n      let lastMouseY = 0;\r\n      let offsetX = 0;\r\n      let offsetY = 0;\r\n      let panStartX = 0;\r\n      let panStartY = 0;\r\n      let fov = 500;\r\n\r\n  \r\n      const rotate = (point, angleX, angleY) => {\r\n        const cosX = Math.cos(angleX);\r\n        const sinX = Math.sin(angleX);\r\n        const cosY = Math.cos(angleY);\r\n        const sinY = Math.sin(angleY);\r\n  \r\n        // (swap Y and Z for Z-up)\r\n        let x = point.x * cosY - point.y * sinY;\r\n        let y = point.x * sinY + point.y * cosY;\r\n  \r\n        let z = point.z * cosX - y * sinX;\r\n        y = point.z * sinX + y * cosX;\r\n  \r\n        return { x, y, z };\r\n      }\r\n  \r\n      const project = (point) => {\r\n        const scale = (fov / (fov + point.y)) * zoom;  // Z-axis is now vertical\r\n        return {\r\n          x: point.x * scale + canvas.width / 2 + offsetX,\r\n          y: -point.z * scale + canvas.height / 2 + offsetY,  // Invert Z for canvas Y-axis\r\n        };\r\n      }\r\n  \r\n      const rendering = () => {\r\n        requestAnimationFrame(() => { rendering(); });\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  \r\n        this.pts.forEach((point) => {\r\n          const rotated = rotate(point, angleX, angleY);\r\n          const projected = project(rotated);\r\n  \r\n          const depthScale = (fov / (fov + rotated.y)) * zoom;\r\n          let radius = 2 * depthScale;\r\n          radius = radius < 0.1 ? 0.1 : radius;\r\n  \r\n          ctx.beginPath();\r\n          ctx.arc(projected.x, projected.y, radius, 0, Math.PI * 2);\r\n          ctx.fillStyle = `rgba(${point.x},${point.y},${point.z},1.0)`;\r\n          ctx.fill();\r\n        });\r\n      }\r\n  \r\n\r\n      canvas.addEventListener(\"mousedown\", (e) => {\r\n        if (e.button === 0) {\r\n          dragging = true;\r\n        } else if (e.button === 2) {\r\n          panning = true;\r\n          panStartX = e.clientX - offsetX;\r\n          panStartY = e.clientY - offsetY;\r\n        }\r\n        lastMouseX = e.clientX;\r\n        lastMouseY = e.clientY;\r\n      });\r\n\r\n      canvas.addEventListener(\"mousemove\", (e) => {\r\n        if (dragging) {\r\n          const dx = e.clientX - lastMouseX;\r\n          const dy = e.clientY - lastMouseY;\r\n          angleX -= dy * 0.01;\r\n          angleY += dx * 0.01;\r\n          lastMouseX = e.clientX;\r\n          lastMouseY = e.clientY;\r\n          rendering();\r\n        } else if (panning) {\r\n          offsetX = e.clientX - panStartX;\r\n          offsetY = e.clientY - panStartY;\r\n          rendering();\r\n        }\r\n      });\r\n  \r\n      canvas.addEventListener(\"mouseup\", () => {\r\n        dragging = false;\r\n        panning = false;\r\n      });\r\n  \r\n      canvas.addEventListener(\"contextmenu\", (e) => {\r\n        e.preventDefault();\r\n      });\r\n  \r\n      // canvas.addEventListener(\"wheel\", (e) => {\r\n      //   zoom += e.deltaY * -0.001;\r\n      //   zoom = Math.min(Math.max(zoom, 0.1), 50);\r\n      //   rendering();\r\n      // });\r\n\r\n      // canvas.addEventListener(\"wheel\", (e) => {\r\n      //   const mouseX = e.clientX - canvas.getBoundingClientRect().left;\r\n      //   const mouseY = e.clientY - canvas.getBoundingClientRect().top;\r\n      \r\n      //   const prevZoom = zoom;\r\n      //   zoom += e.deltaY * -0.001;\r\n      //   zoom = Math.min(Math.max(zoom, 0.1), 50);\r\n      \r\n      //   const scaleChange = zoom / prevZoom;\r\n        \r\n      //   offsetX -= (mouseX - canvas.width / 2 - offsetX) * (scaleChange - 1);\r\n      //   offsetY -= (mouseY - canvas.height / 2 - offsetY) * (scaleChange - 1);\r\n      \r\n      //   rendering();\r\n      // });\r\n\r\n      canvas.addEventListener(\"wheel\", (e) => {\r\n        const mouseX = e.clientX - canvas.getBoundingClientRect().left;\r\n        const mouseY = e.clientY - canvas.getBoundingClientRect().top;\r\n      \r\n        const prevZoom = zoom;\r\n        const zoomSpeed = Math.max(0.001, zoom * 0.02); \r\n        zoom += e.deltaY * -zoomSpeed;\r\n        zoom = Math.min(Math.max(zoom, 0.1), 50);\r\n      \r\n        const scaleChange = zoom / prevZoom;\r\n        \r\n        offsetX -= (mouseX - canvas.width / 2 - offsetX) * (scaleChange - 1);\r\n        offsetY -= (mouseY - canvas.height / 2 - offsetY) * (scaleChange - 1);\r\n      \r\n        rendering();\r\n      });\r\n  \r\n      rendering();\r\n    }\r\n\r\n}"],"names":["Solution","constructor","id","div","renderer","pts","t","this","document","getElementById","RenderWireframe","genRandomPt","upadte","requestAnimationFrame","i","length","x","Math","cos","z","y","destroy","lastElementChild","lastChild","removeChild","error","console","numPoints","push","random","bounding","getBoundingClientRect","canvas","createElement","width","height","appendChild","ctx","getContext","angleX","PI","angleY","dragging","panning","zoom","lastMouseX","lastMouseY","offsetX","offsetY","panStartX","panStartY","fov","rendering","clearRect","forEach","point","rotated","cosX","sinX","sin","cosY","sinY","rotate","projected","scale","project","radius","beginPath","arc","fillStyle","fill","addEventListener","e","button","clientX","clientY","dx","dy","preventDefault","mouseX","left","mouseY","top","prevZoom","zoomSpeed","max","deltaY","min","scaleChange"],"sourceRoot":""}
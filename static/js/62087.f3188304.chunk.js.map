{"version":3,"file":"static/js/62087.f3188304.chunk.js","mappings":"wIACO,MAAMA,EAETC,wBAAwBC,EAA4BC,EAAsBC,GAAuD,IAA/BC,IAAqB,yDAC/GC,EAAUN,EAAeO,aAAaL,EAAIA,EAAGM,cAAyCL,GACtFM,EAAUT,EAAeO,aAAaL,EAAIA,EAAGQ,gBAA2CN,GAC5F,GAAIE,GAAWG,EAAS,CACpB,IAAIE,EAAUX,EAAeY,cAAcV,EAAII,EAASG,EAASJ,GAEjE,OAAIM,IAGAE,QAAQC,MAAM,gCAAwC,KAE9D,CACmD,OAA/CD,QAAQC,MAAM,gCAAwC,IAE9D,CACAb,iBAAiBC,EAA4Ba,EAAcC,GACvD,MAAMC,EAASf,EAAGK,aAAaQ,GAC/B,OAAe,OAAXE,EAA0B,MAC9Bf,EAAGgB,aAAaD,EAAQD,GACxBd,EAAGiB,cAAcF,GAGZf,EAAGkB,mBAAmBH,EAAQf,EAAGmB,gBAS/BJ,GARHJ,QAAQS,IAAI,2CAA6CpB,EAAGqB,iBAAiBN,IAC7Ef,EAAGsB,aAAaP,GACT,MAOf,CACAhB,qBAAqBC,EAA4BC,EAA2BC,GAAiF,IAApDC,IAAqB,yDAC1H,MAAMM,EAAUT,EAAGU,gBACnB,GAAgB,OAAZD,EAAoB,OAAO,KAW/B,GAVAT,EAAGuB,aAAad,EAASR,GACzBD,EAAGuB,aAAad,EAASP,GAMzBF,EAAGwB,YAAYf,IAGVT,EAAGyB,oBAAoBhB,EAAST,EAAG0B,aAAc,CAClD,MAAMd,EAAQZ,EAAG2B,kBAAkBlB,GAKnC,OAJAE,QAAQS,IAAI,2BAA6BR,GACzCZ,EAAG4B,cAAcnB,GACjBT,EAAGsB,aAAapB,GAChBF,EAAGsB,aAAarB,GACT,IACX,CACA,OAAIE,IACAH,EAAG6B,gBAAgBpB,IACdT,EAAGyB,oBAAoBhB,EAAST,EAAG8B,mBACpCnB,QAAQC,MAAM,6BAA8BZ,EAAG2B,kBAAkBlB,IACjET,EAAG4B,cAAcnB,GACjBT,EAAGsB,aAAapB,GAChBF,EAAGsB,aAAarB,GACT,OAGfD,EAAGsB,aAAapB,GAChBF,EAAGsB,aAAarB,GACTQ,EACX,CAcAV,oBAAoBC,EAA4Ba,EAAmBkB,GAE/D,MAAMhB,EAASf,EAAGK,aAAaQ,GAC/B,GAAe,OAAXE,EAAmB,OAAO,KAC9Bf,EAAGgB,aAAaD,EAAQgB,GACxB/B,EAAGiB,cAAcF,GAEjB,OADYf,EAAGkB,mBAAmBH,EAAQf,EAAGmB,gBAC3BJ,GAClBJ,QAAQS,IAAIpB,EAAGqB,iBAAiBN,IAChCf,EAAGsB,aAAaP,GACT,KACX,CACAhB,4BAA4BC,EAA4Ba,EAAmBmB,GACvE,MAAMjB,EAASf,EAAGK,aAAaQ,GAC/B,GAAe,OAAXE,EAAmB,OAAO,KAC9Bf,EAAGgB,aAAaD,EAAQjB,EAAemC,eAAeD,IACtDhC,EAAGiB,cAAcF,GAEjB,OADYf,EAAGkB,mBAAmBH,EAAQf,EAAGmB,gBAC3BJ,GAClBJ,QAAQS,IAAIpB,EAAGqB,iBAAiBN,IAChCf,EAAGsB,aAAaP,GACT,KACX,CAEAhB,sBAAsBiC,GAClB,MAAME,EAAM,IAAIC,eAGhB,OAFAD,EAAIE,KAAK,MAAOJ,GAAK,GACrBE,EAAIG,KAAK,MACc,MAAfH,EAAII,OAAkBJ,EAAIK,aAAe,IACrD,CAiBAxC,iBAAiBiC,EAAaQ,GAC1B,MAAMC,EAAQ,IAAIC,MAClBD,EAAME,OAAS,WACXH,EAAS,KAAMC,EACnB,EACAA,EAAMG,IAAMZ,CAChB,E","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_09/Utility/GLShaderCommon.ts"],"sourcesContent":["\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        // gl.bindAttribLocation(program,ATTR_POSITION_LOC,ATTR_POSITION_NAME);\r\n        // gl.bindAttribLocation(program,ATTR_NORMAL_LOC,ATTR_NORMAL_NAME);\r\n        // gl.bindAttribLocation(program,ATTR_UV_LOC,ATTR_UV_NAME);\r\n\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n"],"names":["GLShaderCommon","static","gl","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","program","createProgram","console","error","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src"],"sourceRoot":""}
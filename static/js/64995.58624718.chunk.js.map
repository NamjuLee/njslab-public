{"version":3,"file":"static/js/64995.58624718.chunk.js","mappings":"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","sources":["njslab/Env/NNA/NJSCore/AppCommon/Enum.ts","njslab/Env/NNA/NJSCore/IO/EventInteraction/TouchInteraction.ts","njslab/Env/NNA/NJSCore/IO/Device/Camera.ts","njslab/Env/NNA/NJSCore/IO/FilesURL/NJSLoader.ts","njslab/Env/NNA/NJSCore/IO/index.ts","njslab/Env/NNA/NJSCore/NGeometry/NVector3.ts","njslab/Env/NNA/NJSCore/NGeometry/NLine.ts","njslab/Env/NNA/NJSCore/NGeometry/NPolyline.ts","njslab/Env/NNA/NJSCore/Interaction/index.ts","njslab/Env/NNA/NJSCore/NData/CSVData.ts","njslab/Env/NNA/NJSCore/Utility/ColorUtility.ts","njslab/Env/NNA/NJSCore/Utility/Animation/NumericalMotion.ts","njslab/Env/NNA/NJSCore/Utility/Web/BrowserUtility.ts","njslab/Env/NNA/NJSCore/NData/Core/StatisticsUtility.ts","njslab/Env/NNA/NJSCore/NData/NGeoJSON.ts","njslab/Env/NNA/NJSCore/NData/NGeoJSONPolygon.ts","njslab/Env/NNA/NJSCore/NData/NGeoJSONFeatureService.ts","njslab/Env/NNA/NJSCore/NData/DataStructure/PixelMapGlobe.ts","njslab/Env/NNA/NJSCore/NUI/AssetWrapper/index.ts","njslab/Env/NNA/NJSCore/NUI/WrapperIndependentPanel/Panel/Common/base/BodyDiv.ts"],"sourcesContent":["export enum MOUSE_TYPE {\r\n    DOWN = 'DOWN',\r\n    MOVE = 'MOVE',\r\n    CLICK = 'CLICK',\r\n    LEFT = 'LEFT',\r\n    MIDDLE = 'MIDDLE',\r\n    RIGHT = 'DOWN_RIGHT',\r\n    DRAG = 'DRAG',\r\n    DOUBLE = 'DOUBLE',\r\n    UP = 'UP',\r\n    WHEEL = 'WHEEL',\r\n}\r\nexport enum COMPILE_MODE {\r\n    PRODUCTION = 'PRODUCTION', DEVELOPMENT = 'DEVELOPMENT', LOCAL = 'LOCAL'\r\n}\r\nexport enum INTERACTION_MODE {\r\n    DRAWING = 'DRAWING', INTERACTIVE_VIEWER = 'INTERACTIVE_VIEWER', OBSERVE_VIEWER = 'OBSERVE_VIEWER'\r\n}\r\nexport enum COMMAND {\r\n    SELECT = 'SELECT',\r\n    POINT = 'POINT',\r\n    LINE = 'LINE',\r\n    SMART_FREEHAND = 'SMART_FREEHAND',\r\n}\r\nexport enum BROWSER_TYPE {\r\n    OPERA = 'OPERA',\r\n    CHROME = 'CHROME',\r\n    SAFARI = 'SAFARI',\r\n    FIREFOX = 'FIREFOX',\r\n    IE = 'IE',\r\n    EDGE = 'EDGE',\r\n    UNKNOWN = 'UNKNOWN',\r\n}\r\nexport enum TOUCH_TYPE {\r\n    START = 'START', END = 'END', MOVE = 'MOVE', CANCEL = 'CANCEL'\r\n}\r\nexport enum EVENT_LISTENER_TYPE { NATIVE = 'NATIVE', JSAPI4X = 'JSAPI4X' }\r\n// ..........................................................................................\r\nexport enum CAMERA_TYPE_THREE {\r\n    PERSPECTIVE = 'PERSPECTIVE',\r\n    ORTHOGRAPHIC = 'ORTHOGRAPHIC',\r\n    STEREO = 'STEREO'\r\n}\r\nexport enum MAPFILTER_MODE {\r\n    CANVAS = 'CANVAS',\r\n    GL = 'GL'\r\n}\r\nexport enum ACTIVE_UI {\r\n    select = 'select',\r\n    point = 'point',\r\n    line = 'line',\r\n    polyline = 'polyline',\r\n    polygon = 'polygon',\r\n    circle = 'circle',\r\n}\r\n\r\nexport enum FRAMEWORK {\r\n    JSAPI = 'JSAPI',\r\n\r\n}\r\n\r\nexport enum APP {\r\n    NONE = 'NONE',\r\n    NNA = 'NNA',\r\n    GA = 'GA',\r\n    AGENCY = 'AGENCY',\r\n    NETWORK = 'NETWORK',\r\n}\r\nexport enum COLORBLENDING {\r\n    SOURCE_OVER = 'source-over',\r\n    SOURCE_IN = 'source-in',\r\n    SOURCE_OUT = 'source-out',\r\n    SOURCE_ATOP = 'source-atop',\r\n    COPY = 'copy',\r\n\r\n    DESTAINATION_OVER = 'destination-over',\r\n    DESTAINATION_IN = 'destination-in',\r\n    DESTAINATION_OUT = 'destination-out',\r\n    DESTAINATION_ATOP = 'destination-atop',\r\n\r\n    LIGHTER = 'lighter',\r\n    MULTIPLY = 'multiply',\r\n    SCREEN = 'screen',\r\n    OVERLAY = 'overlay',\r\n    DARKEN = 'darken',\r\n    LIGHTEN = 'lighten',\r\n    COLOR_DODGE = 'color-dodge',\r\n    COLOR_BURN = 'color-burn',\r\n    HARD_LIGHT = 'hard-light',\r\n    SOFT_LIGHT = 'soft-light',\r\n    DIFFERENCE = 'difference',\r\n    EXCLUSION = 'exclusion',\r\n    HUE = 'hue',\r\n    SATURATION = 'saturation',\r\n    COLOR = 'color',\r\n    LUMINOSITY = 'luminosity'\r\n}\r\nexport enum FHTYPE {\r\n    CURVE = 'CURVE', CURVE_CLOSED = 'CURVE_CLOSED', LINE = 'LINE', PLINE = 'PLINE', PLINE_BENDING = 'PLINE_BENDING', PGON = 'PGON', SMOOTH = 'SMOOTH', SMDRAWING = 'SMDRAWING'\r\n}\r\nexport enum OPTIMIZER {\r\n    REGULAR = 'REGULAR', DOUGLAS_PEUCKER = 'DOUGLAS_PEUCKER',\r\n}\r\n\r\n\r\nexport enum NETWORK_ANALYSIS {\r\n    REACH,\r\n    GRAVITY,\r\n    HUFF,\r\n    BETWEENNESS,\r\n    CLOSENESS,\r\n    STRAIGHTNESS,\r\n    DEGREE,\r\n    NONE,\r\n}\r\nexport enum UNIT {\r\n    METER = 1,\r\n    FOOT = 2,\r\n}\r\nexport enum CONNECTIVITY {\r\n    DISCONNECTED,\r\n    CONNECTED,\r\n    O_TO_D,\r\n    D_TO_O,\r\n}\r\nexport enum NETWORK_INDEX {\r\n    NETWORK_SCORE,\r\n    NETWORK_DISTANCE,\r\n    NETWORK_DECAY,\r\n\r\n    EUCLIDEAN_SCORE,\r\n    EUCLIDEAN_DISTANCE,\r\n    EUCLIDEAN_DECAY,\r\n\r\n    WEIGHT_DESTINATION,\r\n    WEIGHT_ORIGIN,\r\n\r\n    WEIGHT,\r\n    ATTRACTIVENESS,\r\n    DEVIATION,\r\n\r\n    VISIT,\r\n    ORIGIN,\r\n    DESTINATION,\r\n    NODE_ID,\r\n    EDGE_ID,\r\n    ALL,\r\n}\r\n\r\nexport enum ACTIVECOMMAND_MODE {\r\n    // NONE = 'NONE', SELECT = 'SELECT', REMOVE = 'REMOVE', SELECT_RECT = 'SELECT_RECT', SELECT_LASSO = 'SELECT_LASSO', MOVE_EASEING = 'MOVE_EASEING', UNDO = 'UNDO', REDO = 'REDO',\r\n    // // .............................. shape\r\n    // POINT_REGULAR = 'POINT_REGULAR', POINT_NUMBERED = 'POINT_NUMBERED',\r\n    // POLYLINE = 'POLYLINE', POLYLINE_CONSTRAINT = 'POLYLINE_CONSTRAINT',\r\n    // POLYGON = 'POLYGON', POLYGON_MULTIPLE = 'POLYGON_MULTIPLE', POLYGON_CONSTRAINT = 'POLYGON_CONSTRAINT',\r\n    // POLYLINE_BENDING = 'POLYLINE_BENDING', LINE_GRAPH = 'LINE_GRAPH',\r\n    // CIRCLE = 'CIRCLE', CIRCLE_CONSTRAINT_AREA = 'CIRCLE_CONSTRAINT_AREA', CIRCLE_CONSTRAINT_CIRCUMFERENCE = 'CIRCLE_CONSTRAINT_CIRCUMFERENCE',\r\n    // RECTANGLE = 'RECTANGLE',\r\n    // POINT_ICON = 'POINT_ICON', TEXT = 'TEXT', TEXT_LEADERLINE = 'TEXT_LEADERLINE',\r\n    // ARROW_SINGLE = 'ARROW_SINGLE', ARROW_DOUBLE = 'ARROW_DOUBLE',\r\n    // CURVE = 'CURVE', CURVE_OPEN = 'CURVE_OPEN', CURVE_CLOSE = 'CURVE_CLOSE',\r\n    // FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', FREEHAND_CURVE = 'FREEHAND_CURVE',\r\n    // SMARTDRAWING = 'SMARTDRAWING', SMARTDRAWING_DEEPLEARNING = 'SMARTDRAWING_DEEPLEARNING',\r\n    // LINE = 'LINE',\r\n    // // .............................. geometry\r\n    // CPOINT_REGULAR = 'CPOINT_REGULAR', CPOINT_NUMBERED = 'CPOINT_NUMBERED',\r\n    // CLINE = 'CLINE', CPOLYLINE = 'CPOLYLINE', CPOLYGON = 'CPOLYGON', CLINE_TOOGLE = 'CLINE_TOOGLE',\r\n    // CARC = 'CARC', CCIRCLE = 'CCIRCLE', CRECTANGLE = 'CRECTANGLE', CNGON = 'CNGON', CSTAR = 'CSTAR',\r\n    // CCURVE = 'CCURVE', CCURVE_CLOSE = 'CCURVE_CLOSE',\r\n    // CFREEHAND_POLYLINE = 'CFREEHAND_POLYLINE', CFREEHAND_CURVE = 'CFREEHAND_CURVE', CFREEHAND_LINE = 'CFREEHAND_LINE', CFREEHAND_SMARTDRAWING = 'CFREEHAND_SMARTDRAWING',\r\n    // CFREEHAND_SMOOTH = 'CFREEHAND_SMOOTH', CRECTANGLE_CROP = 'CRECTANGLE_CROP',\r\n    // // .............................. internal\r\n    // CPOINT = 'CPOINT', CNODE = 'CNODE', CEDGE = 'CEDGE',\r\n\r\n    NONE = 'NONE', SELECT = 'SELECT', REMOVE = 'REMOVE', SELECT_RECT = 'SELECT_RECT', SELECT_LASSO = 'SELECT_LASSO', MOVE_EASEING = 'MOVE_EASEING', UNDO = 'UNDO', REDO = 'REDO',\r\n    // .............................. shape\r\n    POINT_REGULAR = 'POINT_REGULAR', POINT_NUMBERED = 'POINT_NUMBERED',\r\n    POLYLINE = 'POLYLINE', FREEHAND_POLYLINE_BENDING = 'FREEHAND_POLYLINE_BENDING', POLYLINE_CONSTRAINT = 'POLYLINE_CONSTRAINT',\r\n    POLYGON = 'POLYGON', POLYGON_GRAPH = 'POLYGON_GRAPH',\r\n    POLYGON_MULTIPLE = 'POLYGON_MULTIPLE', POLYGON_CONSTRAINT = 'POLYGON_CONSTRAINT',\r\n    POLYLINE_BENDING = 'POLYLINE_BENDING', LINE_GRAPH = 'LINE_GRAPH',\r\n    CIRCLE = 'CIRCLE', CIRCLE_CONSTRAINT_AREA = 'CIRCLE_CONSTRAINT_AREA', CIRCLE_CONSTRAINT_CIRCUMFERENCE = 'CIRCLE_CONSTRAINT_CIRCUMFERENCE',\r\n    RECTANGLE = 'RECTANGLE',\r\n    POINT_ICON = 'POINT_ICON', TEXT = 'TEXT', TEXT_LEADERLINE = 'TEXT_LEADERLINE',\r\n    ARROW_SINGLE = 'ARROW_SINGLE', ARROW_DOUBLE = 'ARROW_DOUBLE',\r\n    CURVE = 'CURVE', CURVE_OPEN = 'CURVE_OPEN', CURVE_CLOSE = 'CURVE_CLOSE',\r\n    FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', FREEHAND_POLYGON = 'FREEHAND_POLYGON',\r\n    FREEHAND_CURVE = 'FREEHAND_CURVE', FREEHAND_CURVE_CLOSED = 'FREEHAND_CURVE_CLOSED',\r\n    SMARTDRAWING = 'SMARTDRAWING', SMARTDRAWING_DEEPLEARNING = 'SMARTDRAWING_DEEPLEARNING',\r\n    LINE = 'LINE',\r\n\r\n    APOINT = 'APOINT',\r\n    // .............................. geometry\r\n    CPOINT_REGULAR = 'CPOINT_REGULAR', CPOINT_NUMBERED = 'CPOINT_NUMBERED',\r\n    CLINE = 'CLINE', CPOLYLINE = 'CPOLYLINE', CPOLYGON = 'CPOLYGON', CLINE_TOOGLE = 'CLINE_TOOGLE',\r\n    CARC = 'CARC', CCIRCLE = 'CCIRCLE', CRECTANGLE = 'CRECTANGLE', CNGON = 'CNGON', CSTAR = 'CSTAR',\r\n    CCURVE = 'CCURVE', CCURVE_CLOSE = 'CCURVE_CLOSE',\r\n    CFREEHAND_POLYLINE = 'CFREEHAND_POLYLINE', CFREEHAND_CURVE = 'CFREEHAND_CURVE', CFREEHAND_LINE = 'CFREEHAND_LINE', CFREEHAND_SMARTDRAWING = 'CFREEHAND_SMARTDRAWING',\r\n\r\n    CFREEHAND_SMOOTH = 'CFREEHAND_SMOOTH', CRECTANGLE_CROP = 'CRECTANGLE_CROP',\r\n    // .............................. internal\r\n    CPOINT = 'CPOINT', CNODE = 'CNODE', CEDGE = 'CEDGE',\r\n\r\n    LINE_SPIKE = 'LINE_SPIKE', CIRCLE_TRAJECTORY = 'CIRCLE_TRAJECTORY', ARC_SPIKE = 'ARC_SPIKE',\r\n}\r\nexport enum GTYPE {\r\n    POINT_REGULAR = 'POINT_REGULAR', POINT_NUMBERED = 'POINT_NUMBERED', POINT_ICON = 'POINT_ICON',\r\n    POLYLINE = 'POLYLINE', POLYLINE_BENDING = 'POLYLINE_BENDING',\r\n    POLYGON = 'POLYGON', POLYGON_GRAPH = 'POLYGON_GRAPH', POLYGON_MULTIPLE = 'POLYGON_MULTIPLE',\r\n    CIRCLE = 'CIRCLE', RECTANGLE = 'RECTANGLE', AN_GON = 'AN_GON',\r\n    ARROW_SINGLE = 'ARROW_SINGLE', ARROW_DOUBLE = 'ARROW_DOUBLE', TEXT = 'TEXT', CATEXT = 'CATEXT', TEXT_LEADERLINE = 'TEXT_LEADERLINE',\r\n\r\n    APOINT = 'APOINT', AMIDPOINT = 'AMIDPOINT', ANODE = 'ANODE', APOINT_PATH = 'APOINT_PATH', ANODE_RECT = 'ANODE_RECT',\r\n    ANODE_CIRCLE = 'ANODE_CIRCLE', ANODE_NGON = 'ANODE_NGON', ANODE_TEXT = 'ANODE_TEXT',\r\n    AMIDPOINT_ALINE = 'AMIDPOINT_ALINE',\r\n\r\n    CURVE = 'CURVE', CURVE_OPEN = 'CURVE_OPEN', CURVE_CLOSE = 'CURVE_CLOSE',\r\n    FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', FREEHAND_CURVE = 'FREEHAND_CURVE',\r\n    SMARTDRAWING = 'SMARTDRAWING',\r\n    ALINE = 'ALINE',\r\n\r\n    CPOINT = 'CPOINT', CMIDPOINT = 'CMIDPOINT', CNODE = 'CNODE', CNODE_RECT = 'CNODE_RECT', CNODE_CIRCLE = 'CNODE_CIRCLE', CNODE_NGON = 'CNODE_NGON', CNODE_TEXT = 'CNODE_TEXT',\r\n    CPOINT_REGULAR = 'CPOINT_REGULAR', CPOINT_NUMBERED = 'CPOINT_NUMBERED',\r\n    CLINE = 'CLINE', CEDGE = 'CEDGE',\r\n    CPOLYLINE = 'CPOLYLINE', CPOLYGON = 'CPOLYGON', CRECTANGLE = 'CRECTANGLE', CN_GON = 'CN_GON', CN_STAR = 'CN_STAR',\r\n    CARC = 'CARC', CCIRCLE = 'CCIRCLE', CCURVE = 'CCURVE', CCURVE_OPEN = 'CCURVE_OPEN', CCURVE_CLOSED = 'CCURVE_CLOSED',\r\n    CBLACKHOLE = 'CBLACKHOLE', CFREEHAND = 'CFREEHAND', COTHERS = 'COTHERS'\r\n}\r\nexport enum CURSOR {\r\n    DEFAULT = 'default',\r\n    AUTO = 'auto',\r\n    CROSSHAIR = 'crosshair',\r\n    MOVE = 'move',\r\n    POINTER = 'pointer',\r\n    TEXT = 'text',\r\n    WAIT = 'wait',\r\n    HELP = 'help',\r\n    PROGRESS = 'progress',\r\n}\r\n\r\nexport enum X_GTYPE {\r\n\r\n    X_NONE = 'X_NONE', X_REMOVE = 'X_REMOVE',\r\n    X_SELECT = 'X_SELECT', X_SELECT_RECT = 'X_SELECT_RECT', X_SELECT_LASSO = 'X_SELECT_LASSO', X_UNDO = 'X_UNDO', X_REDO = 'X_REDO',\r\n\r\n    X_ARROW_SINGLE = 'X_ARROW_SINGLE', X_ARROW_DOUBLE = 'X_ARROW_DOUBLE',\r\n\r\n    X_POINT_REGULAR = 'X_POINT_REGULAR', X_POINT_NUMBERED = 'X_POINT_NUMBERED',\r\n\r\n    X_POLYLINE = 'X_POLYLINE', X_FREEHAND_POLYLINE = 'X_FREEHAND_POLYLINE',\r\n\r\n    X_POLYGON = 'X_POLYGON',\r\n    X_CIRCLE = 'X_CIRCLE', X_RECTANGLE = 'X_RECTANGLE',\r\n\r\n    X_TEXT_LEADERLINE = 'X_TEXT_LEADERLINE',\r\n    // .............................. internal\r\n    X_POINT = 'X_POINT', X_NODE = 'X_NODE', X_EDGE = 'X_EDGE', X_POINT_ICON = 'X_POINT_ICON'\r\n\r\n    // POLYLINE = 'POLYLINE', X_POLYLINE_CONSTRAINT = 'POLYLINE_CONSTRAINT',\r\n    // POLYGON = 'POLYGON', X_POLYGON_MULTIPLE = 'POLYGON_MULTIPLE', X_POLYGON_CONSTRAINT = 'POLYGON_CONSTRAINT',\r\n    // POLYLINE_BENDING = 'POLYLINE_BENDING', X_LINE_GRAPH = 'LINE_GRAPH',\r\n    // , X_CIRCLE_CONSTRAINT_AREA = 'CIRCLE_CONSTRAINT_AREA', X_CIRCLE_CONSTRAINT_CIRCUMFERENCE = 'CIRCLE_CONSTRAINT_CIRCUMFERENCE',\r\n    //\r\n    // , X_TEXT = 'TEXT',\r\n    //\r\n    // CURVE = 'CURVE', X_CURVE_OPEN = 'CURVE_OPEN', X_CURVE_CLOSE = 'CURVE_CLOSE',\r\n    // FREEHAND_POLYLINE = 'FREEHAND_POLYLINE', X_FREEHAND_CURVE = 'FREEHAND_CURVE',\r\n    // SMARTDRAWING = 'SMARTDRAWING', X_SMARTDRAWING_DEEPLEARNING = 'SMARTDRAWING_DEEPLEARNING',\r\n    // LINE = 'LINE',\r\n\r\n    // .............................. geometry\r\n    // X_CLINE_TOOGLE = 'CLINE_TOOGLE',\r\n    // CARC = 'CARC', X_CCIRCLE = 'CCIRCLE', X_CRECTANGLE = 'CRECTANGLE', X_CNGON = 'CNGON', X_CSTAR = 'CSTAR',\r\n    // CCURVE = 'CCURVE', X_CCURVE_CLOSE = 'CCURVE_CLOSE',\r\n    // CFREEHAND_POLYLINE = 'CFREEHAND_POLYLINE', X_CFREEHAND_CURVE = 'CFREEHAND_CURVE', X_CFREEHAND_LINE = 'CFREEHAND_LINE', X_CFREEHAND_SMARTDRAWING = 'CFREEHAND_SMARTDRAWING',\r\n    // CFREEHAND_SMOOTH = 'CFREEHAND_SMOOTH', X_CRECTANGLE_CROP = 'CRECTANGLE_CROP',\r\n\r\n}","// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\r\nimport { ActiveCommandBase } from '../Core/ActiveCommand/ActiveCommandBase';\r\nimport { TOUCH_TYPE } from '../../AppCommon/Enum';\r\nexport class TouchEventData {\r\n    x: number = -1; y: number = -1; z: number = -1;\r\n    preX: number = -1; preY: number = -1; preZ: number = -1;\r\n    yGLPicking: number;\r\n    command: ActiveCommandBase;\r\n    TOUCH_TYPE: TOUCH_TYPE = TOUCH_TYPE.MOVE;\r\n\r\n    identifier: number;\r\n    // touchType: Touch['touchType'];\r\n\r\n    radiusX: number;\r\n    radiusY: number;\r\n    rotationAngle: number;\r\n    force: number;\r\n\r\n    color: string;\r\n    // tslint:disable-next-line:no-any\r\n    constructor() {\r\n        // console.trace();\r\n    }\r\n    public DeepCopy() {\r\n        const mEvent = new TouchEventData();\r\n        mEvent.x = this.x; mEvent.y = this.y; mEvent.z = this.z;\r\n        mEvent.preX = this.preX; mEvent.preY = this.preY; mEvent.preZ = this.preZ;\r\n\r\n        mEvent.yGLPicking = this.yGLPicking;\r\n        mEvent.TOUCH_TYPE = this.TOUCH_TYPE;\r\n        mEvent.command = this.command;\r\n        // mEvent.native = this.native;\r\n        return mEvent;\r\n    }\r\n}\r\nexport class TouchEventDataList {\r\n    // preEvent: TouchEventDataList;\r\n    native: MouseEvent;\r\n    eventList: TouchEventData[];\r\n    TOUCH_TYPE: TOUCH_TYPE = TOUCH_TYPE.MOVE;\r\n    // tslint:disable-next-line:no-any\r\n    constructor() {\r\n        this.eventList = [];\r\n    }\r\n    // Build(e: TouchEvent) {\r\n    // tslint:disable-next-line:no-any\r\n    public Build(e: any, tType: TOUCH_TYPE) {\r\n        for (let i = 0; i < e.touches.length; ++i) {\r\n            const tEvent = new TouchEventData();\r\n            tEvent.identifier = e.touches[i].identifier;\r\n\r\n            tEvent.TOUCH_TYPE = tType;\r\n\r\n            tEvent.radiusX = e.touches[i].radiusX;\r\n            tEvent.radiusY = e.touches[i].radiusY;\r\n\r\n            tEvent.rotationAngle = e.touches[i].rotationAngle;\r\n            tEvent.x = e.touches[i].clientX;\r\n            tEvent.y = e.touches[i].clientY;\r\n            tEvent.force = e.touches[i].force;\r\n\r\n            tEvent.color = this.ColorForTouch(e.touches[i]);\r\n            this.eventList.push(tEvent);\r\n        }\r\n        //    this.OngoingTouchIndexById()\r\n    }\r\n    public DeepCopy() {\r\n        // return\r\n    }\r\n    // private OngoingTouchIndexById(idToFind: number, ongoingTouches: TouchList) {\r\n    //     for (var i = 0; i < ongoingTouches.length; i++) {\r\n    //         var id = ongoingTouches[i].identifier;\r\n    //         if (id === idToFind) { return i; }\r\n    //     }\r\n    //     return -1;    // not found\r\n    // }\r\n    private ColorForTouch(touch: Touch) {\r\n        const r = touch.identifier % 16;\r\n        const g = Math.floor(touch.identifier / 3) % 16;\r\n        const b = Math.floor(touch.identifier / 7) % 16;\r\n        const rs = r.toString(16); // make it a hex digit\r\n        const gs = g.toString(16); // make it a hex digit\r\n        const bs = b.toString(16); // make it a hex digit\r\n        const color = '#' + rs + gs + bs;\r\n        // console.log('color for touch with identifier ' + touch.identifier + ' = ' + color);\r\n        return color;\r\n    }\r\n}\r\nexport class TouchInteraction {\r\n    public static touchEventDataPre: TouchEventDataList; // = new MouseEventData();\r\n\r\n    isEnable: boolean = true;\r\n\r\n    click: boolean = false;\r\n    prevent: boolean = false;\r\n    delay: number = 100;\r\n    // timer: NodeJS.Timer | number;\r\n    down: boolean = false;\r\n    e: TouchEventData;\r\n    preEvent: TouchInteraction | undefined;\r\n    divHost: HTMLElement;\r\n    public static CommonEventBuilder(e: TouchEvent, type: TOUCH_TYPE): TouchEventDataList {\r\n        const mEvent: TouchEventDataList = new TouchEventDataList();\r\n        mEvent.TOUCH_TYPE = type;\r\n        mEvent.Build(e, type);\r\n\r\n        this.touchEventDataPre = mEvent;\r\n        return mEvent;\r\n    }\r\n    constructor(divHost: HTMLElement) {\r\n        this.divHost = divHost;\r\n        this.InitNativeTouchEvent(this.divHost);\r\n    }\r\n    public InitNativeTouchEvent(div: HTMLElement) {\r\n        div.ontouchstart = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.START);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n        div.ontouchend = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.END);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n        div.ontouchmove = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.MOVE);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n        div.ontouchcancel = (e: TouchEvent) => {\r\n            const mEvent = TouchInteraction.CommonEventBuilder(e, TOUCH_TYPE.CANCEL);\r\n            this.TouchEventEmittingBinding(mEvent);\r\n        };\r\n    }\r\n    TouchEventEmittingBinding(mouseEventData: TouchEventDataList) {\r\n    //     console.log('implmentation needed', mouseEventData);\r\n    }\r\n}","//// reference\r\n// https://stackoverflow.com/questions/12024770/access-camera-from-a-browser\r\n// https://www.html5rocks.com/en/tutorials/getusermedia/intro/\r\n// https://www.youtube.com/watch?v=nCrQ1A2BEZ0\r\nexport const SIZE = { // https://en.wikipedia.org/wiki/Display_resolution\r\n    FULL_HD: [1920, 1080],\r\n    HD: [1280, 720],\r\n    NTSC: [720, 480],\r\n\r\n    WXGA: [1080, 720],\r\n    XGA: [1024, 768],\r\n    SVG: [800, 480]\r\n};\r\nexport class Camera {\r\n    public static id: number = 0;\r\n    public static FILTERS = [\r\n        'grayscale',\r\n        'sepia',\r\n        'blur',\r\n        'brightness',\r\n        'contrast',\r\n        'hue-rotate',\r\n        'hue-rotate2',\r\n        'hue-rotate3',\r\n        'saturate',\r\n        'invert',\r\n        ''\r\n    ];\r\n\r\n    video: HTMLVideoElement;\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    width: number = 400; // 1280; // 400;\r\n    height: number = 400; // 720; // 400;\r\n\r\n    mediaStream: MediaStream;\r\n\r\n    hostDiv: HTMLElement;\r\n    id: string;\r\n\r\n    public static GetCamera() {\r\n        // let canvas: HTMLCanvasElement = document.createElement('canvas') as HTMLCanvasElement;\r\n        // let ctx = canvas.getContext('2d');\r\n        // let videoUrl = window.URL; // || window.webkitURL;\r\n\r\n        // navigator.getUserMedia = navigator.get\r\n    }\r\n    constructor(div: HTMLElement) {\r\n        this.hostDiv = div;\r\n        this.width = div.clientWidth;\r\n        this.height = div.clientHeight;\r\n        this.id = 'njslab-web-core-camera' + Camera.id++;\r\n\r\n        const d = SIZE.FULL_HD;\r\n    //     console.log(d);\r\n        // var constraints = {\r\n        //     audio: false,\r\n        //     video: {\r\n        //         facingMode: facingMode\r\n        //     }\r\n        // };\r\n\r\n        this.InitVideo(div);\r\n        this.InitMedia();\r\n    }\r\n    public SetSizeFromTemplate(size: number[]) {\r\n        this.width = size[0]; this.height = size[1];\r\n        this.video.style.width = size[0] + 'px'; this.video.style.height = size[1] + 'px';\r\n        this.hostDiv.style.width = size[0] + 'px'; this.hostDiv.style.height = size[1] + 'px';\r\n    }\r\n    public InitCanvas() {\r\n        const canvas = document.createElement('canvas');\r\n        if (canvas) {\r\n            this.canvas = canvas;\r\n            const ctx = this.canvas.getContext('2d');\r\n            if (ctx) { this.ctx = ctx; }\r\n        }\r\n    }\r\n    public InitVideo(div: HTMLElement) {\r\n        this.video = document.createElement('video');\r\n        this.video.id = this.id;\r\n        this.video.setAttribute('playsinline', '');\r\n        this.video.setAttribute('autoplay', '');\r\n        this.video.setAttribute('muted', '');\r\n        // this.video.className = Camera.FILTERS[2];\r\n        this.video.style.filter = 'blur(3px)';\r\n        this.video.style.filter = 'contrast(150%)';\r\n        this.video.style.width = this.width + 'px';\r\n        this.video.style.height = this.height + 'px';\r\n\r\n        div.appendChild(this.video);\r\n    }\r\n    public InitMedia() {\r\n        const constraints = {\r\n            video: {\r\n                facingMode: 'facingMode',\r\n                // width: Camera.SIZE.FULL_HD[0],\r\n                // height: Camera.SIZE.FULL_HD[1],\r\n                width: this.width,\r\n                height: this.height,\r\n            },\r\n            audio: false\r\n        };\r\n\r\n        if (this.HasGetUserMedia()) {\r\n            navigator.mediaDevices.getUserMedia(constraints).then((stream: MediaStream) => {\r\n                this.mediaStream = stream;\r\n                this.video.srcObject = this.mediaStream;\r\n            });\r\n        } else {\r\n            alert('getUserMedia() is not supported by your browser');\r\n        }\r\n    }\r\n    public GetImageData() {\r\n        this.ctx.drawImage(this.video, 0, 0, this.width, this.height);\r\n        let frame = this.ctx.getImageData(0, 0, this.width, this.height);\r\n    //     console.log(frame);\r\n    }\r\n    public Resize(width: number, height: number) {\r\n        this.width = width; this.height = height;\r\n        this.video.style.width = width + 'px';\r\n        this.video.style.height = height + 'px';\r\n    }\r\n    public HasGetUserMedia() {\r\n        return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);\r\n    }\r\n    public Dummy() {\r\n        //\r\n    }\r\n    public Dispose() {\r\n        // this.mediaStream.stop();\r\n        this.mediaStream.getTracks().forEach(track => track.stop());\r\n\r\n        // Array.from(document.getElementsByClassName(this.id)).forEach(\r\n        //     (element) => { //   (element, index, array) => {\r\n        //         this.hostDiv.removeChild(element);\r\n        //     }\r\n        // );\r\n\r\n        this.hostDiv.removeChild(this.video);\r\n    }\r\n}","export class NJSLoader {\r\n    public static path: string = '/njslabSandboxStatic';\r\n    public static async URL(url: string) {\r\n        return fetch(url)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenOBJ(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'torus.obj';\r\n        return fetch(`${NJSLoader.path}/3dData/${file}`)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // if (njslabSandboxStatic.app.appVisGL3D) {\r\n                //     njslabSandboxStatic.app.appVisGL3D.activeCommands.LoadOBJ(d);\r\n                // }\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenOBJForExternalRenderer(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n    //     console.log(path);\r\n        return fetch(path, { mode: 'no-cors' })\r\n            .then((response: Response) => {\r\n                // console.log(response.text());\r\n                return response.text();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // if (njslabSandboxStatic.app.appVisGL3D) {\r\n                //     njslabSandboxStatic.app.appVisGL3D.activeCommands.LoadOBJ(d);\r\n                // }\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJsonEx01(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'weektest.geojson';\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJsonEx02(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'BusRoute.geojson';\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJsonEx03(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        let file = 'globeMap.geojson';\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenGeoJson(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n                return d;\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenJson(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/json/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                // njslabSandboxStatic.app.dataUtilities.SetData(d);\r\n                return d;\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenJsonAnnotationTheme(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/theme/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenThemeJSON(file: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/theme/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenDataJSON(file: string) {\r\n        return fetch(`${NJSLoader.path}/${file}`)\r\n            .then((response: Response) => {\r\n                return response.json();\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async OpenImg(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        return fetch(`${NJSLoader.path}/img/${path}`)\r\n            .then((response: Response) => {\r\n                return response.blob();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                const img = new Image();\r\n                const objectURL = URL.createObjectURL(d);\r\n                img.src = objectURL;\r\n                img.onload = () => {\r\n                    img.crossOrigin = 'anonymous';\r\n                    // njslabSandboxStatic.app.imageUtilities.SetData(img);\r\n                };\r\n            //     console.log(img);\r\n                return img;\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadImg(path: string) {\r\n        return fetch(`${NJSLoader.path}/${path}`)\r\n            .then((response: Response) => {\r\n                return response.blob();\r\n            })\r\n            // tslint:disable-next-line:no-any\r\n            .then((d: any) => {\r\n                const objectURL = URL.createObjectURL(d);\r\n                return objectURL;\r\n            })\r\n            .catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadSVG(path: string) {\r\n        return fetch(`${NJSLoader.path}/${path}`)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            }).catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadSVGFromLocal(path: string) {\r\n        return fetch(`${NJSLoader.path}/images/${path}`)\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            }).catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n\r\n    }\r\n    public static async LoadSVGFromHTTP(path: string) {\r\n        return fetch(path, { mode: 'no-cors' })\r\n            .then((response: Response) => {\r\n                return response.text();\r\n            }).catch((err: Error) => {\r\n            //     console.log(err);\r\n            });\r\n    }\r\n    public static async PointRegular() {\r\n        //\r\n    }\r\n\r\n    public static async OpenXML(path: string) {\r\n        // if (njslabSandboxStatic.app) { if (njslabSandboxStatic.app.isProduction) { return; } }\r\n        // let parser = new DOMParser();\r\n        // let response = await fetch(path);\r\n        // let text = await response.text();\r\n        // let xml = await parser.parseFromString(text, 'text/xml');\r\n        // let d = await this.XmlToJson(xml);\r\n        // return d;\r\n    }\r\n    public static async OpenCSV(path: string) {\r\n        /* */\r\n    }\r\n    public static async OpenTXT(path: string) {\r\n        /* */\r\n    }\r\n    // reference https://davidwalsh.name/convert-xml-json\r\n    // static XmlToJson(xml: XMLDocument | any) {\r\n    // let obj = new Object; // Create the return object\r\n    // if (xml.nodeType === 1) { // element\r\n    //     if (xml.[attributes].length > 0) {// do attributes\r\n    //         obj['@attributes'] = {};\r\n    //         for (let j = 0; j < xml.attributes.length; j++) {\r\n    //             let attribute = xml.attributes.item(j);\r\n    //             obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\r\n    //         }\r\n    //     }\r\n    // } else if (xml.nodeType === 3) { // text\r\n    //     if (xml.nodeValue) { obj = xml.nodeValue; }\r\n    // }\r\n    // if (xml.hasChildNodes()) { // do children\r\n    //     for (let i = 0; i < xml.childNodes.length; i++) {\r\n    //         let item = xml.childNodes.item(i) as XMLDocument;\r\n    //         let nodeName = item.nodeName;\r\n    //         if (typeof (obj[nodeName]) === 'undefined') {\r\n    //             obj[nodeName] = this.XmlToJson(item);\r\n    //         } else {\r\n    //             if (typeof (obj[nodeName].push) === 'undefined') {\r\n    //                 let old = obj[nodeName];\r\n    //                 obj[nodeName] = [];\r\n    //                 obj[nodeName].push(old);\r\n    //             }\r\n    //             obj[nodeName].push(this.XmlToJson(item));\r\n    //         }\r\n    //     }\r\n    // }\r\n    // return obj;\r\n    // }\r\n    // static XmlToJson(xml: XMLDocument | any) {\r\n    //     let obj = new Object(); // Create the return object\r\n    //     if (xml.nodeType === 1) { // element\r\n    //         // tslint:disable-next-line:no-string-literal\r\n    //         if (xml['attributes'].length > 0) {// do attributes\r\n    //             obj['@attributes'] = {};\r\n    //             // tslint:disable-next-line:no-string-literal\r\n    //             for (let j = 0; j < xml['attributes'].length; j++) {\r\n    //                 // tslint:disable-next-line:no-string-literal\r\n    //                 let attribute = xml['attributes'].item(j);\r\n    //                 obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\r\n    //             }\r\n    //         }\r\n    //     } else if (xml.nodeType === 3) { // text\r\n    //         if (xml.nodeValue) { obj = xml.nodeValue; }\r\n    //     }\r\n    //     if (xml.hasChildNodes()) { // do children\r\n    //         for (let i = 0; i < xml.childNodes.length; i++) {\r\n    //             // tslint:disable-next-line:no-any\r\n    //             let item = xml.childNodes.item(i) as any;\r\n    //             let nodeName = item.nodeName;\r\n    //             if (typeof (obj[nodeName]) === 'undefined') {\r\n    //                 obj[nodeName] = this.XmlToJson(item);\r\n    //             } else {\r\n    //                 if (typeof (obj[nodeName].push) === 'undefined') {\r\n    //                     let old = obj[nodeName];\r\n    //                     obj[nodeName] = [];\r\n    //                     obj[nodeName].push(old);\r\n    //                 }\r\n    //                 obj[nodeName].push(this.XmlToJson(item));\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     return obj;\r\n    // }\r\n    public static async GetObjectFromSVGPath(path: string) {\r\n        let parser = new DOMParser();\r\n        let response = await fetch(path);\r\n        let text = await response.text();\r\n        let xml = await parser.parseFromString(text, 'text/xml');\r\n        let d = this.XmlToJson(xml);\r\n        return d;\r\n    }\r\n    public static async GetObjectFromSVGImporting(content: string) {\r\n        let parser = new DOMParser();\r\n        let xml = await parser.parseFromString(content, 'text/xml');\r\n        let d = this.XmlToJson(xml);\r\n        return d;\r\n    }\r\n\r\n    public static XmlToJson(xml: XMLDocument | any) {\r\n        let obj: any = {}; //new Object(); // Create the return object\r\n        if (xml.nodeType === 1) { // element\r\n            // tslint:disable-next-line:no-string-literal\r\n            if (xml['attributes'].length > 0) {// do attributes\r\n                obj['@attributes'] = {};\r\n                // tslint:disable-next-line:no-string-literal\r\n                for (let j = 0; j < xml['attributes'].length; j++) {\r\n                    // tslint:disable-next-line:no-string-literal\r\n                    let attribute = xml['attributes'].item(j);\r\n                    obj['@attributes'][attribute.nodeName] = attribute.nodeValue;\r\n                }\r\n            }\r\n        } else if (xml.nodeType === 3) { // text\r\n            if (xml.nodeValue) { obj = xml.nodeValue; }\r\n        }\r\n        if (xml.hasChildNodes()) { // do children\r\n            for (let i = 0; i < xml.childNodes.length; i++) {\r\n                // tslint:disable-next-line:no-any\r\n                let item = xml.childNodes.item(i) as any;\r\n                let nodeName = item.nodeName;\r\n                if (typeof (obj[nodeName]) === 'undefined') {\r\n                    obj[nodeName] = this.XmlToJson(item);\r\n                } else {\r\n                    if (typeof (obj[nodeName].push) === 'undefined') {\r\n                        let old = obj[nodeName];\r\n                        obj[nodeName] = [];\r\n                        obj[nodeName].push(old);\r\n                    }\r\n                    obj[nodeName].push(this.XmlToJson(item));\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n    constructor() {/* */ }\r\n}","export * from './EventInteraction/MouseInteraction';\r\nexport * from './EventInteraction/KeyboardInteraction';\r\nexport * from './EventInteraction/TouchInteraction';\r\nexport * from './EventInteraction/GestureInteraction';\r\nexport * from './EventInteraction/SpeechInteraction';\r\nexport * from './Device/Camera';\r\nexport * from './Device/HTCViveController';\r\nexport * from './Device/Kinect';\r\nexport * from './Device/LeapMotion';\r\nexport * from './Device/Microphone';\r\nexport * from './FilesURL/EsriFeatureService';\r\nexport * from './FilesURL/NJSLoader';\r\nexport * from './FilesURL/DownloadMatrix';\r\nexport * from './Core/ActiveCommand/ActiveCommandBase';\r\nexport * from './Core/ActiveCommand/ActiveCommandControllerBase';\r\n\r\nexport const fetchJsonString = async(path: string) => {\r\n    const d = await fetch(`${window.location.href + path}`, {mode: 'cors'});  \r\n    const json = await d.json();\r\n    return json\r\n}\r\n\r\nexport const fetchJsonStringLocal = async(path: string) => {\r\n    const d = await fetch(`${window.location.href + path}`, {mode: 'cors'});  \r\n    const json = await d.json();\r\n    return json\r\n}\r\n// ..................\r\nexport const fetchJson = async(path: string) => {\r\n    const d = await fetch(`${path}`, {mode: 'cors'});  \r\n    const json = await d.json();\r\n    return json\r\n}\r\nexport const fetchJsonObject = async(path: string) => {\r\n    const json = await fetchJson(path);\r\n    return JSON.parse(JSON.stringify(json))\r\n}\r\n// ..................\r\n\r\nexport const fetchCSVString = async(path: string) => {\r\n    const d = await fetch(`${window.location.href + path}`, {mode: 'cors'});  \r\n    const txt = await d.text();\r\n    return txt\r\n}\r\nexport const getCSV = async(path: string = 'https://raw.githubusercontent.com/NamjuLee/data/master/color/color-data.csv') => {\r\n    const d = await fetch(`${path}`, {mode: 'cors'});  \r\n    const colString = await d.text()\r\n\r\n    let texts = colString.split(/\\r\\n|\\n/);\r\n    let lines = [];\r\n    for (let i = 0; i < texts.length; ++i) {\r\n        let theData = texts[i].split(',');\r\n        let row = [];\r\n        for (let j = 0; j < theData.length; ++j) {\r\n            if (Number.isNaN(theData[j])){\r\n                row.push(+theData[j]);\r\n            } else {\r\n                row.push(theData[j]);\r\n            }\r\n        }\r\n        lines.push(row);\r\n    }\r\n  \r\n//     console.log('color mat :', lines)\r\n}","export const normalize = (v: NVector3): NVector3 => {\r\n  const len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n  if (len < 0.0001) {\r\n    return new NVector3(v.x, v.y, v.z);\r\n  }\r\n  return new NVector3(v.x / len, v.y / len, v.z / len);\r\n}\r\n\r\nexport const distanceToXY = (x0: number, y0: number, x1: number, y1: number) => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\r\n}\r\n\r\nexport const distance = (v0: NVector3, v1: NVector3): number => {\r\n  return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\r\n  // return NWebassemblyController.ctrller.Distance(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z);\r\n}\r\n\r\nexport const distanceByArray = (v0: number[], v1: number[]): number => {\r\n  return Math.sqrt((v0[0] - v1[0]) * (v0[0] - v1[0]) + (v0[1] - v1[1]) * (v0[1] - v1[1]) + (v0[2] - v1[2]) * (v0[2] - v1[2]));\r\n}\r\n\r\nexport const distance2 = (v1: NVector3, v2: NVector3): number => {\r\n  return (v1.x - v2.x) * (v1.x - v2.x) + (v1.y - v2.y) * (v1.y - v2.y) + (v1.z - v2.z) * (v1.z - v2.z);\r\n}\r\n\r\nexport const removeVecsWithinDis = (vs: NVector3[], tor: number = 10): NVector3[] => {\r\n  let vecs: NVector3[] = [];\r\n  for (let i = 0; i < vs.length - 1; ++i) {\r\n    let v0 = vs[i];\r\n    if (v0.d === false) { continue; }\r\n    for (let j = i + 1; j < vs.length; ++j) {\r\n      if (distance(v0, vs[j]) < tor) { vs[j].d = false; }\r\n    }\r\n  }\r\n  for (let i = 0; i < vs.length; ++i) { if (vs[i].d === true) { vecs.push(vs[i]); } }\r\n  // vecs.push(vs[vs.length - 1]);\r\n  return vecs;\r\n}\r\n\r\nexport const meterFromGeoGPSPos = (gV0: NVector3, gV1: NVector3): number => {\r\n    let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n    let dLat = gV1.lat * Math.PI / 180 - gV0.lat * Math.PI / 180;\r\n    let dLon = gV1.long * Math.PI / 180 - gV0.long * Math.PI / 180;\r\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(gV0.lat * Math.PI / 180) * Math.cos(gV1.lat * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    let d = R * c;\r\n    return d * 1000; // meters\r\n}\r\nexport const AABBintersect2D = (v0: NVector3[], v1: NVector3[]): boolean => {\r\n  const v0minX = v0[0].x;\r\n  const v0maxX = v0[1].x;\r\n  const v1minX = v1[0].x;\r\n  const v1maxX = v1[1].x;\r\n  const v0minY = v0[0].y;\r\n  const v0maxY = v0[1].y;\r\n  const v1minY = v1[0].y;\r\n  const v1maxY = v1[1].y;\r\n  // const v0minZ = 0;\r\n  // const v0maxZ = 0;\r\n  // const v1minZ = 0;\r\n  // const v1maxZ = 0;\r\n  return (v0minX <= v1maxX && v0maxX >= v1minX) &&\r\n  (v0minY <= v1maxY && v0maxY >= v1minY); // &&\r\n  // (v0minZ <= v1maxZ && v0maxZ >= v1minZ);\r\n};\r\nexport const dotProduct = (v1: NVector3, v2: NVector3): number => {\r\n  return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\r\n}\r\n\r\nexport const crossProduct = (v1: NVector3, v2: NVector3): NVector3 => {\r\n  return new NVector3(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\r\n}\r\n\r\nexport const getBoundingVecs = (v0: NVector3, v1: NVector3): NVector3[] => {\r\n    let listOfVec: NVector3[] = [];\r\n    let x: number = 0;\r\n    let y: number = 0;\r\n    let z: number = 0;\r\n    if (v0.x < v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y < v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z < v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv0 = new NVector3(x, y, z);\r\n    if (v0.x > v1.x) { x = v0.x; } else { x = v1.x; }\r\n    if (v0.y > v1.y) { y = v0.y; } else { y = v1.y; }\r\n    if (v0.z > v1.z) { z = v0.z; } else { z = v1.z; }\r\n    let nv1 = new NVector3(x, y, z);\r\n    listOfVec.push(new NVector3(nv0.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv0.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv1.x, nv1.y, nv0.z));\r\n    listOfVec.push(new NVector3(nv0.x, nv1.y, nv0.z));\r\n    return listOfVec;\r\n}\r\n\r\nexport const isInsideOfVecs = (v: NVector3, vecs: NVector3[]): boolean => {\r\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = v.x, y = v.y;\r\n    let inside = false;\r\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\r\n      let xi = vecs[i].x, yi = vecs[i].y;\r\n      let xj = vecs[j].x, yj = vecs[j].y;\r\n      let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n    return inside;\r\n  }\r\n  export const isInsideOfVecsByArray = (v: number[], vecs: number[][]): boolean => {\r\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\r\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\r\n    let x = v[0], y = v[1];\r\n    let inside = false;\r\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\r\n      let xi = vecs[i][0], yi = vecs[i][1];\r\n      let xj = vecs[j][0], yj = vecs[j][1];\r\n      let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\r\n      if (intersect) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n    return inside;\r\n  }\r\n  export const isInsideOfVecsByCrossing = (v: NVector3, w: number, h: number, vs: NVector3[]) => {\r\n    if (isInsideOfVecs(new NVector3(v.x - w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (isInsideOfVecs(new NVector3(v.x + w * 0.5, v.y - h * 0.5), vs)) { return true; }\r\n    if (isInsideOfVecs(new NVector3(v.x + w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    if (isInsideOfVecs(new NVector3(v.x - w * 0.5, v.y + h * 0.5), vs)) { return true; }\r\n    return false;\r\n  }\r\n  export const isInsideOfVecsByConcaveHull = (v: NVector3, vs: NVector3[]) => {\r\n    // let vsNum: number[][] = [];\r\n    // for (let i = 0; i < vs.length; ++i) {\r\n    //   vsNum.push([vs[i].x, vs[i].y]);\r\n    // }\r\n  \r\n    // let result = ConcaveCore.hull(vsNum, 20)\r\n    // console.log(vs.length);\r\n    // console.log(result);\r\n  \r\n    // for (let i = 0; i < result.length; ++i) {\r\n    //   new CPoint(result[i][0], result[i][1]);\r\n    // }\r\n  }\r\n  // Convex hull\r\n  // https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\r\n  export const isInsideOfVecsByConvexHull = (v: NVector3, vecs: NVector3[]): boolean => {\r\n    vecs = convexHull(vecs);\r\n    if (isInsideOfVecs(v, vecs)) { return true; } else { return false; }\r\n  }\r\n  export const convexHull = (vs: NVector3[]): NVector3[] => {\r\n    vs.sort(function (a: NVector3, b: NVector3) {\r\n      return a.x === b.x ? a.y - b.y : a.x - b.x;\r\n    });\r\n    let lower: NVector3[] = [];\r\n    for (let i = 0; i < vs.length; i++) {\r\n      while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], vs[i]) <= 0) { lower.pop(); }\r\n      lower.push(vs[i]);\r\n    }\r\n    let upper: NVector3[] = [];\r\n    for (let i = vs.length - 1; i >= 0; i--) {\r\n      while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], vs[i]) <= 0) { upper.pop(); }\r\n      upper.push(vs[i]);\r\n    }\r\n    upper.pop(); lower.pop();\r\n    for (let i = 0; i < upper.length; ++i) { lower.push(upper[i]); }\r\n    return lower;\r\n  }\r\n  export const cross = (O: NVector3, A: NVector3, B: NVector3): number => {\r\n    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);\r\n  }\r\n  export const cross_A_B_OUT = (a: NVector3, b: NVector3, out: NVector3) => {\r\n    const ax = a.x, ay = a.y, az = a.z, bx = b.x, by = b.y, bz = b.z;\r\n    out.x = ay * bz - az * by;\r\n    out.y = az * bx - ax * bz;\r\n    out.z = ax * by - ay * bx;\r\n    return out;\r\n  }\r\n  export const CheckBoundIntersection = (vs: NVector3[], p0: NVector3, p1: NVector3) => {\r\n    for (let i = 0; i < vs.length - 1; ++i) {\r\n      if (checkLineIntersection(vs[i], vs[i + 1], p0, p1)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n// http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\r\nexport const checkLineIntersection = (p0: NVector3, p1: NVector3, p2: NVector3, p3: NVector3) => {\r\n  // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\r\n  let denominator: number = 0, a: number = 0, b: number = 0, numerator1: number = 0, numerator2: number = 0;\r\n  let onLine0: boolean = false, onLine1: boolean = false;\r\n  denominator = ((p3.y - p2.y) * (p1.x - p0.x)) - ((p3.x - p2.x) * (p1.y - p0.y));\r\n  let result: NVector3 = new NVector3(0, 0, 0);\r\n  if (denominator === 0) { return undefined; }\r\n  a = p0.y - p2.y;\r\n  b = p0.x - p2.x;\r\n  numerator1 = ((p3.x - p2.x) * a) - ((p3.y - p2.y) * b);\r\n  numerator2 = ((p1.x - p0.x) * a) - ((p1.y - p0.y) * b);\r\n  a = numerator1 / denominator;\r\n  b = numerator2 / denominator;\r\n\r\n  // if we cast these lines infinitely in both directions, they intersect here:\r\n  result.x = p0.x + (a * (p1.x - p0.x));\r\n  result.y = p0.y + (a * (p1.y - p0.y));\r\n  /*\r\n          // it is worth noting that this should be the same as:\r\n          x = p2.x + (b * (p3.x - p2.x));\r\n          y = p2.x + (b * (p3.y - p2.y));\r\n          */\r\n  // if line1 is a segment and line2 is infinite, they intersect if:\r\n  if (a > 0 && a < 1) {\r\n    onLine0 = true;\r\n  }\r\n  // if line2 is a segment and line1 is infinite, they intersect if:\r\n  if (b > 0 && b < 1) {\r\n    onLine1 = true;\r\n  }\r\n  // if line1 and line2 are segments, they intersect if both of the above are true\r\n  if (onLine0 && onLine1) {\r\n    return result;\r\n  } else { return undefined; }\r\n}\r\n// http://www.sunshine2k.de/coding/java/Polygon/Convex/polygon.htm\r\nexport const checkConvexity = (vs: NVector3[]) => {\r\n  if (vs.length < 3) { return false; }\r\n\r\n  let p: NVector3;\r\n  let v: NVector3;\r\n  let u: NVector3;\r\n  let res = 0;\r\n\r\n  for (let i = 0; i < vs.length; i++) {\r\n    p = vs[i];\r\n    let tmp = vs[(i + 1) % vs.length];\r\n    v = new NVector3(tmp.x - p.x, tmp.y - p.y, 0);\r\n    u = vs[(i + 2) % vs.length];\r\n\r\n    if (i === 0) { // in first loop direction is unknown, so save it in res\r\n      res = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n    } else {\r\n      let newres = u.x * v.y - u.y * v.x + v.x * p.y - v.y * p.x;\r\n      if ((newres > 0 && res < 0) || (newres < 0 && res > 0)) { return false; }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport const getBoundaryByVecWidthHeight = (v: NVector3, width: number, height: number): NVector3[] => {\r\n  let boundarVecsSub = [];\r\n  boundarVecsSub.push(new NVector3(v.x, v.y, v.z));\r\n  boundarVecsSub.push(new NVector3(v.x + width, v.y, v.z));\r\n  boundarVecsSub.push(new NVector3(v.x + width, v.y + height, v.z));\r\n  boundarVecsSub.push(new NVector3(v.x, v.y + height, v.z));\r\n  return boundarVecsSub;\r\n}\r\nexport const getBoundingByVecs = (vs: NVector3[]): NVector3[] => {\r\n  let listOfVec: NVector3[] = [];\r\n  let xMin: number = Number.MAX_SAFE_INTEGER;\r\n  let yMin: number = Number.MAX_SAFE_INTEGER;\r\n  let zMin: number = Number.MAX_SAFE_INTEGER;\r\n\r\n  let xMax: number = Number.MIN_SAFE_INTEGER;\r\n  let yMax: number = Number.MIN_SAFE_INTEGER;\r\n  let zMax: number = Number.MIN_SAFE_INTEGER;\r\n  for (let i = 0; i < vs.length; ++i) {\r\n\r\n    if (xMin > vs[i].x) { xMin = vs[i].x; }\r\n    if (yMin > vs[i].y) { yMin = vs[i].y; }\r\n    if (zMin > vs[i].z) { zMin = vs[i].z; }\r\n\r\n    if (xMax < vs[i].x) { xMax = vs[i].x; }\r\n    if (yMax < vs[i].y) { yMax = vs[i].y; }\r\n    if (zMax < vs[i].z) { zMax = vs[i].z; }\r\n\r\n  }\r\n  listOfVec.push(new NVector3(xMin, yMin, zMin));\r\n  listOfVec.push(new NVector3(xMax, yMax, zMax));\r\n  return listOfVec;\r\n}\r\nexport const getMinMaxVecFromVecs = (vec: NVector3[]): NVector3[] => {\r\n  let minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, minZ = Number.MAX_VALUE;\r\n  let maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE, maxZ = Number.MIN_VALUE;\r\n  for (let v of vec) {\r\n    if (minX > v.x) { minX = v.x; } if (minY > v.y) { minY = v.y; } if (minZ > v.z) { minZ = v.z; }\r\n    if (maxX < v.x) { maxX = v.x; } if (maxY < v.y) { maxY = v.y; } if (maxZ < v.z) { maxZ = v.z; }\r\n  }\r\n  return [new NVector3(minX, minY, minZ), new NVector3(maxX, maxY, maxZ)];\r\n}\r\n\r\n// ...............................................................................\r\nexport const isInsideOfVecsWtihVecs = (vs: NVector3[], vecs: NVector3[]): boolean => {\r\n  let inside: boolean = true;\r\n  for (let i = 0; i < vs.length; i++) {\r\n    inside = isInsideOfVecs(vs[i], vecs);\r\n    if (!inside) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nexport const isInsideOfVecWithHeight = (mv: NVector3, tv: NVector3, width: number, height: number) => {\r\n  if (tv.x < mv.x && mv.x < tv.x + width && tv.y < mv.y && mv.y < tv.y + height) { return true; }\r\n  return false;\r\n}\r\n\r\n// ...........\r\n\r\nexport class NVector3{\r\n    public static normalize(v: NVector3): NVector3 {\r\n      return normalize(v);\r\n  }\r\n    public static attractor = (pt: NVector3, attractor: NVector3, strength: number, falloff: number): NVector3 => {\r\n      let v: NVector3 = sub(attractor, pt);\r\n      let dist = v.Length();\r\n      v.Unitize();\r\n      return v.Mult(strength * Math.exp(-falloff * dist * dist));\r\n    }\r\n    public static getMidVec(v0: NVector3, v1: NVector3): NVector3 {\r\n        return new NVector3(v0.x + ((v1.x - v0.x) * 0.5), v0.y + ((v1.y - v0.y) * 0.5), v0.z + ((v1.z - v0.z) * 0.5));\r\n    }\r\n    public static distanceTo(v0: NVector3, v1: NVector3): number {\r\n        return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\r\n    }\r\n    public static Clone(v: NVector3): NVector3 {\r\n      return NVector3.DeepCopy(v);\r\n    }\r\n    public static DeepCopy(v: NVector3): NVector3 {\r\n      const out = new NVector3(v.x, v.y, v.z);\r\n      out.long = v.long; out.lat = v.lat;\r\n      // out.proX = v.proX; out.proY = v.proY; out.proZ = v.proZ;\r\n      return out;\r\n    }\r\n    public static Dot(a: NVector3, b: NVector3) {\r\n      return a.x * b.x + a.y * b.y + a.z * b.z;\r\n    }\r\n    public static ZAxis(): NVector3 {\r\n      return new NVector3(0, 0, 1);\r\n    }\r\n    public static YAxis(): NVector3 {\r\n      return new NVector3(0, 1, 0);\r\n    }\r\n    public static Zero(): NVector3 {\r\n      return new NVector3(0, 0, 0);\r\n    }\r\n    public static Origin(): NVector3 {\r\n      return new NVector3(0, 0, 0);\r\n    }\r\n    public x: number = 0;\r\n    public y: number = 0;\r\n    public z: number = 0;\r\n    public long: number = 0;\r\n    public lat: number = 0;\r\n    public elevation: number = 0;\r\n\r\n    public d: boolean = true;\r\n    public isRenderable: boolean = true;\r\n\r\n    constructor(x: number = 0, y: number = 0, z: number = 0){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    public Set(x: number, y: number, z: number): NVector3 {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public scale(v: number): NVector3 {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public Mult(v: number): NVector3 {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        this.z *= v;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public DivByVal(v: number): NVector3 {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        this.z /= v;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public DivByVec(v: NVector3): NVector3 {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public Add(v: NVector3): NVector3 {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public Sub(v: NVector3): NVector3 {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public Negate() {\r\n        this.x *= -1;\r\n        this.y *= -1;\r\n        this.z *= -1;\r\n        return new NVector3(this.x, this.y, this.z);\r\n      }\r\n      public Equals(v: NVector3) {\r\n        return this.x === v.x && this.y === v.y && this.z === v.z;\r\n      }\r\n    public distanceTo(v1: NVector3): number {\r\n        return NVector3.distanceTo(this, v1);\r\n    }\r\n    public distanceToGeo(v1: NVector3): number {\r\n        return meterFromGeoGPSPos(this, v1);\r\n    }\r\n    public normalize(): NVector3 {\r\n        let len: number = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n        if (len < 0.0001) {\r\n          return this;\r\n        }\r\n        this.x = this.x / len;\r\n        this.y = this.y / len;\r\n        this.z = this.z / len;\r\n        return this;\r\n    }\r\n    public Clone(): NVector3 {\r\n        const other = new NVector3(this.x, this.y, this.z);\r\n        other.long = this.long; other.lat = this.lat; other.elevation = this.elevation;\r\n        return other;\r\n    }\r\n    public Length(): number {\r\n        const len = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n        if (len < 0.00001) {\r\n          return 0.00001;\r\n        }\r\n        return len;\r\n    }\r\n    public Unitize(): NVector3 {\r\n        return this.normalize();\r\n    }\r\n    // public DistanceByArray(vs: number[]) {\r\n    //     return NVector3.DistanceByArray([this.x, this.y, this.z], vs);\r\n    //   }\r\n    //   public Distance2(v: NVector3): number {\r\n    //     return NVector3.Distance2(new NVector3(this.x, this.y, this.z), v);\r\n    //   }\r\n    //   public DotProduct(v: NVector3): number {\r\n    //     return NVector3.DotProduct(new NVector3(this.x, this.y, this.z), v);\r\n    //   }\r\n    //   public CrossProduct(v: NVector3): NVector3 {\r\n    //     return NVector3.CrossProduct(new NVector3(this.x, this.y, this.z), v);\r\n    //   }\r\n    //   public SquareLength(): number {\r\n    //     let len: number = NVector3.Length(new NVector3(this.x, this.y, this.z));\r\n    //     return len * len;\r\n    //   }\r\n    //   public FadeExp(attr: NVector3, dVal: number) {\r\n    //     let v = new NVector3(this.x, this.y, this.z);\r\n    //     v.Sub(attr);\r\n    //     return Math.exp(-dVal * v.SquareLength());\r\n    //   }\r\n      public GetAngle(): number {\r\n        return Math.atan2(this.y, this.x);\r\n      }\r\n      public GetAngleDegree() {\r\n        return 180 * this.GetAngle() / Math.PI;\r\n      }\r\n      public ToJSON() {\r\n        /* */\r\n      }\r\n      public ToString(): string {\r\n        let t: string = 'x: ' + this.x.toFixed(3).toString() + ' , y: ' + this.y.toFixed(3).toString() + ', z: ' + this.z.toFixed(3).toString();\r\n        return t;\r\n      }\r\n      public ToFloat32Array() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n      }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// public static GetVecforGraphicApp(long: number, lat: number, ele: number, proX: number, proY: number, proZ: number) {\r\n//   let v = new NVector3(0, 0, 0);\r\n//   v.long = long, v.lat = lat, v.ele = ele, v.proX = proX, v.proY = proY, v.proZ = proZ;\r\n//   return v;\r\n// }\r\n\r\n// // https://en.wikipedia.org/wiki/Shoelace_formula\r\n// // https://stackoverflow.com/questions/25122185/measuring-area-with-n-amount-of-gps-coordinates // no concave\r\n// public static GetAreayConvexGPS(vec: NVector3[]) {\r\n//   let lats = [], longs = [];\r\n//   for (let i = 0; i < vec.length; ++i) {\r\n//     lats.push(vec[i].lat); longs.push(vec[i].long);\r\n//   }\r\n//   lats.push(vec[0].lat); longs.push(vec[0].long); // make sure to add the first term to the end of both arrays\r\n\r\n//   let latsSum = 0, longSum = 0; // get the average center point of the polygon\r\n\r\n//   for (let i = lats.length; i--;) {\r\n//     latsSum += lats[i]; longSum += longs[i];\r\n//   }\r\n\r\n//   let latOrigin = latsSum / lats.length;\r\n//   let lonOrigin = longSum / longs.length;\r\n\r\n//   // translate origin to (0,0) by shifting lat long and calculate the standard angle of the point\r\n//   let angles = new Array(lats.length);\r\n\r\n//   for (let j = lats.length; j--;) {\r\n//     lats[j] -= latOrigin;\r\n//     longs[j] -= lonOrigin;\r\n\r\n//     if (longs[j] >= 0 && lats[j] >= 0) {\r\n//       angles[j] = Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n//     } else if (longs[j] < 0 && lats[j] >= 0) {\r\n//       angles[j] = 90 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n//     } else if (longs[j] < 0 && lats[j] < 0) {\r\n//       angles[j] = 180 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n//     } else if (longs[j] >= 0 && lats[j] < 0) {\r\n//       angles[j] = 270 + Math.abs(Math.atan(lats[j] / longs[j]) * 180 / Math.PI);\r\n//     }\r\n//   }\r\n\r\n//   // re-arrange the points from least to greatest angle\r\n//   let curAng, curLat, curLon;\r\n\r\n//   for (let l = 0; l < angles.length; l++) {\r\n//     for (let k = 0; k < angles.length - 1; k++) {\r\n//       curAng = angles[k];\r\n//       curLat = lats[k];\r\n//       curLon = longs[k];\r\n\r\n//       if (curAng < angles[k + 1]) {\r\n//         angles[k] = angles[k + 1];\r\n//         lats[k] = lats[k + 1];\r\n//         longs[k] = longs[k + 1];\r\n\r\n//         angles[k + 1] = curAng;\r\n//         lats[k + 1] = curLat;\r\n//         longs[k + 1] = curLon;\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   // calculate area for irregular polygon\r\n//   let sum1 = 0, sum2 = 0;\r\n\r\n//   for (let t = 0; t < lats.length; t++) {\r\n//     if (t !== lats.length - 1) {\r\n//       sum1 += lats[t] * longs[t + 1];\r\n//       sum2 += longs[t] * lats[t + 1];\r\n//     } else {\r\n//       sum1 += lats[t] * longs[0];\r\n//       sum2 += longs[t] * lats[0];\r\n//     }\r\n//   }\r\n\r\n//   let area = (sum1 - sum2) / 2.0;\r\n//   // console.log('Area: ' + area * 6378137.0 * 6378137.0 / 2.0);\r\n//   return area * 20; // * 6378137.0 * 6378137.0 / 2.0;\r\n// }\r\n// public static ScalarRev_V_S_OUT(v: NVector3, s: number, out: NVector3) {\r\n//   out.x = s * v.x;\r\n//   out.y = s * v.y;\r\n//   out.z = s * v.z;\r\n//   return out;\r\n// }\r\n// public static Add(v0: NVector3, v1: NVector3): NVector3 {\r\n//   return new NVector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\r\n// }\r\nexport const sub = (v0: NVector3, v1: NVector3): NVector3 => {\r\n  return new NVector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\r\n}\r\n\r\n// public static Plus(v1: NVector3, v2: NVector3): NVector3 {\r\n//   return new NVector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\r\n// }\r\n// public static Scale(v: NVector3, s: number): NVector3 {\r\n//   return new NVector3(v.x * s, v.y * s, v.z * s);\r\n// }\r\n// public static MidVec(v0: NVector3, v1: NVector3): NVector3 {\r\n//   return new NVector3(v0.x + ((v1.x - v0.x) * 0.5), v0.y + ((v1.y - v0.y) * 0.5), v0.z + ((v1.z - v0.z) * 0.5));\r\n// }\r\n// public static CompareTwoVectors(v0: NVector3, v1: NVector3): boolean {\r\n//   if (v0.x !== v1.x || v0.y !== v1.y || v0.z !== v1.z) {\r\n//     return false;\r\n//   } else {\r\n//     return true;\r\n//   }\r\n// }\r\n// public static CompareTwoVectorsByGeoPos(v0: NVector3, v1: NVector3, toFixed: number = 4): boolean {\r\n//   if (v0.long.toFixed(toFixed) !== v1.long.toFixed(toFixed) || v0.lat.toFixed(toFixed) !== v1.lat.toFixed(toFixed)) {\r\n//     return false;\r\n//   } else {\r\n//     return true;\r\n//   }\r\n//   // let tor = 0.00000000001;\r\n//   // if ((v1.long - v0.long) >  tor  || (v1.lat - v0.lat) > tor ) {\r\n//   //   return false;\r\n//   // } else {\r\n//   //   return true;\r\n//   // }\r\n// }\r\n// public static Length(v: NVector3): number {\r\n//   return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\r\n// }\r\n\r\n// // https://web.archive.org/web/20090214201206/http://valis.cs.uiuc.edu:80/~sariel/research/CG/compgeom/msg00827.html\r\n// public static GetArea(vs: NVector3[]) {\r\n//   let area = 0;\r\n//   // // double center2dx = 0;\r\n//   // // double center2dy = 0;\r\n//   // for (let i = 0; i < vs.length - 1; i++) {\r\n//   //   // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n//   //   area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n//   //   // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n//   //   // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n//   // }\r\n//   // area *= 0.5;\r\n//   // // center2dx *= 1 / (6 * area);\r\n//   // // center2dy *= 1 / (6 * area);\r\n//   // return area;\r\n\r\n//   for (let i = 0, l = vs.length; i < l; i++) {\r\n//     let addX = vs[i].x;\r\n//     let addY = vs[i === vs.length - 1 ? 0 : i + 1].y;\r\n//     let subX = vs[i === vs.length - 1 ? 0 : i + 1].x;\r\n//     let subY = vs[i].y;\r\n\r\n//     area += (addX * addY * 0.5);\r\n//     area -= (subX * subY * 0.5);\r\n//   }\r\n\r\n//   return Math.abs(area);\r\n// }\r\n// public static GetAreaByLongLat(vs: NVector3[]) {\r\n//   let area = 0;\r\n//   // double center2dx = 0;\r\n//   // double center2dy = 0;\r\n//   for (let i = 0; i < vs.length - 1; i++) {\r\n//     // tmreal t = 2 * vs[i].X * vs[i + 0].Y + vs[i].Y * vs[i + 1].X + vs[i].X * vs[i + 1].Y + 2 * vs[i + 1].X * vs[i + 1].Y;\r\n//     area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n//     // center2d.x += (+vs[i].X - vs[i + 1].X) * t;\r\n//     // center2d.y += (-vs[i].Y + vs[i + 1].Y) * t;\r\n//   }\r\n//   area *= 0.5;\r\n//   // center2dx *= 1 / (6 * area);\r\n//   // center2dy *= 1 / (6 * area);\r\n//   return area;\r\n// }\r\n// public static GetGeoArea(vs: NVector3[]) {\r\n//   let area = 0;\r\n//   for (let i = 0; i < vs.length - 1; i++) {\r\n//     area += (vs[i].x - vs[i + 1].x) * (vs[i].y + vs[i + 1].y);\r\n//   }\r\n//   area *= 0.5;\r\n//   return Math.abs(area);\r\n// }\r\n// public static GetGeoAreaBbyLongLat(vs: NVector3[]) {\r\n//   let area = 0;\r\n//   for (let i = 0; i < vs.length - 1; i++) {\r\n//     area += (vs[i].long - vs[i + 1].long) * (vs[i].lat + vs[i + 1].lat);\r\n//   }\r\n//   area *= 0.5;\r\n//   return Math.abs(area);\r\n// }\r\n// public static GetIndexByShortDistance(v: NVector3, vs: NVector3[]): number[] {\r\n//   let index = -1;\r\n//   let dis = Number.MAX_SAFE_INTEGER;\r\n//   for (let i = 0; i < vs.length; ++i) {\r\n//     let distance = NVector3.Distance(v, vs[i]);\r\n//     if (distance < dis) {\r\n//       dis = distance;\r\n//       index = i;\r\n//     }\r\n//   }\r\n//   return [index, dis];\r\n// }\r\n\r\n\r\n// public static DivideByNum(v0: NVector3, v1: NVector3, n: number = 5): NVector3[] {\r\n//   let vs: NVector3[] = [];\r\n//   let xOff = (v1.x - v0.x) / n;\r\n//   let yOff = (v1.y - v0.y) / n;\r\n//   let zOff = (v1.z - v0.z) / n;\r\n//   for (let j = 0; j < n; ++j) {\r\n//     let x = v0.x + xOff * j;\r\n//     let y = v0.y + yOff * j;\r\n//     let z = v0.z + zOff * j;\r\n//     vs.push(new NVector3(x, y, z));\r\n//   }\r\n//   return vs;\r\n// }\r\n// // static DistancefromGeoV(v0: NVector3, v1: NVector3, unit: UNIT = CGeometry.appDrawing.activeCommands.unit): number {\r\n// //   let dis = NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n// //   if (unit === UNIT.METER) { return dis * 1000; }\r\n// //   if (unit === UNIT.KM) { return dis; }\r\n// //   if (unit === UNIT.MILE) { return MathUtility.MilesFromKM(dis); }\r\n// //   return -1;\r\n// // }\r\n// public static KMeterFromGeoGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n//   let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n//   let dLat = gV1.lat * Math.PI / 180 - gV0.lat * Math.PI / 180;\r\n//   let dLon = gV1.long * Math.PI / 180 - gV0.long * Math.PI / 180;\r\n//   let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(gV0.lat * Math.PI / 180) * Math.cos(gV1.lat * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n//   let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n//   let d = R * c;\r\n//   return d; // * 1000; // meters\r\n// }\r\n// public static KMeterByTwoGeoPos(long0: number, lat0: number, long1: number, lat1: number) {\r\n//   let v0 = new NVector3(0, 0); v0.long = long0; v0.lat = lat0;\r\n//   let v1 = new NVector3(0, 0); v1.long = long1; v1.lat = lat1;\r\n//   return NVector3.KMeterFromGeoGPSPos(v0, v1);\r\n// }\r\n// public static KMeterFromGPSPos(gV0: NVector3, gV1: NVector3): number {\r\n//   let R = 6378.137; // Radius of earth in KM // a = Equatorial radius (6,378.1370 km) // b = Polar radius (6,356.7523 km)\r\n//   let dLat = gV1.y * Math.PI / 180 - gV0.y * Math.PI / 180;\r\n//   let dLon = gV1.x * Math.PI / 180 - gV0.x * Math.PI / 180;\r\n//   let a =\r\n//     Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n//     Math.cos(gV0.y * Math.PI / 180) *\r\n//     Math.cos(gV1.y * Math.PI / 180) *\r\n//     Math.sin(dLon / 2) *\r\n//     Math.sin(dLon / 2);\r\n//   let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n//   let d = R * c;\r\n//   return d; // * 1000; // meters\r\n// }\r\n// public static Get1KM_Long_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n//   let v = new NVector3(long, lat, 0);\r\n//   let addition = 0.0;\r\n//   for (let i = 0; i < 10000; ++i) {\r\n//     let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x + addition, v.y, v.z));\r\n//     if (1 < dis && dis < 1.001) {\r\n//       // console.log('result long', i, dis);\r\n//       return v.x + addition;\r\n//     }\r\n//     addition += 0.00001;\r\n//   }\r\n//   return -1;\r\n// }\r\n// public static Get1KM_lat_ByGeoUnit(long: number = 0, lat: number = 0): number {\r\n//   let v = new NVector3(long, lat, 0);\r\n//   let addition = 0.0;\r\n//   for (let i = 0; i < 10000; ++i) {\r\n//     let dis = NVector3.KMeterFromGPSPos(v, new NVector3(v.x, v.y + addition, v.z));\r\n//     if (1 < dis && dis < 1.001) {\r\n//       // console.log('result lat', i, dis);\r\n//       return v.y + addition;\r\n//     }\r\n//     addition += 0.00001;\r\n//   }\r\n//   return -1;\r\n// }\r\n// public static Get1KM_Lat_Long_GeoUnit(long: number = 0, lat: number = 0): NVector3 {\r\n//   let lng = NVector3.Get1KM_Long_ByGeoUnit(long, lat);\r\n//   let la = NVector3.Get1KM_lat_ByGeoUnit(long, lat);\r\n//   return new NVector3(lng, la, 0);\r\n// }\r\n// // ............................................................................ vec compute\r\n// // static CalculateFalloff(pts: NVector3[], pt: NVector3, s: number, f: number): number {\r\n// //   let newValue = 0.0;\r\n// //   for (let i = 0; i < pts.length; ++i) {\r\n// //     // let v = NJS.PointUtils.CalculateFalloff(pt, pts[i], s, f);\r\n// //     // newValue += v;\r\n// //   }\r\n// //   return newValue;\r\n// // }\r\n// public static CalculateFalloff(pt: NVector3, attractor: NVector3, strength: number, falloff: number): number {\r\n//   let v: NVector3 = NVector3.Sub(attractor, pt);\r\n//   let dist: number = v.Length();\r\n//   return dist * (strength * Math.exp(-falloff * dist * dist));\r\n// }\r\nexport const attractor = (pt: NVector3, attractor: NVector3, strength: number, falloff: number): NVector3 => {\r\n  let v: NVector3 = sub(attractor, pt);\r\n  let dist = v.Length();\r\n  v.Unitize();\r\n  return v.Mult(strength * Math.exp(-falloff * dist * dist));\r\n}\r\n// public static Explosion(pt: NVector3, Explosion: NVector3, strength: number, falloff: number): NVector3 {\r\n//   let v = NVector3.Sub(Explosion, pt);\r\n//   let dist = v.Length();\r\n//   v.Unitize();\r\n//   return v.Mult(-(strength * Math.exp(-falloff * dist * dist)));\r\n// }\r\n// public static Rotor(pt: NVector3, rotor: NVector3, strength: number, falloff: number): NVector3 {\r\n//   let v = NVector3.Sub(rotor, pt);\r\n//   v.Unitize();\r\n//   // v.Rotate(3.141592 / 2, NVector3.zAxis);\r\n//   // let dist: number = v.Length;\r\n//   // return (v.Mult (strength * (Math.exp(-falloff * dist * dist))));\r\n//   return NVector3.Origin();\r\n// }\r\n\r\n// // ............................................................................ vec angle\r\n// public static GetAngleBetween(v0: NVector3, v1: NVector3) {\r\n//   return Math.atan2(v1.x - v0.x, v1.y - v0.y);\r\n// }\r\n// // .................................................\r\n// public static GetCosAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n//   return NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n// }\r\n// public static GetAngleByTwoVectorsRadian(v0: NVector3, v1: NVector3): number {\r\n//   return Math.acos(NVector3.GetCosAngleByTwoVectors(v0, v1));\r\n// }\r\n// public static GetAngleByTwoVectors(v0: NVector3, v1: NVector3): number {\r\n//   return NVector3.GetAngleByTwoVectorsRadian(v0, v1) * 180.0 / Math.PI;\r\n// }\r\n// public static GetRotationByWorldCoodinate(v: NVector3): number {\r\n//   let origin = new NVector3(1, 0, 0);\r\n//   return NVector3.GetAngleByTwoVectors(origin, v);\r\n// }\r\n// public static GetRotationByWorldCoodinateByTwo(v0: NVector3, v1: NVector3): number {\r\n//   let v = v1.Sub(v0);\r\n//   let origin = new NVector3(1, 0, 0);\r\n//   if (v.y > 0) {\r\n//     return NVector3.GetAngleByTwoVectors(origin, v) * -1;\r\n//   } else {\r\n//     return NVector3.GetAngleByTwoVectors(origin, v);\r\n//   }\r\n// }\r\n// // ............................................................................\r\n// // static ToJSon(v){\r\n// // var p = {\r\n// //             'point': [],\r\n// //             'primitive': 'point',\r\n// //             'units': {\r\n// //             'point': 'meters'\r\n// //         }\r\n// // }\r\n// // p.point = [v.x , v.y, v.z];\r\n// // return p;\r\n// // }\r\n// public static ComputeDotProducts(vs: NVector3[]) {\r\n//   let out = [];\r\n//   for (let i = 0; i < vs.length; ++i) {\r\n//     // let v0: NVector3 = NVector3.Origin();\r\n//     // let v1: NVector3;\r\n//     if (i < vs.length - 1) {\r\n//       let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n//       let v1 = new NVector3(vs[i + 1].x, vs[i + 1].y, vs[i + 1].z);\r\n\r\n//       v1.x -= v0.x;\r\n//       v1.y -= v0.y;\r\n//       v1.z -= v0.z;\r\n\r\n//       let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n//       out.push(dot);\r\n//     } else {\r\n//       let v0 = new NVector3(vs[i].x, vs[i].y, vs[i].z);\r\n//       let v1 = new NVector3(vs[0].x, vs[0].y, vs[0].z);\r\n\r\n//       v1.x -= v0.x;\r\n//       v1.y -= v0.y;\r\n//       v1.z -= v0.z;\r\n\r\n//       let dot = NVector3.DotProduct(new NVector3(1, 0, 0), NVector3.Normalize(v1));\r\n//       out.push(dot);\r\n//     }\r\n//   }\r\n//   return out;\r\n// }\r\n// public static ComputeDotProductsWithCenter(vs: NVector3[]) {\r\n//   let cp = NVector3.GetCenterVecFromVecs(vs);\r\n//   let out = [];\r\n//   for (let i = 0; i < vs.length; ++i) {\r\n//     let v0: NVector3;\r\n//     let v1: NVector3;\r\n//     if (i < vs.length - 1) {\r\n//       v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n//       v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n//     } else {\r\n//       v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n//       v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n//     }\r\n//     let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n//     out.push(dot);\r\n//   }\r\n//   return out;\r\n// }\r\n// public static GetXYDimForCircle(vs: NVector3[]) {\r\n//   let cp = NVector3.GetCenterVecFromVecs(vs);\r\n//   // let out = [];\r\n//   let xx: number = 0;\r\n//   let yy: number = 0;\r\n//   let len = vs.length;\r\n//   for (let i = 0; i < len; ++i) {\r\n\r\n//     // if (i < vs.length - 1) {\r\n//     xx += Math.abs(vs[i].x - cp.x);\r\n//     yy += Math.abs(vs[i].y - cp.y);\r\n//     // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n//     // v1 = new NVector3(vs[i + 1].x - cp.x, vs[i + 1].y - cp.y, vs[i + 1].z - cp.z);\r\n//     // } else {\r\n//     // v0 = new NVector3(vs[i].x - cp.x, vs[i].y - cp.y, vs[i].z - cp.z);\r\n//     // v1 = new NVector3(vs[0].x - cp.x, vs[0].y - cp.y, vs[0].z - cp.z);\r\n//     // }\r\n//     // let dot = NVector3.DotProduct(NVector3.Normalize(v0), NVector3.Normalize(v1));\r\n//     // out.push(dot);\r\n//   }\r\n//   len += 2;\r\n//   return [xx / len, yy / len];\r\n// }\r\n\r\n// public static DistanceMouseWithTwoVecs(m: NVector3, v0: NVector3, v1: NVector3): number {\r\n//   v0.x += 0.00001;\r\n//   v0.y += 0.00001;\r\n//   let boundary = NVector3.GetBoundingVecs(v0, v1);\r\n//   let vec = NVector3.GetCloseVec(v0, v1, m.x, m.y, boundary, true);\r\n//   return NVector3.Distance(m, vec);\r\n// }\r\n// public static GetCloseVec(p0: NVector3, p1: NVector3, x: number, y: number, vecsBound: NVector3[], OnLine: boolean = true): NVector3 {\r\n//   let pp1: NVector3 = new NVector3(p0.x, p0.y, p0.z);\r\n//   let pp2: NVector3 = new NVector3(p1.x, p1.y, p1.z);\r\n//   let v1: NVector3 = pp2.Sub(pp1);\r\n//   let p: NVector3 = new NVector3(x, y, 0);\r\n//   let v2: NVector3 = p.Sub(pp1);\r\n//   v1.Unitize();\r\n//   let cp = pp1.Add(v1.Mult(v2.DotProduct(v1)));\r\n//   if (OnLine) {\r\n//     if (NVector3.IsInsideOfVecs(cp, vecsBound)) {\r\n//       return cp;\r\n//     } else {\r\n//       if (p0.Distance(cp) < p1.Distance(cp)) {\r\n//         return new NVector3(p0.x, p0.y, p0.z);\r\n//       } else {\r\n//         return new NVector3(p1.x, p1.y, p1.z);\r\n//       }\r\n//     }\r\n//   } else {\r\n//     return cp;\r\n//   }\r\n// }\r\n// \r\n// // intersect\r\n\r\n// public static orientation(p: NVector3, q: NVector3, r: NVector3): number {\r\n//   // See https://www.geeksforgeeks.org/orientation-3-ordered-points/\r\n//   // for details of below formula.\r\n//   const val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n\r\n//   if (val === 0) { return 0; } // colinear\r\n\r\n//   return (val > 0) ? 1 : 2; // clock or counterclock wise\r\n// }\r\n// public static onSegment(p: NVector3, q: NVector3, r: NVector3): boolean {\r\n//   if (q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y)) { return true; }\r\n//   return false;\r\n// }\r\n// public static isIntersect(p1: NVector3, q1: NVector3, p2: NVector3, q2: NVector3): boolean {\r\n//   // Find the four orientations needed for general and\r\n//   // special cases\r\n//   const o1 = this.orientation(p1, q1, p2);\r\n//   const o2 = this.orientation(p1, q1, q2);\r\n//   const o3 = this.orientation(p2, q2, p1);\r\n//   const o4 = this.orientation(p2, q2, q1);\r\n\r\n//   // General case\r\n//   if (o1 !== o2 && o3 !== o4) { return true; }\r\n\r\n//   // Special Cases\r\n//   // p1, q1 and p2 are colinear and p2 lies on segment p1q1\r\n//   if (o1 === 0 && this.onSegment(p1, p2, q1)) { return true; }\r\n\r\n//   // p1, q1 and q2 are colinear and q2 lies on segment p1q1\r\n//   if (o2 === 0 && this.onSegment(p1, q2, q1)) { return true; }\r\n\r\n//   // p2, q2 and p1 are colinear and p1 lies on segment p2q2\r\n//   if (o3 === 0 && this.onSegment(p2, p1, q2)) { return true; }\r\n\r\n//   // p2, q2 and q1 are colinear and q1 lies on segment p2q2\r\n//   if (o4 === 0 && this.onSegment(p2, q1, q2)) { return true; }\r\n\r\n//   return false; // Doesn't fall in any of the above cases\r\n// }\r\n\r\n\r\n// // end intersect\r\n// \r\n// //////////////////////////////////////////////////////////////////////////////// translation Utility\r\n// public static MoveVecs(vecs: NVector3[], dir: NVector3): NVector3[] {\r\n//   let temp: NVector3[] = [];\r\n//   for (let i = 0; i < vecs.length; ++i) {\r\n//     //\r\n//     temp.push(NVector3.MoveVec(vecs[i], dir));\r\n//   }\r\n//   return temp;\r\n// }\r\n// public static MoveVec(v: NVector3, dir: NVector3): NVector3 {\r\n//   return new NVector3(v.x + dir.x, v.y + dir.y, v.z + dir.z);\r\n// }\r\n// public static RotateVecsLoal(vecs: NVector3[], angle: number): NVector3[] {\r\n//   let cptToLocal = NVector3.GetCenterVecFromVecs(vecs);\r\n//   let cptToWorld = new NVector3(-cptToLocal.x, -cptToLocal.y, -cptToLocal.z);\r\n//   let temp: NVector3[] = NVector3.MoveVecs(vecs, cptToWorld);\r\n//   temp = NVector3.RotateVecs(temp, angle);\r\n//   temp = NVector3.MoveVecs(temp, cptToLocal);\r\n//   return temp;\r\n// }\r\n// public static RotateVecs(vecs: NVector3[], angle: number) {\r\n//   let temp: NVector3[] = [];\r\n//   for (let i = 0; i < vecs.length; ++i) {\r\n//     temp.push(NVector3.RotateVec(vecs[i], angle));\r\n//   }\r\n//   return temp;\r\n// }\r\n// public static RotateVec(v: NVector3, angle: number): NVector3 {\r\n//   let cos = Math.cos(angle * (3.14159265358979 / 180.0));\r\n//   let sin = Math.sin(angle * (3.14159265358979 / 180.0));\r\n//   let x = v.x * cos - v.y * sin;\r\n//   let y = v.x * sin + v.y * cos;\r\n//   return new NVector3(x, y, v.z);\r\n// }\r\n// public static GetCenterVecFromVecs(vecs: NVector3[]): NVector3 {\r\n//   let nv = new NVector3(0, 0, 0);\r\n//   for (let i = 0, c = vecs.length; i < c; ++i) {\r\n//     nv.Add(vecs[i]);\r\n//   }\r\n//   nv.Mult(1.0 / vecs.length);\r\n//   return nv;\r\n// }\r\n// // .............................................................................\r\n// public static MidVecGeo(p1: NVector3, p2: NVector3): NVector3 {\r\n//   // return new NVector3(p1.screenX + p2.screenX * 0.5, p1.screenY + p2.screenY * 0.5, 0);\r\n//   // return new NVector3(p1.x + p2.x * 0.5, p1.y + p2.y * 0.5, 0);\r\n//   return new NVector3(p1.x + ((p2.x + p1.x) * 0.5), p1.y + ((p2.y + p1.y) * 0.5), p1.z + ((p2.z + p1.z) * 0.5));\r\n// }\r\n// // intersection // https://gist.github.com/gordonwoodhull/50eb65d2f048789f9558\r\n// // https://stackoverflow.com/questions/563198/whats-the-most-efficent-way-to-calculate-where-two-line-segments-intersect/1968345#1968345\r\n// public static GetVecFromIntersection(vs: NVector3[]): NVector3[] | undefined {\r\n//   let newVes: NVector3[] = [];\r\n//   for (let j = 0; j < vs.length - 1; ++j) {\r\n//     for (let k = j + 1; k < vs.length - 1; ++k) {\r\n//       let v = NVector3.CheckLineIntersection(vs[j], vs[j + 1], vs[k], vs[k + 1]);\r\n//       if (v) { newVes.push(v); }\r\n//     }\r\n//   }\r\n//   if (newVes.length === 0) { return undefined; } else { return newVes; }\r\n// }\r\n// public static between(a: number, b: number, c: number) {\r\n//   return a - NVector3.eps <= b && b <= c + NVector3.eps;\r\n// }\r\n// public static segment_intersection(v0: NVector3, v1: NVector3, v2: NVector3, v3: NVector3) {\r\n//   var x = ((v0.x * v1.y - v0.y * v1.x) * (v2.x - v3.x) - (v0.x - v1.x) * (v2.x * v3.y - v2.y * v3.x)) /\r\n//     ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n//   var y = ((v0.x * v1.y - v0.y * v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x * v3.y - v2.y * v3.x)) /\r\n//     ((v0.x - v1.x) * (v2.y - v3.y) - (v0.y - v1.y) * (v2.x - v3.x));\r\n//   if (isNaN(x) || isNaN(y)) {\r\n//     return false;\r\n//   } else {\r\n//     if (v0.x >= v1.x) {\r\n//       if (!NVector3.between(v1.x, x, v0.x)) { return false; }\r\n//     } else {\r\n//       if (!NVector3.between(v0.x, x, v1.x)) { return false; }\r\n//     }\r\n//     if (v0.y >= v1.y) {\r\n//       if (!NVector3.between(v1.y, y, v0.y)) { return false; }\r\n//     } else {\r\n//       if (!NVector3.between(v0.y, y, v1.y)) { return false; }\r\n//     }\r\n//     if (v2.x >= v3.x) {\r\n//       if (!NVector3.between(v3.x, x, v2.x)) { return false; }\r\n//     } else {\r\n//       if (!NVector3.between(v2.x, x, v3.x)) { return false; }\r\n//     }\r\n//     if (v2.y >= v3.y) {\r\n//       if (!NVector3.between(v3.y, y, v2.y)) { return false; }\r\n//     } else {\r\n//       if (!NVector3.between(v2.y, y, v3.y)) { return false; }\r\n//     }\r\n//   }\r\n//   return new NVector3(x, y);\r\n// }\r\n\r\n","import { NVector3 } from '.';\n\n\nexport const getLinesFromArray = (lines: number[][][]) =>{\n\n    const lns: NLine[] = [];\n    let ln: NLine;\n    let v0: NVector3;\n    let v1: NVector3;\n\n    for (let j = 0; j < lines.length; ++j ) {\n\n        for (let i = 1; i < lines[j].length; ++i ) {\n            v0 = new NVector3(lines[j][i -1][0], lines[j][i -1][1], 0 );\n            v1 = new NVector3(lines[j][i][0], lines[j][i][1], 0 );\n            ln = new NLine(v0, v1);\n            lns.push(ln);\n        }\n    }\n//     console.log(lines);\n//     console.log(lns);\n    return lns;\n}\n\n\n\nexport class NLine{\n    public p0: NVector3;\n    public p1: NVector3;\n    constructor(p0: NVector3, p1: NVector3) {\n        this.p0 = p0;\n        this.p1 = p1;\n    }\n    \n    \n}","import { NVector3 } from './NVector3';\r\n\r\nexport class NPolyline{\r\n    public pts: NVector3[] = [];\r\n    constructor() {\r\n\r\n    }\r\n    push(v: NVector3) {\r\n        this.pts.push(v);\r\n    }\r\n    \r\n}","import { MOUSE_TYPE } from '../AppCommon/Enum';\r\nexport class MouseEventData {\r\n    x: number = -1; y: number = -1; z: number = -1;\r\n    preX: number = -1; preY: number = -1; preZ: number = -1;\r\n    xs: number =-1; ys: number =-1; preXs: number = -1; preYs: number = -1\r\n    yGLPicking: number;\r\n    isDown: boolean = false;\r\n    isDoubleClick: boolean = false;\r\n    isMove: boolean = false;\r\n    pressedShift: boolean = false;\r\n    pressedAlt: boolean = false;\r\n    pressedCtrl: boolean = false;\r\n\r\n    lat: number = -1;\r\n    long: number = -1;\r\n    wheel: number = 0;\r\n    preWheel: number = 0;\r\n    type: MOUSE_TYPE;\r\n    // premEvent: MouseEventData;\r\n    native: MouseEvent;\r\n    constructor() {\r\n    }\r\n    DeepCopy() {\r\n        let mEvent = new MouseEventData();\r\n        mEvent.x = this.x; mEvent.y = this.y; mEvent.z = this.z; mEvent.preX = this.preX; mEvent.preY = this.preY; mEvent.preZ = this.preZ;\r\n        mEvent.pressedAlt = this.pressedAlt; mEvent.pressedShift = this.pressedShift; mEvent.pressedCtrl = this.pressedCtrl;\r\n        mEvent.isDoubleClick = this.isDoubleClick; mEvent.isDown = this.isDown; mEvent.isMove = this.isMove;\r\n        mEvent.lat = this.lat; mEvent.long = this.long; mEvent.wheel = this.wheel; mEvent.preWheel = this.preWheel;\r\n        mEvent.yGLPicking = this.yGLPicking;\r\n        mEvent.native = this.native;\r\n        return mEvent;\r\n    }\r\n}\r\nexport class KeyboardEventData {\r\n    preEvent: KeyboardEventData;\r\n    key: string;\r\n    hasAltKey: boolean;\r\n    hasCtrlKey: boolean;\r\n    hasShiftKey: boolean;\r\n    hasMetaCommand: boolean;\r\n    code: string;\r\n    keyCode: number;\r\n    constructor() {\r\n        //\r\n    }\r\n}","// import { GetRandomRGB } from './ColorUtility';\r\n// import { lineLineIntersection, distance2d } from './MathUtility';\r\n\r\n// import { buildGraphByLineArray } from '../Definition/Implmentation/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/';\r\n\r\nimport { NLine } from '../NGeometry/NLine';\r\nimport { NVector3 } from '../NGeometry/NVector3';\r\n// import { Edge } from '../Definition/Implmentation/NNAEngineV3/Core/GraphSystem/GraphCore/Graph/Edge';\r\n\r\nexport class C_GEOJson {\r\n\r\n    \r\n\r\n\r\n}\r\n\r\n// export const buildGraphByLineArray = (lns: number[][][]) => {\r\n\r\n\r\n//     const lines: Node[] =[];\r\n\r\n\r\n//     for (let i = 0 ; i < lns.length; ++i) {\r\n\r\n//         for (let j = 1 ; j < lns[i].length; ++j) {\r\n//             const p0 = lns[i][j-1];\r\n//             const p1 = lns[i][j];\r\n\r\n//             const v0 = new NVector3(p0[0], p0[1], 0);\r\n//             const v1 = new NVector3(p1[0], p1[1], 0);\r\n\r\n            \r\n//         }\r\n\r\n//     }\r\n\r\n    \r\n// //     console.log('from graph builder');\r\n// //     console.log(lns);\r\n// //     console.log(edges);\r\n//     return edges;\r\n// }\r\n\r\n\r\n\r\n\r\nexport class CSVData{\r\n    isRenderable: boolean = false;\r\n    dataList: any[][] = [];\r\n    linesVecs: NVector3[][] = [];\r\n    cols: string[] = [];\r\n    streetName: string[] = [];\r\n\r\n    // lineTest: number[][] = [];\r\n    lineTest: NLine[] = [];\r\n\r\n    constructor(){\r\n\r\n    }\r\n    public initLines(toScreen: (x: number, y: number) => number[] ) {\r\n        this.linesVecs = [];\r\n        this.cols = [];\r\n        this.streetName = [];\r\n\r\n        // let col = \"#00ff00\";\r\n        let col = \"rgba(0,255,0, 0.5)\";\r\n\r\n        let nameOfStreet = this.dataList[0][1];\r\n\r\n        let lon = this.dataList[0][4];\r\n        let lat = this.dataList[0][3];\r\n        // let v = this.definition.app.projection.ToScreen(x, y);\r\n        let sv = toScreen(lon, lat);\r\n\r\n        let lineVecs: NVector3[] = [];\r\n        let vec = new NVector3(sv[0], sv[1], 0);\r\n        vec.long = lon;\r\n        vec.lat = lat;\r\n        lineVecs.push(vec);\r\n        // this.cols.push(GetRandomRGB());\r\n        this.cols.push(col);\r\n        this.streetName.push(nameOfStreet);\r\n\r\n        for(let i = 0 ; i < this.dataList.length ; i++) {\r\n\r\n            lon = this.dataList[i][4];\r\n            lat = this.dataList[i][3];\r\n            sv = toScreen(lon, lat);\r\n\r\n            if (nameOfStreet === this.dataList[i][1]) {\r\n                // ctx.lineTo(v0[0], v0[1]);\r\n                let vec = new NVector3(sv[0], sv[1], 0);\r\n                vec.long = lon;\r\n                vec.lat = lat;\r\n                lineVecs.push(vec);\r\n\r\n            } else {\r\n                nameOfStreet = this.dataList[i][1];\r\n                // ctx.moveTo(v0[0], v0[1]);\r\n                this.linesVecs.push(lineVecs);\r\n                // this.cols.push(GetRandomRGB());\r\n                this.cols.push(col);\r\n                this.streetName.push(nameOfStreet);\r\n\r\n                lineVecs = [];\r\n                let vec = new NVector3(sv[0], sv[1], 0);\r\n                vec.long = lon;\r\n                vec.lat = lat;\r\n                lineVecs.push(vec);\r\n\r\n            }\r\n        }\r\n        this.linesVecs.push(lineVecs); // for the lst line\r\n\r\n        // console.log(this);\r\n\r\n        // .. line\r\n\r\n        const nLines = [];\r\n\r\n        for (let j = 0 ; j < this.linesVecs.length; ++j) {\r\n\r\n            for (let i = 1 ; i < this.linesVecs[j].length; ++i) {\r\n                nLines.push(new NLine(this.linesVecs[j][i-1], this.linesVecs[j][i]));\r\n            }\r\n\r\n        }\r\n\r\n\r\n        // console.log('nLines', nLines);\r\n        // getLinesFromArray(this.lines);\r\n        // this.lineTest = getLinesFromArray(this.lines);\r\n        this.lineTest = nLines;\r\n\r\n    }\r\n    public updateProjection(toScreen: (x: number, y: number) => number[] ) {\r\n        // this.linesVecs = [];\r\n\r\n        // let nameOfStreet = this.dataList[0][1];\r\n\r\n        // let x = this.dataList[0][4];\r\n        // let y = this.dataList[0][3];\r\n        // // let v = this.definition.app.projection.ToScreen(x, y);\r\n        // let v = toScreen(x, y);\r\n\r\n        // let line: NVector3[] = [];\r\n        // line.push(v);\r\n\r\n        // for(let i = 0 ; i < this.dataList.length ; i++) {\r\n\r\n        //     const x0 = this.dataList[i][4];\r\n        //     const y0 = this.dataList[i][3];\r\n        //     const v0 = toScreen(x0, y0);\r\n\r\n        //     if (nameOfStreet === this.dataList[i][1]) {\r\n        //         // ctx.lineTo(v0[0], v0[1]);\r\n        //         line.push([v0[0], v0[1]]);\r\n        //     } else {\r\n        //         nameOfStreet = this.dataList[i][1];\r\n        //         // ctx.moveTo(v0[0], v0[1]);\r\n        //         this.linesVecs.push(line);\r\n\r\n        //         line = [];\r\n        //         line.push([v0[0], v0[1]]);\r\n\r\n        //     }\r\n        // }\r\n        // this.linesVecs.push(line); // for the lst line\r\n\r\n        // console.log(this);\r\n\r\n    }\r\n    public render(ctx: CanvasRenderingContext2D, toScreen: (x: number, y: number) => number[], mx: number, my: number) {\r\n\r\n        ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n    //     console.log(this.lineTest.length);\r\n        for (let i = 0 ; i < this.lineTest.length; ++i) {\r\n\r\n            const d = this.lineTest[i];\r\n            // console.log(d);\r\n\r\n         \r\n            ctx.moveTo(d.p0.x, d.p0.y);\r\n            ctx.lineTo(d.p1.x, d.p1.y);\r\n   \r\n\r\n        }\r\n        ctx.stroke();\r\n\r\n\r\n        // console.log('this.lineTest', this.lineTest.length);\r\n        /*\r\n        ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        // console.log(this.lineTest.length);\r\n        for (let i = 0 ; i < this.lineTest.length; ++i) {\r\n\r\n            const d = this.lineTest[i];\r\n            // console.log(d);\r\n\r\n         \r\n            ctx.moveTo(d[0], d[1]);\r\n            ctx.lineTo(d[2], d[3]);\r\n   \r\n\r\n        }\r\n        ctx.stroke();\r\n        */\r\n\r\n\r\n    ////     console.log('this.lineTest', this.lines.length);\r\n        // for(let i = 0 ; i < this.lines.length ; i++) {\r\n\r\n        //     let isOn = false;\r\n\r\n        //     ctx.lineWidth = 0.5;\r\n\r\n        //     ctx.strokeStyle = this.cols[i];\r\n        //     ctx.beginPath();\r\n        //     ctx.moveTo(this.lines[i][0][0], this.lines[i][0][1]);\r\n\r\n        //     for(let j = 1 ; j < this.lines[i].length; ++j) {\r\n\r\n        //         // if(isIntersect(this.lines[i][j-1][0], this.lines[i][j-1][1], this.lines[i][j][0], this.lines[i][j][1], mx-2, my-1, mx+1, my+2)){\r\n        //         //     isOn = true;\r\n        //         // }\r\n\r\n        //         const result = lineLineIntersection(this.lines[i][j-1][0], this.lines[i][j-1][1], this.lines[i][j][0], this.lines[i][j][1],  mx + 5, my + 5, mx - 5, my - 5)\r\n                \r\n        //         if(result?.length === 2) {\r\n        //             const dis = distance2d(result[0], result[1], mx, my);\r\n        //             if (dis < 10) {\r\n        //                 isOn = true;\r\n        //                 // ctx.lineWidth = 10;\r\n        //             }\r\n        //         }\r\n                    \r\n\r\n        //         ctx.lineTo(this.lines[i][j][0], this.lines[i][j][1]);\r\n\r\n        //     }\r\n        //     // if(isOn) {\r\n        //     //     ctx.lineWidth = 10;\r\n        //     // }\r\n        //     ctx.stroke();\r\n\r\n        //     ctx.beginPath();\r\n        //     ctx.arc(mx, my, 2, 0.0, Math.PI * 2.0);\r\n        //     ctx.fillStyle = \"ff0000\";\r\n        //     ctx.fill();\r\n\r\n        // }\r\n    }\r\n    public renderRaw(ctx: CanvasRenderingContext2D, toScreen: (x: number, y: number) => number[]) {\r\n        if (!this.isRenderable) { return; }\r\n        ctx.fillStyle = \"#ff0000\";\r\n        \r\n        ctx.strokeStyle = \"#0ff000\";\r\n        ctx.lineWidth = 1;\r\n\r\n        // console.log(this.dataList);\r\n        // console.log(ctx);\r\n\r\n        let nameOfStreet = this.dataList[0][1];\r\n\r\n        let x = this.dataList[0][4];\r\n        let y = this.dataList[0][3];\r\n        // console.log(toScreen(100, 100));\r\n        let v = toScreen(x, y);\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(v[0], v[1]);\r\n\r\n        for(let i = 0 ; i < this.dataList.length ; i++) {\r\n\r\n            const x0 = this.dataList[i][4];\r\n            const y0 = this.dataList[i][3];\r\n            const v0 = toScreen(x0, y0);\r\n\r\n            if (nameOfStreet === this.dataList[i][1]) {\r\n                ctx.lineTo(v0[0], v0[1]);\r\n            } else {\r\n                nameOfStreet = this.dataList[i][1];\r\n                ctx.stroke();\r\n                ctx.beginPath();\r\n                ctx.moveTo(v0[0], v0[1]);\r\n            }\r\n        }\r\n        ctx.stroke();\r\n    }\r\n    public ComputeCSV(data: any){\r\n        data =  this.processData(data);\r\n        for(let i = 0 ; i < data.length; ++i){\r\n            // console.log(data[i]);\r\n        }\r\n    }\r\n    private processData(allText: any) {\r\n        const allTextLines = allText.split(/\\r\\n|\\n/);\r\n        const headers = allTextLines[0].split(',');\r\n        const lines = [];\r\n\r\n        for (let i = 1; i < allTextLines.length; i++) {\r\n            const data = allTextLines[i].split(',');\r\n            if (data.length === headers.length) {\r\n\r\n                const tarr = [];\r\n                for (let j = 0; j < headers.length; j++) {\r\n                    const dataTemp = +data[j]\r\n                    if(isNaN(dataTemp)){\r\n                        tarr.push(data[j]);\r\n                    } else {\r\n                        tarr.push(dataTemp);\r\n                    }\r\n                    \r\n                }\r\n                lines.push(tarr);\r\n            }\r\n        }\r\n        this.dataList = lines;\r\n        this.isRenderable = true;\r\n        return lines;\r\n    }\r\n}","export const hexToCanvasColor = (hex: string, visibility: number | string = 0, isGray: boolean = false) => {\r\n    // if (hex[0] !== '#') {\r\n    //     let col = hex.split('(')[1].split(')')[0].split(',');\r\n    //     hex = this.RGBToHex(parseInt(col[0]), parseInt(col[1]), parseInt(col[2]));\r\n    // }\r\n    // Convert #AA77CC to rbga() format for Firefox\r\n    let thecol;\r\n    visibility = visibility || '1.0';\r\n    hex = hex.replace('#', '');\r\n    let r = parseInt(hex.substring(0, 2), 16);\r\n    let g = parseInt(hex.substring(2, 4), 16);\r\n    let b = parseInt(hex.substring(4, 6), 16);\r\n    if (isGray) {\r\n        // let v = (0.58 * (r / 255)) + (0.17 * (g / 255)) + (0.8 * (b / 255));\r\n        let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\r\n        thecol = 'rgba(' + v + ',' + v + ',' + v + ',' + visibility + ')';\r\n    } else {\r\n        thecol = 'rgba(' + r + ',' + g + ',' + b + ',' + visibility + ')';\r\n    }\r\n    return thecol;\r\n}\r\nexport const RGBtoGray = (r: number, g: number, b: number) => {\r\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n}\r\nexport const getRandomColorByLightness = (hex: string, lightness: number) => {\r\n    const rgb = hexToRGBANormalized(hex);\r\n    const hsl = RGB2HSL(rgb[0], rgb[1], rgb[2]);\r\n    return HSL2RGB(hsl[0], hsl[1], hsl[2] + lightness);\r\n}\r\nexport const getRandomHex = () => {\r\n    return RGBToHex(Math.round(Math.random() * 255), Math.round(Math.random() * 255), Math.round(Math.random() * 255));\r\n}\r\nexport const getRandomRGB = () => {\r\n    return `rgb(${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)})`;\r\n}\r\nexport const getRandomRGBA = () => {\r\n    return `rgb(${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)},${Math.round(Math.random() * 255)},1)`;\r\n}\r\nexport const getRandomRGBArray = () => {\r\n    return [(Math.round(Math.random() * 255)), (Math.round(Math.random() * 255)), (Math.round(Math.random() * 255))];\r\n}\r\nexport const getRandomColor = () => {\r\n    let letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\n // https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n export const RGBToHex = (r: number, g: number, b: number) => {\r\n    return '#' + [Math.round(r), Math.round(g), Math.round(b)].map(x => {\r\n        const hex = x.toString(16);\r\n        return hex.length === 1 ? '0' + hex : hex;\r\n    }).join('');\r\n\r\n    // let rr = Math.round(r).toString(16);\r\n    // rr = rr.length === 1 ? '0' + rr : rr;\r\n\r\n    // let gg = Math.round(r).toString(16);\r\n    // gg = gg.length === 1 ? '0' + gg : gg;\r\n\r\n    // let bb = Math.round(r).toString(16);\r\n    // bb = bb.length === 1 ? '0' + bb : bb;\r\n\r\n    // return `#${r}${g}${b}`;\r\n}\r\n    // calculate the perceptual distance between colors in CIELAB\r\n    // https://github.com/THEjoezack/ColorMine/blob/master/ColorMine/ColorSpaces/Comparisons/Cie94Comparison.cs\r\n\r\nexport const deltaE = (labA: number[], labB: number[]) => {\r\n        let deltaL = labA[0] - labB[0];\r\n        let deltaA = labA[1] - labB[1];\r\n        let deltaB = labA[2] - labB[2];\r\n        let c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);\r\n        let c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);\r\n        let deltaC = c1 - c2;\r\n        let deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;\r\n        deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\r\n        let sc = 1.0 + 0.045 * c1;\r\n        let sh = 1.0 + 0.015 * c1;\r\n        let deltaLKlsl = deltaL / (1.0);\r\n        let deltaCkcsc = deltaC / (sc);\r\n        let deltaHkhsh = deltaH / (sh);\r\n        let i = deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh;\r\n        return i < 0 ? 0 : Math.sqrt(i);\r\n    }\r\nexport const Threshold = (r: number, g: number, b: number, threshold: number, high: number, low: number): number => {\r\n        return (0.3 * r + 0.59 * g + 0.11 * b >= threshold) ? high : low;\r\n    }\r\nexport const hexToRGBANormalized = (hex: string, visibility: number = 1, isGray: boolean = false) => {\r\n        hex = hex.replace('#', '');\r\n        let r = parseInt(hex.substring(0, 2), 16);\r\n        let g = parseInt(hex.substring(2, 4), 16);\r\n        let b = parseInt(hex.substring(4, 6), 16);\r\n        if (isGray) {\r\n            // let v = (0.58 * (r / 255)) + (0.17 * (g / 255)) + (0.8 * (b / 255));\r\n            let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\r\n            return [v, v, v, visibility];\r\n        } else {\r\n            return [r / 255, g / 255, b / 255, visibility / 255];\r\n        }\r\n    }\r\n    // https://gist.github.com/mjackson/5311256\r\nexport const RGB2HSL = (r: number, g: number, b: number) => { // 0 to 255\r\n        r /= 255; g /= 255; b /= 255;\r\n\r\n        let max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n        let h = (max + min) / 2, s = (max + min) / 2, l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n            h = s = 0; // achromatic\r\n        } else {\r\n            let d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch (max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n                default: break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return [h, s, l]; // 0 to 1\r\n    }\r\nexport const HSL2RGB = (h: number, s: number, l: number) => { // 0 to 1\r\n        let r, g, b;\r\n\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        } else {\r\n            const hue2rgb = (pp: number, qq: number, t: number) => {\r\n                if (t < 0) { t += 1; }\r\n                if (t > 1) { t -= 1; }\r\n                if (t < 1 / 6) { return pp + (qq - pp) * 6 * t; }\r\n                if (t < 1 / 2) { return qq; }\r\n                if (t < 2 / 3) { return pp + (qq - pp) * (2 / 3 - t) * 6; }\r\n                return pp;\r\n            };\r\n\r\n            let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            let p = 2 * l - q;\r\n\r\n            r = hue2rgb(p, q, h + 1 / 3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1 / 3);\r\n        }\r\n        return [\r\n            Math.max(0, Math.min(Math.round(r * 255), 255))\r\n            , Math.max(0, Math.min(Math.round(g * 255), 255))\r\n            , Math.max(0, Math.min(Math.round(b * 255), 255))\r\n        ];\r\n    }\r\nexport const RGB2HSV = (r: number, g: number, b: number) => { // 0 to 255\r\n        r /= 255; g /= 255; b /= 255;\r\n\r\n        let max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n        let h = max, s = max, v = max;\r\n\r\n        let d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if (max === min) {\r\n            h = 0; // achromatic\r\n        } else {\r\n            switch (max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n                default: break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n        return [h, s, v]; // 0 to 1\r\n    }\r\n    export const HSV2RGB = (h: number, s: number, v: number) => { // 0 to 1\r\n        let r = 0, g = 0, b = 0;\r\n\r\n        let i = Math.floor(h * 6);\r\n        let f = h * 6 - i;\r\n        let p = v * (1 - s);\r\n        let q = v * (1 - f * s);\r\n        let t = v * (1 - (1 - f) * s);\r\n\r\n        switch (i % 6) {\r\n            case 0: \r\n                r = v; g = t; b = p; \r\n                break;\r\n            case 1: \r\n                r = q; g = v; b = p; \r\n                break;\r\n            case 2: \r\n            r = p; g = v; b = t; \r\n                break;\r\n            case 3: \r\n            r = p; g = q; b = v; \r\n                break;\r\n            case 4: \r\n            r = t; g = p; b = v; \r\n                break;\r\n            case 5: \r\n            r = v; g = p; b = q; \r\n                break;\r\n            default: break;\r\n        }\r\n\r\n        return [r * 255, g * 255, b * 255];\r\n    }\r\nexport const getFalseColor = (value: number): number[] => {\r\n    const col: number[] = [];\r\n    col.push(Math.round(getR(value) * 255));\r\n    col.push(Math.round(getG(value) * 255));\r\n    col.push(Math.round(getB(value) * 255));\r\n    return col;\r\n}\r\nexport const getR = (value: number, min = 0, max = 1) => {\r\n    value = (value - min) / (max - min);\r\n    if (value <= 0.25)\r\n        return 0;\r\n    else if (value <= 0.5)\r\n        return (1020. * value - 255.) / 255.;\r\n    else return 1;\r\n}\r\n\r\nexport const getG = (value: number, min = 0, max = 1) => {\r\n    value = (value - min) / (max - min);\r\n    if (value <= 0.25)\r\n        return (1020 * value) / 255;\r\n    else if (value <= 0.5)\r\n        return 1;\r\n    else\r\n        return (-510 * value + 510) / 255;\r\n}\r\n\r\nexport const getB = (value: number, min = 0, max = 1) => {\r\n    value = (value - min) / (max - min);\r\n    if (value <= 0.25)\r\n        return (-512 * value + 128) / 255;\r\n    else return 0;\r\n}","export class NumericalMotion {\r\n    public static t: number = 0.0;\r\n    public static Scale(r: number) { return (Math.sin(NumericalMotion.t) + 5.0) * 0.2 * r; }\r\n    public static ScaleLocalT(r: number, t: number) { return (Math.sin(t) + 5.0) * 0.2 * r; }\r\n    public static ScaleMin(r: number) { return ((Math.sin(NumericalMotion.t) + 5.0) * 0.02 + 0.9) * r; }\r\n    public static ScaleMinOfMin(t: number) { return Math.cos(t); }\r\n    public static ScaleMinLocalT(r: number, t: number) { return ((Math.sin(t) + 5.0) * 0.02 + 0.9) * r; }\r\n    // reference for easing motion.\r\n    // https://codepen.io/xerxesnoble/pen/JNgmJR?editors=0010\r\n    public static linear(t: number) { return t; }\r\n    // accelerating from zero velocity\r\n    public static EaseInQuad(t: number) { return t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutQuad(t: number) { return t * (2 - t); }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutQuad(t: number) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; }\r\n    // accelerating from zero velocity\r\n    public static EaseInCubic(t: number) { return t * t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutCubic(t: number) { return (--t) * t * t + 1; }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutCubic(t: number) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; }\r\n    // accelerating from zero velocity\r\n    public static EaseInQuart(t: number) { return t * t * t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutQuart(t: number) { return 1 - (--t) * t * t * t; }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutQuart(t: number) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; }\r\n    // accelerating from zero velocity\r\n    public static EaseInQuint(t: number) { return t * t * t * t * t; }\r\n    // decelerating to zero velocity\r\n    public static EaseOutQuint(t: number) { return 1 + (--t) * t * t * t * t; }\r\n    // acceleration until halfway, then deceleration\r\n    public static EaseInOutQuint(t: number) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\r\n    // elastic bounce effect at the beginning\r\n    public static EaseInElastic(t: number) { return (.04 - .04 / t) * Math.sin(25 * t) + 1; }\r\n    // elastic bounce effect at the end\r\n    public static EaseOutElastic(t: number) { return .04 * t / (--t) * Math.sin(25 * t); }\r\n    // elastic bounce effect at the beginning and end\r\n    public static EaseInOutElastic(t: number) { t -= .5; return t < 0 ? (.01 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1; }\r\n\r\n    // https://joshondesign.com/2013/03/01/improvedEasingEquations\r\n    public static easeOutElastic2(t: number) { var p = 0.3; return Math.pow(2, -10 * t) * Math.sin((t - p / 4) * (2 * Math.PI) / p) + 1; }\r\n\r\n    // https://github.com/AndrewRayCode/easing-utils/blob/master/src/easing.js\r\n    // Slight acceleration from zero to full speed\r\n    public static easeInSine(t: number) { return -1 * Math.cos(t * (Math.PI / 2)) + 1; }\r\n    // Slight deceleration at the end\r\n    public static easeOutSine(t: number) { return Math.sin(t * (Math.PI / 2)); }\r\n    // Slight acceleration at beginning and slight deceleration at end\r\n    public static easeInOutSine(t: number) { return -0.5 * (Math.cos(Math.PI * t) - 1); }\r\n    // Accelerating from zero velocity\r\n    public static easeInQuad(t: number) { return t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutQuad(t: number) { return t * (2 - t); }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutQuad(t: number) { return t < 0.5 ? 2 * t * t : - 1 + (4 - 2 * t) * t; }\r\n    // Accelerating from zero velocity\r\n    public static easeInCubic(t: number) { return t * t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutCubic(t: number) { const t1 = t - 1; return t1 * t1 * t1 + 1; }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutCubic(t: number) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; }\r\n    // Accelerating from zero velocity\r\n    public static easeInQuart(t: number) { return t * t * t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutQuart(t: number) { const t1 = t - 1; return 1 - t1 * t1 * t1 * t1; }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutQuart(t: number) { const t1 = t - 1; return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * t1 * t1 * t1 * t1; }\r\n    // Accelerating from zero velocity\r\n    public static easeInQuint(t: number) { return t * t * t * t * t; }\r\n    // Decelerating to zero velocity\r\n    public static easeOutQuint(t: number) { const t1 = t - 1; return 1 + t1 * t1 * t1 * t1 * t1; }\r\n    // Acceleration until halfway, then deceleration\r\n    public static easeInOutQuint(t: number) { const t1 = t - 1; return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * t1 * t1 * t1 * t1 * t1; }\r\n    // Accelerate exponentially until finish\r\n    public static easeInExpo(t: number) { if (t === 0) { return 0; } return Math.pow(2, 10 * (t - 1)); }\r\n    // Initial exponential acceleration slowing to stop\r\n    public static easeOutExpo(t: number) { if (t === 1) { return 1; } return (-Math.pow(2, -10 * t) + 1); }\r\n    // Exponential acceleration and deceleration\r\n    public static easeInOutExpo(t: number) {\r\n        if (t === 0 || t === 1) { return t; }\r\n        const scaledTime = t * 2;\r\n        const scaledTime1 = scaledTime - 1;\r\n        if (scaledTime < 1) { return 0.5 * Math.pow(2, 10 * (scaledTime1)); } return 0.5 * (-Math.pow(2, -10 * scaledTime1) + 2);\r\n    }\r\n    // Increasing velocity until stop\r\n    public static easeInCirc(t: number) { const scaledTime = t / 1; return -1 * (Math.sqrt(1 - scaledTime * t) - 1); }\r\n    // Start fast, decreasing velocity until stop\r\n    public static easeOutCirc(t: number) { const t1 = t - 1; return Math.sqrt(1 - t1 * t1); }\r\n    // Fast increase in velocity, fast decrease in velocity\r\n    public static easeInOutCirc(t: number) {\r\n        const scaledTime = t * 2;\r\n        const scaledTime1 = scaledTime - 2;\r\n        if (scaledTime < 1) { return -0.5 * (Math.sqrt(1 - scaledTime * scaledTime) - 1); }\r\n        return 0.5 * (Math.sqrt(1 - scaledTime1 * scaledTime1) + 1);\r\n    }\r\n    // Slow movement backwards then fast snap to finish\r\n    public static easeInBack(t: number, magnitude: number = 1.70158) { return t * t * ((magnitude + 1) * t - magnitude); }\r\n    // Fast snap to backwards point then slow resolve to finish\r\n    public static easeOutBack(t: number, magnitude: number = 1.70158) {\r\n        const scaledTime = (t / 1) - 1; return (scaledTime * scaledTime * ((magnitude + 1) * scaledTime + magnitude)) + 1;\r\n    }\r\n    // Slow movement backwards, fast snap to past finish, slow resolve to finish\r\n    public static easeInOutBack(t: number, magnitude: number = 1.70158) {\r\n        const scaledTime = t * 2;\r\n        const scaledTime2 = scaledTime - 2;\r\n        const s = magnitude * 1.525;\r\n        if (scaledTime < 1) { return 0.5 * scaledTime * scaledTime * (((s + 1) * scaledTime) - s); }\r\n        return 0.5 * (scaledTime2 * scaledTime2 * ((s + 1) * scaledTime2 + s) + 2);\r\n    }\r\n    // Bounces slowly then quickly to finish\r\n    public static easeInElastic(t: number, magnitude: number = 0.7) {\r\n        if (t === 0 || t === 1) { return t; }\r\n        const scaledTime = t / 1;\r\n        const scaledTime1 = scaledTime - 1;\r\n        const p = 1 - magnitude;\r\n        const s = p / (2 * Math.PI) * Math.asin(1);\r\n        return -(Math.pow(2, 10 * scaledTime1) * Math.sin((scaledTime1 - s) * (2 * Math.PI) / p));\r\n    }\r\n    // Fast acceleration, bounces to zero\r\n    public static easeOutElastic(t: number, magnitude: number = 0.7) {\r\n        const p = 1 - magnitude;\r\n        const scaledTime = t * 2;\r\n        if (t === 0 || t === 1) { return t; }\r\n        const s = p / (2 * Math.PI) * Math.asin(1);\r\n        return (Math.pow(2, -10 * scaledTime) * Math.sin((scaledTime - s) * (2 * Math.PI) / p)) + 1;\r\n    }\r\n    // Slow start and end, two bounces sandwich a fast motion\r\n    public static easeInOutElastic(t: number, magnitude: number = 0.65) {\r\n        const p = 1 - magnitude;\r\n        if (t === 0 || t === 1) { return t; }\r\n        const scaledTime = t * 2;\r\n        const scaledTime1 = scaledTime - 1;\r\n        const s = p / (2 * Math.PI) * Math.asin(1);\r\n        if (scaledTime < 1) {\r\n            return -0.5 * (Math.pow(2, 10 * scaledTime1) * Math.sin((scaledTime1 - s) * (2 * Math.PI) / p));\r\n        } else { return (Math.pow(2, -10 * scaledTime1) * Math.sin((scaledTime1 - s) * (2 * Math.PI) / p) * 0.5) + 1; }\r\n    }\r\n    // Bounce to completion\r\n    public static easeOutBounce(t: number) {\r\n        const scaledTime = t / 1;\r\n        if (scaledTime < (1 / 2.75)) {\r\n            return 7.5625 * scaledTime * scaledTime;\r\n        } else if (scaledTime < (2 / 2.75)) {\r\n            const scaledTime2 = scaledTime - (1.5 / 2.75); return (7.5625 * scaledTime2 * scaledTime2) + 0.75;\r\n        } else if (scaledTime < (2.5 / 2.75)) {\r\n            const scaledTime2 = scaledTime - (2.25 / 2.75); return (7.5625 * scaledTime2 * scaledTime2) + 0.9375;\r\n        } else { const scaledTime2 = scaledTime - (2.625 / 2.75); return (7.5625 * scaledTime2 * scaledTime2) + 0.984375; }\r\n    }\r\n    // Bounce increasing in velocity until completion\r\n    public static easeInBounce(t: number) { return 1 - NumericalMotion.easeOutBounce(1 - t); }\r\n    // Bounce in and bounce out\r\n    public static easeInOutBounce(t: number) { if (t < 0.5) { return NumericalMotion.easeInBounce(t * 2) * 0.5; } return (NumericalMotion.easeOutBounce((t * 2) - 1) * 0.5) + 0.5; }\r\n    public static Easing() {\r\n        // let r0 =0\r\n        // let r1 =0\r\n        // if(this.r <= this.rOrigin){\r\n        //     r0 = this.rOrigin;\r\n        //     r1 = this.rTaget;\r\n        // } else{\r\n        //     r1 = this.rOrigin;\r\n        //     r0 = this.rTaget;\r\n        // }\r\n        // this.vec * 0.95+(tVec * 0.05);\r\n        //     if(this.isAniScale){\r\n        //         r * 0.95+(rt * 0.05);\r\n        //         if(r >rt) {\r\n        //             this.isAniScale=!this.isAniScale;\r\n        //         }\r\n        //     }\r\n    }\r\n    public static Update() {\r\n        NumericalMotion.t += 0.05;\r\n    }\r\n}","import { BROWSER_TYPE } from '../../AppCommon/Enum';\r\n\r\nexport const getAllUrlParams = (url: string = window.location.search) => {\r\n    let queryString = url ? url.split('?')[1] : window.location.search.slice(1);\r\n    let obj: any = {};\r\n\r\n    if (queryString) {\r\n        queryString = queryString.split('#')[0];\r\n        let arr = queryString.split('&');\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            let a = arr[i].split('=');\r\n            let paramName = a[0];\r\n            let paramValue = typeof (a[1]) === 'undefined' ? true : a[1];\r\n\r\n            paramName = paramName.toLowerCase();\r\n            if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();\r\n\r\n            if (paramName.match(/\\[(\\d+)?\\]$/)) {\r\n                let key = paramName.replace(/\\[(\\d+)?\\]/, '');\r\n                if (!obj[key]) obj[key] = [];\r\n\r\n                if (paramName && paramName.match(/\\[\\d+\\]$/)) {\r\n                    if ((/\\[(\\d+)\\]/.exec(paramName)) !== null) {\r\n                        let index = /\\[(\\d+)\\]/.exec(paramName);\r\n                        if (index && index[1]) {\r\n                            // TODO: vew version\r\n                            // obj[key][index] = paramValue;\r\n                        }\r\n                    }\r\n                } else {\r\n                    obj[key].push(paramValue);\r\n                }\r\n            } else {\r\n                if (!obj[paramName]) {\r\n                    obj[paramName] = paramValue;\r\n                } else if (obj[paramName] && typeof obj[paramName] === 'string') {\r\n                    obj[paramName] = [obj[paramName]];\r\n                    obj[paramName].push(paramValue);\r\n                } else {\r\n                    obj[paramName].push(paramValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return obj;\r\n}\r\n\r\nexport class BrowserUtility {\r\n    private _type: BROWSER_TYPE;\r\n    private _isMobile: boolean;\r\n\r\n    // ?product=shirt&color=blue&newuser&size=m\r\n    public static getAllUrlParams(url: string = window.location.search) {\r\n        let queryString = url ? url.split('?')[1] : window.location.search.slice(1);\r\n        let obj: any = {};\r\n\r\n        if (queryString) {\r\n            queryString = queryString.split('#')[0];\r\n            let arr = queryString.split('&');\r\n\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let a = arr[i].split('=');\r\n                let paramName = a[0];\r\n                let paramValue = typeof (a[1]) === 'undefined' ? true : a[1];\r\n\r\n                paramName = paramName.toLowerCase();\r\n                if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();\r\n\r\n                if (paramName.match(/\\[(\\d+)?\\]$/)) {\r\n                    let key = paramName.replace(/\\[(\\d+)?\\]/, '');\r\n                    if (!obj[key]) obj[key] = [];\r\n\r\n                    if (paramName && paramName.match(/\\[\\d+\\]$/)) {\r\n                        if ((/\\[(\\d+)\\]/.exec(paramName)) !== null) {\r\n                            let index = /\\[(\\d+)\\]/.exec(paramName);\r\n                            if (index && index[1]) {\r\n                                // TODO: vew version\r\n                                // obj[key][index] = paramValue;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        obj[key].push(paramValue);\r\n                    }\r\n                } else {\r\n                    if (!obj[paramName]) {\r\n                        obj[paramName] = paramValue;\r\n                    } else if (obj[paramName] && typeof obj[paramName] === 'string') {\r\n                        obj[paramName] = [obj[paramName]];\r\n                        obj[paramName].push(paramValue);\r\n                    } else {\r\n                        obj[paramName].push(paramValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    }\r\n    constructor() {\r\n        this.DetectBrowser();\r\n        this.DetectIsMoile();\r\n        // console.debug(this.type, ', isMobile', this.isMobile);\r\n    }\r\n    private DetectBrowser() {\r\n        if ((navigator.userAgent.indexOf('Edge') !== -1)) {\r\n            this._type = BROWSER_TYPE.EDGE;\r\n            return;\r\n        }\r\n        if ((navigator.userAgent.indexOf('Opera') || navigator.userAgent.indexOf('OPR')) !== -1) {\r\n            this._type = BROWSER_TYPE.OPERA;\r\n        }\r\n        if (navigator.userAgent.indexOf('Chrome') !== -1) {\r\n            this._type = BROWSER_TYPE.CHROME;\r\n            return;\r\n        }\r\n        if (navigator.userAgent.indexOf('Safari') !== -1) {\r\n            this._type = BROWSER_TYPE.SAFARI;\r\n            return;\r\n        }\r\n        if (navigator.userAgent.indexOf('Firefox') !== -1) {\r\n            this._type = BROWSER_TYPE.FIREFOX;\r\n            return;\r\n            // } else if ((navigator.userAgent.indexOf('MSIE') !== -1) || (!!document.documentMode === true)) { // IF IE > 10\r\n        }\r\n        if ((navigator.userAgent.indexOf('MSIE') !== -1)) { // IF IE > 10\r\n            this._type = BROWSER_TYPE.IE;\r\n        }\r\n\r\n        // else {\r\n        this._type = BROWSER_TYPE.UNKNOWN;\r\n        // }\r\n    }\r\n    private DetectIsMoile() {\r\n        this._isMobile = false; // initiate as false\r\n        // device detection\r\n        /* eslint-disable no-useless-escape */\r\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\r\n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(navigator.userAgent.substr(0, 4))) {\r\n            this._isMobile = true;\r\n        }\r\n    }\r\n    public get type() {\r\n        return this._type;\r\n    }\r\n    public get isMobile() {\r\n        return this._isMobile;\r\n    }\r\n}","export class Describe {\r\n    index: string;\r\n    data: number[];\r\n    count: number;\r\n    min: number;\r\n    max: number;\r\n    mean: number;\r\n    sum: number;\r\n    median: number;\r\n    variance: number;\r\n    STD: number;\r\n    toFixed: number;\r\n    constructor(data: number[], count: number, min: number, max: number, mean: number, sum: number, median: number, variance: number, STD: number, index: string) {\r\n        this.data = data;\r\n        this.count = count;\r\n        this.min = min;\r\n        this.max = max;\r\n        this.mean = mean;\r\n        this.sum = sum;\r\n        this.median = median;\r\n        this.variance = variance;\r\n        this.STD = STD;\r\n        this.index = index;\r\n        this.toFixed = 4;\r\n    }\r\n    ToString() {\r\n        const s: string[] = [];\r\n        s.push('index : ' + this.index);\r\n        s.push('count : ' + this.count);\r\n        s.push('min : ' + this.min.toFixed(this.toFixed));\r\n        s.push('max : ' + this.max.toFixed(this.toFixed));\r\n        s.push('mean : ' + this.mean.toFixed(this.toFixed));\r\n        s.push('sum : ' + this.sum.toFixed(this.toFixed));\r\n        s.push('median : ' + this.median.toFixed(this.toFixed));\r\n        s.push('variance : ' + this.variance.toFixed(this.toFixed));\r\n        s.push('STD : ' + this.STD.toFixed(this.toFixed));\r\n        return s;\r\n    }\r\n}\r\nexport class StatisticsUtility {\r\n\r\n    static DescribeNumeric(n: number[], index: string = 'null') {\r\n        let describe = new Describe(\r\n            n,\r\n            n.length,\r\n            StatisticsUtility.Min(n),\r\n            StatisticsUtility.Max(n),\r\n            StatisticsUtility.Mean(n),\r\n            StatisticsUtility.Sum(n),\r\n            StatisticsUtility.Median(n),\r\n            StatisticsUtility.Variance(n),\r\n            StatisticsUtility.StandardDeviation(n),\r\n            index\r\n        );\r\n        return describe;\r\n    }\r\n    static Min(n: number[]) { return Math.min(...n); }\r\n    static Max(n: number[]) { return Math.max(...n); }\r\n    static Mean(n: number[]) { return StatisticsUtility.Average(n); }\r\n    static Average(n: number[]) { let sum = StatisticsUtility.Sum(n); return sum / n.length; }\r\n    static Sum(n: number[]) {\r\n        let i = n.length;\r\n        let sum = 0.0;\r\n        while (i--) { sum += n[i]; }\r\n        return sum;\r\n    }\r\n    static Median(n: number[]) {\r\n        let nn = StatisticsUtility.SortAscending(n);\r\n        let half = Math.floor(nn.length / 2);\r\n        if (nn.length % 2) { return nn[half]; } else { return (nn[half - 1] + nn[half]) / 2.0; }\r\n    }\r\n    static SortAscending(n: number[]) {\r\n        return n.sort((a: number, b: number) => { return a - b; });\r\n    }\r\n    static SortDescending(n: number[]) {\r\n        return n.sort((b: number, a: number) => { return a - b; });\r\n    }\r\n    static Variance(n: number[]) {\r\n        let mean = StatisticsUtility.Mean(n);\r\n        let sum = 0;\r\n        for (let i = 0; i < n.length; ++i) {\r\n            if (n[i] < mean) { sum += Math.pow(mean - n[i], 2); } else { sum += Math.pow(mean - n[i], 2); }\r\n        }\r\n        return sum / (n.length - 1.0);\r\n    }\r\n    static StandardDeviation(n: number[]) {\r\n        let variance = StatisticsUtility.Variance(n);\r\n        return Math.sqrt(variance);\r\n    }\r\n\r\n    // ............................................................................å\r\n    static GetDataForHistDataFromNumeric(n: number[], bin: number = 5) {\r\n        let bins: number[][] = [];\r\n        let d = StatisticsUtility.SortAscending(n);\r\n        let domain = [d[0], d[d.length - 1]];\r\n        let interval = (domain[1] - domain[0]) / (bin - 1);\r\n        let start = 0;\r\n        for (let i = 0; i < bin; ++i) {\r\n            const maxNum = domain[0] + ((i + 1) * interval);\r\n            let data: number[] = [];\r\n            for (let j = start; j < n.length; ++j) {\r\n                if (n[j] < maxNum) { data.push(n[j]); } else { start = j; break; }\r\n            }\r\n            bins.push(data);\r\n        }\r\n        return bins;\r\n    }\r\n    public static GetIndexByDataForHistDataFromNumeric(n: number[][], v: number) {\r\n        for (let i = 0; i < n.length; ++i) {\r\n            for (let j = 0; j < n[i].length; ++j) {\r\n                if (v < n[i][j]) {\r\n                    return i;\r\n                }\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n\r\nexport const getMedian = (arr: number[]) => {\r\n    if (!arr?.length) { return 0 }\r\n    const sorted = arr.sort((a, b) => a - b)\r\n    const mid = Math.floor(sorted.length / 2)\r\n    return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2\r\n}\r\n\r\n// // Copyright(C) 2015 NJ Namju Lee <nj.namju@gmail.com>\r\n\r\n// import numpy as np\r\n// import pandas as pd\r\n// import random\r\n// import sklearn as sk\r\n// from sklearn.neighbors import KNeighborsRegressor as KNN\r\n// from sklearn.cross_validation import train_test_split as sk_split\r\n// from sklearn.linear_model import LinearRegression as Lin_Reg\r\n// import time\r\n// import matplotlib\r\n// import matplotlib.pyplot as plt\r\n\r\n// import skLearnLib\r\n// import math\r\n\r\n// import scipy as sp\r\n// import itertools\r\n\r\n//     from statsmodels.regression.linear_model import OLS\r\n// # % matplotlib inline\r\n\r\n// ######################################################################################\r\n// # ** MAE ** is the easiest to understand, because it's the average error.\r\n// # ** MSE ** is more popular than MAE, because MSE \"punishes\" larger errors.\r\n// # ** RMSE ** is even more popular than MSE, because RMSE is interpretable in the \"y\" units.\r\n\r\n// def MAE_MeanAbsoluteError(xTrue, xPred):\r\n// from sklearn import metrics\r\n//     result = metrics.mean_absolute_error(xTrue, xPred)\r\n// return result\r\n// def MSE_MeanSquaredError(xTrue, xPred):\r\n// from sklearn import metrics\r\n//     result = metrics.mean_squared_error(xTrue, xPred)\r\n// return result\r\n// def RMSE_MeanSquaredError(xTrue, xPred):\r\n// from sklearn import metrics\r\n//     result = np.sqrt(metrics.mean_squared_error(xTrue, xPred))\r\n// return result\r\n// def GetR2Score(yTrue, yPred):\r\n// from sklearn.metrics import r2_score\r\n//     print r2_score(yTrue, yPred)\r\n// def PrintScore(yTrue, yPred):\r\n// print \"MAE_MeanAbsoluteError:\", MAE_MeanAbsoluteError(yTrue, yPred)\r\n// print \"MSE_MeanSquaredError:\", MSE_MeanSquaredError(yTrue, yPred)\r\n// print \"RMSE_MeanSquaredError:\", RMSE_MeanSquaredError(yTrue, yPred)\r\n// print \"GetR2Score:\", GetR2Score(yTrue, yPred)\r\n\r\n// ######################################################################################\r\n\r\n// def MSE_MeanSquaredErrorLoss(fullData, targetData): # common use\r\n// sum = RSS_ResidualSumofSquares(fullData, targetData)\r\n// return sum / len(fullData)\r\n// def MSE_MeanSquaredErrorLossForCategorical(fullData, targetData): # Categorical\r\n// sum = 0.0;\r\n// for i in range(len(fullData)):\r\n//     if (fullData[i] != targetData[i]): sum += 1\r\n// return sum / len(fullData)\r\n// def GetMean(dataArray):\r\n// return np.mean(dataArray)\r\n// #     theSum = 0.0\r\n// #     for d in dataArray: theSum += d\r\n// #     return theSum / len(dataArray)\r\n// def getMedian(dataArray):\r\n// return np.median(dataArray)\r\n// def RSS_ResidualSumofSquares(dataFull, missingFill): # residual standard error, RSE ??? --OLS(Ordinary Least Squares) Residual Sum of Squares(RSS)\r\n// sumSoFar = 0.0\r\n// for i in range(len(missingFill)):\r\n//     sumSoFar += (dataFull[i] - missingFill[i]) ** 2\r\n// return sumSoFar\r\n// def TSS_TotalSumOfSquare(fullData, targetData):\r\n// # meanVal = targetData.mean() # for numpy\r\n//     meanVal = GetMean(targetData) # manual\r\n// sumSoFar = 0.0\r\n// for i in range(len(targetData)):\r\n// # sumSoFar += (fullData.y[i] - meanVal) ** 2\r\n// sumSoFar += (fullData[i] - meanVal) ** 2\r\n// return sumSoFar\r\n// def R_Squared_CoefficientOfDetermination(fullData, targetData): # this is for regression\r\n//     RSS = RSS_ResidualSumofSquares(fullData, targetData)\r\n//     TSS = TSS_TotalSumOfSquare(fullData, targetData)\r\n//     return 1 - (RSS / TSS)\r\n// def R_Squared_CoefficientOfDeterminationBySKLearn(fullData, targetData):\r\n// return sk.metrics.r2_score(fullData, targetData)\r\n// # x = [1, 2, 3, 4, 5]\r\n// # y = [6, 7, 4, 3, 2]\r\n// # y_ = [5.5, 5.0, 5.0, 3.0, 3.5]\r\n// # print MSE_MeanSquaredErrorLoss(y, y_)\r\n// # print R_Squared_CoefficientOfDetermination(y, y_)\r\n// # print R_Squared_CoefficientOfDeterminationBySKLearn(y, y_)\r\n\r\n// def GetListFromPDColumn(pdCol):\r\n// temp = []\r\n// for d in pdCol: temp.append(d)\r\n// return temp;\r\n\r\n// def RSS(e): # e = Y - Y_hat\r\n// return np.sum(e ** 2)\r\n// def RSE(RSS, lengthYpredict): #  input lengthYpredict, return sigma\r\n// return np.sqrt(RSS / (lengthYpredict - 2));\r\n// def SIGMA(y, ylength): # Y - Y_hat\r\n// theRss = RSS(y);\r\n// return RSE(theRss, ylength);\r\n\r\n// def SIGMAFromList(y, y_hatList): # YTestList - Y_hatList\r\n// sig = []\r\n// for i in range(len(y_hatList)):\r\n// #         print  y[i]\r\n// sig.append(SIGMA(y[i] - y_hatList[i], len(y_hatList)))\r\n// return sig\r\n\r\n// def SE_b1(sigma, X):\r\n// np.sqrt(sigma ** 2 / np.sum((X - np.mean(X)) ** 2))\r\n// def SE_b1WithMatrix(sigma, X):\r\n// np.sqrt(sigma ** 2 / np.dot(np.sum((X - np.mean(X)), np.sum((X - np.mean(X))))))\r\n\r\n// def MaxAbsoluteDeviation(dataFull, dataPredict):\r\n// theMax = 0.0\r\n// for i in range(len(dataFull)):\r\n//     theNum = dataFull[i] - dataPredict[i]\r\n// if theMax < theNum: theMax = theNum\r\n// return theMax\r\n\r\n// def SumOfAbsoluteDeviations(dataFull, missingFill):\r\n// sumSoFar = 0.0\r\n// for i in range(len(missingFill)):\r\n//     sumSoFar += math.abs((dataFull[i] - missingFill[i]) ** 2)\r\n// return sumSoFar\r\n\r\n// def confInt(lstArray, percent):\r\n// num = len(lstArray)\r\n// uppercut = float((100 - percent) / 2)\r\n// cut = (num * (uppercut / 100))\r\n// return lstArray[cut: -cut]\r\n\r\n// def ComputeCorrelationCoefficients(xPanda): # Compute matrix of correlation coefficients\r\n// corr_matrix = np.corrcoef(xPanda.T)\r\n// return corr_matrix;\r\n// def VisHeatMapForCorrelationMatrix(corr_matrix): # Display heat map\r\n// fig, ax = plt.subplots(1, 1, figsize = (6, 6))\r\n// ax.pcolor(corr_matrix)\r\n// ax.set_title('Heatmap of correlation matrix')\r\n// plt.show()\r\n// # data = np.loadtxt('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/lab_files/Lab_4/datasets/dataset_1.txt', delimiter = ',', skiprows = 1)\r\n// # # Split predictors and response\r\n// # x = data[:, : -1]\r\n// # y = data[:, -1]\r\n// # corr_matrix = ComputeCorrelationCoefficients(x)\r\n// # VisHeatMapForCorrelationMatrix(corr_matrix)\r\n\r\n// ##..............................................data Generator for simple linear reg from lec 3\r\n// def GenerateDataLinearFun(N = 1000, beta0 = 2.2, beta1 = 3.0, sigma = 10.0, Xmax = 1.0):\r\n// epsilon = np.random.normal(0, sigma, N) # Random normally distributed points\r\n// X = np.linspace(0, Xmax, N)\r\n// Y = beta0 + beta1 * X + epsilon\r\n// return X, Y\r\n\r\n// def GenerateDataNotLinearFun(N = 1000, beta0 = 2.2, beta1 = 3.0, sigma = 1.0, Xmax = 1.0, alpha = 1):\r\n// epsilon = np.random.normal(0, sigma, N) # Random normally distributed points\r\n// X = np.linspace(0, Xmax, N)\r\n// Y = beta0 + beta1 * X + alpha * np.sin(6 * X) + epsilon\r\n// #Y = beta0 + beta1 * X + 4 * beta1 * (X > 0.5) + epsilon\r\n// #Y = beta0 + beta1 * X + alpha * X * X * X + epsilon\r\n// return X, Y\r\n\r\n// ##..............................................GetConfidenceInterval from lec 3\r\n// def GetConfidenceInterval(X, Y):\r\n// def FitLinearModelForCoefficients(X, Y):\r\n// # Estimate the coefficients\r\n// beta1 = np.sum((X - np.mean(X)) * (Y - np.mean(Y))) / np.sum((X - np.mean(X)) ** 2)\r\n// beta0 = np.mean(Y) - beta1 * np.mean(X)\r\n// return beta0, beta1\r\n// def PredictLinearModelForY(X, beta0, beta1):\r\n// Y = beta0 + beta1 * X\r\n// return Y\r\n// beta0_hat, beta1_hat = FitLinearModelForCoefficients(X, Y)\r\n// Y_hat = PredictLinearModelForY(X, beta0_hat, beta1_hat)\r\n// e = Y - Y_hat\r\n// RSS = np.sum(e ** 2)\r\n// RSE = np.sqrt(RSS / (len(X) - 2))\r\n// sigma = RSE\r\n// SE_b1 = np.sqrt(sigma ** 2 / np.sum((X - np.mean(X)) ** 2))\r\n// print(\"Standard error on beta1\", SE_b1)\r\n// print(\"Estimate value of beta1\", beta1_hat)\r\n// print(\"95% confidence interval is: [\", beta1_hat - 2 * SE_b1, beta1_hat + 2 * SE_b1, \"]\")\r\n// print(\"Correct value is: \", 3)\r\n// # N = 100000 # 10, 100, 100000\r\n// # x, y = GenerateDataLinearFun(N)\r\n// # GetConfidenceInterval(x, y)\r\n\r\n// def plotit(gamma):\r\n// def FitLinearModel(X, Y):\r\n// # Estimate the coefficients\r\n// beta1 = np.sum((X - np.mean(X)) * (Y - np.mean(Y))) / np.sum((X - np.mean(X)) ** 2)\r\n// beta0 = np.mean(Y) - beta1 * np.mean(X)\r\n// return beta0, beta1\r\n// def PredictLinearModel(X, beta0, beta1):\r\n// Y = beta0 + beta1 * X\r\n// return Y\r\n// # GENERATE DATA THAT ARE NOT FROM A LINEAR FUNCTION\r\n// N = 1000 # number of points\r\n// beta0 = 2.2; beta1 = 3.0\r\n// X, Y = GenerateDataNotLinearFun(N, beta0, beta1, sigma = 0.001, alpha = gamma)\r\n\r\n// beta0_hat, beta1_hat = FitLinearModel(X, Y)\r\n// print(\"estimated coefficients\", beta0_hat, beta1_hat)\r\n\r\n// # estimate y\r\n// Y_hat = PredictLinearModel(X, beta0_hat, beta1_hat)\r\n\r\n// # calculate the RSE, R2\r\n// RSS = np.sum((Y - Y_hat) ** 2)\r\n// RSE = np.sqrt(np.sum((Y - Y_hat) ** 2)) / (N - 2)\r\n// TSS = np.sum((Y - np.mean(Y)) ** 2)\r\n\r\n// plt.figure(figsize = (20, 12))\r\n// R2 = 1 - RSS / TSS\r\n// plt.plot(X, Y, 'b+')\r\n// plt.plot(X, Y_hat, label = \"Estimated\")\r\n// plt.plot(X, beta0 + beta1 * X + gamma * X * X * X, label = \"True Y, gamma=\" + str(gamma))\r\n// plt.legend(loc = 'best')\r\n// plt.xlabel('X')\r\n// plt.ylabel('Y')\r\n// plt.show()\r\n\r\n// print(\"RSE=\" + str(RSE))\r\n// print(\"R2=\" + str(R2))\r\n\r\n// # plotit(0.15) # -5 / 0.55 # define the non - linear\r\n\r\n// def GetSubsetOfPredicttorsByForward(xNumpyMatrix, yList):\r\n// x = xNumpyMatrix\r\n// y = yList\r\n// ### Best Subset Selection\r\n// min_bic = 1e10 # set some initial large value for min BIC score\r\n//     best_subset = []# best subset of predictors\r\n// print # total number of predictors\r\n// # Create all possible subsets of the set of 10 predictors\r\n// predictorSet = set(range(xNumpyMatrix.shape[1]))\r\n// print \"total number of predictor: \", len(predictorSet)\r\n\r\n// for sizeK in range(len(predictorSet)):\r\n// # Create all possible subsets of size 'size', using the 'combination' function from the 'itertools' library\r\n// subsetsSizeK = itertools.combinations(predictorSet, sizeK + 1)\r\n// maxRsquared = -1e10 # set some initial small value for max R ^ 2 score\r\n//         bestKsubset = []# best subset of predictors of size k\r\n// for predictor_subset in subsetsSizeK:\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, predictor_subset]\r\n\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n\r\n// # Update max R ^ 2 and best predictor subset of size k\r\n// # If current predictor subset has a higher R ^ 2 score than that of the best subset\r\n// # we've found so far, remember the current predictor subset as the best!\r\n// if (maxRsquared < r_squared):\r\n//     maxRsquared = r_squared\r\n// bestKsubset = predictor_subset[:]\r\n\r\n// # Use only the best subset of size k for the predictors\r\n//         x_subset = x[:, bestKsubset]\r\n\r\n// # Fit and evaluate BIC of the best subset of size k\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// bic = results.bic\r\n\r\n// # Update minimum BIC and best predictor subset\r\n// # If current predictor has a lower BIC score than that of the best subset\r\n// # we've found so far, remember the current predictor as the best!\r\n// if (bic < min_bic):\r\n//     min_bic = bic\r\n// best_subset = bestKsubset[:]\r\n// print 'Step-wise forward subset selection:'\r\n// return sorted(best_subset)\r\n// # # load data by Numpy\r\n// # dataFull = np.loadtxt(\"Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_04/datasets/dataset_1.txt\", delimiter = \",\", skiprows = 1)\r\n// # # filter all X feature annd Y\r\n// # xDataList = dataFull[:,: -1]\r\n// # yData = dataFull[:, -1]\r\n// # bestSubsetForward = GetSubsetOfPredicttorsByForward(xDataList, yData);\r\n// # print bestSubsetForward\r\n\r\n// def GetSubsetOfPredicttorsByBackward(xNumpyMatrix, yList):\r\n// x = xNumpyMatrix\r\n// y = yList\r\n\r\n// ###  Step - wise Backward Selection\r\n// d = x.shape[1]# total no.of predictors\r\n// print \"total number of predictor: \", d\r\n// # Keep track of current set of chosen predictors\r\n// current_predictors = range(d)\r\n\r\n// # First, fit and evaluate BIC using all 'd' number of predictors\r\n// model = OLS(y, x)\r\n// results = model.fit()\r\n// bic_all = results.bic\r\n\r\n// # Set the minimum BIC score, initially, to the BIC score using all 'd' predictors\r\n// global_min_bic = bic_all\r\n// # Keep track of the best subset of predictors\r\n// best_subset = []\r\n\r\n// # Iterate over all possible subset sizes, d predictors to 1 predictor\r\n// for size in range(d - 1, 1, -1): # stop before 0 to avoid choosing an empty set of predictors\r\n// max_r_squared = -1e10 # set some initial small value for max R ^ 2\r\n//         worst_predictor = -1 # set some throwaway initial number for the worst predictor to remove\r\n// bic_without_worst_predictor = 1e10 # set some initial large value for min BIC score\r\n\r\n// # Iterate over current set of predictors(for potential elimination)\r\n//     for i in current_predictors:\r\n// # Create copy of current predictors, and remove predictor 'i'\r\n// temp = current_predictors[:]\r\n// temp.remove(i)\r\n\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, temp]\r\n\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n\r\n// # Check if we get a higher R ^ 2 value than than current max R ^ 2, if so, update\r\n//             if (r_squared > max_r_squared):\r\n//         max_r_squared = r_squared\r\n// worst_predictor = i\r\n// bic_without_worst_predictor = results.bic\r\n\r\n// # Remove worst predictor from current set of predictors\r\n// current_predictors.remove(worst_predictor)\r\n\r\n// # Check if BIC for the predictor we just removed is lower than\r\n// # the global minimum across all subset of predictors\r\n// if (bic_without_worst_predictor < global_min_bic):\r\n//     best_subset = current_predictors[:]\r\n// global_min_bic = bic_without_worst_predictor\r\n// print 'Step-wise backward subset selection:'\r\n// return sorted(best_subset)\r\n// # # load data by Numpy\r\n// # dataFull = np.loadtxt(\"Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_04/datasets/dataset_1.txt\", delimiter = \",\", skiprows = 1)\r\n// # # filter all X feature annd Y\r\n// # xDataList = dataFull[:,: -1]\r\n// # yData = dataFull[:, -1]\r\n// # bestSubsetBackward = GetSubsetOfPredicttorsByBackward(xDataList, yData)\r\n// # print bestSubsetBackward\r\n\r\n// # s = pd.Series(list('abca'))\r\n// # print s\r\n\r\n// # print pd.get_dummies(s)\r\n\r\n// ################################################################# string to one hot encoding\r\n// def encode_categorical(array):\r\n// from sklearn import preprocessing\r\n//     if not array.dtype == np.dtype('float64'):\r\n// return preprocessing.LabelEncoder().fit_transform(array)\r\n//     else:\r\n// return array\r\n// data = dfSeoulRe.apply(encode_categorical)\r\n\r\n// ############################################################################################# feature selection\r\n// def StepWiseForwardSelection(x, y, data): #panda data frame\r\n// from statsmodels.regression.linear_model import OLS\r\n// ### Step - wise Forward Selection\r\n// d = x.shape[1]# total no.of predictors\r\n// # Keep track of current set of chosen predictors, and the remaining set of predictors\r\n// current_predictors = []\r\n// remaining_predictors = range(d)\r\n// # Set some initial large value for min BIC score for all possible subsets\r\n//     global_min_bic = 1e10\r\n// # Keep track of the best subset of predictors\r\n// best_subset = []\r\n// # Iterate over all possible subset sizes, 0 predictors to d predictors\r\n// for size in range(d):\r\n//     max_r_squared = -1e10 # set some initial small value for max R ^ 2\r\n//         best_predictor = -1 # set some throwaway initial number for the best predictor to add\r\n// bic_with_best_predictor = 1e10 # set some initial large value for BIC score\r\n// # Iterate over all remaining predictors to find best predictor to add\r\n// for i in remaining_predictors:\r\n// # Make copy of current set of predictors\r\n// temp = current_predictors[:]\r\n// # Add predictor 'i'\r\n// temp.append(i)\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, temp]\r\n// # Add a column of ones\r\n// x_subset = np.hstack((x_subset, np.ones((x_subset.shape[0], 1))))\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n// # Check if we get a higher R ^ 2 value than than current max R ^ 2, if so, update\r\n//             if (r_squared > max_r_squared):\r\n//         max_r_squared = r_squared\r\n// best_predictor = i\r\n// bic_with_best_predictor = results.bic\r\n// # Remove best predictor from remaining list, and add best predictor to current list\r\n// remaining_predictors.remove(best_predictor)\r\n// current_predictors.append(best_predictor)\r\n// # Check if BIC for with the predictor we just added is lower than\r\n// # the global minimum across all subset of predictors\r\n// if (bic_with_best_predictor < global_min_bic):\r\n//     best_subset = current_predictors[:]\r\n// global_min_bic = bic_with_best_predictor\r\n// print 'Step-wise forward subset selection:'\r\n// print sorted(best_subset) # add 1 as indices start from 0\r\n// forward = data.columns.values[sorted(best_subset)]\r\n// print forward\r\n// return forward\r\n\r\n// def StepWiseBackwardSelection(x, y, data): #panda data frame\r\n// from statsmodels.regression.linear_model import OLS\r\n// ###  Step - wise Backward Selection\r\n// d = x.shape[1]# total no.of predictors\r\n// # Keep track of current set of chosen predictors\r\n// current_predictors = range(d)\r\n// # First, fit and evaluate BIC using all 'd' number of predictors\r\n// model = OLS(y, x)\r\n// results = model.fit()\r\n// bic_all = results.bic\r\n// # Set the minimum BIC score, initially, to the BIC score using all 'd' predictors\r\n// global_min_bic = bic_all\r\n// # Keep track of the best subset of predictors\r\n// best_subset = []\r\n// # Iterate over all possible subset sizes, d predictors to 1 predictor\r\n// for size in range(d - 1, 0, -1): # stop before 0 to avoid choosing an empty set of predictors\r\n// max_r_squared = -1e10 # set some initial small value for max R ^ 2\r\n//         worst_predictor = -1 # set some throwaway initial number for the worst predictor to remove\r\n// bic_without_worst_predictor = 1e10 # set some initial large value for min BIC score\r\n// # Iterate over current set of predictors(for potential elimination)\r\n//     for i in current_predictors:\r\n// # Create copy of current predictors, and remove predictor 'i'\r\n// temp = current_predictors[:]\r\n// temp.remove(i)\r\n// # Use only a subset of predictors in the training data\r\n// x_subset = x[:, temp]\r\n// # Add a column of ones\r\n// x_subset = np.hstack((x_subset, np.ones((x_subset.shape[0], 1))))\r\n// # Fit and evaluate R ^ 2\r\n// model = OLS(y, x_subset)\r\n// results = model.fit()\r\n// r_squared = results.rsquared\r\n// # Check if we get a higher R ^ 2 value than than current max R ^ 2, if so, update\r\n//             if (r_squared > max_r_squared):\r\n//         max_r_squared = r_squared\r\n// worst_predictor = i\r\n// bic_without_worst_predictor = results.bic\r\n// # Remove worst predictor from current set of predictors\r\n// current_predictors.remove(worst_predictor)\r\n// # Check if BIC for the predictor we just removed is lower than\r\n// # the global minimum across all subset of predictors\r\n// if (bic_without_worst_predictor < global_min_bic):\r\n//     best_subset = current_predictors[:]\r\n// global_min_bic = bic_without_worst_predictor\r\n\r\n// print 'Step-wise backward subset selection:'\r\n// print sorted(best_subset)\r\n// backward = data.columns.values[sorted(best_subset)]\r\n// print backward\r\n// return backward\r\n\r\n// data = dfSeoulRe.convert_objects(convert_numeric = True)\r\n// x = data.values #.as_matrix()\r\n// y = data[\"building\"]\r\n// forward = StepWiseForwardSelection(x, y, segSeoul)\r\n// backward = StepWiseBackwardSelection(x, y, segSeoul)\r\n\r\n// import os\r\n// import pandas as pd\r\n// import numpy as np\r\n\r\n// # open data from the absolute path\r\n// def getPandasFromFile(path, fileName):\r\n// path = os.path.join(path, fileName)\r\n// return pd.read_csv(path)\r\n\r\n// def getNumpyFromFile(path, fileName):\r\n// path = os.path.join(path, fileName)\r\n// return np.genfromtxt(path, delimiter = ',')\r\n\r\n// def getPandasFromJson(json):\r\n// return pd.DataFrame(json)\r\n\r\n// def getPandasFromJson(list):\r\n// return pd.Series(list)\r\n\r\n// def split(dataset, m): # temp = split(dataFull, 80)[0].y\r\n// train = dataset.sample(frac = m * 0.01, random_state = 100)\r\n// test = dataset.drop(train.index)\r\n// trainNew = dataset.drop(test.index)\r\n// return trainNew, test\r\n\r\n// ########################################################################\r\n\r\n// def fillNull(Rdata, Rmissing_ind):\r\n// from copy import deepcopy\r\n//     temp = deepcopy(Rdata)\r\n// for i in Rmissing_ind:\r\n//     temp[\"y\"][i] = np.nan\r\n// return temp\r\n\r\n// def split(dataset, m):\r\n// train = dataset.sample(frac = m * 0.01, random_state = 100)\r\n// test = dataset.drop(train.index)\r\n// trainNew = dataset.drop(test.index)\r\n// return trainNew, test\r\n\r\n// fileName = 'dataset_HW1.txt'\r\n// path = \"Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/lab_files/Lab_1/\"\r\n\r\n// df = getPandasFromFile(path, fileName)\r\n// print(df.head(3))\r\n// print(df.tail(3))\r\n// print \"this is df.describe\"\r\n// print(df.describe()) # The.describe() function returns all the descriptive stats for each column as a data frame object!\r\n// print(\"the size of data frame is \", df.shape[0])\r\n\r\n// selectedCol = df[range(1, df.shape[1] - 1)]# ignoring first and last colums\r\n// newCol = pd.DataFrame(columns = selectedCol.columns.values)\r\n// newCol.loc[\"min\"] = selectedCol.min()\r\n// newCol.loc[\"max\"] = selectedCol.max()\r\n// newCol.loc[\"range\"] = selectedCol.max() - selectedCol.min()\r\n// print newCol\r\n\r\n// newCol.loc[\"mean\"] = selectedCol.mean()\r\n// newCol.loc[\"median\"] = selectedCol.median()\r\n// newCol.loc[\"std\"] = selectedCol.std()\r\n// # print newCol\r\n\r\n// childrenData = df[df[\"patient_age\"] <= 17]\r\n// childrenStats = pd.DataFrame(columns = childrenData.columns.values)\r\n\r\n// theColumnRange = range(1, df.shape[1] - 1)\r\n// childrenStats = childrenStats[theColumnRange]\r\n// childrenStats.loc['child_max'] = childrenData[theColumnRange].max()\r\n// childrenStats.loc['child_min'] = childrenData[theColumnRange].min()\r\n// childrenStats.loc['child_range'] = childrenStats.values[0] - childrenStats.values[1]\r\n// childrenStats.loc['child_mean'] = childrenData[[1, 2, 4]].mean()\r\n// childrenStats.loc['child_median'] = childrenData[[1, 2, 4]].median()\r\n// childrenStats.loc['child_std'] = childrenData[[1, 2, 4]].std()\r\n// # print childrenStats\r\n\r\n// #  for women stats\r\n// adultWomenData = df[(df[\"patient_age\"] > 17) & (df[\"patient_gender\"] == \"female\")]\r\n// adultWomenStats = pd.DataFrame(columns = adultWomenData.columns.values)\r\n\r\n// theColumnRange = range(1, df.shape[1] - 1)\r\n// adultWomenStats = adultWomenStats[theColumnRange]\r\n// adultWomenStats.loc['adult_women_max'] = adultWomenData[theColumnRange].max() # going to be 0 index\r\n// adultWomenStats.loc['adult_women_min'] = adultWomenData[theColumnRange].min() # going to be 1 index\r\n// adultWomenStats.loc['adult_women_range'] = adultWomenStats.values[0] - adultWomenStats.values[1]\r\n// adultWomenStats.loc['adult_women_mean'] = adultWomenData[[1, 2, 4]].mean()\r\n// adultWomenStats.loc['adult_women_median'] = adultWomenData[[1, 2, 4]].median()\r\n// adultWomenStats.loc['adult_women_std'] = adultWomenData[[1, 2, 4]].std()\r\n// # print adultWomenStats\r\n\r\n// #  for women stats\r\n// adultMenData = df[(df[\"patient_age\"] > 17) & (df[\"patient_gender\"] == \"male\")]\r\n// adultMenStats = pd.DataFrame(columns = adultMenData.columns.values)\r\n\r\n// theColumnRange = range(1, df.shape[1] - 1)\r\n// adultMenStats = adultMenStats[theColumnRange]\r\n// adultMenStats.loc['adult_men_max'] = adultMenData[theColumnRange].max() # going to be 0 index\r\n// adultMenStats.loc['adult_men_min'] = adultMenData[theColumnRange].min() # going to be 1 index\r\n// adultMenStats.loc['adult_men_range'] = adultMenStats.values[0] - adultMenStats.values[1]\r\n// adultMenStats.loc['adult_men_mean'] = adultMenData[[1, 2, 4]].mean()\r\n// adultMenStats.loc['adult_men_median'] = adultMenData[[1, 2, 4]].median()\r\n// adultMenStats.loc['adult_men_std'] = adultMenData[[1, 2, 4]].std()\r\n// # print adultMenStats\r\n\r\n// print \"adultMenStats.iloc[0] to access or 'name' !!\"\r\n// print adultMenStats.iloc[0]\r\n\r\n// children = childrenData.shape[0]\r\n// adults = df.shape[0] - children\r\n// print \"the num of chil : \", children, \"the num of adults : \", adults\r\n\r\n// import matplotlib.pyplot as plt\r\n// fig = plt.figure(figsize = (10, 10))\r\n\r\n// ax1 = fig.add_subplot(221)\r\n// ax1.pie([children, adults],\r\n//     labels = ['children: ' + str(children), 'adults: ' + str(adults)],\r\n//     colors = ['red', 'gold'],\r\n//     autopct = '%1.1f%%', shadow = True, startangle = 90)\r\n\r\n// #women vs men pie chart\r\n// women = df[df['patient_gender'] == 'female'].shape[0]#number of women\r\n// men = df.shape[0] - women #men = total number - women\r\n\r\n// ax2 = fig.add_subplot(222)\r\n// ax2.pie([women, men],\r\n//     labels = ['women: ' + str(women), 'men: ' + str(men)],\r\n//     colors = ['lightskyblue', 'yellowgreen'],\r\n//     autopct = '%1.1f%%', shadow = True, startangle = 90)\r\n\r\n// numAdultWomen = adultWomenData.shape[0]\r\n// numAdultMen = adultMenData.shape[0]\r\n\r\n// ax3 = fig.add_subplot(223)\r\n// ax3.pie([numAdultMen, numAdultWomen],\r\n//     labels = ['adult men : ' + str(numAdultMen),\r\n//     'adult women : ' + str(numAdultWomen)],\r\n//     colors = ['lightblue', 'green'],\r\n//     autopct = \"%1.1f%%\",\r\n//     shadow = True,\r\n//     startangle = 90\r\n// )\r\n\r\n// plt.show()\r\n\r\n// def plotHist(axes, data, title, x_label, y_label, color):\r\n// axes.hist(data,\r\n//     100,\r\n//     normed = 1,\r\n//     facecolor = color,\r\n//     alpha = 0.75)\r\n\r\n// axes.set_title(title)\r\n// axes.set_xlabel(x_label)\r\n// axes.set_ylabel(y_label)\r\n// return axes\r\n\r\n// # print df['marker_1']\r\n\r\n// fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8)) = plt.subplots(4, 2, figsize = (15, 10))\r\n\r\n// ax1 = plotHist(ax1, df['marker_1'], \"histogram of marker 1\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax2 = plotHist(ax2, df['marker_2'], \"histogram of marker 2\", 'frequency', \"marker 2 value\", \"red\")\r\n// ax3 = plotHist(ax3, childrenData['marker_1'], \"histogram of marker 1 for children\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax4 = plotHist(ax4, childrenData['marker_2'], \"histogram of marker 2 for children\", 'frequency', \"marker 2 value\", \"red\")\r\n// ax5 = plotHist(ax5, adultWomenData['marker_1'], \"histogram of marker 1 for adult women\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax6 = plotHist(ax6, adultWomenData['marker_2'], \"histogram of marker 2 for adult women\", 'frequency', \"marker 2 value\", \"red\")\r\n// ax7 = plotHist(ax7, adultMenData['marker_1'], \"histogram of marker 1 for adult men\", 'frequency', \"marker 1 value\", \"green\")\r\n// ax8 = plotHist(ax8, adultMenData['marker_2'], \"histogram of marker 2 for adult men\", 'frequency', \"marker 2 value\", \"red\")\r\n\r\n// plt.tight_layout()\r\n// plt.show()\r\n\r\n// def plot_scatter(axes, data, plot_title, x_lable, y_lable, groups):\r\n// import matplotlib.cm as cmx\r\n// import matplotlib.colors as colors\r\n// #set up color map(one color per group number)\r\n\r\n// #split[0, 1] in to as many parts as there are groups\r\n// group_numbers = np.linspace(0, 1, groups)\r\n// #get a color map\r\n// c_map = plt.get_cmap('rainbow')\r\n// #get a range of colors from color map\r\n// c_norm = colors.Normalize(vmin = 0, vmax = group_numbers[-1])\r\n// #get a map that maps a group number to a color\r\n// number_map = cmx.ScalarMappable(norm = c_norm, cmap = c_map)\r\n\r\n// #plot points colored by their group number\r\n// for group in xrange(groups):\r\n// #convert a group number into a color using our map\r\n// color = number_map.to_rgba(group_numbers[group])\r\n// #make a scatter plot of a specific group colored by its group number color\r\n// axes.scatter(data[data['subtype'] == group]['marker_1'],\r\n//     data[data['subtype'] == group]['marker_2'],\r\n//     c = color,\r\n//     alpha = 0.5)\r\n\r\n// axes.set_title(plot_title)\r\n// axes.set_xlabel(x_lable)\r\n// axes.set_ylabel(y_lable)\r\n\r\n// fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize = (10, 10))\r\n\r\n// plot_scatter(ax1, df, 'scatter plot of entire dataset', 'marker 1', 'marker 2', 4)\r\n// plot_scatter(ax2, childrenData, 'scatter plot of children', 'marker 1', 'marker 2', 4)\r\n// plot_scatter(ax3, adultWomenData, 'scatter plot of adult female', 'marker 1', 'marker 2', 4)\r\n// plot_scatter(ax4, adultMenData, 'scatter plot of adult male', 'marker 1', 'marker 2', 4)\r\n\r\n// plt.tight_layout()\r\n// plt.show()\r\n\r\n// dataFull = getPandasFromFile(\"dataset\", \"dataset_1_full.txt\")\r\n// #print split(full, 80)[0].y\r\n// #print split(full, 80)[1].y\r\n// temp = split(dataFull, 80)[0].y\r\n// idx = temp.index[2]\r\n// #print split(full, 80)[1]\r\n// #print idx\r\n// #print temp[idx]\r\n// print temp.values[: 5]\r\n// print temp.values[-5:]\r\n\r\n// a = temp.values[: 5]\r\n// b = temp.values[-5:]\r\n\r\n// print list(a) + list(b)\r\n\r\n// train = dataFull.sample(frac = 0.8, random_state = 100)\r\n// train = train.sort()\r\n// test = dataFull.drop(train.index)\r\n\r\n// import sys, time\r\n// import numpy as np\r\n// import pandas as pd\r\n\r\n// #############w##################################################### split data for train and test\r\n// def SplitDataWithSKLearn(X,y, testSize=0.2, randomState=4):\r\n//     from sklearn.cross_validation import train_test_split\r\n//     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=testSize, random_state=randomState)\r\n//     print \"train, X length:\", len(X_train), \", Y length:\" , len(y_train)\r\n//     print \"test, X length:\", len(X_test), \", Y length:\" , len(y_test)\r\n//     return X_train, X_test, y_train, y_test\r\n\r\n// def split(dataset,m): # temp = split(dataFull,80)[0].y\r\n//     train = dataset.sample(frac=m*0.01,random_state=100)\r\n//     test = dataset.drop(train.index)\r\n//     trainNew = dataset.drop(test.index)\r\n//     return trainNew, test\r\n\r\n// def splitFromRandom(data):\r\n//     #find the number of records dataframe\r\n//     length = data.shape[0]\r\n//     #build a list of integer indices for records in dataframe\r\n//     indices = range(length)\r\n//     #randomly shuffle the indices\r\n//     np.random.shuffle(indices)\r\n\r\n//     #take 70% of the shuffled list of indices for training\r\n//     train_indices = indices[0:int(length * .7)]\r\n//     #take the remainder the shuffled list of indices for testing\r\n//     test_indices = indices[int(length * .7):]\r\n\r\n//     #get the records for the training indices\r\n//     train = data.iloc[train_indices, :]\r\n//     #get the records for the testing indices\r\n//     test = data.iloc[test_indices, :]\r\n//     return train, test\r\n// # df = pd.read_csv('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_01/dataset_HW1.txt')\r\n// # children_data = df[df['patient_age'] < 18]\r\n// # train, test = split(children_data)\r\n\r\n// def splitByRandom(data, percent): # 0.7\r\n//     #find the number of records dataframe\r\n//     length = data.shape[0]\r\n//     #build a list of integer indices for records in dataframe\r\n//     indices = range(length)\r\n//     #randomly shuffle the indices\r\n//     np.random.shuffle(indices)\r\n\r\n//     #take 70% of the shuffled list of indices for training\r\n//     train_indices = indices[0:int(length * percent)] # .7\r\n//     #take the remainder the shuffled list of indices for testing\r\n//     test_indices = indices[int(length * percent):] # .7\r\n\r\n//     #get the records for the training indices\r\n//     train = data.iloc[train_indices]\r\n//     #get the records for the testing indices\r\n//     test = data.iloc[test_indices]\r\n//     return train, test\r\n\r\n// def splitFromTopWithPercentage(dataset,percent): # temp = split(dataFull,80)[0].y\r\n//     theTotalLength = len(dataset.index.values)\r\n//     theLength = theTotalLength * percent / 100\r\n//     theInverseIndex = [i for i in range(theLength + 1, theTotalLength)]\r\n//     theIndex = [i for i in range(0, theLength + 1)]\r\n//     theFristData = dataset.drop(theInverseIndex, 0)\r\n//     theNextData = dataset.drop(theIndex, 0)\r\n//     return theFristData, theNextData\r\n\r\n// def splitFromTopWithPercentagePandasToNumpy(xDFforList, yDFforItem,percent): # pandasDF m 0.5%, 1 is maximum, let say 100%\r\n//     # Convert data frame to array\r\n//     x = xDFforList.values\r\n//     y = yDFforItem.values\r\n\r\n//     # ii. SPLIT TRAIN AND TEST SETS\r\n//     # No. of training points\r\n//     n = x.shape[0]\r\n//     n_train = int(np.round(n*percent)) # 0.25\r\n\r\n//     # First 25% train, remaining test\r\n//     x_train = x[0:n_train,:]\r\n//     y_train = y[0:n_train]\r\n//     x_test = x[n_train:,:]\r\n//     y_test = y[n_train:]\r\n\r\n// def GetDataBySplit(data , string):\r\n//     d = data.split(\",\")\r\n//     return d\r\n\r\n// def SortListOfList(d):\r\n//     d.sort(key=lambda x: x[0], reverse=True)\r\n//     return d\r\n\r\n// def dot_product(v1, v2):\r\n//     return sum(map(lambda x: x[0] * x[1], zip(v1, v2)))\r\n\r\n// def cosine_measure(v1, v2):\r\n//     prod = dot_product(v1, v2)\r\n//     len1 = math.sqrt(dot_product(v1, v1))\r\n//     len2 = math.sqrt(dot_product(v2, v2))\r\n//     return prod / (len1 * len2)\r\n\r\n// # print countdown(5);\r\n// def countdown(n):\r\n//     #print(\"QUIZ TIME\")\r\n//     for i in range(5*1,0, -1):\r\n//         time.sleep(1)\r\n//         sys.stdout.write(str(i)+' ')\r\n//         sys.stdout.flush()\r\n\r\n// ############################################################################ random sampling\r\n// def getRandomSamplingRowFromNumpy(data, num):\r\n//     return data[[ np.random.randint(0,num) for i in range(num)],:]\r\n// def getRandomSamplingDataMatricsFromRow(dataTrain, numList=200, numSample = 100 ):\r\n//     dataSmapleList = []\r\n//     for i in range(numList):\r\n//         dataSmapleList.append(getRandomSampleingRowFromNumpy(dataTrain, numSample))\r\n//     return dataSmapleList\r\n// def getRandomSamplingRowFromNumpy(data, num):\r\n//     return data[[ np.random.randint(0,num) for i in range(num)],:]\r\n// # data = np.array([[1,2,3],[4,5,6],[7,8,9]])\r\n// # print data\r\n// # print getRandomSampleingRowFromNumpy(data, 3)\r\n\r\n// def getColumnSortFromNumpyMatrix(dataArray):\r\n//     if type(dataArray) == np.ndarray :\r\n//         return np.sort(dataArray.T).T # transpose to compute sort\r\n//     else:\r\n//         dataArray = np.array(dataArray) # make the list numpy to transpose and sort\r\n//         return np.sort(dataArray.T).T # transpose to compute sort\r\n// def getRowSortFromNumpyMatrix(dataArray):\r\n//     if type(dataArray) == np.ndarray :\r\n//         return np.sort(dataArray) # transpose to compute sort\r\n//     else:\r\n//         dataArray = np.array(dataArray) # make the list numpy to transpose and sort\r\n//         return np.sort(dataArray) # transpose to compute sort\r\n\r\n// # dd = [[4,5,7], [7,3,1],[3,34,9]]\r\n// # dd = np.array(dd)\r\n// # print dd\r\n// # print getRowSortFromNumpyMatrix(dd);\r\n\r\n// #############################################################################\r\n\r\n// def GetSquareRamdaList(min, max):\r\n//     return [10 ** i for i in range(min, max+1)]\r\n\r\n// def fillNull(dataPandaDataFrame, dataListForMissing):\r\n//     from copy import deepcopy\r\n//     temp = deepcopy(dataPandaDataFrame)\r\n//     for i in dataListForMissing:\r\n//         temp[\"y\"][i] = np.nan\r\n//     return temp\r\n\r\n// def InsertNoneByRandom(data, percent): # 0.7\r\n//     # percent = 1.0 - percent\r\n//     newDF = data.copy(deep=True)\r\n//     dataLength = len(data)\r\n//     rndIndex  = np.random.choice(dataLength,int(dataLength * percent) )\r\n//     newDF.iloc[rndIndex] = np.nan# 'null'\r\n//     print \"The total length of old data:\", dataLength\r\n//     print \"The total length of new data:\", newDF.count()\r\n//     print \"the length of None in the new data:\", newDF.isnull().sum(),\"(\",percent,\"%)\"\r\n//     return newDF\r\n\r\n// def GetXYListFromPandaDataFrame(dataPD): # in Pandas List (multiple x and one y) to split and resort based on x column and y\r\n//     xList = []\r\n//     y = []\r\n//     length = dataPD.shape[1]\r\n//     for i, d in enumerate(dataPD.T.values):\r\n//         if( i < length-1): xList.append(d) # list for x columns\r\n//         else: y = d # a value for only one y\r\n//     return xList, y\r\n\r\n// def DeleteLastColFromPandaDataFrame(dataFullPD):\r\n//     indexCol = dataFull.columns.values\r\n//     return dataFull.drop(indexCol[-1], 1) # 0 for rows and 1 for columns\r\n// def SplitXYColumnFromPandaDataFrame(dataPD): # input as panda data frame out 1) x feature list, y feature item\r\n//     indexCol = dataPD.columns.values\r\n//     xlist = dataPD.drop(indexCol[-1:], 1)\r\n//     yItem = dataPD.drop(indexCol[:-1], 1)\r\n//     return xlist, yItem\r\n\r\n// def GetDummiesFromPandaDataFrame(dataPD):\r\n\r\n//     # Create a new data frame with first attribute\r\n//     x_df_expanded = pd.DataFrame({}) # first column is numerical\r\n//     # Iterate over all attributes\r\n//     for column in dataPD.columns:\r\n//         # Check if attribute is not categorical: either dtype is not object\r\n//         if (len(dataPD[column].unique())<8\r\n//         or (dataPD[column].dtype == np.dtype('object'))\r\n//         or (dataPD[column].dtype == np.dtype('string'))):\r\n//             encoding = pd.get_dummies(dataPD[column])\r\n//             x_df_expanded = pd.concat([x_df_expanded, encoding], axis=1)\r\n//         else:\r\n//             x_df_expanded = pd.concat([x_df_expanded, dataPD[column]], axis=1)\r\n//             # print encoding.iloc[:1].values\r\n//     return x_df_expanded\r\n\r\n// def GetCountForNullFromPandas(d):\r\n//     return d.isnull().sum()\r\n\r\n// # a = np.array([1,10,3,4,5,6])\r\n// # a = a.reshape((3,2))\r\n// # b = CopyNumpy(a);\r\n// # b[0][-1] = 99\r\n// # print a\r\n// # print b\r\n\r\n// ######\r\n// # print b + 2\r\n// # print b ** 2\r\n// # print b < 10\r\n\r\n// ######\r\n// # print b\r\n// # PrintNumpy(b)\r\n// # print GetColumnFromNumpy(b, 1 , False)\r\n\r\n// # print ComputeCutWithRangeNumpy(b, 3,10)\r\n// # print GetComparedWithMaxNumpy(b, 10)\r\n\r\n// ######\r\n// # dataWithNAN = np.array([1,2,3,np.NAN, 4])\r\n// # print ComputeCutWithNANNumpy(dataWithNAN)\r\n\r\n// ################################################## sort\r\n// # newData = [[10,7, 1],[8,3, 10], [23,4,9]]\r\n// # newData = np.array(newData)\r\n// # print newData\r\n// # newData1 = CopyNumpy(newData)\r\n// # newData1.sort()\r\n// # print newData1\r\n// # newData1[:,0].sort()\r\n// # print newData1\r\n\r\n// ################################################## data structure\r\n// def GetArrayFromMatrix(d):\r\n//     newD, = np.array(d.T)\r\n//     return newD\r\n// def GetMatrixFromArrayForSKLearn(d): # because we need to make a matrix for SK\r\n//     return d.reshape((len(d),1))\r\n\r\n// ################################################### customized K Fold\r\n// # this is list of list. first list contain individual KFold, in this case, 5 # the second index is about train and test, the length should be 2.\r\n// def GetDataFrameListFromKFold(dt, k,lamdaLst): # should be no remainder by k # return list of PandasDataFrames\r\n//     Kfold = []; tempFold = []; num = 0;\r\n//     totalLength = len(dt)\r\n//     theLength = totalLength/k\r\n//     for i in range(totalLength+1):\r\n//         if num == theLength+1:\r\n//             Kfold.append(tempFold)\r\n//             tempFold = []\r\n//             tempFold.append(i)\r\n//             num =1;\r\n//         elif i == totalLength:\r\n//               Kfold.append(tempFold)\r\n//         else:\r\n//             tempFold.append(i)\r\n//             num+=1\r\n//     dt = dt.T\r\n//     KfoldList = []\r\n//     for i in Kfold: KfoldList.append(dt[i].T)\r\n//     kfoldListOut = []\r\n//     for j in range(len(KfoldList)):\r\n//         theTrainDataFrame = []\r\n//         theTestDataFrame = []\r\n//         fold = []\r\n//         for i, d in enumerate(KfoldList):\r\n//             if(j == i): theTrainDataFrame = d\r\n//             else:theTestDataFrame.append(d)\r\n//         theTestDataFrame = pd.concat(theTestDataFrame)\r\n//         fold.append(theTrainDataFrame)\r\n//         fold.append(theTestDataFrame)\r\n//         kfoldListOut.append(fold)\r\n//     return kfoldListOut\r\n// # dataFrameListFromKFold = GetDataFrameListFromKFold(dataFullDummies, 5,listRamda) # dataFullDummies\r\n// # # this is list of list. first list contain individual KFold, in this case, 5 # the second index is about train and test, the length should be 2.\r\n// # print len(dataFrameListFromKFold)\r\n// # print len(dataFrameListFromKFold[0])\r\n\r\n// ################################################### customized Booststrapping\r\n// def Booststrapping(dataFrame, num_samples):\r\n//     indexCol = dataFrame.columns.values\r\n//     indexRow = dataFrame.index.values\r\n\r\n//     indexRow = np.random.permutation(len(indexRow))\r\n//     dataFrame = dataFrame.T\r\n//     return dataFrame[indexRow].T\r\n\r\n// def GetDataFrameListFromBooststrapping(dataFrame, num_samples, num_List):\r\n//     outList = []\r\n//     for i in range(num_List):\r\n//         outList.append(Booststrapping(dataFrame,num_samples))\r\n//     return outList\r\n\r\n// # print len(GetDataFrameListFromBooststrapping(dataFullDummies, 200, 5))\r\n\r\n// ################################################### customized Booststrapping\r\n// def GetSubsetOfPredicttorsByForward(xNumpyMatrix, yList):\r\n//     x = xNumpyMatrix\r\n//     y = yList\r\n\r\n//     ### Best Subset Selection\r\n//     min_bic = 1e10 # set some initial large value for min BIC score\r\n//     best_subset = [] # best subset of predictors\r\n\r\n//     # Create all possible subsets of the set of 10 predictors\r\n//     predictorSet = set(range(xNumpyMatrix.shape[1]))\r\n//     print \"total number of predictor: \",len(predictorSet)\r\n\r\n//     for sizeK in range(len(predictorSet)):\r\n//         # Create all possible subsets of size 'size', using the 'combination' function from the 'itertools' library\r\n//         subsetsSizeK = itertools.combinations(predictorSet, sizeK +1)\r\n//         maxRsquared = -1e10 # set some initial small value for max R^2 score\r\n//         bestKsubset = [] # best subset of predictors of size k\r\n//         for predictor_subset in subsetsSizeK:\r\n//             # Use only a subset of predictors in the training data\r\n//             x_subset = x[:, predictor_subset]\r\n\r\n//             # Fit and evaluate R^2\r\n//             model = OLS(y, x_subset)\r\n//             results = model.fit()\r\n//             r_squared = results.rsquared\r\n\r\n//             # Update max R^2 and best predictor subset of size k\r\n//             # If current predictor subset has a higher R^2 score than that of the best subset\r\n//             # we've found so far, remember the current predictor subset as the best!\r\n//             if(maxRsquared < r_squared ):\r\n//                 maxRsquared = r_squared\r\n//                 bestKsubset = predictor_subset[:]\r\n\r\n//         # Use only the best subset of size k for the predictors\r\n//         x_subset = x[:, bestKsubset]\r\n\r\n//         # Fit and evaluate BIC of the best subset of size k\r\n//         model = OLS(y, x_subset)\r\n//         results = model.fit()\r\n//         bic = results.bic\r\n\r\n//         # Update minimum BIC and best predictor subset\r\n//         # If current predictor has a lower BIC score than that of the best subset\r\n//         # we've found so far, remember the current predictor as the best!\r\n//         if(bic < min_bic):\r\n//             min_bic = bic\r\n//             best_subset = bestKsubset[:]\r\n//     print 'Step-wise forward subset selection:'\r\n//     return sorted(best_subset)\r\n// # bestSubsetForward = GetSubsetOfPredicttorsByForward(xDataList, yData)\r\n// # print bestSubsetForward\r\n// def GetSubsetOfPredicttorsByBackward(xNumpyMatrix, yList):\r\n//     x = xNumpyMatrix\r\n//     y = yList\r\n\r\n//     ###  Step-wise Backward Selection\r\n//     d = x.shape[1] # total no. of predictors\r\n//     print \"total number of predictor: \",d\r\n//     # Keep track of current set of chosen predictors\r\n//     current_predictors = range(d)\r\n\r\n//     # First, fit and evaluate BIC using all 'd' number of predictors\r\n//     model = OLS(y, x)\r\n//     results = model.fit()\r\n//     bic_all = results.bic\r\n\r\n//     # Set the minimum BIC score, initially, to the BIC score using all 'd' predictors\r\n//     global_min_bic = bic_all\r\n//     # Keep track of the best subset of predictors\r\n//     best_subset = []\r\n\r\n//     # Iterate over all possible subset sizes, d predictors to 1 predictor\r\n//     for size in range(d - 1, 1, -1): # stop before 0 to avoid choosing an empty set of predictors\r\n//         max_r_squared = -1e10 # set some initial small value for max R^2\r\n//         worst_predictor = -1 # set some throwaway initial number for the worst predictor to remove\r\n//         bic_without_worst_predictor = 1e10 # set some initial large value for min BIC score\r\n\r\n//         # Iterate over current set of predictors (for potential elimination)\r\n//         for i in current_predictors:\r\n//             # Create copy of current predictors, and remove predictor 'i'\r\n//             temp = current_predictors[:]\r\n//             temp.remove(i)\r\n\r\n//             # Use only a subset of predictors in the training data\r\n//             x_subset = x[:, temp]\r\n\r\n//             # Fit and evaluate R^2\r\n//             model = OLS(y, x_subset)\r\n//             results = model.fit()\r\n//             r_squared = results.rsquared\r\n\r\n//             # Check if we get a higher R^2 value than than current max R^2, if so, update\r\n//             if(r_squared > max_r_squared):\r\n//                 max_r_squared = r_squared\r\n//                 worst_predictor = i\r\n//                 bic_without_worst_predictor = results.bic\r\n\r\n//         # Remove worst predictor from current set of predictors\r\n//         current_predictors.remove(worst_predictor)\r\n\r\n//         # Check if BIC for the predictor we just removed is lower than\r\n//         # the global minimum across all subset of predictors\r\n//         if(bic_without_worst_predictor < global_min_bic):\r\n//             best_subset = current_predictors[:]\r\n//             global_min_bic = bic_without_worst_predictor\r\n//     print 'Step-wise backward subset selection:'\r\n//     return sorted(best_subset)\r\n// # bestSubsetBackward = GetSubsetOfPredicttorsByBackward(xDataList, yData)\r\n// # print bestSubsetBackward\r\n\r\n// # [[1,1] , [ 1,1,] .... ]\r\n// def split2dData(data, percent=0.7):\r\n//     section = int(len(data) * percent)\r\n//     train = data[:section,:]\r\n//     test = data[section:,:]\r\n//     return train, test\r\n// def split1dData(data, percent=0.7):\r\n//     section = int(len(data) * percent)\r\n//     train = data[:section]\r\n//     test = data[section:]\r\n//     return train, test\r\n\r\n// def split(dataset,m):\r\n//     train=dataset.sample(frac=m*0.01,random_state=100)\r\n//     test=dataset.drop(train.index)\r\n//     trainNew=dataset.drop(test.index)\r\n//     return trainNew, test\r\n\r\n// # dataTrain, dataTest  = split(dataFull, 70)\r\n\r\n// #### Let's put our function definitions in one cell, for readability  from HW 01\r\n\r\n// #--------  split\r\n// #input: data (dataframe)\r\n// #output: train (dataframe), test (dataframe)\r\n\r\n// def split(data):\r\n//     #find the number of records dataframe\r\n//     length = data.shape[0]\r\n//     #build a list of integer indices for records in dataframe\r\n//     indices = range(length)\r\n//     #randomly shuffle the indices\r\n//     np.random.shuffle(indices)\r\n\r\n//     #take 70% of the shuffled list of indices for training\r\n//     train_indices = indices[0:int(length * .7)]\r\n//     #take the remainder the shuffled list of indices for testing\r\n//     test_indices = indices[int(length * .7):]\r\n\r\n//     #get the records for the training indices\r\n//     train = data.iloc[train_indices, :]\r\n//     #get the records for the testing indices\r\n//     test = data.iloc[test_indices, :]\r\n\r\n//     return train, test\r\n\r\n// #--------  classify\r\n// #input: train (dataframe), test (dataframe)\r\n// #output: predicted_subtypes (numpy array)\r\n\r\n// def classify(train, test):\r\n//     #create dataframe with just biometric and disease subtype info\r\n//     biometric_df = train[['marker_1', 'marker_2', 'subtype']]\r\n\r\n//     #group the records in dataframe by 'subtype' and compute mean\r\n//     mean_df = biometric_df.groupby('subtype').mean()\r\n\r\n//     #converts row labels like 0.0, 1.0 to string (this will save us indexing headaches)\r\n//     mean_df.index = mean_df.index.map(str)\r\n\r\n//     #iterate through the rows in the mean dataframe\r\n//     for index, mean in mean_df.iterrows():\r\n//         #for each cluster mean, store the distance between all test points and mean\r\n//         #in new column labeled by the cluster number\r\n//         test.loc[:, index] = ((test['marker_1'] - mean['marker_1'])**2\r\n//                               + (test['marker_2'] - mean['marker_2'])**2)\r\n\r\n//     #now the dataframe \"test\" has four new columns: 0, 1, 2, 3\r\n//     #the n-th value in the 0 column represents the distance btw the\r\n//     #n-th data point and the 0-th cluster mean\r\n\r\n//     #get the columns from test that are store the distances to the cluster means\r\n//     distances = test[mean_df.index]\r\n\r\n//     #for each record, get the labels on the column that stores the minimum distance\r\n//     predicted_subtypes = distances.idxmin(axis=1).values\r\n\r\n//     #converts row labels like 0.0, 1.0 from string back to float (to make arithmetic easier)\r\n//     predicted_subtypes = predicted_subtypes.astype(float)\r\n//     return predicted_subtypes\r\n\r\n// #--------  evaluate\r\n// #input: predicted_subtypes (array), true_subtypes (array)\r\n// #output: percent_correct (float)\r\n\r\n// def evaluate(predicted_subtypes, true_subtypes):\r\n//     #subtract the array of predicted subtypes and the array of true subtypes\r\n//     comparison = predicted_subtypes - true_subtypes\r\n\r\n//     #when the predicted value is different from the true value, that entry is non-zero\r\n//     #we set all non-zero entries (wrong predictions) to 1\r\n//     comparison[comparison != 0] = 1\r\n\r\n//     #the total number of wrong predictions is the sum of the array (where entries have a 1\r\n//     #for wrong and 0 for right)\r\n//     total_wrong = comparison.sum()\r\n\r\n//     right_percent = (len(comparison) - total_wrong) / (len(comparison) * 1.0)\r\n\r\n//     return right_percent\r\n\r\n// def GetColArrayFromList(d):\r\n//     d = pd.DataFrame(d);\r\n//     d = np.array(d.as_matrix())\r\n//     return d\r\n\r\n// ##################################################################################### Pandas use case\r\n// ############################################################################# Pandas utilities\r\n\r\n// def PandasUtility():\r\n//     import pandas as pd\r\n//     df = pd.read_csv('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/HW/HW_01/dataset_HW1.txt')\r\n//     print 'number of patients:', df.shape[0]\r\n//     df.head(n=5) #print first 5 rows of dataframe\r\n//     df_cols_1_to_4 = df[range(1, 5)]  #choose columns 1, 2, 3, 4 (ignoring columns 0 and 4)\r\n//     column_names = df_cols_1_to_4.columns.values #get column names from important_column dataframe\r\n//     stats = pd.DataFrame(columns=column_names) #create pandas dataframe with column names given by column_names\r\n//     stats.loc['max'] = df_cols_1_to_4.max() #create a row called 'max' and store max values from the columns of important_columns\r\n//     stats.loc['min'] = df_cols_1_to_4.min() #create a row called 'min' and store min values from the columns of important_columns\r\n//     stats.loc['range'] = df_cols_1_to_4.max() - df_cols_1_to_4.min()    #create a row called 'range' and store range of values from the columns of important_columns\r\n//     stats.head(n=5)\r\n//     df_cols_1_2_4 = df[[1, 2, 4]]\r\n//     stats.loc['mean'] = df_cols_1_2_4.mean()\r\n//     stats.loc['median'] = df_cols_1_2_4.median()\r\n//     stats.loc['std'] = df_cols_1_2_4.std()\r\n//     print stats\r\n\r\n//     #Create three different datasets by filtering our entire set\r\n//     children_data = df[df['patient_age'] < 18]\r\n//     adult_women_data = df[(df['patient_age'] > 17) & (df['patient_gender'] == 'female')]\r\n//     adult_male_data = df[(df['patient_age'] > 17) & (df['patient_gender'] == 'male')]\r\n\r\n//     #create dataframe with select column names (just like before)\r\n//     column_names = children_data[range(1, 5)].columns.values\r\n//     child_stats = pd.DataFrame(columns=column_names)\r\n\r\n//     #add a row for each stat (just like before)\r\n//     child_stats.loc['child_max'] = children_data[range(1, 5)].max()\r\n//     child_stats.loc['child_min'] = children_data[range(1, 5)].min()\r\n//     child_stats.loc['child_range'] = children_data[range(1, 5)].max() - children_data[range(1, 5)].min()\r\n\r\n//     child_stats.loc['child_mean'] = children_data[[1, 2, 4]].mean()\r\n//     child_stats.loc['child_median'] = children_data[[1, 2, 4]].median()\r\n//     child_stats.loc['child_std'] = children_data[[1, 2, 4]].std()\r\n//     print child_stats\r\n\r\n//     #create dataframe with select column names (just like before)\r\n//     column_names = adult_women_data[range(1, 5)].columns.values\r\n//     adult_women_stats = pd.DataFrame(columns=column_names)\r\n\r\n//     #add a row for each stat (just like before)\r\n//     adult_women_stats.loc['adult_f_max'] = adult_women_data[range(1, 5)].max()\r\n//     adult_women_stats.loc['adult_f_min'] = adult_women_data[range(1, 5)].min()\r\n//     adult_women_stats.loc['adult_f_range'] = adult_women_data[range(1, 5)].max() - adult_women_data[range(1, 5)].min()\r\n\r\n//     adult_women_stats.loc['adult_f_mean'] = adult_women_data[[1, 2, 4]].mean()\r\n//     adult_women_stats.loc['adult_f_median'] = adult_women_data[[1, 2, 4]].median()\r\n//     adult_women_stats.loc['adult_f_std'] = adult_women_data[[1, 2, 4]].std()\r\n//     print adult_women_stats\r\n\r\n//     #create dataframe with select column names (just like before)\r\n//     column_names = adult_male_data[range(1, 5)].columns.values\r\n//     adult_male_stats = pd.DataFrame(columns=column_names)\r\n\r\n//     #add a row for each stat (just like before)\r\n//     adult_male_stats.loc['adult_m_max'] = adult_male_data[range(1, 5)].max()\r\n//     adult_male_stats.loc['adult_m_min'] = adult_male_data[range(1, 5)].min()\r\n//     adult_male_stats.loc['adult_m_range'] = adult_male_data[range(1, 5)].max() - adult_male_data[range(1, 5)].min()\r\n\r\n//     adult_male_stats.loc['adult_m_mean'] = adult_male_data[[1, 2, 4]].mean()\r\n//     adult_male_stats.loc['adult_m_median'] = adult_male_data[[1, 2, 4]].median()\r\n//     adult_male_stats.loc['adult_m_std'] = adult_male_data[[1, 2, 4]].std()\r\n//     print adult_male_stats\r\n\r\n//     ###################################\r\n//     xTemp = csvData[\"x\"].as_matrix()\r\n//     yTemp = csvData[\"y\"].as_matrix()\r\n\r\n//     print np.min(xTemp), np.max(xTemp)\r\n//     print np.min(yTemp), np.max(yTemp)\r\n\r\n//     x_Value = [coef_x_mean - 15.5 , coef_x_mean + 15.5]\r\n\r\n//     xplt = df['x'].convert_objects(convert_numeric=True)\r\n//     yplt = df['y'].convert_objects(convert_numeric=True)\r\n//     zplt = df['z'].convert_objects(convert_numeric=True)\r\n\r\n//     col_1 = pd.Series(tlst)\r\n//     col_2 = pd.Series(xlst)\r\n//     col_3 = pd.Series(ylst)\r\n//     col_4 = pd.Series(zlst)\r\n//     df = pd.DataFrame({\"t\":col_1,\"x\":col_2,\"y\":col_3,\"z\":col_4})\r\n//     df.tail(3)\r\n\r\n//     data = data.replace('_', np.nan)\r\n\r\n//     # dorp column if there is no data because we have more than 400 column...\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     data = data[complete_cols]\r\n\r\n//     # Converted columns to floating point\r\n//     for feature_name in to_float:\r\n//         data[feature_name] = data[feature_name].astype(float)\r\n\r\n//     # Columns between POP901 to AC2 should all be float\r\n//     index1 = data.columns.get_loc(\"POP901\")\r\n//     index2 = data.columns.get_loc(\"AC2\")\r\n//     for i in range(index1, index2 + 1):\r\n//         print i\r\n//         data.iloc[:, i] = data.iloc[:, i].astype(float)\r\n\r\n//     # replace data in pandas\r\n//     d = data.replace(\"_\" , np.nan)\r\n//     print d.head(3)\r\n\r\n// # PandasUtility()\r\n\r\n// def GetListFromPDColumn(pdCol):\r\n//     temp = []\r\n//     for d in pdCol:temp.append(d)\r\n//     return temp;\r\n// def RemoveRowWithNAN(data):\r\n//     data = data.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\r\n//     return data.reset_index()\r\n// #     return data\r\n// def RemoveColumnsWithNull(data, num):\r\n// #     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) < num]\r\n//     return data[complete_cols]\r\n// def ReomveRowwithNANWithNum(data):\r\n//     data = data.dropna(thresh=None)\r\n//     return data\r\n// def GetNumpyColumnFromIndex(theDF):\r\n//     theD = pd.DataFrame(theDF.values);\r\n//     return theD.as_matrix()\r\n// def CheckPandasNAN(data):\r\n//     theResult = pd.isnull(data)\r\n//     count = 0;\r\n//     for i in theResult:\r\n//         if(i == True): count+=1\r\n//     return \"the number of NAN is :\" , count\r\n// def GetPandasRemoveNoneColumn(data):\r\n//     data = data.replace(\"_\" , np.nan)\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     return data[complete_cols]\r\n\r\n// def ConvertFloatColumn(data, feature_name): # convert to float in the column\r\n//     data[feature_name] = data[feature_name].astype(float)\r\n//     return data\r\n// def ConvertFloatColumns(data, index1, index2): # convert to float between index 1 and 2\r\n//     for i in range(index1, index2):\r\n//         data.iloc[:, i] = data.iloc[:, i].astype(float)\r\n//     return data\r\n// def GetColumnIndex(data, start, end):\r\n//     index1 = data.columns.get_loc(start)\r\n//     index2 = data.columns.get_loc(end)+1\r\n//     return [index1, index2]\r\n// def encode_categorical(array):\r\n//     from sklearn import preprocessing\r\n//     if not array.dtype == np.dtype('float64'):\r\n//         return preprocessing.LabelEncoder().fit_transform(array)\r\n//     else:\r\n//         return array\r\n\r\n// data = pd.read_csv('Z:/[09_HarvardGSD]/2016_3_Fall_CS109 DataScience/lab_files/Lab_10/datasets/dataset.txt', low_memory=False)\r\n// # print data.shape; # (8928, 377)\r\n// data = GetPandasRemoveNoneColumn(data)\r\n// # print data.shape; # (8928, 316)\r\n// # print type(data[\"WWIIVETS\"][5]) # <type 'numpy.float64'>\r\n// data = ConvertFloatColumn(data, \"WWIIVETS\")\r\n// # print type(data[\"WWIIVETS\"][5]) # <type 'numpy.float64'>\r\n\r\n// theIndex = ['POP901', 'AC2']\r\n// theIndex = GetColumnIndex(data, theIndex[0], theIndex[1])\r\n// # print theIndex # [12, 295]\r\n\r\n// data = ConvertFloatColumns(data, theIndex[0], theIndex[1])\r\n\r\n// categorical = (data.dtypes.values != np.dtype('float64'))\r\n// # print categorical\r\n// data = data.apply(encode_categorical) # Encode all labels\r\n// # print data\r\n\r\n// # Get numpy array from data\r\n// x = data.values[:, :-1]\r\n// y = data.values[:, -1]\r\n\r\n// # Apply one hot endcoing\r\n// from sklearn import preprocessing\r\n// encoder = preprocessing.OneHotEncoder(categorical_features=categorical[:-1], sparse=False)  # Last value in mask is y\r\n// x = encoder.fit_transform(x)\r\n\r\n// #Threshold for class 0\r\n// threshold = 7\r\n\r\n// from sklearn.cross_validation import train_test_split\r\n// x_train, x_test, y_train_val, y_test_val = train_test_split(x, y, test_size=0.6, random_state=42)\r\n\r\n// y_train = np.copy(y_train_val)\r\n// y_test = np.copy(y_test_val)\r\n\r\n// y_train[y_train_val > threshold] = 1\r\n// y_train[y_train_val <= threshold] = 0\r\n\r\n// y_test[y_test_val > threshold] = 1\r\n// y_test[y_test_val <= threshold] = 0\r\n\r\n// cost_per_donor = 7\r\n\r\n// #Print some useful info for our test, train sets\r\n// print 'train data: ', x_train.shape\r\n// print 'test data: ', x_test.shape\r\n// print 'train class 0: {}, train class 1: {}'.format(len(y_train[y_train == 0]), len(y_train[y_train == 1]))\r\n// print 'test class 0: {}, test class 1: {}'.format(len(y_test[y_test == 0]), len(y_test[y_test == 1]))\r\n\r\n// def DropRowByNameWithCondition(d , colIndexVal, condition): # when image type less than 2, drop\r\n//     d = d[d[colIndexVal] < condition]\r\n//     return d\r\n// # dfSeoul = DropRowByNameWithCondition(dfSeoul, \"imgTypeNum\" , 2)\r\n\r\n// def DropCol(d, colsValue):\r\n//     d.drop(colsValue, axis=1, inplace=True)\r\n//     return d\r\n// def DropColByName(d, colIndexVal):\r\n//     d = d.drop(colIndexVal, axis=1)\r\n//     return d\r\n// def DropColByNames(d, features = []):\r\n//     for i in features\r\n//         DropColByName(d,i)\r\n//     return d\r\n// dfSeoul = DropColByName(dfSeoul, \"imgType\")\r\n\r\n// def SumTwoColumns(d, col0, col1):\r\n//     d[col0] += d[col1]\r\n//     return DropCol(d, col1)\r\n// def DropCol(d, colsValue):\r\n//     d.drop(colsValue, axis=1, inplace=True)\r\n//     return d\r\n\r\n// def SplitPDRow(dataFrame, theLength):\r\n//     return dataFrame.iloc[:theLength,:]\r\n\r\n// def ConvertDataFrameObjects(theDf):\r\n//     data = theDf.convert_objects(convert_numeric=True)\r\n//     return data\r\n\r\n// def ConcatDataFrame(d0, d1):\r\n//     pd.concat( [data['zestimate_amount'],data['zestimate_valuation_range_high'],data['zestimate_valuationRange_low'],\r\n//                 data['zestimate_value_change'],data['zestimate_percentile']],axis=1)\r\n\r\n// ##################################################################################### Numpy use case\r\n// ############################################################################# numpy utilities\r\n\r\n// def printNumpy(n):\r\n//     if type(n) == np.ndarray:\r\n//         print \"ndim: \", n.ndim\r\n//         print \"shape: \", n.shape\r\n//         print \"dType: \", n.dtype\r\n//     else:\r\n//         print \"this is not a numpy array\"\r\n// def reshape(n,dim):\r\n//     reShape = n.reshape(dim) #return is going to be reshaped by the dim\r\n//     return reShape\r\n// def copyNumpy(n):\r\n//     theCopy = n.copy();\r\n//     return theCopy\r\n\r\n// def computeCutWithNANNumpy(n):\r\n//     return np.isnan(n)\r\n\r\n// def getColumnFromNumpy(n , numCol = 0, reshape = False):\r\n//     if (reshape):\r\n//         return n[:,numCol].reshape((n.size/2,1))\r\n//     else:\r\n//         return n[:,numCol]\r\n// def computeCutWithRangeNumpy(n, theMin, theMax):\r\n//     return n.clip((theMin, theMax))\r\n// def getComparedWithMaxNumpy(n, num):return n < num\r\n// def getComparedWithMinNumpy(n, num):return n > num\r\n// def getMean(n):return n.mean()\r\n// def getMin(n):return n.min()\r\n// def getMax(n):return n.max()\r\n\r\n// def getArange(d):\r\n//     return np.arange(d.min(), d.max() )\r\n// def getRange(d):\r\n//     return [d.min(), d.max()]\r\n// def getStandardDeviationByNumpy(d): # using numpy\r\n//     return np.std(d)\r\n// def getVarianceByNumpy(d): # using numpy\r\n//     return np.var(d)\r\n// def getVariance(d): # same as above but hardcode\r\n//     theAver = np.mean(d)\r\n//     theSum = 0.0;\r\n//     for i in d:\r\n//         theSum += np.absolute( i - theAver ) ** 2\r\n//     return (theSum / (len(d)))\r\n// def getStandardDeviation(d):\r\n//     return np.sqrt(getVariance(d));\r\n// # a = np.array([1,10,3,4,5,6])\r\n// # print getStandardDeviationByNumpy(a);\r\n// # print getStandardDeviation(a);\r\n\r\n// def NumpyForUtility(data):# from HW 01\r\n//     print 'data dimensions:', data.shape\r\n//     print data[:3, :]\r\n\r\n//     print 'birth weight range:', data[:, 0].min(), '-', data[:, 0].max()\r\n//     print 'femur length range:', data[:, 1].min(), '-', data[:, 1].max()\r\n//     print 'maternal age range:', data[:, 2].min(), '-', data[:, 2].max()\r\n\r\n//     group1 = data[data[:, 2] < 18]\r\n//     group2 = data[(data[:, 2] < 35) & (data[:, 2] > 17)]\r\n//     group3 = data[data[:, 2] > 34]\r\n\r\n//     print 'Sizes of groups I, II and III: {}, {}, {}'.format(group1.shape[0],\r\n//                                                              group2.shape[0],\r\n//                                                              group3.shape[0])\r\n\r\n//     print 'Mean birth weights of groups I, II and III: {}, {}, {}'.format(round(group1[:, 0].mean(), 2),\r\n//                                                                           round(group2[:, 0].mean(), 2),\r\n//                                                                           round(group3[:, 0].mean(), 2))\r\n\r\n//     print 'Mean femure lengths of groups I, II and III: {}, {}, {}'.format(group1[:, 1].mean(),\r\n//                                                                            group2[:, 1].mean(),\r\n//                                                                            group3[:, 1].mean())\r\n\r\n//     np.random.permutation(10) # array([1, 7, 4, 3, 0, 9, 2, 5, 8, 6])\r\n//     np.random.permutation([1, 4, 9, 12, 15]) # array([15,  1,  9,  4, 12])\r\n\r\n//     arr = np.arange(9).reshape((3, 3))\r\n//     np.random.permutation(arr)\r\n//                                     # array([[6, 7, 8],\r\n//                                     #        [0, 1, 2],\r\n//                                     #        [3, 4, 5]])\r\n\r\n//     # give us percentage\r\n//     a = np.array([0,1,2,3,4,5,6,7,8,9,10]);\r\n//     conf_int_right = np.percentile(a, 99)\r\n//     print conf_int_right\r\n\r\n//     conf_int_left = np.percentile(x_C_lst, 5)\r\n//     conf_int_right = np.percentile(x_C_lst, 95)\r\n\r\n//     Na = np.linspace(5, 10, num=10) # Return evenly spaced numbers over a specified interval.\r\n//     # pinrt = [  5. 5.55555556   6.11111111   6.66666667   7.22222222  7.77777778   8.33333333   8.88888889   9.44444444  10.        ]\r\n\r\n//     # sort\r\n//     names_df.sort(columns=\"COLUMNINDEX\", ascending = False)\r\n//     #Sort our list of movie info by like-percentage, in descending order\r\n//     sorted_likability = sorted(likability, key=lambda t: t[3], reverse=True)\r\n\r\n//     # shuffle the data\r\n//     nfldata = nfldata.reindex(np.random.permutation(nfldata.index))\r\n// # print 360.0 / 6.0\r\n// # print [(365.0 / (6.0-1)) * i for i in range(6)]\r\n\r\n// def numpypandas():\r\n//     # data split and drop\r\n//     Y = df['quality'].values\r\n//     df_tmp = df.drop('chlorides',1)\r\n//     Y = np.array([1 if y>=7 else 0 for y in Y])\r\n//     X = df_tmp.as_matrix()\r\n//     df['target'] = (df['quality'].values >=7)*1\r\n\r\n// ##################################################################### data generator\r\n// import numpy as np\r\n// import matplotlib.pyplot as plt\r\n// # %matplotlib inline\r\n// from sklearn.linear_model import LinearRegression as Lin_Reg\r\n\r\n// ## GENERATE ANOTHER DATASET AND EXAMINE RESIDUALS\r\n// def GenerateDataLinearFun(N=1000, beta0=2.2, beta1=3.0, sigma=10.0, Xmax=1.0):\r\n//     epsilon=np.random.normal(0,sigma,N) # Random normally distributed points\r\n//     X = np.linspace(0,Xmax, N)\r\n//     Y = beta0 + beta1 * X + epsilon\r\n//     return X, Y\r\n\r\n// def GenerateDataNotLinearFun(N=1000, beta0=2.2, beta1=3.0, sigma=1.0, Xmax=1.0, alpha=1):\r\n//     epsilon=np.random.normal(0,sigma,N) # Random normally distributed points\r\n//     X = np.linspace(0,Xmax, N)\r\n//     Y = beta0 + beta1 * X + alpha* np.sin(6*X)+ epsilon\r\n//     #Y = beta0 + beta1 * X +4*beta1*(X>0.5) + epsilon\r\n//     #Y = beta0 + beta1 * X + alpha * X*X*X + epsilon\r\n//     return X, Y\r\n\r\n// def VisScatter(axes, x, y, theAlpha=0.5, theColor=\"green\", theTitle=\"scatter\", theXLabel=\"xAxis\", theYLabel=\"yAxis\",):\r\n//     axes.scatter( x, y, alpha=theAlpha, color=theColor)\r\n//     axes.show()\r\n//     # axes.set_title(theTitle)\r\n//     # axes.set_xlabel(theXLabel)\r\n//     # axes.set_ylabel(theYLabel)\r\n\r\n// # x,y = GenerateDataLinearFun(N=900, sigma=2.1)\r\n// x,y = GenerateDataNotLinearFun(N=900, sigma=2.1)\r\n// title = \"d\"\r\n// VisScatter( plt, x, y, theAlpha=0.5, theColor=\"green\" , theTitle=\"KNN in \" + title, theXLabel = \"resultKnnByMSE\", theYLabel=\"\")\r\n// print type(x)\r\n\r\n// def VisPCA(x):\r\n//     from mpl_toolkits.mplot3d import Axes3D\r\n//     import matplotlib.mlab as mlab\r\n//     import matplotlib.pyplot as plt\r\n//     from sklearn.decomposition import PCA\r\n//     #Apply PCA to data and get the top 3 axes of maximum variation\r\n//     pca = PCA(n_components=3)\r\n//     pca.fit(x)\r\n//     #Project to the data onto the three axes\r\n//     x_reduced = pca.transform(x)\r\n//     #Visualized our reduced data\r\n//     fig = plt.figure(figsize=(15, 5))\r\n//     ax1 = fig.add_subplot(1, 2, 1,  projection='3d')\r\n//     ax1.scatter(x_reduced[y==0, 0], x_reduced[y==0, 1], x_reduced[y==0, 2], c='b', color='b', label='0')\r\n//     ax1.scatter(x_reduced[y==1, 0], x_reduced[y==1, 1], x_reduced[y==1, 2], c='r', color='r', label='1')\r\n//     ax1.scatter(x_reduced[y==3, 0], x_reduced[y==3, 1], x_reduced[y==3, 2], c='g', color='g', label='3')\r\n//     ax1.set_xlabel('Component 1')\r\n//     ax1.set_ylabel('Component 2')\r\n//     ax1.set_zlabel('Component 3')\r\n//     ax1.set_title('data projected onto the first 3 PCA components')\r\n//     ax1.legend()\r\n//     #Apply PCA to data and get the top 2 axes of maximum variation\r\n//     pca = PCA(n_components=2)\r\n//     pca.fit(x)\r\n//     #Project to the data onto the three axes\r\n//     x_reduced = pca.transform(x)\r\n//     #Visualized our reduced data\r\n//     ax2 = fig.add_subplot(1, 2, 2)\r\n//     ax2.scatter(x_reduced[y==0, 0], x_reduced[y==0, 1], c='b', color='b', label='0')\r\n//     ax2.scatter(x_reduced[y==1, 0], x_reduced[y==1, 1], c='r', color='r', label='1')\r\n//     ax2.scatter(x_reduced[y==3, 0], x_reduced[y==3, 1], c='g', color='g', label='3')\r\n//     ax2.set_xlabel('Component 1')\r\n//     ax2.set_ylabel('Component 2')\r\n//     ax2.set_title('data projected onto the first 2 PCA components')\r\n//     ax2.legend()\r\n//     plt.tight_layout()\r\n//     plt.show()\r\n\r\n// def ApplyPCA(x, nComponents = 3):\r\n//     from sklearn.decomposition import PCA\r\n//     pca = PCA(n_components=nComponents)\r\n//     pca.fit(x)\r\n//     x_reduced = pca.transform(x)\r\n//     return x_reduced\r\n\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################\r\n// ############################################################################  data pre-processing\r\n\r\n// def RemoveRowWithNAN(data):\r\n//     data = data.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\r\n//     return data.reset_index()\r\n//     # data.dropna(axis=0,subset=['RoomType','Price','Bathrooms'],inplace=True)\r\n\r\n// def RemoveColumnsWithNull(data, num):\r\n// #     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) == 0]\r\n//     complete_cols = [column for column in data.columns if len(data[column][data[column].isnull()]) < num]\r\n//     return data[complete_cols]\r\n// def ReomveRowwithNANWithNum(data):\r\n//     data = data.dropna(thresh=None)\r\n//     return data\r\n\r\n// ################################################################## get data for example\r\n// def GetDataIris():\r\n//     from sklearn.datasets import load_iris\r\n//     iris = load_iris()\r\n//     X = iris.data\r\n//     y = iris.target\r\n//     return X, y\r\n// # X , y = GetDataIris()\r\n// # X_new = [[3, 5, 4, 2], [5, 4, 3, 2]]\r\n\r\n// import numpy as np\r\n// import matplotlib.pyplot as plt\r\n// from sklearn import linear_model, datasets\r\n","import { StatisticsUtility, Describe } from './Core/StatisticsUtility';\r\n\r\n// import { CHistogram } from '../../AppDrawingBlock/CChart/CHistogram';\r\n// import { CDescribe } from '../../AppDrawingBlock/CChart/CDescribe';\r\n// import { CScatter } from '../../AppDrawingBlock/CChart/CScatter';\r\n// import { CLineChart } from '../../AppDrawingBlock/CChart/CLineChart';\r\n// import { CAreaChart } from '../../AppDrawingBlock/CChart/CAreaChart';\r\n\r\nexport class NGeoJSON {\r\n\r\n    static geoJsonGeoType = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\r\n    // tslint:disable-next-line:no-any\r\n    dJson: any;\r\n    // tslint:disable-next-line:no-any\r\n    dMat: any;\r\n    // tslint:disable-next-line:no-any\r\n    index: any;\r\n    dHist: number[][];\r\n    dDescribe: string[];\r\n    dT: number[];\r\n    dA: number[];\r\n    dB: number[];\r\n    dC: number[];\r\n    dD: number[];\r\n    dE: number[];\r\n    dF: number[];\r\n    // tslint:disable-next-line:no-any\r\n    static GetIndexFromGeoJson(d: any) {\r\n        // tslint:disable-next-line:no-any\r\n        let geometryGeoJson: any = [], propertiesGeoJson: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    geometryGeoJson = data.geometry;\r\n                    propertiesGeoJson = data.properties;\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        let index: string[] = [];\r\n        Object.keys(geometryGeoJson).forEach((key) => { index.push(key); });\r\n        Object.keys(propertiesGeoJson).forEach((key) => { index.push(key); });\r\n        return index;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    static GetDataWithIndexFromGeoJson(d: any): any {\r\n        // let needIndex = true;\r\n        // tslint:disable-next-line:no-any\r\n        let dSet: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    // tslint:disable-next-line:no-any\r\n                    let theIndex: any = [];\r\n                    // tslint:disable-next-line:no-any\r\n                    let item: any = [];\r\n                    let needIndex = true;\r\n                    Object.keys(data).forEach((objKey) => {\r\n                        Object.keys(data[objKey]).forEach((subKey) => {\r\n                            let theItem = data[objKey][subKey];\r\n                            if (typeof (theItem) === 'string' && theItem.length === 1) { return; }\r\n                            if (needIndex) { theIndex.push(subKey); }\r\n                            item.push(theItem);\r\n                        });\r\n                    });\r\n                    if (needIndex) {\r\n                        dSet.push(theIndex);\r\n                        needIndex = false;\r\n                    }\r\n                    dSet.push(item);\r\n                }\r\n                return dSet;\r\n            }\r\n        });\r\n        return dSet;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    constructor(d: any) {\r\n        this.dJson = d;\r\n        this.dMat = NGeoJSON.GetDataWithIndexFromGeoJson(d);\r\n        this.index = this.dMat[0];\r\n\r\n        this.dDescribe = this.GetDescribeByCol(this.index[0]).ToString();\r\n        this.dHist = this.GetHistByCol(this.index[0]);\r\n\r\n        // CHistogram.dHist = this.dHist;\r\n        // CDescribe.dDescribe = this.dDescribe;\r\n\r\n    //     console.log(this.dJson);\r\n    //     console.log(this.index);\r\n    //     console.log(this.dDescribe);\r\n    //     console.log(this.dMat);\r\n\r\n        // https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson_detail.php\r\n\r\n        this.dT = this.GetColbyIndex('time'); //  rms sig nst dmin tz mag time\r\n        this.dA = this.GetColbyIndex(this.index[0]); // rms sig nst dmin tz\r\n        this.dB = this.GetColbyIndex('rms'); // rms sig nst dmin tz\r\n        this.dC = this.GetColbyIndex('sig'); // rms sig nst dmin tz\r\n\r\n        this.dD = this.GetColbyIndex('nst'); // rms sig nst dmin tz mag time\r\n        this.dE = this.GetColbyIndex('mag'); // rms sig nst dmin tz mag time\r\n        this.dF = this.GetColbyIndex('dmin'); // rms sig nst dmin tz mag time\r\n\r\n    //     console.log(this.dD);\r\n        // CScatter.dA = this.dA;\r\n        // CScatter.dB = this.dB;\r\n        // CScatter.dC = this.dC;\r\n\r\n        // CLineChart.dA = this.dT;\r\n        // CLineChart.dB = this.dD;\r\n\r\n        // CAreaChart.dT = this.dT;\r\n        // CAreaChart.dA = this.dD;\r\n        // CAreaChart.dB = this.dE;\r\n        // CAreaChart.dC = this.dF;\r\n    }\r\n    GetDataByIndex(colIndex: string) {\r\n        let item = this.index.indexOf(colIndex);\r\n        // tslint:disable-next-line:no-any\r\n        let d: any = [];\r\n        for (let i = 1; i < this.dMat.length; ++i) {\r\n            d.push(this.dMat[i][item]);\r\n        }\r\n        return d;\r\n    }\r\n    GetColbyIndex(colIndex: string) {\r\n        return this.GetDataByIndex(colIndex);\r\n    }\r\n    GetDescribeByCol(colIndex: string): Describe {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.DescribeNumeric(data, colIndex);\r\n    }\r\n    GetHistByCol(colIndex: string, numBin: number = 20): number[][] {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(data, numBin);\r\n    }\r\n\r\n}","import { StatisticsUtility, Describe } from './Core/StatisticsUtility';\r\n\r\n// import { CHistogram } from '../../AppDrawingBlock/CChart/CHistogram';\r\n// import { CDescribe } from '../../AppDrawingBlock/CChart/CDescribe';\r\n// import { CScatter } from '../../AppDrawingBlock/CChart/CScatter';\r\n// import { CLineChart } from '../../AppDrawingBlock/CChart/CLineChart';\r\n// import { CAreaChart } from '../../AppDrawingBlock/CChart/CAreaChart';\r\n\r\nexport class NGeoJSONPolygon {\r\n    static d: number[];\r\n    static geoJsonGeoType = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\r\n    // tslint:disable-next-line:no-any\r\n    dJson: any;\r\n    // tslint:disable-next-line:no-any\r\n    dMat: any;\r\n    // tslint:disable-next-line:no-any\r\n    index: any;\r\n    dHist: number[][];\r\n    dDescribe: string[];\r\n    dT: number[];\r\n    dA: number[];\r\n    dB: number[];\r\n    dC: number[];\r\n    dD: number[];\r\n    dE: number[];\r\n    dF: number[];\r\n    posLn: number[];\r\n    // tslint:disable-next-line:no-any\r\n    static GetIndexFromGeoJson(d: any) {\r\n        // tslint:disable-next-line:no-any\r\n        let geometryGeoJson: any = [], propertiesGeoJson: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    geometryGeoJson = data.geometry;\r\n                    propertiesGeoJson = data.properties;\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        let index: string[] = [];\r\n        Object.keys(geometryGeoJson).forEach((key) => { index.push(key); });\r\n        Object.keys(propertiesGeoJson).forEach((key) => { index.push(key); });\r\n        return index;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    static GetDataWithIndexFromGeoJson(d: any): any {\r\n        // let needIndex = true;\r\n        // tslint:disable-next-line:no-any\r\n        let dSet: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    // tslint:disable-next-line:no-any\r\n                    let theIndex: any = [];\r\n                    // tslint:disable-next-line:no-any\r\n                    let item: any = [];\r\n                    let needIndex = true;\r\n                    Object.keys(data).forEach((objKey) => {\r\n                        Object.keys(data[objKey]).forEach((subKey) => {\r\n                            let theItem = data[objKey][subKey];\r\n                            if (typeof (theItem) === 'string' && theItem.length === 1) { return; }\r\n                            if (needIndex) { theIndex.push(subKey); }\r\n                            item.push(theItem);\r\n                        });\r\n                    });\r\n                    if (needIndex) {\r\n                        dSet.push(theIndex);\r\n                        needIndex = false;\r\n                    }\r\n                    dSet.push(item);\r\n                }\r\n                return dSet;\r\n            }\r\n        });\r\n        return dSet;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    constructor(d: any) {\r\n        this.dJson = d;\r\n        this.dMat = NGeoJSONPolygon.GetDataWithIndexFromGeoJson(d);\r\n        this.index = this.dMat[0];\r\n    //     console.log(this.index);\r\n        this.posLn = this.GetPTFloat32Array();\r\n        NGeoJSONPolygon.d = this.posLn;\r\n\r\n        // console.log(this.dJson);\r\n        // console.log(this.index);\r\n        // console.log(this.dDescribe);\r\n        // console.log(this.dMat);\r\n\r\n        // https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson_detail.php\r\n\r\n        // this.dT = this.GetColbyIndex('coordinates'); //  rms sig nst dmin tz mag time\r\n        // this.dA = this.GetColbyIndex(this.index[0]); // rms sig nst dmin tz\r\n        // this.dB = this.GetColbyIndex('rms'); // rms sig nst dmin tz\r\n        // this.dC = this.GetColbyIndex('sig'); // rms sig nst dmin tz\r\n\r\n        // this.dD = this.GetColbyIndex('nst'); // rms sig nst dmin tz mag time\r\n        // this.dE = this.GetColbyIndex('mag'); // rms sig nst dmin tz mag time\r\n        // this.dF = this.GetColbyIndex('dmin'); // rms sig nst dmin tz mag time\r\n\r\n        // console.log(this.dD);\r\n        // CScatter.dA = this.dA;\r\n        // CScatter.dB = this.dB;\r\n        // CScatter.dC = this.dC;\r\n\r\n        // CLineChart.dA = this.dT;\r\n        // CLineChart.dB = this.dD;\r\n\r\n        // CAreaChart.dT = this.dT;\r\n        // CAreaChart.dA = this.dD;\r\n        // CAreaChart.dB = this.dE;\r\n        // CAreaChart.dC = this.dF;\r\n    }\r\n    GetPTFloat32Array() {\r\n        let n = [1];\r\n        let d = this.GetDataByIndex(this.index[this.index.length - 1]);\r\n        // console.log(d);\r\n        let ddd = 0;\r\n        for (let k = 0; k < d.length; ++k) {\r\n\r\n            if (Array.isArray(d[k])) {\r\n                //\r\n\r\n                // if()\r\n                for (let j = 0; j < d[k].length; ++j) {\r\n                    // console.log(d[k][j]);\r\n                    if (Array.isArray(d[k][j])) {\r\n                        for (let i = 0; i < d[k][j].length; ++i) {\r\n\r\n                            if (Array.isArray(d[k][j][i])) {\r\n                                for (let e = 0; e < d[k][j][i].length; ++e) {\r\n                                    n.push(d[k][j][i][e][0], d[k][j][i][e][1], 10.5);\r\n                                }\r\n                            }\r\n                            // console.log(d[k][j][i][1], d[k][j][i][0], 0);\r\n                        }\r\n\r\n                        if (ddd++ > 100) {\r\n                            // break;\r\n                        }\r\n                    } else {\r\n                        //\r\n                    }\r\n                }\r\n            }\r\n            // break;\r\n        }\r\n        n.shift();\r\n    //     console.log(n);\r\n        return n;\r\n    }\r\n    GetDataByIndex(colIndex: string) {\r\n        let item = this.index.indexOf(colIndex);\r\n        let d = [];\r\n        for (let i = 1; i < this.dMat.length; ++i) {\r\n            d.push(this.dMat[i][item]);\r\n        }\r\n        return d;\r\n    }\r\n    GetColbyIndex(colIndex: string) {\r\n        return this.GetDataByIndex(colIndex);\r\n    }\r\n    GetDescribeByCol(colIndex: string): Describe {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.DescribeNumeric(data, colIndex);\r\n    }\r\n    GetHistByCol(colIndex: string, numBin: number = 20): number[][] {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(data, numBin);\r\n    }\r\n\r\n}","import { StatisticsUtility } from './Core/StatisticsUtility';\r\n\r\nexport class NGeoJSONFeatureService {\r\n\r\n    static geoJsonGeoType = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeometryCollection'];\r\n    // tslint:disable-next-line:no-any\r\n    dJson: any;\r\n    // tslint:disable-next-line:no-any\r\n    dMat: any;\r\n    // tslint:disable-next-line:no-any\r\n    index: string[];\r\n    dHist: number[][];\r\n    dDescribe: string[];\r\n    // tslint:disable-next-line:no-any\r\n    array: any = {};\r\n    arrayVis: any = {};\r\n\r\n    static GetHistByCol(d: number[], numBin: number = 20): number[][] {\r\n        // let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(d, numBin);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-any\r\n    static GetIndexFromGeoJson(d: any) {\r\n        // tslint:disable-next-line:no-any\r\n        let geometryGeoJson: any = [], propertiesGeoJson: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    geometryGeoJson = data.geometry;\r\n                    propertiesGeoJson = data.properties;\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        let index: string[] = [];\r\n        Object.keys(geometryGeoJson).forEach((key) => { index.push(key); });\r\n        Object.keys(propertiesGeoJson).forEach((key) => { index.push(key); });\r\n        return index;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    static GetDataWithIndexFromGeoJson(d: any): any {\r\n        // let needIndex = true;\r\n        // tslint:disable-next-line:no-any\r\n        let dSet: any = [];\r\n        Object.keys(d).forEach((key) => {\r\n            if (key === 'features') {\r\n                let theData = d[key];\r\n                for (let data of theData) {\r\n                    // tslint:disable-next-line:no-any\r\n                    let theIndex: any = [];\r\n                    // tslint:disable-next-line:no-any\r\n                    let item: any = [];\r\n                    let needIndex = true;\r\n                    Object.keys(data).forEach((objKey) => {\r\n                        Object.keys(data[objKey]).forEach((subKey) => {\r\n                            let theItem = data[objKey][subKey];\r\n                            if (typeof (theItem) === 'string' && theItem.length === 1) { return; }\r\n                            if (needIndex) { theIndex.push(subKey); }\r\n                            item.push(theItem);\r\n                        });\r\n                    });\r\n                    if (needIndex) {\r\n                        dSet.push(theIndex);\r\n                        needIndex = false;\r\n                    }\r\n                    dSet.push(item);\r\n                }\r\n                return dSet;\r\n            }\r\n        });\r\n        return dSet;\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    constructor(d: any) {\r\n        this.dJson = d;\r\n        this.dMat = NGeoJSONFeatureService.GetDataWithIndexFromGeoJson(d);\r\n        this.index = this.dMat[0];\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        // this.dDescribe = this.GetDescribeByCol(this.index[0]).ToString();\r\n        // this.dHist = this.GetHistByCol(this.index[0]);\r\n\r\n        // https://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson_detail.php\r\n        for (let i of this.index) { this.array[i] = this.GetColbyIndex(i); }\r\n\r\n    //     console.log(this.array);\r\n\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['timeConverted'] = this.ConvertTime(this.array['Time_UT_']); // \"Time_UT_ // time_\r\n        this.ComputeTimelineIndex();\r\n\r\n        // tslint:disable-next-line:no-string-literal\r\n        let indexArray: number[] = []; for (let i = 0; i < this.array['timeConverted'].length; ++i) { indexArray.push(i); }\r\n\r\n        this.ComputeArrayVis(indexArray);\r\n    //     console.log(this);\r\n    }\r\n    ComputeArrayVis(indexArray: number[]) {\r\n        this.arrayVis = {};\r\n        for (let o of this.index) {\r\n            this.arrayVis[o] = [];\r\n            for (let i of indexArray) {\r\n                this.arrayVis[o].push(this.array[o][i]);\r\n            }\r\n        }\r\n    }\r\n    GetHistByCol(colIndex: string, numBin: number = 20): number[][] {\r\n        let data = this.GetDataByIndex(colIndex);\r\n        return StatisticsUtility.GetDataForHistDataFromNumeric(data, numBin);\r\n    }\r\n    GetDataByIndex(colIndex: string) {\r\n        let item = this.index.indexOf(colIndex);\r\n        // tslint:disable-next-line:no-any\r\n        let d: any = [];\r\n        for (let i = 1; i < this.dMat.length; ++i) {\r\n            d.push(this.dMat[i][item]);\r\n        }\r\n        return d;\r\n    }\r\n    GetColbyIndex(colIndex: string) {\r\n        return this.GetDataByIndex(colIndex);\r\n    }\r\n    private ConvertTime(d: number[]) {\r\n        let minYear = Number.MAX_SAFE_INTEGER;\r\n        let maxYear = Number.MIN_SAFE_INTEGER;\r\n        let dateArray: number[][] = [];\r\n        for (let i = 0; i < d.length; ++i) {\r\n            let date = new Date(+d[i]).toLocaleDateString().split('/');\r\n\r\n            if (minYear > +date[2]) { minYear = +date[2]; }\r\n            if (maxYear < +date[2]) { maxYear = +date[2]; }\r\n\r\n            dateArray.push([+date[0], +date[1], +date[2]]);\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['yearDomain'] = [minYear, maxYear];\r\n        return dateArray;\r\n    }\r\n    private ComputeTimelineIndex() {\r\n        let timeLineIndex: any = {};\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['timeLineIndexArryForKey'] = [];\r\n        // tslint:disable-next-line:no-string-literal\r\n        for (let j = this.array['yearDomain'][0]; j <= this.array['yearDomain'][1]; ++j) {\r\n            for (let i = 1; i < 13; ++i) {\r\n                let d: string = j + '_' + i;\r\n                timeLineIndex[d] = [];\r\n                // tslint:disable-next-line:no-string-literal\r\n                this.array['timeLineIndexArryForKey'].push(d);\r\n            }\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        this.array['timeLineIndex'] = timeLineIndex;\r\n\r\n        // tslint:disable-next-line:no-string-literal\r\n        for (let i = 0; i < this.array['timeConverted'].length; ++i) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            let d: string = this.array['timeConverted'][i][2] + '_' + this.array['timeConverted'][i][0];\r\n            // tslint:disable-next-line:no-string-literal\r\n            this.array['timeLineIndex'][d].push(i);\r\n        }\r\n    //     console.log(this);\r\n        // console.log\r\n    }\r\n    // GetDescribeByCol(colIndex: string): Describe {\r\n    //     let data = this.GetDataByIndex(colIndex);\r\n    //     return StatisticsUtility.DescribeNumeric(data, colIndex);\r\n    // }\r\n\r\n}","import { NVector3, normalize } from '../..';\r\n\r\n// import { Pixel } from './Pixel';\r\n// function NDataPixelInit(){\r\n// \tconsole.log('NDataPixel is init...');\r\n// \tpMap = new PixelMapGlobe();\r\n// \tpMap.rx = 10;\r\n// \tpMap.ry = 10;\r\n// \tpMap.p0 = new NPoint3d(-10, -10,0);\r\n// \tpMap.p1 = new NPoint3d(10,10,0);\r\n// \tpMap.Init();\r\n\r\n// \tpMap.VisCenterPoints();\r\n// \tpMap.VisLineGrid();\r\n// \tpMap.VisMeshGrid();\r\n// };\r\n\r\n/////////////////// PixelMapGlobe class\r\nexport class PixelMapGlobe {\r\n\r\n    public listPixel: Pixel[] = [];\r\n    public rx: number = 0;\r\n    public ry: number = 0;\r\n    public radius: number = 0;\r\n    public ddx: number = 0.0;\r\n    public ddy: number = 0.0;\r\n    public v0: NVector3 = NVector3.Origin();\r\n    public v1: NVector3 = NVector3.Origin();\r\n\r\n    constructor(rx: number = 36, ry: number = 18, radius: number = 100) {\r\n        this.rx = rx;\r\n        this.ry = ry;\r\n        this.radius = radius;\r\n        this.ddx = 0.0;\r\n        this.ddy = 0.0;\r\n        // this.v0 = v0;\r\n        // this.v1 = v1;\r\n        // this.Built();\r\n        this.Init();\r\n    }\r\n    Init() {\r\n        this.ddx = Math.PI * 2 / this.rx;\r\n        this.ddy = Math.PI / this.ry;\r\n    //     console.log('ddx is ' + this.ddx + '. ddy is ' + this.ddx);\r\n    //     console.log('Pixe Map was executed...');\r\n        this.InitGrid();\r\n    }\r\n    InitGrid() {\r\n        let vv = 0;\r\n        for (let y = 0; y < Math.PI; y += this.ddy) {\r\n            let uu = 0;\r\n            for (let x = 0; x < Math.PI * 2; x += this.ddx) {\r\n\r\n                let px = new Pixel(this);\r\n                px.i = uu; px.j = vv;\r\n                px.u = uu; px.v = vv;\r\n                let pos = this.RemapToShpere(x, y);\r\n                px.vec = new NVector3(pos[0], pos[1], pos[2]);\r\n                px.norV = normalize(px.vec);\r\n\r\n                pos = this.RemapToShpere(x - this.ddx * 0.5, y - this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = this.RemapToShpere(x + this.ddx * 0.5, y - this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = this.RemapToShpere(x + this.ddx * 0.5, y + this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                pos = this.RemapToShpere(x - this.ddx * 0.5, y + this.ddy * 0.5);\r\n                px.recVec.push(new NVector3(pos[0], pos[1], pos[2]));\r\n\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n                // console.log(zz);\r\n\r\n                this.listPixel.push(px);\r\n                uu++;\r\n            }\r\n            vv++;\r\n        }\r\n        this.InitGridNeighbor();\r\n    }\r\n    RemapToShpere(x: number, y: number) {\r\n        return [this.radius * Math.cos(x) * Math.sin(y),\r\n        this.radius * Math.sin(x) * Math.sin(y),\r\n        this.radius * Math.cos(y)];\r\n    }\r\n    InitGridNeighbor() {\r\n        for (let j = 0; j < this.ry; ++j) {\r\n            for (let i = 0; i < this.rx; ++i) {\r\n                let k = j * this.rx + i;\r\n                let px0 = this.listPixel[k];\r\n                if (i > 0) { px0.nPix.push(this.listPixel[k - 1]); }\r\n                if (i < this.rx - 1) { px0.nPix.push(this.listPixel[k + 1]); }\r\n                if (j > 0) { px0.nPix.push(this.listPixel[k - this.rx]); }\r\n                if (j < this.ry - 1) { px0.nPix.push(this.listPixel[k + this.rx]); }\r\n                if ((i > 0) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx - 1]); }\r\n                if ((i > 0) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx - 1]); }\r\n                if ((i < this.rx - 1) && (j < this.ry - 1)) { px0.nPix.push(this.listPixel[k + this.rx + 1]); }\r\n                if ((i < this.rx - 1) && (j > 0)) { px0.nPix.push(this.listPixel[k - this.rx + 1]); }\r\n            }\r\n        }\r\n    //     console.log('done for computing neighbors ');\r\n    }\r\n    GetPixelAtPoint(pt: NVector3) {\r\n        let pixelMap = this;\r\n        let dp = new NVector3(pt.x - pixelMap.v0.x, pt.y - pixelMap.v0.y, pt.z - pixelMap.v0.z);\r\n        let i = Math.round(dp.x / pixelMap.ddx);\r\n        let j = Math.round(dp.y / pixelMap.ddy);\r\n        if (i >= pixelMap.rx) { i = pixelMap.rx - 1; }\r\n        if (j >= pixelMap.ry) { j = pixelMap.ry - 1; }\r\n        if (i < 0) { i = 0; }\r\n        if (j < 0) { j = 0; }\r\n        return pixelMap.listPixel[j * pixelMap.rx + i];\r\n    }\r\n    ////////////////// event\r\n    MouseMove(x: number, y: number, z: number) {\r\n        let pixelMap = this;\r\n    //     console.log('mouseMove x:' + x + ', y:' + y + ', z:' + z);\r\n        let cpt = pixelMap.GetPixelAtPoint(new NVector3(x, y, z));\r\n    //     console.log(cpt.nPix);\r\n        // VisBufferPointsFromVecs(cpt.ptsCenter, 100);\r\n    }\r\n    onDocumentMouseMove() {\r\n    //     console.log('move');\r\n    }\r\n    onmouseenter() {\r\n    //     console.log('enter');\r\n    }\r\n    ////////////////// visualization\r\n    CVisLineGrid(ctx: CanvasRenderingContext2D) {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            let color = '#ff0000';\r\n            // console.log('d');\r\n            ctx.lineWidth = 0.5;\r\n            ctx.beginPath();\r\n            ctx.moveTo(pixelMap.listPixel[i].recVec[0].x, pixelMap.listPixel[i].recVec[0].y);\r\n            // console.log(pixelMap.listPixel[i].recVec)\r\n            for (let j = 1; j < pixelMap.listPixel[i].recVec.length; ++j) {\r\n                ctx.lineTo(pixelMap.listPixel[i].recVec[j].x, pixelMap.listPixel[i].recVec[j].y);\r\n                // console.log(pixelMap.listPixel[i].nPix[j].vec.x, pixelMap.listPixel[i].nPix[j].vec.y);\r\n\r\n            }\r\n            ctx.closePath();\r\n            ctx.strokeStyle = color; // ColorUtility.HexToCanvasColor(color, 1);\r\n            ctx.stroke();\r\n            // ctx.fill();\r\n        }\r\n    }\r\n    VisMeshGrid() {\r\n        let pixelMap = this;\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            // VisMeshRectFromFourVecs(pixelMap.listPixel[i].ptsRectLst);\r\n        }\r\n    }\r\n    VisCenterPoints() {\r\n        let pixelMap = this;\r\n        let pts: NVector3[] = [];\r\n        for (let i = 0; i < pixelMap.listPixel.length; ++i) {\r\n            pts.push(pixelMap.listPixel[i].vec);\r\n        }\r\n        // VisBufferPointsFromVecs(pts);\r\n    }\r\n    Render(ctx: CanvasRenderingContext2D) {\r\n        /* */\r\n    }\r\n    GetTriFloatArray() { return new Float32Array(this.GetTriArray()); }\r\n    GetTriArray() {\r\n        let array: number[] = [];\r\n        let p = NVector3.Origin();\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[3]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[0]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[1]; array.push(p.x, p.y, p.z);\r\n\r\n        }\r\n        return array;\r\n    }\r\n    GetPtFloatArray() { return new Float32Array(this.GetPtArray()); }\r\n    GetPtArray() {\r\n        let array: number[] = [];\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let p = this.listPixel[i].vec;\r\n            array.push(p.x, p.y, p.z);\r\n        }\r\n        return array;\r\n    }\r\n    GetNormalFloatArray() { return new Float32Array(this.GetNormalArray()); }\r\n    GetNormalArray() {\r\n        let array: number[] = [];\r\n        let p = NVector3.Origin();\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            p = this.listPixel[i].recVec[0]; p.normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[3]; p.normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; p.normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[0]; p.normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[2]; p.normalize(); array.push(p.x, p.y, p.z);\r\n            p = this.listPixel[i].recVec[1]; p.normalize(); array.push(p.x, p.y, p.z);\r\n\r\n        }\r\n        return array;\r\n    }\r\n    GetTexCoordinFloatArray() { return new Float32Array(this.GetTexCoordinArray()); }\r\n    GetTexCoordinArray() {\r\n        let array: number[] = [];\r\n        // let p = NVector3.origin;\r\n\r\n        for (let i = 0; i < this.listPixel.length; ++i) {\r\n            let u = this.listPixel[i].u / (this.rx - 1);\r\n            let v = this.listPixel[i].v / (this.ry - 1);\r\n\r\n            array.push(u, v);\r\n            array.push(u, v + this.ddy);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u, v);\r\n            array.push(u + this.ddx, v + this.ddy);\r\n            array.push(u + this.ddx, v);\r\n\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy - this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx + this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n            // px.recVec.push(new NVector3(xx - this.ddx * 0.5, yy + this.ddy * 0.5, zz));\r\n        }\r\n        // console.log('pppp');\r\n        // console.log(array);\r\n        return array;\r\n    }\r\n}\r\n\r\nexport class Pixel {\r\n    static ID = 0;\r\n\r\n    map: PixelMapGlobe;\r\n    vec: NVector3;\r\n    norV: NVector3;\r\n    nPix: Pixel[] = [];\r\n    recVec: NVector3[];\r\n    i: number = -1;\r\n    j: number = -1;\r\n    k: number = -1;\r\n    u: number = -1;\r\n    v: number = -1;\r\n    id: number;\r\n    color: number[] = [];\r\n    data: {};\r\n\r\n    static GetID() { return Pixel.ID++; }\r\n\r\n    constructor(map: PixelMapGlobe, v: NVector3 = new NVector3(0, 0, 0)) {\r\n        this.map = map;\r\n        this.vec = v;\r\n        this.nPix = [];\r\n        this.recVec = [];\r\n        this.i = -1;\r\n        this.j = -1;\r\n        this.k = -1;\r\n        this.id = Pixel.GetID();\r\n        this.data = {};\r\n    }\r\n    ToString() {\r\n        let temp = 'Pixel' + this.id;\r\n    //     console.log(temp);\r\n        return temp;\r\n    }\r\n    Update() {\r\n        /* */\r\n    }\r\n    Render() {\r\n        /* */\r\n    }\r\n}","\r\nconst themeRed = require('./theme/red.json');\r\nconst themePurple = require('./theme/purple.json');\r\nconst themeBlue = require('./theme/blue.json');\r\nconst themeGreen = require('./theme/green.json');\r\nconst themeOrange = require('./theme/orange.json');\r\nconst themeGray = require('./theme/gray.json');\r\nconst themeDarkgray = require('./theme/darkGray.json');\r\nconst themeBlack = require('./theme/black.json');\r\n\r\nexport class Asset {\r\n    // tslint:disable-next-line:no-any\r\n    themeRed: any; themePurple: any; themeBlue: any; themeGreen: any; themeOrange: any; themeGray: any; themeDarkgray: any; themeBlack: any;\r\n    constructor() {\r\n        this.ImportAssets();\r\n    }\r\n    async ImportAssets() {\r\n        this.themeRed = themeRed;\r\n        this.themePurple = themePurple;\r\n        this.themeBlue = themeBlue;\r\n        this.themeGreen = themeGreen;\r\n        this.themeOrange = themeOrange;\r\n        this.themeGray = themeGray;\r\n        this.themeDarkgray = themeDarkgray;\r\n        this.themeBlack = themeBlack;\r\n    }\r\n}","import { NVector3 } from '../../../../..';\r\nimport { IndependentPanel } from '../IndependentPanel';\r\nexport class BodyDiv {\r\n    static zIndex = 9999;\r\n    host: IndependentPanel;\r\n    vec: NVector3;\r\n\r\n    divAnchor: HTMLDivElement;\r\n    div: HTMLDivElement;\r\n    divHost: HTMLDivElement;\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    private xOff0: number = 5;\r\n    private yOff0: number = 5;\r\n    private xOff1: number = 25;\r\n    private yOff1: number = 25;\r\n\r\n    private _textAlign: string = 'left';\r\n    private _textCol: string;\r\n    private _content: string;\r\n\r\n    static GetZIndex() {\r\n        return (BodyDiv.zIndex--).toString();\r\n    }\r\n\r\n    constructor(host: IndependentPanel, x: number, y: number, width: number, height: number) {\r\n        this.host = host;\r\n        this.vec = new NVector3(x, y);\r\n        this.width = width;\r\n        this.height = height;\r\n        // console.log(this.host.independentPanelWrapper.viewUIWrapper);\r\n        this.divHost = this.host.independentPanelWrapper.nUI.divHost as HTMLDivElement;\r\n        this.GetDivBaseContainer();\r\n        this.textAlign = 'left';\r\n        // this.textCol = this.host.renderer.currentStyle.textCol;\r\n    }\r\n    set textCol(v: string) {\r\n        this._textCol = v;\r\n        this.div.style.color = this._textCol;\r\n    }\r\n    set textAlign(v: string) {\r\n        this._textAlign = v;\r\n        this.div.style.textAlign = this._textAlign;\r\n    }\r\n    get Width() {\r\n        return this.width;\r\n    }\r\n    set Width(v: number) {\r\n        this.width = v;\r\n        this.UpdateSize();\r\n    }\r\n    get Height() {\r\n        return this.height;\r\n    }\r\n    set Height(v: number) {\r\n        this.height = v;\r\n        this.UpdateSize();\r\n    }\r\n    get content() {\r\n        return this._content;\r\n    }\r\n    set content(v: string) {\r\n        this._content = v;\r\n        this.div.textContent = v;\r\n    }\r\n    Hide(v: boolean) {\r\n        if (v) {\r\n            this.Remove();\r\n        } else {\r\n            this.GetDivBaseContainer();\r\n        }\r\n    }\r\n\r\n    Translate(xo: number, yo: number) {\r\n        this.vec.x += xo; this.vec.y += yo;\r\n        this.div.style.left = this.vec.x + this.xOff0 + 'px';\r\n        this.div.style.top = this.vec.y + this.yOff0 + 'px';\r\n    }\r\n    UpdateSize() {\r\n        this.div.style.width = this.width - this.xOff1 + 'px';\r\n        this.div.style.height = this.height - this.host.HeadHeight - this.yOff1 + 'px';\r\n    }\r\n    Remove() {\r\n        this.divHost.removeChild(this.div);\r\n    }\r\n    private GetDivBaseContainer() {\r\n        let div = document.createElement('div');\r\n        div.style.position = 'absolute';\r\n        div.style.pointerEvents = 'none';\r\n        div.id = `indePanel`;\r\n        div.style.height = this.height - this.yOff1 + 'px';\r\n        div.style.width = this.width - this.xOff1 + 'px';\r\n        div.style.left = this.vec.x + this.xOff0 + 'px';\r\n        div.style.top = this.vec.y + this.yOff0 + 'px';\r\n        // div.style.background = ColorUtility.HexToCanvasColor('#ffffff', '0.5');\r\n        div.style.zIndex = '10'; // BodyDiv.GetZIndex();\r\n        div.style.padding = '6px';\r\n        div.style.paddingLeft = '6px';\r\n        div.style.wordWrap = 'break-word'; // word-wrap: break-word\r\n        div.style.overflow = 'hidden'; // word-wrap: break-word\r\n        div.textContent = this._content;\r\n        div.style.font = '13px Arial';\r\n        div.style.fontWeight = 'lighter';\r\n        div.style.lineHeight = '23px';\r\n        // div.style.background = '#ff0000';\r\n        div.style.textAlign = this._textAlign;\r\n        div.style.color = this.textCol;\r\n\r\n        this.divHost.appendChild(div);\r\n        this.div = div;\r\n        return div;\r\n    }\r\n}"],"names":["MOUSE_TYPE","COMPILE_MODE","INTERACTION_MODE","COMMAND","BROWSER_TYPE","TOUCH_TYPE","EVENT_LISTENER_TYPE","CAMERA_TYPE_THREE","MAPFILTER_MODE","ACTIVE_UI","FRAMEWORK","APP","COLORBLENDING","FHTYPE","OPTIMIZER","NETWORK_ANALYSIS","UNIT","CONNECTIVITY","NETWORK_INDEX","ACTIVECOMMAND_MODE","GTYPE","CURSOR","X_GTYPE","TouchEventData","constructor","x","y","z","preX","preY","preZ","yGLPicking","command","identifier","radiusX","radiusY","rotationAngle","force","color","DeepCopy","mEvent","this","TouchEventDataList","native","eventList","Build","e","tType","i","touches","length","tEvent","clientX","clientY","ColorForTouch","push","touch","r","g","Math","floor","b","toString","TouchInteraction","type","touchEventDataPre","divHost","isEnable","click","prevent","delay","down","preEvent","InitNativeTouchEvent","div","ontouchstart","CommonEventBuilder","TouchEventEmittingBinding","ontouchend","ontouchmove","ontouchcancel","mouseEventData","Camera","video","canvas","ctx","width","height","mediaStream","hostDiv","id","clientWidth","clientHeight","InitVideo","InitMedia","SetSizeFromTemplate","size","style","InitCanvas","document","createElement","getContext","setAttribute","filter","appendChild","constraints","facingMode","audio","HasGetUserMedia","navigator","mediaDevices","getUserMedia","then","stream","srcObject","alert","GetImageData","drawImage","getImageData","Resize","Dummy","Dispose","getTracks","forEach","track","stop","removeChild","FILTERS","NJSLoader","url","fetch","response","text","catch","err","path","d","mode","json","file","blob","img","Image","objectURL","URL","createObjectURL","src","onload","crossOrigin","parser","DOMParser","xml","parseFromString","XmlToJson","content","obj","nodeType","j","attribute","item","nodeName","nodeValue","hasChildNodes","childNodes","old","fetchJson","async","distanceToXY","x0","y0","x1","y1","sqrt","distance","v0","v1","meterFromGeoGPSPos","gV0","gV1","dLat","lat","PI","dLon","long","a","sin","cos","atan2","NVector3","v","len","normalize","out","elevation","isRenderable","Set","scale","Mult","DivByVal","DivByVec","Add","Sub","Negate","Equals","distanceTo","distanceToGeo","Clone","other","Length","Unitize","GetAngle","GetAngleDegree","ToJSON","ToString","toFixed","ToFloat32Array","Float32Array","attractor","pt","strength","falloff","sub","dist","exp","NLine","p0","p1","NPolyline","pts","MouseEventData","xs","ys","preXs","preYs","isDown","isDoubleClick","isMove","pressedShift","pressedAlt","pressedCtrl","wheel","preWheel","KeyboardEventData","key","hasAltKey","hasCtrlKey","hasShiftKey","hasMetaCommand","code","keyCode","CSVData","dataList","linesVecs","cols","streetName","lineTest","initLines","toScreen","col","nameOfStreet","lon","sv","lineVecs","vec","nLines","updateProjection","render","mx","my","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","renderRaw","fillStyle","ComputeCSV","data","processData","allText","allTextLines","split","headers","lines","tarr","dataTemp","isNaN","getFalseColor","value","round","getR","getG","getB","min","NumericalMotion","t","pow","p","t1","scaledTime","scaledTime1","magnitude","scaledTime2","s","asin","easeOutBounce","easeInBounce","getAllUrlParams","window","location","search","queryString","slice","arr","paramName","paramValue","toLowerCase","match","replace","exec","index","Describe","count","max","mean","sum","median","variance","STD","StatisticsUtility","static","n","Min","Max","Mean","Sum","Median","Variance","StandardDeviation","Average","nn","SortAscending","half","sort","bin","bins","domain","interval","start","maxNum","NGeoJSON","geometryGeoJson","propertiesGeoJson","Object","keys","theData","geometry","properties","dSet","theIndex","needIndex","objKey","subKey","theItem","dJson","dMat","dHist","dDescribe","dT","dA","dB","dC","dD","dE","dF","GetDataWithIndexFromGeoJson","GetDescribeByCol","GetHistByCol","GetColbyIndex","GetDataByIndex","colIndex","indexOf","DescribeNumeric","numBin","GetDataForHistDataFromNumeric","geoJsonGeoType","NGeoJSONPolygon","posLn","GetPTFloat32Array","k","Array","isArray","ddd","shift","NGeoJSONFeatureService","array","arrayVis","Init","ConvertTime","ComputeTimelineIndex","indexArray","ComputeArrayVis","o","minYear","Number","MAX_SAFE_INTEGER","maxYear","MIN_SAFE_INTEGER","dateArray","date","Date","toLocaleDateString","timeLineIndex","Pixel","ID","map","norV","nPix","recVec","u","GetID","Update","Render","require","BodyDiv","zIndex","host","divAnchor","xOff0","yOff0","xOff1","yOff1","_textAlign","_textCol","_content","independentPanelWrapper","nUI","GetDivBaseContainer","textAlign","textCol","Width","UpdateSize","Height","textContent","Hide","Remove","Translate","xo","yo","left","top","HeadHeight","position","pointerEvents","padding","paddingLeft","wordWrap","overflow","font","fontWeight","lineHeight"],"sourceRoot":""}
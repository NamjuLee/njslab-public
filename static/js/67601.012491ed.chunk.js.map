{"version":3,"file":"static/js/67601.012491ed.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_04/Core/Canvas.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Core/Renderer.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Core/Scene.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Geometry/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/Modal.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/VAO.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/index.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nexport class Canvas {\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.host) {\r\n            this.app.host.appendChild(this.canvas);\r\n            this.canvas.width = this.app.host.clientWidth;\r\n            this.canvas.height = this.app.host.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl !== null) { this.gl = gl; }\r\n\r\n        this.loop(this.gl);\r\n    }\r\n    loop(gl: WebGL2RenderingContext) {\r\n        // this.clear(gl);\r\n        requestAnimationFrame(() => { this.loop(gl); });\r\n\r\n        this.app.renderer.render(gl);\r\n        // console.log('working');\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n        gl.clearColor(0.5, 1.0, 1.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n}\r\n","import { NGL3dApp } from '..';\r\n\r\nexport class Renderer {\r\n    app: NGL3dApp;\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        // console.log(gl);\r\n\r\n        // console.log(this.app.scene.triList);\r\n\r\n        this.app.scene.geometries.forEach((e) => { e.render(gl); });\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\n// import { Point } from '../Geometry/Point';\r\nimport { GeometryBase } from '../Geometry/Core/Base';\r\n\r\nexport class Scene {\r\n    NGL3dApp: NGL3dApp;\r\n\r\n    geometries: GeometryBase[] = [];\r\n\r\n    constructor(NGL3dApp: NGL3dApp) {\r\n        this.NGL3dApp = NGL3dApp;\r\n    }\r\n    add(mesh: GeometryBase) {\r\n        this.geometries.push(mesh);\r\n    }\r\n}","import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        this.scene.add(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n}","\r\nimport { RTN } from '../../WebGL/VAO';\r\nimport { Modal } from '../../WebGL/Modal';\r\nimport { Shader } from '../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\nimport { ATTR } from '../../WebGL/AttribLocations';\r\n// import { MeshCommon } from '../../WebGL/MeshCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[]) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            // this.uniformLoc.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uniformLoc.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n            var uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n        }\r\n        gl.useProgram(null); // Done setting up shader\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(angle: number) {\r\n        this.gl.uniform1f(this.uniformLoc.uAngle, angle);\r\n        return this;\r\n    }\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends GeometryBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform vec3 uColor[4];\t//Color Array\r\n    uniform float uAngle;\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        // gl_Position = vec4(a_position, 1.0);\r\n        gl_Position = vec4(cos(uAngle) * 0.3 + a_position.x, sin(uAngle) * 0.3 + a_position.y, a_position.z, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) {\r\n        finalColor = color;\r\n        // finalColor = vec4(1, 0, 0, 1);\r\n    }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    mesh: RTN;\r\n    modal: Modal;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO() {\r\n        var verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        var p;\t// Temp variable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(half);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(-half);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(p);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(p);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n        }\r\n\r\n        // TODO : Remove the following, its only to demo extra lines can be thrown in.\r\n        verts.push(-half);\t// x1\r\n        verts.push(-half);\t// y1\r\n        verts.push(0);\t\t// z1\r\n        verts.push(2);\t\t// c2\r\n\r\n        verts.push(half);\t// x2\r\n        verts.push(half);\t// y2\r\n        verts.push(0);\t\t// z2\r\n        verts.push(2);\t\t// c2\r\n\r\n        verts.push(-half);\t// x1\r\n        verts.push(half);\t// y1\r\n        verts.push(0);\t\t// z1\r\n        verts.push(3);\t\t// c2\r\n\r\n        verts.push(half);\t// x2\r\n        verts.push(-half);\t// y2\r\n        verts.push(0);\t\t// z2\r\n        verts.push(3);\t\t// c2\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.mesh = new RTN(); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.mesh.drawMode = this.gl.LINES;\r\n        this.mesh.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.mesh.vertexComponentLen = 4;\r\n        this.mesh.vertexCount = verts.length / this.mesh.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.mesh.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.mesh.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.mesh.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.mesh.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mMeshCache[\"grid\"] = this.mesh;\r\n        return this.mesh;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col);\r\n        this.mesh = this.GetVAO();\r\n        this.modal = new Modal(this.mesh);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        this.shader.activate();\r\n        this.ro += 0.04;\r\n        this.shader.set(this.ro);\r\n        this.shader.renderModal(this.modal);\r\n    }\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}","import { RTN } from './VAO';\r\n\r\nexport class Modal {\r\n    mesh: RTN;\r\n    constructor(meshData: RTN) {\r\n        this.mesh = meshData;\r\n    }\r\n\r\n    // Things to do before its time to render\r\n    preRender() {\r\n        // TODO :: Update transform Matrix in future lesson\r\n    }\r\n}","import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\nimport { AttribLocations } from './AttribLocations';\r\nimport { Modal } from './Modal';\r\n\r\nexport class UniformLoc {\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLoc;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertShaderSrc: string, fragShaderSrc: string) {\r\n        this.program = GLShaderCommon.getShaderProgram(gl, vertShaderSrc, fragShaderSrc, true);\r\n\r\n        if (this.program != null) {\r\n            this.gl = gl;\r\n            gl.useProgram(this.program);\r\n            this.attribLoc = new AttribLocations(gl, this.program);\r\n            this.uniformLoc = new UniformLoc();\r\n            // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n        }\r\n\r\n        // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n    }\r\n\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n        this.gl.useProgram(this.program); return this;\r\n    }\r\n    deactivate() {\r\n        this.gl.useProgram(null); return this;\r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) { this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    }\r\n    // Handle rendering a modal\r\n    renderModal(modal: Modal) {\r\n        this.gl.bindVertexArray(modal.mesh.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (modal.mesh.indexCount) {\r\n            this.gl.drawElements(modal.mesh.drawMode, modal.mesh.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else {\r\n            this.gl.drawArrays(modal.mesh.drawMode, 0, modal.mesh.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}","import { ATTR } from './AttribLocations';\r\n\r\nexport enum DRAW_MODE {\r\n    //\r\n}\r\n\r\nexport class RTN {\r\n    name: string;\r\n\r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n}\r\n\r\nexport class VAO {\r\n\r\n    static createMeshVAO(gl: WebGL2RenderingContext, name: string, aryVert: number[], aryInd?: number[], aryNorm?: number[], aryUV?: number[]) {\r\n        let rtn = new RTN();\r\n        rtn.name = name;\r\n        rtn.drawMode = gl.TRIANGLES;\r\n\r\n        rtn.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(rtn.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            rtn.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            rtn.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            rtn.vertexCount = aryVert.length / rtn.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm != null) {\r\n            rtn.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV != null) {\r\n            rtn.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd != null) {\r\n            rtn.bufIndex = gl.createBuffer();\r\n            rtn.indexCount = aryInd.length;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, rtn.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n        return rtn;\r\n    }\r\n    constructor() {\r\n        //\r\n    }\r\n}","import { Canvas } from './Core/Canvas';\r\nimport { Renderer } from './Core/Renderer';\r\nimport { Scene } from './Core/Scene';\r\n\r\n// import { Point } from './Geometry/Point';\r\nimport { GridAxis } from './Geometry/Primatives/GridAxis';\r\n\r\nexport class NGL3dApp {\r\n\r\n    host: HTMLElement;\r\n    canvas: Canvas;\r\n    renderer: Renderer;\r\n    scene: Scene;\r\n\r\n    constructor(id: string) {\r\n        console.log('id: ' + id + ', NGL3dApp 04 Init!!!!!');\r\n        const host = document.getElementById(id);\r\n        if (host) { this.host = host; }\r\n\r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n        this.canvas = new Canvas(this);\r\n\r\n        // let d = new Point(this);\r\n        // console.log(d);\r\n        let dd = new GridAxis(this);\r\n        // console.log(dd);\r\n    }\r\n\r\n}\r\n\r\n// line grid axis"],"names":["Canvas","constructor","app","gl","canvas","this","document","createElement","host","appendChild","width","clientWidth","height","clientHeight","getContext","loop","requestAnimationFrame","renderer","render","clear","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","Renderer","scene","geometries","forEach","e","Scene","NGL3dApp","add","mesh","push","GeometryBase","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","super","program","uniformLoc","uAngle","getUniformLocation","uColor","uniform3fv","useProgram","set","angle","uniform1f","renderModal","modal","bindVertexArray","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","v","f","shader","ro","initShader","GetVAO","p","verts","half","size","i","RTN","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","Modal","activate","GLShaderCommon","static","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","createProgram","console","error","type","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","AttribLocations","position","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","meshData","preRender","UniformLoc","uPointSize","vertShaderSrc","fragShaderSrc","attribLoc","deactivate","dispose","getParameter","CURRENT_PROGRAM","DRAW_MODE","name","bufNormals","bufUV","bufIndex","VAO","aryVert","aryInd","aryNorm","aryUV","rtn","TRIANGLES","undefined","ELEMENT_ARRAY_BUFFER","Uint16Array","id","getElementById"],"sourceRoot":""}
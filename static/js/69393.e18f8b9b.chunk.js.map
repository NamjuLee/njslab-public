{"version":3,"file":"static/js/69393.e18f8b9b.chunk.js","mappings":"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","sources":["njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/ColorUtil.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/VectorUtil.ts","../node_modules/@turf/difference/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/TurfUtil.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/DrawingPreest.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/constant.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/SceneManager.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/Base/GeometryBase.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/Math.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Geometry/index.ts","../node_modules/@turf/length/index.ts","../node_modules/@turf/area/index.ts","../node_modules/point-in-polygon-hao/dist/pointInPolygon.mjs","../node_modules/@turf/boolean-point-in-polygon/index.ts","../node_modules/@turf/points-within-polygon/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Renderer/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/Transform/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/util/HexmapDynamic.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryArea/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Geometry/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Renderer/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/Transform/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Geometry/GeometryCanvas/GeometryAreaPolygon/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Common/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/ActiveCommander/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/MapboxGLWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/lib/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/DeckGL/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/CanvasCustom/CanvasDynamic.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/CanvasCustom/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/RendererWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/UI/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Scene/SceneState/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/Scene/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/ApiWrapper/index.ts","njslab/Project/Project_15_Ready/01_ISP_inspector/index.ts","../node_modules/@turf/distance/index.ts","../node_modules/@turf/invariant/index.ts"],"sourcesContent":["export const hex2RGB = (hex: string, isGray: boolean = false) => {\n    hex = hex.replace('#', '');\n    let r = parseInt(hex.substring(0, 2), 16);\n    let g = parseInt(hex.substring(2, 4), 16);\n    let b = parseInt(hex.substring(4, 6), 16);\n    if (isGray) {\n        let v = (0.58 * r) + (0.17 * g) + (0.8 * b);\n        return [v, v, v];\n    } else {\n        return [r, g, b];\n    }\n}","export const distance = (v0: RVector3, v1: RVector3): number => {\n    return Math.sqrt((v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z));\n};\nexport const isInsideOfVecs = (v: RVector3, vecs: RVector3[]): boolean => {\n    // ray-casting algorithm based on https://github.com/substack/point-in-polygon\n    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n    let x = v.x, y = v.y;\n    let inside = false;\n    for (let i = 0, j = vecs.length - 1; i < vecs.length; j = i++) {\n        let xi = vecs[i].x, yi = vecs[i].y;\n        let xj = vecs[j].x, yj = vecs[j].y;\n        let intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n};\nexport const isInsideEllipse = (cv: RVector3, m: RVector3, r0: number, r1: number, threshold: number = 5) => {\n    const x = Math.pow((m.x - cv.x), 2) / Math.pow(threshold + r0, 2);\n    const y = Math.pow((m.y - cv.y), 2) / Math.pow(threshold + r1, 2);\n    if (x + y <= 1) {\n        return true;\n    }\n    return false;\n};\nexport const closestPointOnLine = (pt: RVector3, p0: RVector3, p1: RVector3) => {\n    const A = p1.y - p0.y;\n    const B = p0.x - p1.x;\n    const C = p1.x * p0.y - p0.x * p1.y;\n    const dis = Math.abs(A * pt.x + B * pt.y + C) / Math.sqrt(A * A + B * B);\n    const proX = (B * (B * pt.x - A * pt.y) - A * C) / (A * A + B * B);\n    const proY = (A * (-B * pt.x + A * pt.y) - B * C) / (A * A + B * B);\n    return { x: proX, y: proY, dis: dis };\n};\nexport const getCosAngleByTwoVectors = (v0: RVector3, v1: RVector3): number => {\n    return dotProduct(normalize(v0), normalize(v1));\n};\nexport const getAngleByTwoVectorsRadian = (v0: RVector3, v1: RVector3): number => {\n    return Math.acos(getCosAngleByTwoVectors(v0, v1));\n};\nexport const getAngleByTwoVectors = (v0: RVector3, v1: RVector3): number => {\n    return getAngleByTwoVectorsRadian(v0, v1) * 180.0 / Math.PI;\n};\nexport const lengt = (v: RVector3): number => {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n};\nexport const normalize = (v: RVector3): RVector3 => {\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len < 0.000001) {\n        return new RVector3(v.x, v.y, v.z);\n    }\n    return new RVector3(v.x / len, v.y / len, v.z / len);\n};\nexport const dotProduct = (v1: RVector3, v2: RVector3): number => {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n};\nexport const crossProduct = (v1: RVector3, v2: RVector3): RVector3 => {\n    return new RVector3(\n        v1.y * v2.z - v1.z * v2.y,\n        v1.z * v2.x - v1.x * v2.z,\n        v1.x * v2.y - v1.y * v2.x\n    );\n};\nexport const divideByNum = (v0: RVector3, v1: RVector3, n: number = 5): RVector3[] => {\n    const vs: RVector3[] = [];\n    const xOff = (v1.x - v0.x) / n;\n    const yOff = (v1.y - v0.y) / n;\n    const zOff = (v1.z - v0.z) / n;\n    for (let j = 0; j < n; ++j) {\n        let x = v0.x + xOff * j;\n        let y = v0.y + yOff * j;\n        let z = v0.z + zOff * j;\n        vs.push(new RVector3(x, y, z));\n    }\n    return vs;\n};\nexport const getCenterVec = (vs: RVector3[]) => {\n    const v = new RVector3(0, 0, 0)\n\n    for (let i = 0; i < vs.length; ++i) {\n        v.x += vs[i].x;\n        v.y += vs[i].y;\n        v.lng += vs[i].lng;\n        v.lat += vs[i].lat;\n    }\n    \n    v.x /= vs.length;\n    v.y /= vs.length;\n    v.lng /= vs.length;\n    v.lat /= vs.length;\n    return v;\n};\nexport class RVector3 {\n    x: number = 0.0;\n    y: number = 0.0;\n    z: number = 0.0;\n    lng: number = 0.0;\n    lat: number = 0.0;\n    ele: number = 0.0;\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n};","import { Polygon, MultiPolygon, Feature, FeatureCollection } from \"geojson\";\nimport polygonClipping, { Geom } from \"polygon-clipping\";\nimport { polygon, multiPolygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\n\n/**\n * Finds the difference between multiple {@link Polygon|polygons} by clipping the subsequent polygon from the first.\n *\n * @name difference\n * @param {FeatureCollection<Polygon|MultiPolygon>} features input Polygon features\n * @returns {Feature<Polygon|MultiPolygon>|null} a Polygon or MultiPolygon feature showing the area of `polygon1` excluding the area of `polygon2` (if empty returns `null`)\n * @example\n * var polygon1 = turf.polygon([[\n *   [128, -26],\n *   [141, -26],\n *   [141, -21],\n *   [128, -21],\n *   [128, -26]\n * ]], {\n *   \"fill\": \"#F00\",\n *   \"fill-opacity\": 0.1\n * });\n * var polygon2 = turf.polygon([[\n *   [126, -28],\n *   [140, -28],\n *   [140, -20],\n *   [126, -20],\n *   [126, -28]\n * ]], {\n *   \"fill\": \"#00F\",\n *   \"fill-opacity\": 0.1\n * });\n *\n * var difference = turf.difference(turf.featureCollection([polygon1, polygon2]));\n *\n * //addToMap\n * var addToMap = [polygon1, polygon2, difference];\n */\nfunction difference(\n  features: FeatureCollection<Polygon | MultiPolygon>\n): Feature<Polygon | MultiPolygon> | null {\n  const geoms: Array<Geom> = [];\n\n  geomEach(features, (geom) => {\n    geoms.push(geom.coordinates as Geom);\n  });\n\n  if (geoms.length < 2) {\n    throw new Error(\"Must have at least two features\");\n  }\n\n  const properties = features.features[0].properties || {};\n\n  const differenced = polygonClipping.difference(geoms[0], ...geoms.slice(1));\n  if (differenced.length === 0) return null;\n  if (differenced.length === 1) return polygon(differenced[0], properties);\n  return multiPolygon(differenced, properties);\n}\n\nexport { difference };\nexport default difference;\n","import { Polygon } from 'geojson'\nimport * as turf from '@turf/turf';\n\nexport const difference = (area: Polygon | any, polygons: Polygon[], boolean) => {\n    for (let i = 0; i < polygons.length; ++i) {\n        if (boolean[i]) {\n            // @ts-ignore\n            area = turf.difference(area, polygons[i]);\n        }\n    };\n    return area;\n};\n\nexport const computePathPolygon = (object: Polygon, projection: (lon: number, lat: number) => number[]): Path2D => {\n    const path = new Path2D();\n    let x, y;\n    for (let j = 0; j < object['geometry']['coordinates'].length; ++j) {\n        // if (j === 0) {\n        const pathOut = new Path2D();\n        for (let i = object['geometry']['coordinates'][j].length - 1; i > -1; --i) {\n\n            const p = object['geometry']['coordinates'][j][i];\n            if (i === object['geometry']['coordinates'][j].length - 1) {\n                const sp = projection(p[0], p[1])\n                pathOut.moveTo(sp[0], sp[1]);\n            } else {\n                const sp = projection(p[0], p[1])\n                pathOut.lineTo(sp[0], sp[1]);\n            }\n        }\n        pathOut.closePath();\n        path.addPath(pathOut);\n    }\n    return path;\n};\n","import { RVector3 } from './';\nexport const drawingPoint = (ctx: CanvasRenderingContext2D, x: number, y: number) => {\n    ctx.beginPath();\n    ctx.arc(x, y, 10, 0, Math.PI * 2.0);\n    ctx.closePath();\n    ctx.fill();\n};\nexport const renderControlPoint = (ctx: CanvasRenderingContext2D, vs: RVector3[], fillColor = 'rgba(200, 200, 200, 1.0)', strokeColor = 'rgba(50, 50, 50, 1.0)', lineWidth = 3 ) => {\n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = strokeColor;\n    ctx.lineWidth = lineWidth;\n    vs.forEach(v => {\n        ctx.beginPath();\n        ctx.arc(v.x, v.y, 8, 0, Math.PI * 2.0);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n    });\n};","export const LANDUSE_TYPE_MAPPING = {\n  R: { text: 'Residential', color: '#ffff6e' },\n  B: { text: 'Business', color: '#f59700' },\n  X: { text: 'Residential & Business', color: '#FFC25F' },\n  A: { text: 'Agriculture', color: '#9EFF99' },\n  LIBRARY: { text: 'Library', color: '#04E762' },\n  SCHOOL: { text: 'School', color: '#95E06C' },\n  GOVERNMENT: { text: 'Government', color: '#D741A7' },\n  HEALTH: { text: 'Health', color: '#008BF8' },\n  COMMUNITY: { text: 'Community', color: '#00CECB' },\n  RELIGION: { text: 'Religion', color: '#9BFFFD' },\n  C: { text: 'Other CAI', color: '#D544CC' },\n  O: { text: 'Other BSLs', color: 'gray' }\n}\nexport const FUNDING_STATUS_MAPPING = {\n  None: {\n    text: 'Not assigned',\n    color: 'gray'\n  },\n  default: {\n    text: 'Default',\n    color: '#5287E6'\n  },\n  pending: {\n    text: 'Pending',\n    color: '#746CDD'\n  },\n  assigned: {\n    text: 'Assigned',\n    color: '#A355D4'\n  }\n}\nexport const TYPE_GEOMETRY = {\n  RECT: 'RECT',\n  CIRCLE: 'CIRCLE',\n  POLYGON: 'POLYGON',\n}","export class SceneManager {\n  private histories: any = [];\n  private currentIndex = -1;\n  public reset() {\n    this.histories = [];\n    this.currentIndex = -1;\n  }\n  public push(data: any) {\n    if (this.currentIndex < this.histories.length - 1) {\n      this.histories.splice(this.currentIndex + 1, this.histories.length);\n    }\n    this.histories.push(data);\n    this.currentIndex = this.histories.length - 1;\n  }\n  public getCurrentIndex() {\n    return this.currentIndex;\n  }\n  public getHistoryLength() {\n    return this.histories.length;\n  }\n  public getCurrentState() {\n    return { currentIndex: this.getCurrentIndex(), historyNum: this.getHistoryLength() };\n  }\n  public undo() {\n    if (this.currentIndex === 0) { return undefined; }\n    this.currentIndex--;\n    return this.histories[this.currentIndex];\n  }\n  public redo() {\n    this.currentIndex++;\n    this.currentIndex = this.currentIndex < this.histories.length ? this.currentIndex : this.histories.length - 1;\n    return this.histories[this.currentIndex];\n  }\n}","import * as turf from '@turf/turf';\nimport { Polygon, MultiPolygon, GeoJsonProperties, Feature, Point, MultiPoint, FeatureCollection } from 'geojson';\n\nimport { Scene } from '../../../Scene';\nimport { TYPE_GEOMETRY, getUUID } from '../../../lib';\n\nexport class GeometryBase {\n    public scene: Scene;\n    public TYPE = TYPE_GEOMETRY.RECT;\n    public t = 0.1;\n    public id: string;\n    public capturedVecId: number = -1;\n    public isHovered: boolean = false;\n    public hasAnimation: boolean = false;\n    public updateNeeded: boolean = false;\n    public captureNeeded: boolean = false;\n    public referPoint: any = [];\n    protected _isSelected: boolean = false;\n\n    public polygonTurfOriginal: Polygon;\n    public polygonTurfSubtracted: Polygon;\n\n    constructor(scene: Scene) {\n        this.scene = scene;\n        this.id = getUUID();\n\n        this.scene.push(this);\n    }\n    public get isSelected() {\n        return this._isSelected;\n    }\n    public set isSelected(v: boolean) {\n        this._isSelected = v;\n    }\n    public isInside(x: number, y: number) {\n        return false;\n    }\n    public translate(x: number, y: number) {\n        \n    }\n    public removeVertexLastVertex() {\n        \n    }\n    public update() {\n\n    }\n    public onMouseUp() {\n        \n    }\n    public onMouseClick(e) {\n\n    }\n    public onMouseDoubleClick(e) {\n\n    }\n    public shiftType() {\n        \n    }\n    public updateGeoProjection() {\n\n    }\n    public updateGhostPos(x: number, y: number) {\n\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        this.update();\n        this.renderPost(ctx);\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n\n    }\n    public toJson() {\n        \n    }\n    public updateWidthHight(width: number, height: number) {\n\n    }\n    public remove(): void {\n        this.scene.remove(this);\n    }\n    public toggleHexmap() {\n\n    }\n}","export const getUUID = () => {   // reference : https://jsfiddle.net/briguy37/2MVFd/\n    let d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c: string) => {\n        let r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n}\nexport const remap = (val: number, oldMin: number, oldMax: number, newMin: number, newMax: number) => {\n    return (((val - oldMin) * (newMax - newMin)) / (oldMax - oldMin)) + newMin;\n};\nexport const remapNormalize = (CValue: number[]) => {\n    let valueOut = []\n    let domain = getDomain(CValue);\n    for (let d of CValue) {\n        valueOut.push(((d - domain[0]) / (domain[1] - domain[0])));\n    }\n    return valueOut;\n};\nexport const getDomain = (doubleList: number[]) => {\n    let domain = [];\n    let Min = Number.MAX_VALUE, Max = Number.MIN_VALUE;\n    for (let d of doubleList) {\n        if (Min > d) { Min = d; }\n        if (Max < d) { Max = d; }\n    }\n    domain.push(Min);\n    domain.push(Max);\n    return domain;\n};","import { RVector3, } from '../../../../lib';\n\nexport class AreaGeometry {\n\n    public vec: RVector3;\n\n    public vsRect: RVector3[] = [];\n\n    public segR = 36;\n    public vsCircle: RVector3[] = [];\n\n    public width = 200;\n    public height = 200;\n\n    constructor(vec: RVector3, width: number, height: number) {\n        this.vec = vec;\n        this.width = width;\n        this.height = height;\n        this.reset();\n        this.initRect();\n        this.initCircleVec();\n    }\n    public initRect() {\n        const widthHalf = this.width * 0.5;\n        const heightHalf = this.height * 0.5;\n        this.vsRect.push(new RVector3(this.vec.x - widthHalf, this.vec.y + heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x + widthHalf, this.vec.y + heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x + widthHalf, this.vec.y - heightHalf));\n        this.vsRect.push(new RVector3(this.vec.x - widthHalf, this.vec.y - heightHalf));\n    }\n    public initCircleVec() {\n        this.vsCircle = [];\n        const r = (Math.PI * 2) / this.segR\n        for (let i = 0; i < this.segR; ++i) {\n            const x = Math.cos(r * i) * this.width * 0.5;\n            const y = Math.sin(r * i) * this.height * 0.5;\n            const v = new RVector3(this.vec.x + x, this.vec.y + y, 0);\n            this.vsCircle.push(v)\n        }\n    }\n    public updateScreen(toScreen: (x: number, y: number)=> number[]) {\n        // console.log('update screen pos');\n\n        let sp = toScreen(this.vec.lng, this.vec.lat);\n        this.vec.x = sp[0];\n        this.vec.y = sp[1];\n\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            sp = toScreen(this.vsRect[i].lng, this.vsRect[i].lat);\n            this.vsRect[i].x = sp[0];\n            this.vsRect[i].y = sp[1];\n        }\n\n        for (let i = 0; i < this.vsCircle.length; ++i) {\n            // console.log(this.vs[i].lng, this.vs[i].lat)\n            sp = toScreen(this.vsCircle[i].lng, this.vsCircle[i].lat);\n            this.vsCircle[i].x = sp[0];\n            this.vsCircle[i].y = sp[1];\n            // console.log(this.vsCircle[i].x, this.vsCircle[i].y);\n        }\n\n        this.width = Math.abs(this.vsRect[0].x - this.vsRect[2].x);\n        this.height = Math.abs(this.vsRect[0].y - this.vsRect[2].y);\n    }\n    public updateProjection(toMap: (x: number, y: number)=> number[]) {\n        // console.log('update map pos');\n        const mp = toMap(this.vec.x, this.vec.y);\n        this.vec.lng = mp[0];\n        this.vec.lat = mp[1];\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            let mp = toMap(this.vsRect[i].x, this.vsRect[i].y);\n            this.vsRect[i].lng = mp[0];\n            this.vsRect[i].lat = mp[1];\n        }\n\n        for (let i = 0; i < this.vsCircle.length; ++i) {\n            let mp = toMap(this.vsCircle[i].x, this.vsCircle[i].y);\n            this.vsCircle[i].lng = mp[0];\n            this.vsCircle[i].lat = mp[1];\n        }\n        this.updateCenterVec();\n    }\n    public updateCenterVec() {\n        let xSum = 0;\n        let ySum = 0;\n        for (let i = 0; i < this.vsRect.length; ++i) {\n            xSum += this.vsRect[i].x;\n            ySum += this.vsRect[i].y;\n        }\n        this.vec.x = xSum / this.vsRect.length;\n        this.vec.y = ySum / this.vsRect.length;\n    }\n    public updateScreenPosCircle() {\n        const r = (Math.PI * 2) / this.segR\n        for (let i = 0; i < this.segR; ++i) {\n            const x = Math.cos(r * i) * this.width * 0.5;\n            const y = Math.sin(r * i) * this.height * 0.5;\n            // const v = new RVector3(this.vec.x + x, this.host.vec.y + y, 0);\n            // const [mx, my] = this.scene.common.toMap(x, y);\n            // this.vec.lng = mx;\n            // this.vec.lat = my;\n            this.vsCircle[i].x = this.vec.x + x;\n            this.vsCircle[i].y = this.vec.y + y;\n        }\n        // console.log('updateCircle');\n    }\n    public reset() {\n        this.vsRect = [];\n        this.vsCircle = [];\n    }\n    public updateWidthHight(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n        this.reset();\n        this.initRect();\n        this.initCircleVec();\n    }\n}","import { Feature, FeatureCollection, GeometryCollection } from \"geojson\";\nimport { distance } from \"@turf/distance\";\nimport { Units } from \"@turf/helpers\";\nimport { segmentReduce } from \"@turf/meta\";\n\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nfunction length(\n  geojson: Feature<any> | FeatureCollection<any> | GeometryCollection,\n  options: {\n    units?: Units;\n  } = {}\n): number {\n  // Calculate distance from 2-vertex line segments\n  return segmentReduce(\n    geojson,\n    (previousValue, segment) => {\n      const coords = segment!.geometry.coordinates;\n      return previousValue! + distance(coords[0], coords[1], options);\n    },\n    0\n  );\n}\n\nexport { length };\nexport default length;\n","import { Feature, FeatureCollection, Geometry } from \"geojson\";\nimport { earthRadius } from \"@turf/helpers\";\nimport { geomReduce } from \"@turf/meta\";\n\n/**\n * Calculates the geodesic area in square meters of one or more polygons.\n *\n * @name area\n * @param {GeoJSON} geojson input polygon(s) as {@link Geometry}, {@link Feature}, or {@link FeatureCollection}\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson: Feature<any> | FeatureCollection<any> | Geometry) {\n  return geomReduce(\n    geojson,\n    (value, geom) => {\n      return value + calculateArea(geom);\n    },\n    0\n  );\n}\n\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom: Geometry): number {\n  let total = 0;\n  let i;\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonArea(geom.coordinates);\n    case \"MultiPolygon\":\n      for (i = 0; i < geom.coordinates.length; i++) {\n        total += polygonArea(geom.coordinates[i]);\n      }\n      return total;\n    case \"Point\":\n    case \"MultiPoint\":\n    case \"LineString\":\n    case \"MultiLineString\":\n      return 0;\n  }\n  return 0;\n}\n\nfunction polygonArea(coords: any) {\n  let total = 0;\n  if (coords && coords.length > 0) {\n    total += Math.abs(ringArea(coords[0]));\n    for (let i = 1; i < coords.length; i++) {\n      total -= Math.abs(ringArea(coords[i]));\n    }\n  }\n  return total;\n}\n\n/**\n * @private\n * A constant factor used to compute the area of a polygon.\n * It's derived from the square of the Earth's radius divided by 2.\n *\n * @type {number}\n */\nconst FACTOR = (earthRadius * earthRadius) / 2;\n\n/**\n * @private\n * A constant used for converting degrees to radians.\n * Represents the ratio of PI to 180.\n *\n * @type {number}\n */\nconst PI_OVER_180 = Math.PI / 180;\n\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords: number[][]): number {\n  const coordsLength = coords.length - 1;\n\n  if (coordsLength <= 2) return 0;\n  let total = 0;\n\n  let i = 0;\n  while (i < coordsLength) {\n    const lower = coords[i];\n    const middle = coords[i + 1 === coordsLength ? 0 : i + 1];\n    const upper =\n      coords[i + 2 >= coordsLength ? (i + 2) % coordsLength : i + 2];\n\n    const lowerX = lower[0] * PI_OVER_180;\n    const middleY = middle[1] * PI_OVER_180;\n    const upperX = upper[0] * PI_OVER_180;\n\n    total += (upperX - lowerX) * Math.sin(middleY);\n\n    i++;\n  }\n\n  return total * FACTOR;\n}\n\nexport { area };\nexport default area;\n","function pointInPolygon(p, polygon) {\n    var i = 0;\n    var ii = 0;\n    var k = 0;\n    var f = 0;\n    var u1 = 0;\n    var v1 = 0;\n    var u2 = 0;\n    var v2 = 0;\n    var currentP = null;\n    var nextP = null;\n\n    var x = p[0];\n    var y = p[1];\n\n    var numContours = polygon.length;\n    for (i; i < numContours; i++) {\n        ii = 0;\n        var contourLen = polygon[i].length - 1;\n        var contour = polygon[i];\n\n        currentP = contour[0];\n        if (currentP[0] !== contour[contourLen][0] &&\n            currentP[1] !== contour[contourLen][1]) {\n            throw new Error('First and last coordinates in a ring must be the same')\n        }\n\n        u1 = currentP[0] - x;\n        v1 = currentP[1] - y;\n\n        for (ii; ii < contourLen; ii++) {\n            nextP = contour[ii + 1];\n\n            v2 = nextP[1] - y;\n\n            if ((v1 < 0 && v2 < 0) || (v1 > 0 && v2 > 0)) {\n                currentP = nextP;\n                v1 = v2;\n                u1 = currentP[0] - x;\n                continue\n            }\n\n            u2 = nextP[0] - p[0];\n\n            if (v2 > 0 && v1 <= 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f > 0) { k = k + 1; }\n                else if (f === 0) { return 0 }\n            } else if (v1 > 0 && v2 <= 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f < 0) { k = k + 1; }\n                else if (f === 0) { return 0 }\n            } else if (v2 === 0 && v1 < 0) {\n                f = (u1 * v2) - (u2 * v1);\n                if (f === 0) { return 0 }\n            } else if (v1 === 0 && v2 < 0) {\n                f = u1 * v2 - u2 * v1;\n                if (f === 0) { return 0 }\n            } else if (v1 === 0 && v2 === 0) {\n                if (u2 <= 0 && u1 >= 0) {\n                    return 0\n                } else if (u1 <= 0 && u2 >= 0) {\n                    return 0\n                }\n            }\n            currentP = nextP;\n            v1 = v2;\n            u1 = u2;\n        }\n    }\n\n    if (k % 2 === 0) { return false }\n    return true\n}\n\nexport default pointInPolygon;\n","import pip from \"point-in-polygon-hao\";\nimport {\n  BBox,\n  Feature,\n  MultiPolygon,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { Coord } from \"@turf/helpers\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\n\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  point: Coord,\n  polygon: Feature<G, P> | G,\n  options: {\n    ignoreBoundary?: boolean;\n  } = {}\n) {\n  // validation\n  if (!point) {\n    throw new Error(\"point is required\");\n  }\n  if (!polygon) {\n    throw new Error(\"polygon is required\");\n  }\n\n  const pt = getCoord(point);\n  const geom = getGeom(polygon);\n  const type = geom.type;\n  const bbox = polygon.bbox;\n  let polys: any[] = geom.coordinates;\n\n  // Quick elimination if point is not inside bbox\n  if (bbox && inBBox(pt, bbox) === false) {\n    return false;\n  }\n\n  if (type === \"Polygon\") {\n    polys = [polys];\n  }\n  let result = false;\n  for (var i = 0; i < polys.length; ++i) {\n    const polyResult = pip(pt, polys[i]);\n    if (polyResult === 0) return options.ignoreBoundary ? false : true;\n    else if (polyResult) result = true;\n  }\n\n  return result;\n}\n\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt: number[], bbox: BBox) {\n  return (\n    bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]\n  );\n}\n\nexport { booleanPointInPolygon };\nexport default booleanPointInPolygon;\n","import type {\n  Feature,\n  FeatureCollection,\n  Polygon,\n  MultiPolygon,\n  MultiPoint,\n  Point,\n  GeoJsonProperties,\n  Position,\n} from \"geojson\";\nimport { booleanPointInPolygon as pointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { featureCollection, multiPoint } from \"@turf/helpers\";\nimport { geomEach, featureEach, coordEach } from \"@turf/meta\";\n\n/**\n * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.\n *\n * @name pointsWithinPolygon\n * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search\n * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within\n * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in\n * @example\n * var points = turf.points([\n *     [-46.6318, -23.5523],\n *     [-46.6246, -23.5325],\n *     [-46.6062, -23.5513],\n *     [-46.663, -23.554],\n *     [-46.643, -23.557]\n * ]);\n *\n * var searchWithin = turf.polygon([[\n *     [-46.653,-23.543],\n *     [-46.634,-23.5346],\n *     [-46.613,-23.543],\n *     [-46.614,-23.559],\n *     [-46.631,-23.567],\n *     [-46.653,-23.560],\n *     [-46.653,-23.543]\n * ]]);\n *\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\n *\n * //addToMap\n * var addToMap = [points, searchWithin, ptsWithin]\n * turf.featureEach(ptsWithin, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction pointsWithinPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties,\n>(\n  points:\n    | Feature<Point | MultiPoint, P>\n    | FeatureCollection<Point | MultiPoint, P>,\n  polygons: Feature<G> | FeatureCollection<G> | G\n): FeatureCollection<Point | MultiPoint, P> {\n  const results: Feature<Point | MultiPoint, P>[] = [];\n  featureEach(points, function (point) {\n    let contained = false;\n    if (point.geometry.type === \"Point\") {\n      geomEach(polygons, function (polygon) {\n        if (pointInPolygon(point as Feature<Point, P>, polygon)) {\n          contained = true;\n        }\n      });\n      if (contained) {\n        results.push(point);\n      }\n    } else if (point.geometry.type === \"MultiPoint\") {\n      var pointsWithin: Position[] = [];\n      geomEach(polygons, function (polygon) {\n        coordEach(point as Feature<MultiPoint>, function (pointCoord) {\n          if (pointInPolygon(pointCoord, polygon)) {\n            contained = true;\n            pointsWithin.push(pointCoord);\n          }\n        });\n      });\n      if (contained) {\n        results.push(\n          multiPoint(pointsWithin, point.properties) as Feature<MultiPoint, P>\n        );\n      }\n    } else {\n      throw new Error(\"Input geometry must be a Point or MultiPoint\");\n    }\n  });\n  return featureCollection(results);\n}\n\nexport { pointsWithinPolygon };\nexport default pointsWithinPolygon;\n","import * as turf from '@turf/turf';\n\nimport { Area } from '..';\n\nimport { LANDUSE_TYPE_MAPPING, TYPE_GEOMETRY, renderControlPoint, difference, computePathPolygon } from '../../../../lib';\n\nexport class Renderer {\n    public host: Area;\n    public pathCroppedArea: Path2D\n    constructor(host: Area) {\n        this.host = host;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderAreaBounding(ctx);\n        this.renderCroppedArea(ctx);\n\n        if (this.host.isHovered || this.host.isSelected) {\n            this.renderControlPoint(ctx);\n            this.renderDim(ctx);\n\n            if (this.host.isSelected) {\n                this.renderSelected(ctx);\n            }\n        }\n        this.renderCenterPoint(ctx);\n        this.renderProperties(ctx);\n    }\n    private renderCenterPoint(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.host.vec.x - 5, this.host.vec.y);\n        ctx.lineTo(this.host.vec.x + 5, this.host.vec.y);\n        ctx.moveTo(this.host.vec.x, this.host.vec.y - 5);\n        ctx.lineTo(this.host.vec.x, this.host.vec.y + 5);\n        ctx.stroke();\n    }\n    private renderCroppedArea(ctx: CanvasRenderingContext2D) {\n        if (this.host.updateNeeded || this.host.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            const diff = difference(this.host.polygonTurfOriginal, this.host.scene.polygonsDifference, this.host.scene.ids);\n            this.host.polygonTurfSubtracted = diff;\n            this.pathCroppedArea = computePathPolygon(diff, this.host.scene.common.toScreen);\n            this.host.updateNeeded = false;\n            // console.log('updating');\n        }\n\n        ctx.setLineDash([5, 7]);\n        ctx.lineDashOffset = this.host.t;\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#fff';\n\n        const op = 0.2 + Math.sin(this.host.t * 0.1) * 0.09;\n        ctx.fillStyle = `rgba(0, 255, 255, ${op} )`;\n\n        ctx.fill(this.pathCroppedArea, 'evenodd');\n        ctx.stroke(this.pathCroppedArea);\n\n        ctx.setLineDash([]);\n    }\n    private renderControlPoint(ctx: CanvasRenderingContext2D) {\n        ctx.fillStyle = 'rgba(200, 200, 200, 1.0)';\n        ctx.strokeStyle = 'rgba(50, 50, 50, 1.0)';\n        ctx.lineWidth = 3;\n\n        renderControlPoint(ctx, this.host.geometry.vsRect);\n        renderControlPoint(ctx, this.host.transform.cVecGhost);\n\n    }\n    private renderDim(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n\n        if (this.host.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            // ctx.ellipse(this.host.vec.x, this.host.vec.y, this.host.geometry.width * 0.5, this.host.geometry.height * 0.5, 0.0, 0.0, Math.PI * 2.0);\n\n            let line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[1].lng, this.host.geometry.vsRect[1].lat]]);\n            let length = turf.length(line, { units: 'miles' }) * 0.5;\n\n            let x = this.host.geometry.vsRect[0].x + ((this.host.geometry.vsRect[1].x - this.host.geometry.vsRect[0].x) * 0.75);\n            let y = this.host.geometry.vec.y - 10;\n            ctx.fillText(`R1 : ${length.toFixed(5)} miles`, x, y);\n\n\n            line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[3].lng, this.host.geometry.vsRect[3].lat]]);\n            length = turf.length(line, { units: 'miles' }) * 0.5;\n\n            x = this.host.geometry.vec.x - 10;\n            y = this.host.geometry.vsRect[0].y + ((this.host.geometry.vsRect[3].y - this.host.geometry.vsRect[0].y) * 0.75);\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(-90 * Math.PI / 180);\n            ctx.fillText(`R2 : ${length.toFixed(5)} miles`, 0, 0);\n            ctx.restore();\n\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n            ctx.lineWidth = 0.5;\n\n            ctx.beginPath();\n            ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vsRect[2].y);\n            ctx.lineTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n            ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n            ctx.stroke();\n\n        } else {\n            let line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[1].lng, this.host.geometry.vsRect[1].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n\n            let x = this.host.geometry.vsRect[0].x + ((this.host.geometry.vsRect[1].x - this.host.geometry.vsRect[0].x) * 0.5);\n            let y = this.host.geometry.vsRect[0].y + 25;\n            ctx.fillText(`W : ${length.toFixed(5)} miles`, x, y);\n\n\n            line = turf.lineString([[this.host.geometry.vsRect[0].lng, this.host.geometry.vsRect[0].lat], [this.host.geometry.vsRect[3].lng, this.host.geometry.vsRect[3].lat]]);\n            length = turf.length(line, { units: 'miles' });\n\n            x = this.host.geometry.vsRect[0].x - 25;\n            y = this.host.geometry.vsRect[0].y + ((this.host.geometry.vsRect[3].y - this.host.geometry.vsRect[0].y) * 0.5);\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(-90 * Math.PI / 180);\n\n            ctx.fillText(`H : ${length.toFixed(5)} miles`, 0, 0);\n\n            ctx.restore();\n        }\n\n        // ctx.globalCompositeOperation = 'source-over';\n        // ctx.stroke()\n    }\n    private renderAreaBounding(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        if (this.host.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            ctx.ellipse(this.host.vec.x, this.host.vec.y, this.host.geometry.width * 0.5, this.host.geometry.height * 0.5, 0.0, 0.0, Math.PI * 2.0);\n        } else {\n            ctx.rect(this.host.geometry.vsRect[3].x, this.host.geometry.vsRect[3].y, this.host.geometry.width, this.host.geometry.height);\n        }\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n        ctx.stroke();\n    }\n    private renderProperties(ctx: CanvasRenderingContext2D) {\n        const area = turf.convertArea(turf.area(this.host.polygonTurfSubtracted), 'meters', 'miles')\n        ctx.textAlign = 'center';\n        ctx.font = '18px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`ID: ${this.host.id.split('-')[0]}`, this.host.vec.x, this.host.vec.y - 90 - this.host.geometry.height * 0.5);\n\n        ctx.fillText(`Area in square miles: ${area.toFixed(5)}`, this.host.vec.x, this.host.vec.y - 60 - this.host.geometry.height * 0.5);\n        // console.log(this.host.cp.x, 50 - this.host.cp.y - this.host.geometry.height * 0.5);\n\n        const pts = turf.pointsWithinPolygon(this.host.scene.points, this.host.polygonTurfSubtracted)\n        // console.log(pts);\n\n        this.host.referPoint = pts;\n\n        let r = 0, b = 0, other = 0;\n        for (let i = 0; i < pts.features.length; ++i) {\n            if (pts.features[i].properties['landuse'] === 'R') {\n                r += 1;\n            } else if (pts.features[i].properties['landuse'] === 'B') {\n                b += 1;\n            } else {\n                other += 1;\n            }\n        }\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, this.host.vec.x - 120, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, this.host.vec.x + 28, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        ctx.fillStyle = 'rgb(0, 128, 0)';\n        ctx.fillText(`Other: ${other}`, this.host.vec.x + 140, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n        // console.log(r, b, other)\n    }\n    public renderSelected(ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 1)';\n        ctx.lineWidth = 1;\n\n        const offset = 13 + Math.sin(this.host.t * 0.2);\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.vsRect[0].x - offset, this.host.geometry.vsRect[0].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[0].x - offset, this.host.geometry.vsRect[0].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[0].x + offset, this.host.geometry.vsRect[0].y + offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[1].x + offset, this.host.geometry.vsRect[1].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[1].x + offset, this.host.geometry.vsRect[1].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[1].x - offset, this.host.geometry.vsRect[1].y + offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[2].x + offset, this.host.geometry.vsRect[2].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[2].x + offset, this.host.geometry.vsRect[2].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[2].x - offset, this.host.geometry.vsRect[2].y - offset);\n\n        ctx.moveTo(this.host.geometry.vsRect[3].x - offset, this.host.geometry.vsRect[3].y + offset);\n        ctx.lineTo(this.host.geometry.vsRect[3].x - offset, this.host.geometry.vsRect[3].y - offset);\n        ctx.lineTo(this.host.geometry.vsRect[3].x + offset, this.host.geometry.vsRect[3].y - offset);\n\n        ctx.stroke();\n\n        // ctx.beginPath();\n        // ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n        // ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n        // ctx.stroke();\n    }\n}\n","import { RVector3, } from '../../../../lib';\nimport { Area } from '..';\n\nexport class Transform {\n    public host: Area;\n    public cVecGhost: RVector3[] = [];\n    constructor(host: Area) {\n        this.host = host;\n\n        const widthHalf = this.host.geometry.width * 0.5;\n        const heighthHalf = this.host.geometry.height * 0.5;\n\n        this.cVecGhost = [\n            new RVector3(this.host.vec.x - widthHalf, this.host.vec.y),\n            new RVector3(this.host.vec.x, this.host.vec.y + heighthHalf),\n            new RVector3(this.host.vec.x + widthHalf, this.host.vec.y),\n            new RVector3(this.host.vec.x, this.host.vec.y - heighthHalf),\n        ];\n    }\n    public translate(x: number, y: number): void {\n        this.host.captureNeeded = true;\n\n        const preX = this.host.scene.solution.activeCommander.mp[0] - this.host.scene.solution.activeCommander.mpPre[0];\n        const preY = this.host.scene.solution.activeCommander.mp[1] - this.host.scene.solution.activeCommander.mpPre[1];\n\n        if (this.host.capturedVecId > -1) {\n\n            if (this.host.capturedVecId < this.host.geometry.vsRect.length) {\n                this.host.geometry.vsRect[this.host.capturedVecId].x += preX;\n                this.host.geometry.vsRect[this.host.capturedVecId].y += preY;\n            }\n            // console.log(this.host.capturedVecId);\n            // console.log(this.host.capturedVecId)\n            if (this.host.capturedVecId === 0) {\n                this.host.geometry.vsRect[3].x = this.host.geometry.vsRect[0].x;\n                this.host.geometry.vsRect[1].y = this.host.geometry.vsRect[0].y;\n\n            } else if (this.host.capturedVecId === 1) {\n                this.host.geometry.vsRect[2].x = this.host.geometry.vsRect[1].x;\n                this.host.geometry.vsRect[0].y = this.host.geometry.vsRect[1].y;\n\n            } else if (this.host.capturedVecId === 2) {\n                this.host.geometry.vsRect[1].x = this.host.geometry.vsRect[2].x;\n                this.host.geometry.vsRect[3].y = this.host.geometry.vsRect[2].y;\n\n            } else if (this.host.capturedVecId === 3) {\n                this.host.geometry.vsRect[0].x = this.host.geometry.vsRect[3].x;\n                this.host.geometry.vsRect[2].y = this.host.geometry.vsRect[3].y;\n                ////\n            } else if (this.host.capturedVecId === 4) {\n                this.host.geometry.vsRect[3].x += preX; this.host.geometry.vsRect[0].x += preX;\n            } else if (this.host.capturedVecId === 5) {\n                this.host.geometry.vsRect[1].y += preY; this.host.geometry.vsRect[0].y += preY;\n            } else if (this.host.capturedVecId === 6) {\n                this.host.geometry.vsRect[1].x += preX; this.host.geometry.vsRect[2].x += preX;\n            } else if (this.host.capturedVecId === 7) {\n                this.host.geometry.vsRect[2].y += preY; this.host.geometry.vsRect[3].y += preY;\n            }\n\n\n            this.host.geometry.width = Math.abs(this.host.geometry.vsRect[0].x - this.host.geometry.vsRect[2].x);\n            this.host.geometry.height = Math.abs(this.host.geometry.vsRect[0].y - this.host.geometry.vsRect[2].y);\n\n            this.host.updateGeoProjection();\n            this.host.updateScreenPosCircle();\n            this.hexRebuild();\n            this.updateGhostVecs();\n            return;\n        }\n\n        this.host.vec.x += preX;\n        this.host.vec.y += preY;\n        for (let i = 0; i < this.host.geometry.vsRect.length; ++i) {\n            this.host.geometry.vsRect[i].x += preX;\n            this.host.geometry.vsRect[i].y += preY;\n        }\n\n        this.host.updateGeoProjection();\n        this.host.updateScreenPosCircle();\n        this.hexReposition(preX, preY);\n        this.updateGhostVecs();\n    }\n\n    public hexReposition(xOff: number, yOff: number) {\n        if (this.host.hexmap) {\n            this.host.hexmap.reposition(xOff, yOff);\n            this.host.hexmap.updateActiveHexByBoudnary(this.host.polygonTurfSubtracted);\n        }\n    }\n    public hexRebuild() {\n        if (this.host.hexmap) {\n            this.host.initHex();\n            this.host.hexmap.updateActiveHexByBoudnary(this.host.polygonTurfSubtracted);\n        }\n    }\n\n    public updateGhostVecs() {\n        const widthHalf = this.host.geometry.width * 0.5;\n        const heighthHalf = this.host.geometry.height * 0.5;\n        this.cVecGhost[0].x = this.host.vec.x - widthHalf;\n        this.cVecGhost[0].y = this.host.vec.y;\n        this.cVecGhost[1].x = this.host.vec.x;\n        this.cVecGhost[1].y = this.host.vec.y + heighthHalf;\n        this.cVecGhost[2].x = this.host.vec.x + widthHalf;\n        this.cVecGhost[2].y = this.host.vec.y;\n        this.cVecGhost[3].x = this.host.vec.x;\n        this.cVecGhost[3].y = this.host.vec.y - heighthHalf;\n    }\n}\n","import { RVector3, getCenterVec, isInsideOfVecs, distance, remap } from '..';\n\nimport { Polygon } from 'geojson';\n\nimport * as turf from '@turf/turf';\n\nexport class HexMapDynamic {\n    public listPixel: Hexbin[];\n    public rx: number;\n    public ry: number;\n    public ddx: number;\n    public ddy: number;\n    public v0: RVector3;\n    public v1: RVector3;\n    public ptsCenter: RVector3;\n    public pts: RVector3[][];\n    public offScale: number;\n\n    public toMap: (x: number, y: number) => number[];\n    public toScreen: (lng: number, lat: number) => number[];\n\n    public referPoint: any = [];\n\n    constructor(v0: RVector3, v1: RVector3, rx: number = 100, ry: number = 100, toMap: any, toScreen: any) {\n        this.toMap = toMap;\n        this.toScreen = toScreen;\n\n        this.listPixel = [];\n        this.rx = rx;\n        this.ry = ry;\n        this.offScale = 0.9;\n        this.v0 = v0;\n        this.v1 = v1;\n        this.ptsCenter = new RVector3(0, 0, 0);\n        this.ddx = (this.v1.x - this.v0.x) / (this.rx - 1.0);\n        this.ddy = (this.v1.y - this.v0.y) / (this.ry - 1.0);\n        // this.Built();\n        this.init();\n    }\n    public init() {\n        this.initGrid();\n        // this.ComputeAtt();\n        this.computeHex();\n        this.computeHexOff();\n        // this.ComputeGeoVec();\n    }\n    public initWithR(r: number) {\n        this.initGrid();\n        this.computeHex();\n        this.filterWithinR(r);\n        this.computeHexOff();\n        this.computeGeoVec();\n    }\n    public initWithVecs(vs: RVector3[]) {\n        this.initGrid();\n        this.computeHex();\n        this.filterWithinVecs(vs);\n        this.computeHexOff();\n        this.computeGeoVec();\n    }\n    public initGrid() {\n        this.pts = [];\n        for (let j = 0; j < this.ry; ++j) {\n            let y = this.v0.y + j * this.ddy;\n            let xArray: RVector3[] = [];\n            for (let i = 0; i < this.rx; ++i) {\n                let x = this.v0.x + i * this.ddx;\n\n                let vec = new RVector3(x, y, 0);\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n\n                xArray.push(vec);\n            }\n            this.pts.push(xArray);\n        }\n    }\n    // ComputeAtt() {\n    //     for (let j = 0; j < this.ry; ++j) {\n    //         for (let i = 0; i < this.rx; ++i) {\n    //             //    let d = this.pts[j][i].FadeExp(new RVector3(0,0,0), 0.0000001);\n    //             //    this.pts[j][i].Mult(d*d); \n    //             let p0 = RVector3.Attractor(this.pts[j][i], new RVector3(50, 50, 0), 2, 0.001);\n    //             let p1 = RVector3.Attractor(this.pts[j][i], new RVector3(-50, 0, 0), 8, 0.89);\n    //             let p2 = RVector3.Attractor(this.pts[j][i], new RVector3(-0, 0, 0), 5, 0.99);\n    //             // console.log(p)  \n    //             this.pts[j][i].Add(p0);\n    //             this.pts[j][i].Add(p1);\n    //             this.pts[j][i].Add(p2);\n    //         }\n    //     }\n    // }\n    public computeHex() {\n        this.listPixel = [];\n        let alter = true;\n        for (let j = 0; j < this.ry; j += 2) {\n            for (let i = 0; i < this.rx; i += 2) {\n                if (alter) {\n                    if (i % 2 === 0 && i < this.rx - 2 && j % 2 === 0 && j < this.ry - 2) {\n                        let p = new Hexbin(this);\n                        p.bVec.push(this.pts[j][i + 1]);\n                        p.bVec.push(this.pts[j + 1][i + 2]);\n                        p.bVec.push(this.pts[j + 2][i + 2]);\n                        p.bVec.push(this.pts[j + 3][i + 1]);\n                        p.bVec.push(this.pts[j + 2][i]);\n                        p.bVec.push(this.pts[j + 1][i]);\n                        // p.bVec.push(this.pts[j][i+1]);\n                        p.updateCenVec();\n                        p.updatePolygon();\n                        this.listPixel.push(p);\n                    }\n                } else {\n                    if (i % 2 === 0 && i < this.rx - 2 && j % 2 === 0 && j < this.ry - 2) {\n                        let p = new Hexbin(this);\n                        p.bVec.push(this.pts[j][i + 2]);\n                        p.bVec.push(this.pts[j + 1][i + 3]);\n                        p.bVec.push(this.pts[j + 2][i + 3]);\n                        p.bVec.push(this.pts[j + 3][i + 2]);\n                        p.bVec.push(this.pts[j + 2][i + 1]);\n                        p.bVec.push(this.pts[j + 1][i + 1]);\n                        // p.vecs.push(this.pts[j][i+2]);\n                        p.updateCenVec();\n                        p.updatePolygon();\n                        this.listPixel.push(p);\n                    }\n                }\n            }\n            alter = !alter;\n        }\n        // console.log(\"done for grid\")\n        // this.InitGridNeighbor();\n    }\n    public filterWithinR(r: number) {\n        let c = new RVector3((this.v1.x + this.v0.x) * 0.5, (this.v1.y + this.v0.y) * 0.5, 0);\n        let temp: Hexbin[] = [];\n        let i = this.listPixel.length;\n        while (i--) {\n            let cv = getCenterVec(this.listPixel[i].bVec);\n            if (distance(c, cv) < r) {\n                temp.push(this.listPixel[i]);\n            }\n        }\n        this.listPixel = temp;\n    }\n    public filterWithinVecs(vs: RVector3[]) {\n        let temp: Hexbin[] = [];\n        let i = this.listPixel.length;\n        while (i--) {\n            let cv = getCenterVec(this.listPixel[i].bVec);\n            if (isInsideOfVecs(cv, vs)) {\n                temp.push(this.listPixel[i]);\n            }\n        }\n        this.listPixel = temp;\n    }\n    public computeHexOff() {\n        let i = this.listPixel.length;\n        while (i--) {\n            // let cv = getCenterVec(this.listPixel[i].bVec);\n            // this.listPixel[i].vec = cv;\n\n            // /*\n            // let goeCV = this.toMap(cv.x, cv.y);\n            // console.log(goeCV)\n\n            let value = 0;\n            // console.log(this.listPixel[i].bVec)\n\n            // if (CGeometry.appDrawing.graphicApp.appVisCanvas) {\n            // if (CGeometry.appDrawing.graphicApp.appVisCanvas.activeCommands.ex.dataPixelMap !== undefined) {\n\n            // let boundGeoVecs: RVector3[] = [];\n            // for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n            //     let geoCVs = this.toMap(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y);\n            //     boundGeoVecs.push(new RVector3(geoCVs[0], geoCVs[1], 0));\n            // }\n\n            // value += CGeometry.appDrawing.graphicApp.appVisCanvas.activeCommands.ex.dataPixelMap.ForwardPropagation(new RVector3(goeCV[0], goeCV[1], 0), boundGeoVecs);\n            // console.log(value);\n            // }\n\n            // console.log(goeCV);\n            // let scale = MathUtility.GetRandomArbitrary(0.1, 0.6);\n\n            // let d = GeoData.d1000.slice(1, 50);\n            // let value = 0;\n            // for (let k = 0; k < d.length; ++k) {\n            //     // let r = 1; //MathUtility.GetRandomArbitrary(0.5, 20);\n            //     // let c = ColorUtility.HexToCanvasColor('#9400D3', MathUtility.GetRandomArbitrary(0.3, 1));\n            //     // CVPoint.GetPointByGeoPos(d[i][1], d[i][0], r, c)\n\n            //     let dv = CGeometry.GetScreenVecByGeoVec(new RVector3(d[k][1], d[k][0], 0))\n\n            //     if (dv.Distance(cv) < 50) {\n            //         value += 0.1;\n            //     }\n\n            //     // if (isInsideOfVecs(dv, this.listPixel[i].bVec)) {\n            //     //     value += 0.1;\n            //     // }\n            // }\n            this.listPixel[i].temp = value;\n\n            // console.log(this.listPixel[i].bVec)\n            // console.log(value)\n\n            // */\n\n        }\n        i = this.listPixel.length;\n        let minNum = Number.MAX_SAFE_INTEGER;\n        let maxNum = Number.MIN_SAFE_INTEGER;\n        while (i--) {\n            if (minNum > this.listPixel[i].temp) { minNum = this.listPixel[i].temp; }\n            if (maxNum < this.listPixel[i].temp) { maxNum = this.listPixel[i].temp; }\n        }\n\n        i = this.listPixel.length;\n        // while (i--) {\n        //     let cv = getCenterVec(this.listPixel[i].bVec);\n        //     for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n        //         let tv = this.listPixel[i].bVec[j];\n        //         let value = remap(this.listPixel[i].temp, minNum, maxNum, 0, 1);\n        //         // let x = ((tv.x - cv.x) * this.offScale) + cv.x;\n        //         // let y = ((tv.y - cv.y) * this.offScale) + cv.y;\n        //         let x = ((tv.x - cv.x) * value) + cv.x;\n        //         let y = ((tv.y - cv.y) * value) + cv.y;\n        //         this.listPixel[i].bVec[j] = new RVector3(x, y, 0);\n        //     }\n        // }\n    }\n    public computeGeoVec() {\n        let i = this.listPixel.length;\n        while (i--) {\n            for (let j = 0; j < this.listPixel[i].bVec.length; ++j) {\n\n                // console.log(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y)\n\n                let v = this.toMap(this.listPixel[i].bVec[j].x, this.listPixel[i].bVec[j].y);\n                // this.listPixel[i].bVec[j].mPoint = v.clone();\n                this.listPixel[i].bVec[j].lng = v[0]; this.listPixel[i].bVec[j].lat = v[1];\n                this.listPixel[i].updateCenVec();\n            }\n        }\n    }\n    // ...................................................................\n    public render(ctx: CanvasRenderingContext2D) {\n        this.renderBins(ctx);\n        this.updatePre(100, 100);\n        // this.CVisPixels(ctx);\n        this.updatePost();\n\n    }\n    public updateGeoProjection() {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const vec = this.pts[i][j];\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n            }\n        }\n        // this.updatePolygonTurf();\n    }\n    public updateScreenPos() {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const v = this.pts[i][j];\n                const sp = this.toScreen(v.lng, v.lat);\n                v.x = sp[0]; v.y = sp[1];\n            }\n        }\n        // this.cen\n    }\n    public reposition(xOff: number, yOff: number) {\n        for (let i = 0; i < this.pts.length; ++i) {\n            for (let j = 0; j < this.pts[i].length; ++j) {\n                const vec = this.pts[i][j];\n                vec.x += xOff; vec.y += yOff;\n                const sp = this.toMap(vec.x, vec.y);\n                vec.lng = sp[0]; vec.lat = sp[1];\n\n            }\n        }\n        this.computeGeoVec();\n        this.updatePolygonTurf();\n    }\n    public updateActiveHexByBoudnary(boundary: any) {\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            const bin = this.listPixel[i];\n            const p = turf.points([[bin.vec.lng, bin.vec.lat]]);\n            const v = turf.pointsWithinPolygon(p,boundary);\n            // console.log(v)\n            if (v['features'].length === 0) {\n                bin.isActive = false;\n            } else {\n                bin.isActive = true;\n            }\n            \n        }\n    }\n    public renderBins(ctx: CanvasRenderingContext2D) {\n        // console.log(this.listPixel);\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            this.listPixel[i].renderPost(ctx);\n        }\n    }\n    public updatePre(x: number, y: number) {\n        let i = this.listPixel.length;\n        while (i--) {\n            this.listPixel[i].isHover = false;\n            this.listPixel[i].isVisit = false;\n        }\n        i = this.listPixel.length;\n        while (i--) {\n            this.listPixel[i].updateWithMouseInteraction(x, y);\n        }\n    }\n    public updatePost() {\n        // let i = this.listPixel.length;\n        // while (i--) {\n        //     this.listPixel[i].isHover = false;\n        //     this.listPixel[i].isVisit = false;\n        // }\n    }\n    public updatePolygonTurf() {\n        for (let i = 0; i < this.listPixel.length; ++i) {\n            this.listPixel[i].updatePolygon();\n        }\n    }\n}\n\n\nexport class Hexbin {\n    public map: HexMapDynamic;\n    public vec: RVector3;\n    public nPix: Hexbin[] = [];\n    public bVec: RVector3[] = [];\n    public i: number = -1;\n    public j: number = -1;\n    public k: number = -1;\n    public id: number;\n    public color: string;\n\n    public strokeStyle: string;\n    public isVisit: boolean;\n    public isOver: boolean;\n    public data: {};\n    public temp: number;\n    public polygonTurfOriginal: Polygon | any;\n    public isActive: boolean = true;\n\n    constructor(map: HexMapDynamic, v: RVector3 = new RVector3(0, 0, 0), color: string = '#1267B0') {\n        this.map = map;\n        this.vec = v;\n        // this.geoVec = v;\n        this.updateGoeVec();\n        this.nPix = [];\n        this.bVec = [];\n        this.i = -1;\n        this.j = -1;\n        this.k = -1;\n        this.color = color; // ColorUtility.HexToCanvasColor(color, MathUtility.GetRandomArbitrary(0.01, 0.90));\n        // this.strokeStyle = ColorUtility.HexToCanvasColor('#ffffff', MathUtility.GetRandomArbitrary(0.5, 0.90));\n        // this.id = Hexbin.GetID();\n        this.isOver = false;\n        this.isVisit = false;\n\n        this.data = {};\n    }\n    public get isHover() {\n        return this.isOver;\n    }\n    public set isHover(v: boolean) {\n        if (!this.isActive) { return; }\n\n        // console.log(this.nPix.length)\n        if (this.isVisit) { return; }\n        this.isOver = v;\n\n        if (!this.isOver) { return; }\n        for (let i = 0; i < this.nPix.length; ++i) {\n            this.nPix[i].isOver = v;\n            this.nPix[i].isVisit = v;\n        }\n\n    }\n    public updateWithMouseInteraction(x: number, y: number) {\n        if (!this.isActive) { return; }\n\n        // if (CGeometry.appDrawing.graphicApp.ACController.isViewChanging) {\n        this.updateScreenVec();\n        for (let i = 0; i < this.bVec.length; ++i) {\n            //  = CVPoint.GetScreenVec(this.bVec[i].mPoint)\n            // let v = this.map.toScreen(this.bVec[i].lng, this.bVec[i].lat);\n            // this.bVec[i].x = v[0]; this.bVec[i].y = v[1];\n        }\n        // }\n        this.isMouseInside(x, y);\n    }\n    public isMouseInside(x: number, y: number) {\n        if (!this.isActive) { return; }\n\n        if (this.isVisit) { return false; }\n        if (isInsideOfVecs(new RVector3(x, y, 0), this.bVec)) {\n            this.isHover = true; return true;\n        } else {\n            this.isHover = false; return false;\n        }\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        if (!this.isActive) { return; }\n\n        // console.log(this.bVec)\n        // console.log(this.vec.x, this.vec.y)\n        // \n        // ctx.arc(this.vec.x, this.vec.y, 10, 0, 3.14, false)\n        // ctx.globalAlpha = 1;\n\n        if (this.map.referPoint) {\n            const pts = turf.pointsWithinPolygon(this.map.referPoint, this.polygonTurfOriginal)\n            // console.log(pts['features'].length);\n\n            let col = (pts['features'].length * 0.1);\n            // col = col > 1.0 ? 1.0 : 0.0;\n            // console.log(col)\n\n            ctx.beginPath();\n            ctx.arc(this.vec.x, this.vec.y, 1, 0, 2 * Math.PI, false);\n            ctx.closePath();\n            ctx.fillStyle = `rgba(${col}, 0, 0, 1)`; // ColorUtility.HexToCanvasColor('#ffffff', 0.2); //style.fillColor\n            ctx.fill();\n            ctx.lineWidth = 2\n            ctx.strokeStyle = 'black'\n            // ctx.stroke();\n            // ctx.globalCompositeOperation = 'multiply';\n            // ctx.globalCompositeOperation = COLORBLENDING.MULTIPLY;\n            ctx.lineWidth = 0.5;\n\n            // console.log(this.bVec);\n\n            ctx.beginPath();\n            ctx.moveTo(this.bVec[0].x, this.bVec[0].y);\n            for (let i = 1; i < this.bVec.length; ++i) {\n                // console.log(this.bVec[i].x, this.bVec[i].y)\n                ctx.lineTo(this.bVec[i].x, this.bVec[i].y);\n            }\n            // ctx.moveTo(this.bVec[0].x, this.bVec[0].y);\n            ctx.closePath();\n\n            if (this.isOver) {\n                ctx.fillStyle = `rgba(255, 0, 0, ${col})`;\n            } else {\n                // ctx.fillStyle = this.color; // ColorUtility.HexToCanvasColor(this.c, MathUtility.GetRandomArbitrary(0.1, 0.9));\n                ctx.fillStyle = `rgba(255, 0, 0, ${col})`; // CGeometry.appDrawing.cGeometryRender.themeDrawing.cpolylineStyle.normal.fillColor;\n\n            }\n            ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n\n            ctx.stroke();\n            ctx.fill();\n\n            // ctx.globalCompositeOperation = 'source-over'; // COLORBLENDING.SOURCE_OVER;\n            // this.isCapturedbyPixel = false;\n        }\n    }\n    public updateGoeVec() {\n        let m = this.map.toMap(this.vec.x, this.vec.y);\n        this.vec.lng = m[0]; this.vec.lat = m[1];\n    }\n    public updateScreenVec() {\n        let p = this.map.toScreen(this.vec.lng, this.vec.lat);\n        this.vec.x = p[0]; this.vec.y = p[1];\n    }\n    public updateCenVec() {\n        if (!this.isActive) { return; }\n\n        this.vec = getCenterVec(this.bVec);\n        this.updateScreenVec();\n    }\n    public updatePolygon() {\n        // if (!this.isActive) { return; }\n\n        const pts = [];\n        for (let i = 0; i < this.bVec.length; i++) {\n            pts.push([this.bVec[i].lng, this.bVec[i].lat]);\n        }\n        pts.push([this.bVec[0].lng, this.bVec[0].lat]);\n\n        this.polygonTurfOriginal = turf.polygon([pts]);\n    }\n\n}","\nimport { Scene } from '../../../Scene';\nimport { GeometryBase } from '../Base/GeometryBase';\nimport { RVector3, distance, isInsideOfVecs, isInsideEllipse, TYPE_GEOMETRY } from '../../../lib';\n\nimport { AreaGeometry } from './Geometry';\nimport { Renderer } from './Renderer';\nimport { Transform } from './Transform';\n\nimport { HexMapDynamic } from '../../../lib/util/HexmapDynamic';\n\nimport * as turf from '@turf/turf';\n\nexport class Area extends GeometryBase {\n    public renderer: Renderer;\n    public transform: Transform;\n    public geometry: AreaGeometry;\n\n    public TYPE = TYPE_GEOMETRY.RECT;\n\n    public vec: RVector3;\n\n    public cp: RVector3[] = [];\n\n    public hexmap: HexMapDynamic | undefined = undefined;\n\n    constructor(scene: Scene, lng: number, lat: number, width: number = 400, height: number = 400, TYPE = TYPE_GEOMETRY.RECT) {\n        super(scene);\n\n        this.TYPE = TYPE;\n        const mp = this.scene.common.toScreen(lng, lat);\n\n        this.vec = new RVector3(mp[0], mp[1]);\n        this.geometry = new AreaGeometry(this.vec, width, height);\n\n        this.renderer = new Renderer(this);\n        this.transform = new Transform(this);\n        this.updateGeoProjection();\n\n        // this.initHex();\n    }\n    public initHex() {\n        this.hexmap = new HexMapDynamic(\n            this.geometry.vsRect[0], this.geometry.vsRect[2], 16, 20,\n            this.scene.common.toMap,\n            this.scene.common.toScreen,\n        );\n    }\n    public isInside(x: number, y: number) {\n        const mVec = new RVector3(x, y);\n        this.capturedVecId = -1;\n\n        for (let i = 0; i < this.transform.cVecGhost.length; ++i) {\n            if (distance(this.transform.cVecGhost[i], (mVec)) < 12) {\n                this.capturedVecId = i + 4;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        for (let i = 0; i < this.geometry.vsRect.length; ++i) {\n            if (distance(this.geometry.vsRect[i], (mVec)) < 12) {\n                this.capturedVecId = i;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n\n        if (this.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            if (isInsideEllipse(this.vec, mVec, this.geometry.width * 0.5, this.geometry.height * 0.5)) {\n                this.isHovered = true;\n                return true;\n            }\n        } else {\n            if (isInsideOfVecs(mVec, this.geometry.vsRect)) {\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        this.isHovered = false;\n        return false;\n    }\n    public translate(x: number, y: number): void {\n        this.transform.translate(x, y);\n    }\n    public update() {\n        if (this.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            this.updateScreenPos();\n            this.transform.updateGhostVecs();\n        }\n\n    }\n    public shiftType() {\n        if (this.TYPE === TYPE_GEOMETRY.CIRCLE) {\n            this.TYPE = TYPE_GEOMETRY.RECT;\n        } else if (this.TYPE === TYPE_GEOMETRY.RECT) {\n            this.TYPE = TYPE_GEOMETRY.CIRCLE;\n        }\n        this.updateGeoProjection();\n    }\n    public onMouseUp() {\n\n        if (this.isHovered) {\n            this.capturedVecId = -1;\n            this.updateGeoProjection();\n            // if ()\n            // console.log(this.isSelected);\n            if (this.captureNeeded) {\n                this.scene.common.captureScene();\n                this.captureNeeded = false;\n            }\n        }\n    }\n    public onMouseClick() {\n        this.isSelected = !this.isSelected;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderer.renderPost(ctx);\n\n        if (this.hasAnimation) {\n            this.t += 0.2;\n        }\n\n        if (this.hexmap) { \n            this.hexmap.referPoint = this.referPoint;\n            this.hexmap.render(ctx); \n        }\n    }\n    public updateScreenPos() {\n        this.geometry.updateScreen(this.scene.common.toScreen);\n\n        // console.log('screen');\n        if (this.hexmap) {\n            this.hexmap.updateScreenPos();\n        }\n    }\n    public updateScreenPosCircle() {\n        this.geometry.updateScreenPosCircle();\n\n    }\n    public updateGeoProjection() {\n        this.geometry.updateProjection(this.scene.common.toMap);\n\n        // console.log('geo');\n\n        \n\n        this.updatePolygonTurf();\n\n        if (this.hexmap) {\n            this.hexmap.updateGeoProjection();\n        }\n\n\n        this.updateNeeded = true;\n    }\n    public toJson() {\n        return {\n            TYPE: this.TYPE,\n            vs: [{ lng: this.geometry.vsRect[0].lng, lat: this.geometry.vsRect[0].lat }, { lng: this.geometry.vsRect[2].lng, lat: this.geometry.vsRect[2].lat }],\n        }\n    }\n    private updatePolygonTurf() {\n        const pts = [];\n\n        if (this.TYPE === TYPE_GEOMETRY.RECT) {\n            for (let i = 0; i < this.geometry.vsRect.length; i++) {\n                pts.push([this.geometry.vsRect[i].lng, this.geometry.vsRect[i].lat]);\n            }\n            pts.push([this.geometry.vsRect[0].lng, this.geometry.vsRect[0].lat]);\n        } else {\n            for (let i = 0; i < this.geometry.vsCircle.length; i++) {\n                pts.push([this.geometry.vsCircle[i].lng, this.geometry.vsCircle[i].lat]);\n            }\n            pts.push([this.geometry.vsCircle[0].lng, this.geometry.vsCircle[0].lat]);\n        }\n        // console.log(this.polygonTurfOriginal);\n        this.polygonTurfOriginal = turf.polygon([pts]) as any;\n\n\n    }\n    public updateWidthHight(width: number, height: number) {\n        this.geometry.updateWidthHight(width, height);\n    }\n    public toggleHexmap() {\n        if (this.hexmap) {\n            this.hexmap = undefined\n        }else {\n            this.initHex();\n        }\n    }\n}\n","import { RVector3, closestPointOnLine } from '../../../../lib';\n\nexport class AreaPolygonGeometry {\n\n    public vs: RVector3[] = [];\n    public cv: RVector3 = new RVector3(0, 0, 0);\n\n    public v0: RVector3 = new RVector3(Number.MAX_VALUE, Number.MAX_VALUE);\n    public v1: RVector3 = new RVector3(Number.MIN_VALUE, Number.MIN_VALUE);\n\n    constructor() {\n\n    }\n\n    public push(x: number, y: number, lng: number, lat: number) {\n        const v = new RVector3(x, y, 0);\n        v.lat = lat;\n        v.lng = lng;\n        this.vs.push(v);\n        // console.log(this.vs);\n\n    }\n    public removeLast() {\n        this.vs.pop();\n    }\n    public updateScreen(toScreen: (x: number, y: number) => number[]) {\n        // console.log('update screen pos');\n        let sp;\n        for (let i = 0; i < this.vs.length; ++i) {\n            sp = toScreen(this.vs[i].lng, this.vs[i].lat);\n            this.vs[i].x = sp[0];\n            this.vs[i].y = sp[1];\n        }\n        this.updateCenterVec();\n    }\n    private resetBoundary() {\n        this.v0.x = Number.MAX_VALUE; this.v0.y = Number.MAX_VALUE;\n        this.v1.x = Number.MIN_VALUE; this.v1.y = Number.MIN_VALUE;\n    }\n    public updateProjection(toMap: (x: number, y: number) => number[]) {\n        // console.log('update map pos');\n        let mp;\n        for (let i = 0; i < this.vs.length; ++i) {\n            mp = toMap(this.vs[i].x, this.vs[i].y);\n            this.vs[i].lng = mp[0];\n            this.vs[i].lat = mp[1];\n        }\n        this.updateCenterVec();\n    }\n    public updateCenterVec() {\n        this.resetBoundary();\n        let xSum = 0, ySum = 0;\n        for (let i = 0; i < this.vs.length; ++i) {\n            xSum += this.vs[i].x;\n            ySum += this.vs[i].y;\n\n            if (this.v0.x > this.vs[i].x) { this.v0.x = this.vs[i].x; }\n            if (this.v0.y > this.vs[i].y) { this.v0.y = this.vs[i].y; }\n            if (this.v1.x < this.vs[i].x) { this.v1.x = this.vs[i].x; }\n            if (this.v1.y < this.vs[i].y) { this.v1.y = this.vs[i].y; }\n        }\n        this.cv.x = xSum / this.vs.length;\n        this.cv.y = ySum / this.vs.length;\n    }\n    public removeVecByIndex(index: number) {\n        this.vs.splice(index, 1);\n    }\n    public insertVec(x: number, y: number) {\n        const mp = new RVector3(x, y);\n        const sel = { x: 0, y: 0, dis: Number.MAX_VALUE, id: -1 };\n\n        for(let i = 0 ; i < this.vs.length -1; ++i) {\n            const result = closestPointOnLine(mp, this.vs[i], this.vs[1+i]);\n            if (sel.dis > result.dis) {\n                sel.x = result.x; sel.y = result.y; sel.dis = result.dis; sel.id = i;\n            }\n        }\n        const result = closestPointOnLine(mp, this.vs[this.vs.length -1], this.vs[0]);\n        if (sel.dis > result.dis) {\n            sel.x = result.x; sel.y = result.y; sel.dis = result.dis; sel.id = this.vs.length -1;\n        }\n\n        if (sel.dis < 10) {\n            this.vs.splice(sel.id + 1, 0, new RVector3(sel.x, sel.y));\n            // console.log('insertPT');\n            return true;\n        }\n        return false;\n    }\n    public toJson() {\n        const vs = [];\n        for (let i = 0; i < this.vs.length; ++i) {\n            vs.push({ lng: this.vs[i].lng, lat: this.vs[i].lat });\n        }\n        return vs;\n    }\n}","import * as turf from '@turf/turf';\nimport { renderControlPoint, difference, computePathPolygon, LANDUSE_TYPE_MAPPING, getAngleByTwoVectorsRadian, RVector3, normalize } from '../../../../lib';\nimport { AreaPolygon } from '..';\n\n\nexport class Renderer {\n    public host: AreaPolygon;\n    public pathCroppedArea: Path2D\n    constructor(host: AreaPolygon) {\n        this.host = host;\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        // console.log(this.host.capturedVecId, this.host.isSelected, this.host.isHovered);\n        if (this.host.geometry.vs.length > 0) {\n            this.renderAreaBounding(ctx);\n            this.renderCroppedArea(ctx);\n            this.renderProperties(ctx);\n        }\n\n\n        if (this.host.underConstruction || this.host.isHovered || this.host.isSelected) {\n            renderControlPoint(ctx, this.host.geometry.vs);\n            this.renderDim(ctx);\n            if (this.host.isSelected) {\n                this.renderSelected(ctx);\n            }\n        }\n\n\n        if (this.host.capturedVecId > -1) {\n            ctx.beginPath();\n            ctx.arc(this.host.geometry.vs[this.host.capturedVecId].x, this.host.geometry.vs[this.host.capturedVecId].y, 10, 0, Math.PI * 2.0);\n            ctx.closePath();\n            ctx.fill();\n        }\n\n    }\n    public renderCroppedArea(ctx: CanvasRenderingContext2D) {\n\n        if (this.host.geometry.vs.length < 3) {\n            this.pathCroppedArea = new Path2D();\n            this.pathCroppedArea.moveTo(this.host.geometry.vs[0].x, this.host.geometry.vs[0].y);\n            for (let i = 1; i < this.host.geometry.vs.length; ++i) {\n                this.pathCroppedArea.lineTo(this.host.geometry.vs[i].x, this.host.geometry.vs[i].y);\n            }\n            this.pathCroppedArea.closePath();\n            // console.log(this.host.geometry.vs.length);\n            this.host.updateNeeded = true;\n\n        } else {\n            if (this.host.updateNeeded || this.host.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n                const diff = difference(this.host.polygonTurfOriginal, this.host.scene.polygonsDifference, this.host.scene.ids);\n                this.host.polygonTurfSubtracted = diff;\n                this.pathCroppedArea = computePathPolygon(diff, this.host.scene.common.toScreen);\n                this.host.updateNeeded = false;\n                // console.log('updating');\n            }\n        }\n\n\n        ctx.setLineDash([5, 7]);\n        ctx.lineDashOffset = this.host.t;\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = '#fff';\n\n        const op = 0.2 + Math.sin(this.host.t * 0.1) * 0.09;\n        ctx.fillStyle = `rgba(0, 255, 255, ${op} )`;\n\n        ctx.fill(this.pathCroppedArea, 'evenodd');\n        ctx.stroke(this.pathCroppedArea);\n        ctx.setLineDash([]);\n    }\n\n    public renderSelected(ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'rgba(255, 255, 255, 1)';\n        ctx.lineWidth = 1;\n\n        const offset = 13 + Math.sin(this.host.t * 0.2);\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.v0.x - offset, this.host.geometry.v0.y + offset);\n        ctx.lineTo(this.host.geometry.v0.x - offset, this.host.geometry.v0.y - offset);\n        ctx.lineTo(this.host.geometry.v0.x + offset, this.host.geometry.v0.y - offset);\n\n        ctx.moveTo(this.host.geometry.v1.x + offset, this.host.geometry.v0.y + offset);\n        ctx.lineTo(this.host.geometry.v1.x + offset, this.host.geometry.v0.y - offset);\n        ctx.lineTo(this.host.geometry.v1.x - offset, this.host.geometry.v0.y - offset);\n\n        ctx.moveTo(this.host.geometry.v1.x + offset, this.host.geometry.v1.y - offset);\n        ctx.lineTo(this.host.geometry.v1.x + offset, this.host.geometry.v1.y + offset);\n        ctx.lineTo(this.host.geometry.v1.x - offset, this.host.geometry.v1.y + offset);\n\n        ctx.moveTo(this.host.geometry.v0.x - offset, this.host.geometry.v1.y - offset);\n        ctx.lineTo(this.host.geometry.v0.x - offset, this.host.geometry.v1.y + offset);\n        ctx.lineTo(this.host.geometry.v0.x + offset, this.host.geometry.v1.y + offset);\n\n        ctx.stroke();\n\n        // ctx.beginPath();\n        // ctx.moveTo(this.host.geometry.vec.x, this.host.geometry.vec.y);\n        // ctx.lineTo(this.host.geometry.vsRect[1].x, this.host.geometry.vec.y);\n        // ctx.stroke();\n    }\n    private renderAreaBounding(ctx: CanvasRenderingContext2D) {\n        ctx.beginPath();\n        ctx.moveTo(this.host.geometry.vs[0].x, this.host.geometry.vs[0].y);\n        for (let i = 1; i < this.host.geometry.vs.length; ++i) {\n            ctx.lineTo(this.host.geometry.vs[i].x, this.host.geometry.vs[i].y);\n        }\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n        ctx.stroke();\n    }\n    private renderProperties(ctx: CanvasRenderingContext2D) {\n        if (this.host.geometry.vs.length < 3) { return; }\n        // console.log(this.host.geometry.vs, this.host.polygonTurfSubtracted)\n        // if (this.host.polygonTurfSubtracted === undefined) { return; }\n\n        const area = turf.convertArea(turf.area(this.host.polygonTurfSubtracted), 'meters', 'miles')\n        // console.log(area)\n        const x = this.host.geometry.v0.x + ((this.host.geometry.v1.x - this.host.geometry.v0.x) * 0.5);\n        const y = this.host.geometry.v0.y;\n\n        ctx.textAlign = 'center';\n        ctx.font = '18px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`ID: ${this.host.id.split('-')[0]}`, x, y - 90);\n\n        ctx.fillText(`Area in square miles: ${area.toFixed(5)}`, x, y - 60);\n        // console.log(this.host.cp.x, 50 - this.host.cp.y - this.host.geometry.height * 0.5);\n\n        const pts = turf.pointsWithinPolygon(this.host.scene.points, this.host.polygonTurfSubtracted)\n        // console.log(pts);\n        let r = 0, b = 0, other = 0;\n        for (let i = 0; i < pts.features.length; ++i) {\n            if (pts.features[i].properties['landuse'] === 'R') {\n                r += 1;\n            } else if (pts.features[i].properties['landuse'] === 'B') {\n                b += 1;\n            } else {\n                other += 1;\n            }\n        }\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, x - 120, y - 25);\n\n        ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, x + 28, y - 25);\n\n        ctx.fillStyle = 'rgb(0, 128, 0)';\n        ctx.fillText(`Other: ${other}`, x + 140, y - 25);\n        // console.log(r, b, other)\n\n        // ctx.fillStyle = LANDUSE_TYPE_MAPPING.R.color\n        // ctx.fillText(`${LANDUSE_TYPE_MAPPING.R.text}: ${r},`, this.host.vec.x - 120, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        // ctx.fillStyle = LANDUSE_TYPE_MAPPING.B.color\n        // ctx.fillText(`${LANDUSE_TYPE_MAPPING.B.text}: ${b},`, this.host.vec.x + 28, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n\n        // ctx.fillStyle = 'rgb(0, 128, 0)';\n        // ctx.fillText(`Other: ${other}`, this.host.vec.x + 140, this.host.vec.y - 25 - this.host.geometry.height * 0.5);\n    }\n    private renderDim(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n\n        const vs = this.host.geometry.vs;\n\n        let v0 = new RVector3(1, 0, 0);\n\n        for (let i = 0; i < vs.length - 1; ++i) {\n\n            let line = turf.lineString([[vs[i].lng, vs[i].lat], [vs[1 + i].lng, vs[1 + i].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n            let x = vs[i].x + ((vs[i + 1].x - vs[i].x) * 0.5);\n            let y = vs[i].y + ((vs[i + 1].y - vs[i].y) * 0.5);\n\n            let v1 = normalize(new RVector3(vs[i].x - vs[i + 1].x, vs[i].y - vs[i + 1].y, 0));\n            let deg = getAngleByTwoVectorsRadian(v0, v1);\n\n            if (vs[i].y < vs[i + 1].y) { deg *= -1; }\n            // console.log(deg)\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(deg);\n            ctx.fillText(`${length.toFixed(5)} mi`, 0, 0);\n            ctx.restore();\n        }\n\n        if (vs.length > 2) {\n            let line = turf.lineString([[vs[vs.length - 1].lng, vs[vs.length - 1].lat], [vs[0].lng, vs[0].lat]]);\n            let length = turf.length(line, { units: 'miles' });\n            let x = vs[vs.length - 1].x + ((vs[0].x - vs[vs.length - 1].x) * 0.5);\n            let y = vs[vs.length - 1].y + ((vs[0].y - vs[vs.length - 1].y) * 0.5);\n\n            let v1 = normalize(new RVector3(vs[vs.length - 1].x - vs[0].x, vs[vs.length - 1].y - vs[0].y, 0));\n            let deg = getAngleByTwoVectorsRadian(v0, v1);\n            \n            if (vs[vs.length - 1].y < vs[0].y) { deg *= -1; }\n\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(deg);\n            ctx.fillText(`${length.toFixed(5)} mi`, 0, 0);\n            ctx.restore();\n        }\n    }\n}","import * as turf from '@turf/turf';\n\nimport { AreaPolygon } from '..';\n\n\nexport class Transform {\n    public host: AreaPolygon;\n    public pathCroppedArea: Path2D\n    constructor(host: AreaPolygon) {\n        this.host = host;\n    }\n    public translate(x: number, y: number): void {\n        this.host.captureNeeded = true;\n\n        const preX = this.host.scene.solution.activeCommander.mp[0] - this.host.scene.solution.activeCommander.mpPre[0];\n        const preY = this.host.scene.solution.activeCommander.mp[1] - this.host.scene.solution.activeCommander.mpPre[1];\n\n        if (this.host.capturedVecId > -1) {\n\n            // if (this.host.capturedVecId < this.host.geometry.vsRect.length) {\n            this.host.geometry.vs[this.host.capturedVecId].x += preX;\n            this.host.geometry.vs[this.host.capturedVecId].y += preY;\n            // }\n\n\n            this.host.updateGeoProjection();\n            return;\n        }\n\n        // this.host.vec.x += preX;\n        // this.host.vec.y += preY;\n        for (let i = 0; i < this.host.geometry.vs.length; ++i) {\n            this.host.geometry.vs[i].x += preX;\n            this.host.geometry.vs[i].y += preY;\n        }\n\n        this.host.updateGeoProjection();\n    }\n}","import * as turf from '@turf/turf';\n\nimport { TYPE_GEOMETRY } from '../../../lib';\nimport { Scene } from '../../../Scene';\nimport { GeometryBase } from '../Base/GeometryBase';\nimport { AreaPolygonGeometry } from './Geometry';\nimport { Renderer } from './Renderer';\nimport { Transform } from './Transform';\nimport { isInsideOfVecs, distance, RVector3 } from '../../../lib';\n\nexport class AreaPolygon extends GeometryBase {\n    public renderer: Renderer;\n    public transform: Transform;\n    public geometry: AreaPolygonGeometry;\n\n    public underConstruction = true;\n    constructor(scene: Scene, vs: RVector3[] | undefined = undefined) {\n        super(scene)\n\n        this.TYPE = TYPE_GEOMETRY.POLYGON;\n        this.geometry = new AreaPolygonGeometry();\n        this.renderer = new Renderer(this);\n        this.transform = new Transform(this);\n\n        if (vs !== undefined) {\n            this.fromJson(vs);\n        }\n    }\n    public renderPost(ctx: CanvasRenderingContext2D) {\n        this.renderer.renderPost(ctx);\n\n        if (this.hasAnimation) {\n            this.t += 0.2;\n        }\n    }\n    public isInside(x: number, y: number) {\n        const mVec = new RVector3(x, y);\n        this.capturedVecId = -1;\n\n        for (let i = 0; i < this.geometry.vs.length; ++i) {\n            if (distance(this.geometry.vs[i], (mVec)) < 12) {\n                this.capturedVecId = i;\n                this.isHovered = true;\n                return true;\n            }\n        }\n\n        if (isInsideOfVecs(mVec, this.geometry.vs)) {\n            this.isHovered = true;\n            return true;\n        }\n\n        this.isHovered = false;\n        return false;\n    }\n    public translate(x: number, y: number): void {\n        this.transform.translate(x, y);\n    }\n    public update(): void {\n        if (this.scene.solution.rendererWrapper.mapBoxWrapper.map.isMoving()) {\n            this.geometry.updateScreen(this.scene.common.toScreen);\n        }\n    }\n    public onMouseClick(e) {\n\n        if (this.underConstruction) {\n            if (this.geometry.vs.length === 0) {\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n            } else {\n                this.geometry.push(e.point.x, e.point.y, e.lngLat.lng, e.lngLat.lat);\n            }\n            if (this.geometry.vs.length > 2) {\n                this.geometry.updateCenterVec();\n                this.updatePolygonTurf();\n            }\n        } else {\n\n            // console.log(this.capturedVecId);\n            if (this.capturedVecId > -1) {\n                this.isSelected = true;\n                return;\n            }\n\n            // if (this.isHovered) {\n                // this.isSelected = true;\n            if (this.insertPt(e.point.x, e.point.y)) {\n                this.isSelected = true;\n                return;\n            }\n            //     return;\n            // }\n\n            this.isSelected = !this.isSelected;\n\n\n        }\n    }\n    public insertPt(x: number, y: number) {\n        return this.geometry.insertVec(x, y);\n    }\n    public updateGhostPos(x: number, y: number) {\n        if (this.geometry.vs.length === 0) { return; }\n        this.geometry.vs[this.geometry.vs.length - 1].x = x;\n        this.geometry.vs[this.geometry.vs.length - 1].y = y;\n\n        const mp = this.scene.common.toMap(x, y);\n        this.geometry.vs[this.geometry.vs.length - 1].lng = mp[0];\n        this.geometry.vs[this.geometry.vs.length - 1].lat = mp[1];\n\n        if (this.geometry.vs.length > 2) {\n            this.geometry.updateCenterVec();\n            this.updatePolygonTurf();\n        }\n    }\n    public onMouseDoubleClick(e) {\n        this.removeVertexLastVertex();\n        this.removeVertexLastVertex();\n        this.updateGeoProjection();\n        this.underConstruction = false;\n        this.scene.captured = undefined;\n        this.scene.common.captureScene();\n    }\n    public onMouseUp() {\n\n        if (this.isHovered) {\n            this.capturedVecId = -1;\n            this.updateGeoProjection();\n            // if ()\n            // console.log(this.isSelected);\n            if (this.captureNeeded) {\n                this.scene.common.captureScene();\n                this.captureNeeded = false;\n            }\n        }\n    }\n\n    public removeVertexLastVertex(): void {\n        this.geometry.removeLast();\n        if (this.geometry.vs.length < 2) {\n            this.remove();\n        }\n        // console.log(this.geometry.cv);\n        this.updatePolygonTurf()\n    }\n    public updateGeoProjection() {\n        this.geometry.updateProjection(this.scene.common.toMap);\n        this.updatePolygonTurf();\n\n    }\n    private updatePolygonTurf() {\n        if (this.geometry.vs.length < 3) { return; }\n        const pts = [];\n        for (let i = 0; i < this.geometry.vs.length; i++) {\n            pts.push([this.geometry.vs[i].lng, this.geometry.vs[i].lat]);\n        }\n        pts.push([this.geometry.vs[0].lng, this.geometry.vs[0].lat]);\n\n\n        this.polygonTurfOriginal = turf.polygon([pts]) as any;\n        this.updateNeeded = true;\n        // console.log('updatePolygonTurf')\n    }\n    public toJson() {\n        return {\n            TYPE: this.TYPE,\n            vs: this.geometry.toJson(),\n        };\n    }\n    public fromJson(vs: RVector3[]) {\n        for (let i = 0; i < vs.length; ++i) {\n            const sp = this.scene.common.toScreen(vs[i].lng, vs[i].lat);\n            const v = new RVector3(sp[0], sp[1], 0);\n            v.lng = vs[i].lng;\n            v.lat = vs[i].lat;\n            this.geometry.vs.push(v);\n        }\n        this.updatePolygonTurf();\n    }\n    public remove(): void {\n        if (this.capturedVecId > -1) {\n            this.geometry.removeVecByIndex(this.capturedVecId);\n            this.updateGeoProjection();\n            this.capturedVecId = -1;\n            return;\n        }\n        this.scene.remove(this);\n    }\n}","import { GeometryBase } from '../Geometry/GeometryCanvas/Base/GeometryBase';\nimport { Area, AreaPolygon } from '../Geometry/GeometryCanvas';\nimport { TYPE_GEOMETRY , getJSONFromURL } from '../lib'\nimport { Solution } from '../';\n\nexport class ACCommon {\n    public solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    public renderForceWithUpdate() {\n        this.solution.rendererWrapper.renderer.renderForce();\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].updateNeeded = true;\n        }\n    }\n    public downloadScreen() {\n        this.solution.rendererWrapper.downloadScreen();\n    }\n    public enablePan() {\n        this.solution.rendererWrapper.mapBoxWrapper.map.dragPan.enable();\n    }\n    public disablePan() {\n        this.solution.rendererWrapper.mapBoxWrapper.map.dragPan.disable();\n    }\n    public zoom = (z: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.zoom(z)\n    }\n    public flyTo = (lng: number, lat: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.flyTo(lng, lat)\n    }\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.center(lng, lat);\n    }\n    public toMap = (x: number, y: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.toMap(x, y);\n    }\n    public toScreen = (lon: number, lat: number) => {\n        return this.solution.rendererWrapper.mapBoxWrapper.toScreen(lon, lat);\n    }\n    public async loadDataLocal(path = 'funded_census_blocks.geojson') {\n        return getJSONFromURL(process.env.PUBLIC_URL + '/static/dataDummyReady/' + path);\n    }\n\n    public addScatterLayer(data: any) {\n        return this.solution.rendererWrapper.deckGL.addScatterLayer(data);\n    }\n    public addArcLayer(data: any) {\n        return this.solution.rendererWrapper.deckGL.addArcLayer(data);\n    }\n    public addPolygonLayer(data: any, onClick: (info, event) => void) {\n        return this.solution.rendererWrapper.deckGL.addPolygonLayer(data, onClick);\n    }\n    public addShape(type = TYPE_GEOMETRY.RECT) {\n        this.renderForce();\n        if (type === TYPE_GEOMETRY.POLYGON) {\n            this.solution.scene.captured = new AreaPolygon(this.solution.scene);\n            this.solution.activeCommander.drawMode = true;\n\n        } else {\n            const mp = this.toMap(this.solution.rendererWrapper.renderer.canvas.width * 0.5, this.solution.rendererWrapper.renderer.canvas.height * 0.5);\n            new Area(this.solution.scene, mp[0], mp[1], 200, 200);\n        }\n        this.captureScene();\n    }\n    public shiftShapeType() {\n        if (this.solution.scene.areas.length > 0) {\n\n            for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n                if (this.solution.scene.areas[i].TYPE !== TYPE_GEOMETRY.POLYGON && this.solution.scene.areas[i].isSelected) {\n                    this.solution.scene.areas[i].shiftType();\n                }\n            }\n\n            this.captureScene();\n        }\n    }\n    public toggleAnimation() {\n        // this.solution.scene.captured.hasAnimation = !this.solution.scene.captured.hasAnimation;\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isSelected) {\n                this.solution.scene.areas[i].hasAnimation = !this.solution.scene.areas[i].hasAnimation;\n            }\n        }\n    }\n    public deSelectedAll() {\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].isSelected = false;\n        }\n    }\n    public removeSelected() {\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isSelected) {\n                this.solution.scene.areas[i].remove();\n            }\n        }\n    }\n    public checkHoverArea(x: number, y: number): GeometryBase | undefined {\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            if (this.solution.scene.areas[i].isInside(x, y)) {\n                return this.solution.scene.areas[i];\n            }\n        }\n        return undefined;\n    }\n    public pickObject(obj: any) {\n        // console.log('index', obj.index);\n        // console.log(obj);\n    }\n    public getViewState() {\n        return this.solution.rendererWrapper.mapBoxWrapper.getViewState();\n    }\n    public getData() {\n        let areas = [];\n        //  console.log(this.solution.scene.areas);\n\n        for (let i = 0; i < this.solution.scene.areas.length; ++i) {\n            areas.push(this.solution.scene.areas[i].toJson())\n        }\n\n        return {\n            areas: areas,\n            extent: this.getViewState()\n        }\n    }\n    public captureScene() {\n        return this.solution.scene.stateManager.captureState();\n    }\n    public onExtentDone() {\n        // this.captureScene();\n    }\n    public renderForce() {\n        this.solution.rendererWrapper.renderer.renderForce();\n    }\n    public undo() {\n        this.renderForce();\n        return this.solution.scene.stateManager.undo();\n    }\n    public redo() {\n        this.renderForce();\n        return this.solution.scene.stateManager.redo();\n    }\n    public populateArea(data: any) {\n        this.solution.scene.areas = []\n\n        for (let i = 0; i < data.areas.length; ++i) {\n\n            const area = data.areas[i];\n            if (area.TYPE !== TYPE_GEOMETRY.POLYGON) {\n                const p0 = this.toScreen(area.vs[0].lng, area.vs[0].lat);\n                const p1 = this.toScreen(area.vs[1].lng, area.vs[1].lat);\n\n                const width = Math.abs(p1[0] - p0[0]);\n                const height = Math.abs(p1[1] - p0[1]);\n\n                // // console.log(width, height)\n\n                const lng = (area.vs[0].lng + area.vs[1].lng) * 0.5;\n                const lat = (area.vs[0].lat + area.vs[1].lat) * 0.5;\n\n                new Area(this.solution.scene, lng, lat, width, height, TYPE_GEOMETRY[area.TYPE]);\n            } else {\n                const pg = new AreaPolygon(this.solution.scene, area.vs);\n                pg.underConstruction = false;\n\n            }\n        }\n        this.solution.activeCommander.drawMode = false;\n        this.solution.scene.captured = undefined;\n\n        if (data.extent) {\n            this.center(data.extent.center['lng'], data.extent.center['lat']);\n            this.zoom(data.extent.zoom);\n        }\n        // console.log(this);\n    }\n    public toggleHexmap() {\n        for(let i = 0 ; i < this.solution.scene.areas.length; ++i) {\n            this.solution.scene.areas[i].toggleHexmap();\n        }\n    }\n}","import { Solution } from '../'\n\nexport class ActiveCommander {\n    public solution: Solution;\n    public mp = [0, 0, 0, 0];\n    public mpPre = [0, 0, 0, 0];\n    public drawMode: boolean = false;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n    private updateMousePos(e) {\n        this.mp[0] = e.point.x;\n        this.mp[1] = e.point.y;\n        this.mp[2] = e.lngLat.lng;\n        this.mp[3] = e.lngLat.lat;\n    }\n    public updateMousePrePos() {\n        this.mpPre[0] = this.mp[0];\n        this.mpPre[1] = this.mp[1];\n        this.mpPre[2] = this.mp[2];\n        this.mpPre[3] = this.mp[3];\n    }\n    public mouseDown = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n\n        if (this.drawMode) { return; }\n\n        this.solution.scene.captured = this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        if (this.solution.scene.captured) {\n            this.solution.common.disablePan();\n        }\n        // this.solution.scene.captured = this.solution.scene.areas;\n\n        // }\n        // TODO\n    }\n    public mouseUp = (e) => {\n        this.updateMousePos(e);\n        if (this.drawMode) { return; }\n\n        this.solution.common.enablePan();\n        this.solution.scene.captured?.onMouseUp();\n        this.solution.scene.captured = undefined;\n\n        // TODO\n    }\n    public mouseDClick = (e) => {\n        this.drawMode = false;\n        this.solution.scene.captured?.onMouseDoubleClick(e);\n        this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.enable();\n\n    }\n    public mouseDrag = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n        if (this.solution.scene.captured) {\n            this.solution.scene.captured.translate(e.point.x, e.point.y);\n        }\n        // TODO\n        this.updateMousePrePos();\n    }\n    public mouseClick = (e) => {\n        this.updateMousePos(e);\n        if (this.drawMode) {\n            this.solution.scene.captured.onMouseClick(e);\n            this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.disable();\n            // console.log('d', this.solution.rendererWrapper.mapBoxWrapper.map.doubleClickZoom.isEnabled());\n            return;\n        }\n\n\n        this.solution.scene.captured = this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        if (this.solution.scene.captured) {\n            // this.solution.scene.captured.isSelected = !this.solution.scene.captured.isSelected;\n            this.solution.scene.captured.onMouseClick(e);\n        } else {\n            this.solution.common.deSelectedAll();\n        }\n        // console.log(this.solution.scene.captured);\n        // TODO\n        // console.log(e);\n        // console.log(e['lngLat']);\n        this.solution.rendererWrapper.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\n        // this.renderer.pts.push([e.point.x, e.point.y])\n    }\n    public mouseMove = (e) => {\n        this.solution.common.renderForce();\n        this.updateMousePos(e);\n        if (this.drawMode && this.solution.scene.captured) {\n            this.solution.scene.captured.updateGhostPos(this.mp[0], this.mp[1]);\n\n            return;\n        }\n\n        this.solution.common.checkHoverArea(this.mp[0], this.mp[1]);\n\n        // console.log(e)\n\n        // TODO\n        this.updateMousePrePos();\n    }\n    public keyDown(k: KeyboardEvent) {\n        // TODO\n        // console.log(k);\n        switch (k.key) {\n            case 'Backspace':\n\n                if (this.drawMode && this.solution.scene.captured) {\n                    this.solution.scene.captured.removeVertexLastVertex();\n                    return;\n                }\n\n                this.solution.common.removeSelected();\n                this.solution.common.captureScene();\n                break;\n\n            default:\n                break;\n        }\n        this.solution.common.renderForce();\n    }\n}","import mapboxgl from 'mapbox-gl';\r\nimport { RendererWrapper } from '../';\r\n\r\nimport { downloadImage } from '../../lib';\r\n\r\nexport class MapboxGLWrapper {\r\n    public rendererWrapper: RendererWrapper;\r\n    public map: mapboxgl.Map;\r\n    public canvasMapbox;\r\n    private isPressed: boolean = false;\r\n    constructor(rendererWrapper: RendererWrapper) {\r\n        this.rendererWrapper = rendererWrapper;\r\n\r\n        this.initMap(rendererWrapper.solution.divHost.id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        // mapboxgl.accessToken = process.env.REACT_APP_MAPBOX\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            preserveDrawingBuffer: true,\r\n            container: id,\r\n            zoom: 3,\r\n            // pitch: 30,\r\n            // minZoom: 10,\r\n            // center: [-74.5, 40],\r\n            center: [-77.430815, 37.801833],\r\n            doubleClickZoom: false,\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n\r\n        });\r\n        this.map.doubleClickZoom.disable();\r\n        this.map.dragRotate.disable();\r\n\r\n        this.map.on('moveend', () => { this.rendererWrapper.solution.common.onExtentDone(); });\r\n        this.map.on('zoom', () => { this.rendererWrapper.solution.common.renderForce(); });\r\n        this.map.on('click', 'polygon', (e: any) => { this.rendererWrapper.solution.common.pickObject(e) });\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e: mapboxgl.MapMouseEvent) => {\r\n            if (this.isPressed) {\r\n                this.mouseDrag(e);\r\n            } else {\r\n                this.mouseMove(e);\r\n            }\r\n        });\r\n        this.map.on('click', (e: mapboxgl.MapMouseEvent) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e: mapboxgl.MapMouseEvent) => { this.isPressed = true; this.mouseDown(e); });\r\n        this.map.on('dblclick', (e: mapboxgl.MapMouseEvent) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e: mapboxgl.MapMouseEvent) => { this.isPressed = false; this.mouseUp(e); });\r\n        window.addEventListener('keydown', (k) => { this.keyDown(k) });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n\r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n        this.map.on('load', () => { this.initPost(); });\r\n    }\r\n    public initPost() {\r\n        this.rendererWrapper.initPost();\r\n        this.canvasMapbox = this.map.getCanvas();\r\n\r\n        // this.initCustomCanvas();\r\n    }\r\n\r\n    public initCustomCanvas() {\r\n        // console.log('initCustomCanvas');\r\n        this.rendererWrapper.renderer.canvas.width = this.canvasMapbox.width;\r\n        this.rendererWrapper.renderer.canvas.height = this.canvasMapbox.height;\r\n\r\n        this.rendererWrapper.renderer.canvas.style.display = 'none';\r\n\r\n        const bound: any = this.map.getBounds();\r\n        // console.log(bound);\r\n\r\n        this.map.on('load',  () => {\r\n            this.map.addSource('canvas-source', {\r\n                type: 'raster',\r\n                canvas: this.rendererWrapper.renderer.canvas,\r\n                coordinates: [\r\n\r\n                    // [ 180, 90],\r\n                    // [ 180, -90],\r\n                    // [ -180, -90], \r\n                    // [ -180, 90]\r\n\r\n\r\n                    // [bound._sw[0], bound._sw[1]],\r\n                    // [bound._sw[0], bound._ne[1]],\r\n                    // [bound._ne[0], bound._ne[1]],\r\n                    // [bound._ne[0], bound._sw[1]],\r\n\r\n                    [-125.618336, 48.944262],\r\n                    [-125.618336, 24.786775],\r\n                    [-65.591812, 24.786775],\r\n                    [-65.591812, 48.944262]\r\n\r\n                    // [91.4461, 21.5006],\r\n                    // [100.3541, 21.5006],\r\n                    // [100.3541, 13.9706],\r\n                    // [91.4461, 13.9706]\r\n                ],\r\n                // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\r\n                animate: true\r\n            });\r\n\r\n            this.map.addLayer({\r\n                id: 'canvas-layer',\r\n                type: 'raster',\r\n                source: 'canvas-source'\r\n            });\r\n        })\r\n\r\n    }\r\n    public zoom = (z: number) => {\r\n        // this.map.setZoom(z);\r\n        // return this.map.zoomTo(z, {animate:true} )\r\n        return this.map.zoomTo(z)\r\n    }\r\n    public flyTo = (lng: number, lat: number) => {\r\n        return this.map.flyTo({\r\n            center: [lng, lat],\r\n            // duration: 1200, // Animate over 12 seconds\r\n            // essential: true\r\n        });\r\n    }\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lng, lat);\r\n        // console.log(v);\r\n        return this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({ x, y } as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        try {\r\n            const p = this.map.project([lon, lat])\r\n            return [p.x, p.y];\r\n        } catch (error) {\r\n            // console.error(error)\r\n        }\r\n        return [-1, -1];\r\n    }\r\n    public downloadImage() {\r\n        const canvasMapbox = this.map.getCanvas();\r\n        return downloadImage(canvasMapbox, this.rendererWrapper.renderer.canvas);\r\n    }\r\n    public getViewState() {\r\n        const center = this.map.getCenter();\r\n        // console.log(center);\r\n        return {\r\n            zoom: this.map.getZoom(),\r\n            center: center,\r\n        };\r\n    }\r\n    public mouseDown = (e) => { }\r\n    public mouseUp = (e) => { }\r\n    public mouseMove = (e) => { }\r\n    public mouseDrag = (e) => { }\r\n    public mouseClick = (e) => { }\r\n    public mouseDClick = (e) => { }\r\n    public keyDown = (e) => { }\r\n}\r\n","export * from './util/ColorUtil';\nexport * from './util/VectorUtil';\nexport * from './util/Math'\nexport * from './util/TurfUtil'\nexport * from './DrawingPreest';\nexport * from './constant';\nexport * from './SceneManager';\nexport { getJSONFromURL } from '../../../../../lib';\n\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    let canvasOut = document.createElement(\"canvas\");\n    canvasOut.width = canvasMapbox.width;\n    canvasOut.height = canvasMapbox.height;\n    let context = canvasOut.getContext(\"2d\");\n\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0;\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0);\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n\n    let img = new Image();\n    img.width = canvasMapbox.width;\n    img.height = canvasMapbox.height;\n    img.src = canvasOut.toDataURL();\n\n    let link = document.createElement('a');\n    link.download = fileName;\n    link.href = canvasOut.toDataURL();\n    link.click();    \n};\n\n","import { Deck } from '@deck.gl/core';\nimport { MapView } from '@deck.gl/core';\nimport { ScatterplotLayer, ArcLayer, PolygonLayer } from '@deck.gl/layers';\n// import { MapboxOverlay } from '@deck.gl/mapbox'; \n\nimport {MapboxOverlay} from '@deck.gl/mapbox'\n\n\n// import { MapboxOverlay } from '@deck.gl/mapbox';\n// import { ScatterplotLayer, ArcLayer, PolygonLayer } from '@deck.gl/layers';\n\nimport { RendererWrapper } from '../';\n\nexport class DeckGL {\n    public rendererWrapper: RendererWrapper;\n    public map: mapboxgl.Map;\n    public layers: MapboxOverlay[] = [];\n    constructor(rendererWrapper: RendererWrapper) {\n        this.rendererWrapper = rendererWrapper;\n        this.map = this.rendererWrapper.mapBoxWrapper.map;\n    }\n    public initPost() {\n        // TODO:\n    }\n    // [ {position: [-74.5, 40], size: 10000}, ]\n    public addScatterLayer(data: any) {\n        const deckLayer = new MapboxOverlay({\n            id: `scatter-${this.layers.length}`,\n            // type: ScatterplotLayer,\n            // data: data,\n            // @ts-ignore\n            getPosition: d => d.position,\n            getRadius: d => d.size,\n            getFillColor: d => {\n                if (d.color !== undefined) {\n                    return d.color;\n                } else {\n                    return [255, 255, 0];\n                }\n            },\n            getLineColor: d => [255, 255, 255],\n            onClick: (info, event) => console.log('Clicked:', info, event)\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    // https://deck.gl/docs/api-reference/layers/polygon-layer\n    public addPolygonLayer(data: any, onClick: (info, event) => void) {\n        const deckLayer = new MapboxOverlay({\n            id: `polygon-${this.layers.length}`,\n            // type: PolygonLayer,\n            // data: data,\n            // @ts-ignore\n            pickable: true,\n            // @ts-ignore\n            stroked: true,\n            filled: true,\n            wireframe: true,\n            lineWidthMinPixels: 1,\n            getPolygon: d => d.contour,\n            getElevation: d => 1, //d.population / d.area / 10,\n            getFillColor: d => d.color, // [100, 100, 100], // [d.population / d.area / 60, 140, 0],\n            getLineColor: d => [0, 0, 0],\n            getLineWidth: 1,\n            onClick: (info, event) => {\n                // console.log('Clicked:', info, event)\n                // console.log(info.index)\n                onClick(info, event);\n            }\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    public addArcLayer(data: any) {\n        const deckLayer = new MapboxOverlay({\n            id: `arc-${this.layers.length}`,\n            // data: data,\n            // type: ArcLayer,\n            // @ts-ignore\n            getSourcePosition: d => d.pickup,\n            getTargetPosition: d => d.dropoff,\n            getSourceColor: d => [255, 128, 0],\n            getTargetColor: d => [0, 128, 255],\n            strokeWidth: 5\n        });\n        this.addLayer(deckLayer, 'waterway-label');\n    }\n    private addLayer(deckLayer: MapboxOverlay, label: string = 'waterway-label') {\n        // @ts-ignore\n        this.map.addLayer(deckLayer, label);\n        this.layers.push(deckLayer)\n    }\n    public pick() {\n        // this.map.getob\n    }\n}","export class Deltatime {\n    public now: number;\n    public delta: number;\n    public frameRate: number;\n\n    private last: number = 0;\n    private timeLastRender: number;\n    msLoop: number;\n    constructor() {\n        //\n    }\n    public UpdateFPS() {\n        this.now = window.performance.now();\n        this.msLoop = this.now - this.last;\n        this.last = this.now;\n\n        this.delta = this.delta + Math.min(1, (this.msLoop) / 1000);\n\n        if (this.delta > this.frameRate) { this.delta = this.delta - this.frameRate; }\n\n        this.delta = (Date.now() - this.timeLastRender) / 1000;\n        this.timeLastRender = Date.now();\n        this.frameRate = (1 / this.delta);\n\n    }\n    public get dt() {\n        return this.delta;\n    }\n}\n\nexport class RendererCanvasDynamicLight {\n    public divHost: HTMLDivElement;\n    public canvas: HTMLCanvasElement;\n    public ctx: CanvasRenderingContext2D;\n    public isDown: boolean = false;\n    public debugMode: boolean = false;\n    public isStatic: boolean = false;\n    public log: string = '';\n\n    private prevent: boolean = false;\n    private animation: boolean = false;\n    private delay: number = 90;\n\n    private frameNum = 1;\n    private timer: NodeJS.Timer | number;\n    private isDrag: boolean = false;\n\n    deltaTime: Deltatime;\n\n    constructor(div: HTMLDivElement) {\n        this.divHost = div;\n        this.deltaTime = new Deltatime();\n        const bounding = this.divHost.getBoundingClientRect();\n        this.canvas = document.createElement('canvas') as HTMLCanvasElement;\n        // this.canvas.style.position = 'absolute';\n        this.canvas.width = bounding.width;\n        this.canvas.height = bounding.height;\n        this.divHost.appendChild(this.canvas);\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        this.canvas.onclick = (e: MouseEvent) => {\n            this.timer = setTimeout(() => {\n                if (!this.prevent) {\n                    this.mouseClick(e.offsetX, e.offsetY);\n                }\n                this.isDrag = false;\n                this.prevent = false;\n            },\n                this.delay);\n        };\n        this.canvas.onwheel = (e: WheelEvent) => {\n            this.mouseWheel(e);\n        };\n        this.canvas.ondblclick = (e: MouseEvent) => {\n            clearTimeout(this.timer as number);\n            this.prevent = true;\n            this.mouseDoubleClick(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmousedown = (e: MouseEvent) => {\n            this.isDown = true;\n            this.mouseDown(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmouseup = (e: MouseEvent) => {\n            this.isDown = false;\n            this.isDrag = false;\n            this.mouseUp(e.offsetX, e.offsetY);\n        };\n        this.canvas.onmousemove = (e: MouseEvent) => {\n            if (this.isDown) {\n                this.isDrag = true;\n                this.prevent = true;\n                this.mouseDrag(e.offsetX, e.offsetY);\n            } else {\n                this.mouseMove(e.offsetX, e.offsetY);\n            }\n        };\n        this.ctx.fillStyle = 'red';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        window.addEventListener('resize', this.resize);\n        // this.loop(this.ctx);\n    }\n    public start = () => {\n        this.loop(this.ctx);\n    }\n    private resize = () => {\n        const bounding = this.divHost.getBoundingClientRect();\n        this.canvas.width = bounding.width;\n        this.canvas.height = bounding.height;\n    }\n    public destroy() {\n        window.removeEventListener('resize', this.resize);\n        this.isStatic = true;\n        try {\n            while (this.divHost !== undefined && this.divHost.lastElementChild !== undefined) {\n                this.divHost.removeChild(this.divHost.lastElementChild);\n            }\n        } catch (error) { }\n    }\n    public loop = (ctx: CanvasRenderingContext2D) => {\n        if (this.isStatic) { return; }\n        let before = performance.now();\n        requestAnimationFrame(() => { this.loop(ctx); });\n        \n        this.deltaTime.UpdateFPS();\n        if (this.frameNum++ < 300 || this.animation) {\n            this.renderPre(ctx);\n        }\n        let after = performance.now();\n        this.log = `total frames: ${this.frameNum++} (FPS: ${this.deltaTime.frameRate.toFixed(0)}), a loop took: ${(after - before).toFixed(2)} ms to execute.`;\n    }\n    public renderForce = () => {\n        this.frameNum = 0;\n    }\n    public renderPre(ctx: CanvasRenderingContext2D) {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        this.render(ctx);\n    }\n    public render(ctx: CanvasRenderingContext2D) {\n        // Binding needed\n    }\n    public mouseClick(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('click'); }\n    }\n    public mouseDoubleClick(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('d-click'); }\n    }\n    public mouseDown(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('down'); }\n    }\n    public mouseUp(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('up'); }\n    }\n    public mouseMove(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('move'); }\n    }\n    public mouseDrag(x: number, y: number) {\n        // Binding needed\n        if (this.debugMode) { console.log('drag'); }\n    }\n    public mouseWheel(v: WheelEvent) {\n        // Binding needed\n        if (this.debugMode) { console.log('wheel', v); }\n    }\n}","import { RendererCanvasDynamicLight } from './CanvasDynamic';\nimport { RendererWrapper } from '../';\n\nexport class Renderer extends RendererCanvasDynamicLight {\n    public rendererWrapper: RendererWrapper\n    public time: number = 0.0;\n    public pts: number[][] = [];\n    public isActive = false;\n\n    public log: string;\n    public needRenderLoop: boolean = true;\n    public loopNum: number = 0;\n    private loopNumMax = 90;\n\n    constructor(div: any, rendererWrapper: RendererWrapper) {\n        super(div);\n        this.rendererWrapper = rendererWrapper;\n        this.canvas.id = 'mapboxCustom'\n\n        // const dd = app.mapboxWrapper.map.getCanvas();\n\n        // this.canvas.width = dd.width;\n        // this.canvas.height = dd.height;\n        this.canvas.style.position = 'absolute';\n        // this.canvas.style.width = '100%';\n        // this.canvas.style.height = '100%';\n        this.canvas.style.pointerEvents = 'none';\n        // this.canvas.style.mixBlendMode = 'color-dodge'\n        \n        this.start();\n    }\n    public initPost() {\n        // this.ctx.globalCompositeOperation = 'color-dodge';\n        this.isActive = true;\n        // this.render(this.ctx);\n    }\n    public render(ctx: CanvasRenderingContext2D): void {\n        if (!this.isActive) { return; }\n        this.time += 0.1;\n\n        // console.log(this.time);\n\n        this.rendererWrapper.solution.scene.renderCanvas(ctx);\n\n        let pointRenderNeeded = false;\n        if (pointRenderNeeded) { this.renderPoint(ctx); }\n\n        // console.log(this.log);\n        this.renderLog(ctx);\n    }\n    public renderLog(ctx: CanvasRenderingContext2D) {\n        ctx.textAlign = 'center';\n        ctx.font = '14px arial';\n        ctx.fillStyle = '#fff';\n        // ctx.globalCompositeOperation = 'source-over';\n        ctx.fillText(`Lat: ${this.rendererWrapper.solution.activeCommander.mp[1].toFixed(5)},  Lng: ${this.rendererWrapper.solution.activeCommander.mp[0].toFixed(5)}`, (this.canvas.width * 0.5), 50);\n        // ctx.stroke()\n    }\n    public renderPoint(ctx: CanvasRenderingContext2D) {\n        const z = this.rendererWrapper.mapBoxWrapper.map.getZoom();\n        const zoomFactor = Math.pow(2, z) * 0.1\n\n        for (let i = 0; i < this.pts.length; ++i) {\n            const pt = this.pts[i];\n            const p = this.rendererWrapper.mapBoxWrapper.toScreen(pt[0], pt[1]);\n            // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\n\n            const size = 0.001 * zoomFactor;\n\n            ctx.beginPath();\n            ctx.arc(p[0], p[1], size + ((Math.sin(this.time + i) + 3) / zoomFactor), 0, Math.PI * 2);\n            // ctx.arc(p[0], p[1], size + (size * (Math.sin(this.time + i) + 3) * zoomFactor / 10 ), 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fillStyle = 'rgba(0, 255, 0, 0.7)';\n            ctx.fill();\n        }\n    }\n}","import { MapboxGLWrapper } from './MapboxGLWrapper';\nimport { DeckGL } from './DeckGL';\nimport { Renderer } from './CanvasCustom';\nimport { Solution } from '../';\n\nexport class RendererWrapper {\n    public solution: Solution;\n    public mapBoxWrapper: MapboxGLWrapper;\n    public deckGL: DeckGL\n    public renderer: Renderer;\n    constructor(solution: Solution) {\n        this.solution = solution;      \n\n        this.mapBoxWrapper = new MapboxGLWrapper(this);\n        this.mapBoxWrapper.mouseDown = (e) => { this.solution.activeCommander.mouseDown(e);}\n        this.mapBoxWrapper.mouseUp = (e) => { this.solution.activeCommander.mouseUp(e);}\n        this.mapBoxWrapper.mouseClick = (e) => { this.solution.activeCommander.mouseClick(e);}\n        this.mapBoxWrapper.mouseDClick = (e) => { this.solution.activeCommander.mouseDClick(e);}\n        this.mapBoxWrapper.mouseMove = (e) => { this.solution.activeCommander.mouseMove(e);}\n        this.mapBoxWrapper.mouseDrag = (e) => { this.solution.activeCommander.mouseDrag(e);}\n        this.mapBoxWrapper.keyDown = (k) => { this.solution.activeCommander.keyDown(k);}\n        \n        this.deckGL = new DeckGL(this);\n        this.renderer = new Renderer(this.solution.divHost, this);\n    }\n    public initPost() {\n        this.renderer.initPost();\n        this.deckGL.initPost();\n    }\n    public downloadScreen() {\n        return this.mapBoxWrapper.downloadImage();\n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n}","import { Solution } from '../';\n\nimport { TYPE_GEOMETRY } from '../lib';\n\nexport class UIWrapper {\n    public solution: Solution;\n    public divHost: HTMLElement;\n    public div: HTMLElement;\n    constructor(solution: Solution) {\n        this.solution = solution;\n\n        this.divHost = solution.divHost;\n        this.divHost.style.position = 'absolute';\n        const divMenu = document.createElement('div');\n        this.divHost.appendChild(divMenu);\n\n        this.div = document.createElement('div');\n        this.div.style.width = '150px';\n        this.div.style.height = '300px';\n        this.divHost.appendChild(this.div);\n\n        this.initUI();\n    }\n    public async initUI() {\n\n        // const svg = await NJSLoader.LoadSVGFromHTTP(process.env.PUBLIC_URL + '/static/dataDummyReady/ready.svg');\n        // console.log(svg);\n\n        // const newElement = document.createElementNS(\"http://www.w3.org/2000/svg\", 'path'); //Create a path in SVG's namespace\n        // newElement.setAttribute(\"d\",\"M 0 0 L 10 10\"); //Set path's data\n        // newElement.style.stroke = \"#000\"; //Set stroke colour\n        // newElement.style.strokeWidth = \"5px\"; //Set stroke width\n        // this.div.appendChild(newElement);\n\n        const img = new Image();\n        img.src = process.env.PUBLIC_URL + '/static/dataDummyReady/readyLabs.png';\n        img.style.position = 'relative';\n        img.style.width = '150px';\n        img.style.margin = '15px';\n        img.style.marginTop = '30px';\n        img.style.marginBottom = '0px';\n        let a = document.createElement('a');\n        a.href='https://ready.net/';\n        a.appendChild(img);\n        this.div.appendChild(a);\n\n        let div = document.createElement('div');\n        div.textContent = 'Capture Map';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.downloadScreen();\n        }\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Set Extent';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.flyTo(-112.188375, 35.267735);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Draw Area';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.addShape(TYPE_GEOMETRY.POLYGON);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Add Shape';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.addShape(TYPE_GEOMETRY.RECT);\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Shape Type';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.shiftShapeType();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Animation';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.toggleAnimation();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Undo';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.undo();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Redo';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.redo();\n        };\n        this.div.appendChild(div);\n\n        div = document.createElement('div');\n        div.textContent = 'Hex map';\n        div.style.color = '#fff';\n        // div.style.width = '100px';\n        div.style.position = 'relative';\n        div.style.margin = '20px';\n        div.onclick = () => {\n            this.solution.common.toggleHexmap();\n        };\n        this.div.appendChild(div);\n    }\n}","import { Scene } from '..';\nimport { SceneManager } from '../../lib';\nexport class SceneState {\n    public scene: Scene;\n    private manager: SceneManager;\n    constructor(scene: Scene) {\n        this.scene = scene;\n        this.manager = new SceneManager();\n    }\n    public resetState() {\n        this.manager.reset();\n        this.captureState();\n    }\n    public captureState() {\n        this.manager.push(this.scene.common.getData());\n        const state = this.manager.getCurrentState();\n        // console.log(state);\n        return state;\n    }\n    public undo() {\n        const state = this.manager.undo();\n        this.scene.common.populateArea(state);\n    }\n    public redo() {\n        const state = this.manager.redo();\n        this.scene.common.populateArea(state);\n    }\n}","import * as turf from '@turf/turf';\n\nimport { Solution } from '../';\nimport { SceneState } from './SceneState';\nimport { ACCommon } from '../Common';\nimport { ActiveCommander } from '../ActiveCommander';\nimport { GeometryBase } from '../Geometry/GeometryCanvas/Base/GeometryBase';\nimport { hex2RGB, drawingPoint } from '../lib';\n\nimport { LANDUSE_TYPE_MAPPING, FUNDING_STATUS_MAPPING } from '../lib/constant';\n\nexport class Scene {\n    public solution: Solution;\n    public ac: ActiveCommander;\n    public stateManager: SceneState;\n    public common: ACCommon;\n\n    public pts: number[] = [];\n\n    public areas: GeometryBase[] = [];\n    public captured: GeometryBase | undefined = undefined;\n\n    public points: any;\n    public polygonsDifference: any = [];\n    public ids: boolean[] =[];\n\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.stateManager =  new SceneState(this);\n        this.ac = solution.activeCommander;\n        this.common = solution.common;\n    }\n    public initPre() {\n        this.stateManager.captureState();\n    }\n    public push(g: GeometryBase) {\n        this.areas.push(g);\n    }\n    public remove(g: GeometryBase) {\n        this.areas.splice(this.areas.indexOf(g), 1);\n    }\n    public async init() {\n        this.common.center(-112.190375, 35.257177);\n        this.common.zoom(13);\n\n\n        // init starting\n\n        const polygons = await this.common.loadDataLocal('funded_census_blocks.geojson');\n        const gons = [];\n        const ids = [];\n        const colDefault = hex2RGB(FUNDING_STATUS_MAPPING.default.color);\n        const colAssigned = hex2RGB(FUNDING_STATUS_MAPPING.assigned.color);\n        // console.log(polygons);\n        for (let i of polygons['features']) {\n            const p = (i['geometry']['coordinates']);\n            let color = undefined;\n            const grantStatus = (i['properties']['grant_long_status']);\n            // console.log(grantStatus)\n            if (grantStatus === 'default') { color = colDefault; }\n            else { color = colAssigned; }\n            // if (Math.random() < 0.3) { color = ColorUtility.GetRandomRGBArray(); }\n            // console.log(color)\n            gons.push({ contour: p[0], size: 15, color: color });\n            ids.push(false);\n        }\n        // console.log(gons)\n        this.ids = ids;\n        const onClickEvent = (info, event) => {\n            // console.log('!', info)\n            // console.log('!', info.index)\n            this.ids[info.index] = !this.ids[info.index];\n            this.common.renderForce();\n        }\n        this.common.addPolygonLayer(gons, onClickEvent);\n\n\n        const polygonsDiff = await this.common.loadDataLocal('funded_census_blocks.geojson');\n        this.polygonsDifference = []\n        for (let i of polygonsDiff['features']) {\n            const p = (i['geometry']['coordinates']);\n            // console.log(p[0])\n            this.polygonsDifference.push(turf.polygon(p[0]));\n        }\n\n        // dummy\n        let data = [\n            { position: [-74.5, 40], size: 10000 },\n            { position: [-74.5, 40.5], size: 5000 },\n            { position: [-74.6, 40.5], size: 5800 },\n            { position: [-74.7, 40.5], size: 100 },\n        ];\n        this.common.addScatterLayer(data);\n\n        let data2 = [\n            { pickup: [-122.42, 37.8], dropoff: [-74.5, 40.5] },\n            { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n        ];\n        this.common.addArcLayer(data2);\n\n\n        const points = await this.common.loadDataLocal('underserved_locations.geojson');\n        // console.log(d);\n        const colR = hex2RGB(LANDUSE_TYPE_MAPPING.R.color);\n        const colB = hex2RGB(LANDUSE_TYPE_MAPPING.B.color);\n        const pts = []\n        for (let i of points['features']) {\n            const p = (i['geometry']['coordinates']);\n            const landuse = (i['properties']['landuse']);\n\n            let color = undefined;\n            if (landuse === 'R') { color = colR; }\n            else if (landuse === 'B') { color = colB; }\n            else { color = [0, 128, 0]; }\n\n            pts.push({ position: [p[0], p[1]], size: 15, color: color });\n        }\n        this.common.addScatterLayer(pts);\n        this.points = points;\n    }\n    public renderCanvas(ctx: CanvasRenderingContext2D) {\n\n        for(let i = 0 ; i < this.areas.length; ++i) {\n            this.areas[i].render(ctx);\n        }\n\n        ctx.fillStyle = '#f00';\n        for (let i = 0; i < this.pts.length; ++i) {\n            const p = this.pts[i];\n            drawingPoint(ctx, p[0], p[1]);\n        }\n    }\n}\n\n","import { Solution } from '../';\nexport class ApiWrapper {\n    public solution: Solution;\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n}","import { ACCommon } from './Common';\r\nimport { ActiveCommander } from './ActiveCommander';\r\nimport { RendererWrapper } from './RendererWrapper';\r\nimport { UIWrapper } from './UI';\r\nimport { Scene } from './Scene';\r\nimport { ApiWrapper } from './ApiWrapper';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public common: ACCommon;\r\n    public activeCommander: ActiveCommander;\r\n    public uiWrapper: UIWrapper;\r\n    public rendererWrapper: RendererWrapper;\r\n    public scene: Scene;\r\n    public api: ApiWrapper;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'relative';\r\n        this.init();\r\n        this.initPost();\r\n    }\r\n    public init() {\r\n        this.common = new ACCommon(this);\r\n        this.activeCommander = new ActiveCommander(this);\r\n        this.scene = new Scene(this);\r\n        this.rendererWrapper = new RendererWrapper(this);\r\n        this.uiWrapper = new UIWrapper(this);\r\n        this.api = new ApiWrapper(this);\r\n    }\r\n    public destroy() {\r\n        this.rendererWrapper.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n    public async initPost() {\r\n        this.scene.initPre();\r\n        await this.scene.init();\r\n    }\r\n    \r\n}","import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians, Coord, Units } from \"@turf/helpers\";\n\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Calculates the distance between two {@link Coord|coordinates} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @name distance\n * @param {Coord} from origin coordinate\n * @param {Coord} to destination coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two coordinates\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(\n  from: Coord,\n  to: Coord,\n  options: {\n    units?: Units;\n  } = {}\n) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n\n  var a =\n    Math.pow(Math.sin(dLat / 2), 2) +\n    Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    options.units\n  );\n}\n\nexport { distance };\nexport default distance;\n","import {\n  Feature,\n  FeatureCollection,\n  Geometry,\n  LineString,\n  MultiPoint,\n  MultiLineString,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { isNumber } from \"@turf/helpers\";\n\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nfunction getCoord(coord: Feature<Point> | Point | number[]): number[] {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n\n  if (!Array.isArray(coord)) {\n    if (\n      coord.type === \"Feature\" &&\n      coord.geometry !== null &&\n      coord.geometry.type === \"Point\"\n    ) {\n      return [...coord.geometry.coordinates];\n    }\n    if (coord.type === \"Point\") {\n      return [...coord.coordinates];\n    }\n  }\n  if (\n    Array.isArray(coord) &&\n    coord.length >= 2 &&\n    !Array.isArray(coord[0]) &&\n    !Array.isArray(coord[1])\n  ) {\n    return [...coord];\n  }\n\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nfunction getCoords<\n  G extends\n    | Point\n    | LineString\n    | Polygon\n    | MultiPoint\n    | MultiLineString\n    | MultiPolygon,\n>(coords: any[] | Feature<G> | G): any[] {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n\n  // Feature\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    // Geometry\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n\n  throw new Error(\n    \"coords must be GeoJSON Feature, Geometry Object or an Array\"\n  );\n}\n\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nfunction containsNumber(coordinates: any[]): boolean {\n  if (\n    coordinates.length > 1 &&\n    isNumber(coordinates[0]) &&\n    isNumber(coordinates[1])\n  ) {\n    return true;\n  }\n\n  if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n    return containsNumber(coordinates[0]);\n  }\n  throw new Error(\"coordinates must only contain numbers\");\n}\n\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction geojsonType(value: any, type: string, name: string): void {\n  if (!type || !name) {\n    throw new Error(\"type and name required\");\n  }\n\n  if (!value || value.type !== type) {\n    throw new Error(\n      \"Invalid input to \" +\n        name +\n        \": must be a \" +\n        type +\n        \", given \" +\n        value.type\n    );\n  }\n}\n\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nfunction featureOf(feature: Feature<any>, type: string, name: string): void {\n  if (!feature) {\n    throw new Error(\"No feature passed\");\n  }\n  if (!name) {\n    throw new Error(\".featureOf() requires a name\");\n  }\n  if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n    throw new Error(\n      \"Invalid input to \" + name + \", Feature with geometry required\"\n    );\n  }\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error(\n      \"Invalid input to \" +\n        name +\n        \": must be a \" +\n        type +\n        \", given \" +\n        feature.geometry.type\n    );\n  }\n}\n\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nfunction collectionOf(\n  featureCollection: FeatureCollection<any>,\n  type: string,\n  name: string\n) {\n  if (!featureCollection) {\n    throw new Error(\"No featureCollection passed\");\n  }\n  if (!name) {\n    throw new Error(\".collectionOf() requires a name\");\n  }\n  if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n    throw new Error(\n      \"Invalid input to \" + name + \", FeatureCollection required\"\n    );\n  }\n  for (const feature of featureCollection.features) {\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n      throw new Error(\n        \"Invalid input to \" + name + \", Feature with geometry required\"\n      );\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error(\n        \"Invalid input to \" +\n          name +\n          \": must be a \" +\n          type +\n          \", given \" +\n          feature.geometry.type\n      );\n    }\n  }\n}\n\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nfunction getGeom<G extends Geometry>(geojson: Feature<G> | G): G {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\n\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nfunction getType(\n  geojson: Feature<any> | FeatureCollection<any> | Geometry,\n  _name?: string\n): string {\n  if (geojson.type === \"FeatureCollection\") {\n    return \"FeatureCollection\";\n  }\n  if (geojson.type === \"GeometryCollection\") {\n    return \"GeometryCollection\";\n  }\n  if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n    return geojson.geometry.type;\n  }\n  return geojson.type;\n}\n\nexport {\n  getCoord,\n  getCoords,\n  containsNumber,\n  geojsonType,\n  featureOf,\n  collectionOf,\n  getGeom,\n  getType,\n};\n// No default export!\n"],"names":["hex2RGB","hex","isGray","replace","r","parseInt","substring","g","b","v","distance","v0","v1","Math","sqrt","x","y","z","isInsideOfVecs","vecs","inside","i","j","length","xi","yi","xj","yj","closestPointOnLine","pt","p0","p1","A","B","C","dis","abs","getAngleByTwoVectorsRadian","acos","dotProduct","normalize","getCosAngleByTwoVectors","len","RVector3","v2","getCenterVec","vs","lng","lat","constructor","ele","this","difference","features","geoms","geomEach","geom","push","coordinates","Error","properties","differenced","polygonClipping","slice","polygon","multiPolygon","area","polygons","boolean","turf","computePathPolygon","object","projection","path","Path2D","pathOut","p","sp","moveTo","lineTo","closePath","addPath","drawingPoint","ctx","beginPath","arc","PI","fill","renderControlPoint","fillColor","strokeColor","lineWidth","fillStyle","strokeStyle","forEach","stroke","LANDUSE_TYPE_MAPPING","text","color","FUNDING_STATUS_MAPPING","TYPE_GEOMETRY","RECT","CIRCLE","POLYGON","SceneManager","histories","currentIndex","reset","data","splice","getCurrentIndex","getHistoryLength","getCurrentState","historyNum","undo","redo","GeometryBase","scene","TYPE","t","id","capturedVecId","isHovered","hasAnimation","updateNeeded","captureNeeded","referPoint","_isSelected","polygonTurfOriginal","polygonTurfSubtracted","d","Date","getTime","c","random","floor","toString","getUUID","isSelected","isInside","translate","removeVertexLastVertex","update","onMouseUp","onMouseClick","e","onMouseDoubleClick","shiftType","updateGeoProjection","updateGhostPos","render","renderPost","toJson","updateWidthHight","width","height","remove","toggleHexmap","AreaGeometry","vec","vsRect","segR","vsCircle","initRect","initCircleVec","widthHalf","heightHalf","cos","sin","updateScreen","toScreen","updateProjection","toMap","mp","updateCenterVec","xSum","ySum","updateScreenPosCircle","geojson","options","segmentReduce","previousValue","segment","coords","geometry","geomReduce","value","total","type","polygonArea","calculateArea","ringArea","FACTOR","earthRadius","PI_OVER_180","coordsLength","lower","middle","upper","lowerX","middleY","ii","k","f","u1","u2","currentP","nextP","numContours","contourLen","contour","booleanPointInPolygon","point","getCoord","getGeom","bbox","polys","inBBox","result","polyResult","pip","ignoreBoundary","pointsWithinPolygon","points","results","featureEach","contained","pointInPolygon","pointsWithin","coordEach","pointCoord","multiPoint","featureCollection","Renderer","host","pathCroppedArea","renderAreaBounding","renderCroppedArea","renderDim","renderSelected","renderCenterPoint","renderProperties","solution","rendererWrapper","mapBoxWrapper","map","isMoving","diff","polygonsDifference","ids","common","setLineDash","lineDashOffset","op","transform","cVecGhost","textAlign","font","line","units","fillText","toFixed","save","rotate","restore","ellipse","rect","split","pts","other","offset","Transform","heighthHalf","preX","activeCommander","mpPre","preY","hexRebuild","updateGhostVecs","hexReposition","xOff","yOff","hexmap","reposition","updateActiveHexByBoudnary","initHex","HexMapDynamic","rx","ry","listPixel","ddx","ddy","ptsCenter","offScale","init","initGrid","computeHex","computeHexOff","initWithR","filterWithinR","computeGeoVec","initWithVecs","filterWithinVecs","xArray","alter","Hexbin","bVec","updateCenVec","updatePolygon","temp","cv","minNum","Number","MAX_SAFE_INTEGER","maxNum","MIN_SAFE_INTEGER","renderBins","updatePre","updatePost","updateScreenPos","updatePolygonTurf","boundary","bin","isActive","isHover","isVisit","updateWithMouseInteraction","nPix","isOver","updateGoeVec","updateScreenVec","isMouseInside","col","m","Area","super","renderer","cp","undefined","mVec","r0","r1","threshold","pow","isInsideEllipse","captureScene","AreaPolygonGeometry","MAX_VALUE","MIN_VALUE","removeLast","pop","resetBoundary","removeVecByIndex","index","insertVec","sel","underConstruction","deg","AreaPolygon","fromJson","lngLat","insertPt","captured","ACCommon","zoom","flyTo","center","lon","renderForceWithUpdate","renderForce","areas","downloadScreen","enablePan","dragPan","enable","disablePan","disable","getJSONFromURL","process","addScatterLayer","deckGL","addArcLayer","addPolygonLayer","onClick","addShape","drawMode","canvas","shiftShapeType","toggleAnimation","deSelectedAll","removeSelected","checkHoverArea","pickObject","obj","getViewState","getData","extent","stateManager","captureState","onExtentDone","populateArea","ActiveCommander","mouseDown","updateMousePos","mouseUp","mouseDClick","doubleClickZoom","mouseDrag","updateMousePrePos","mouseClick","mouseMove","keyDown","key","MapboxGLWrapper","canvasMapbox","isPressed","zoomTo","setCenter","unproject","project","error","initMap","divHost","mapboxgl","preserveDrawingBuffer","container","style","dragRotate","on","window","addEventListener","div","document","getElementsByClassName","position","display","initPost","getCanvas","initCustomCanvas","getBounds","addSource","animate","addLayer","source","downloadImage","customCanvas","fileName","canvasOut","createElement","context","getContext","globalAlpha","drawImage","img","Image","src","toDataURL","link","download","href","click","getCenter","getZoom","DeckGL","layers","deckLayer","MapboxOverlay","getPosition","getRadius","size","getFillColor","getLineColor","info","event","console","log","pickable","stroked","filled","wireframe","lineWidthMinPixels","getPolygon","getElevation","getLineWidth","getSourcePosition","pickup","getTargetPosition","dropoff","getSourceColor","getTargetColor","strokeWidth","label","pick","Deltatime","now","delta","frameRate","last","timeLastRender","msLoop","UpdateFPS","performance","min","dt","RendererCanvasDynamicLight","isDown","debugMode","isStatic","prevent","animation","delay","frameNum","timer","isDrag","deltaTime","start","loop","resize","bounding","getBoundingClientRect","before","requestAnimationFrame","renderPre","after","appendChild","onclick","setTimeout","offsetX","offsetY","onwheel","mouseWheel","ondblclick","clearTimeout","mouseDoubleClick","onmousedown","onmouseup","onmousemove","fillRect","destroy","removeEventListener","lastElementChild","removeChild","clearRect","time","needRenderLoop","loopNum","loopNumMax","pointerEvents","renderCanvas","renderLog","renderPoint","zoomFactor","RendererWrapper","UIWrapper","divMenu","initUI","margin","marginTop","marginBottom","a","textContent","SceneState","manager","resetState","state","Scene","ac","initPre","indexOf","loadDataLocal","gons","colDefault","colAssigned","polygonsDiff","colR","colB","landuse","ApiWrapper","Solution","uiWrapper","api","getElementById","from","to","coordinates1","coordinates2","dLat","degreesToRadians","dLon","lat1","lat2","radiansToLength","atan2","coord","Array","isArray","collectionOf","name","feature","getType","_name"],"sourceRoot":""}
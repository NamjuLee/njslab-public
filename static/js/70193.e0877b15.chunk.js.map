{"version":3,"file":"static/js/70193.e0877b15.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_09/Mesh/Meshes/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Mesh/Meshes/CustomGeometry/Rect.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Utility/GLShaderCommon.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Utility/Matrix4.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/Utility/Vector3.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_09/WebGL/Transform.ts"],"sourcesContent":["import { Scene } from '../../../Core/Scene';\r\n\r\nexport class MeshBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n        this.scene.add(this);\r\n    }\r\n    render() {\r\n        //\r\n    }\r\n}","import { GLShaderCommon } from '../../../Utility/GLShaderCommon';\r\n\r\nimport { MeshBase } from '../Core/Base';\r\nimport { NGL3dApp } from '../../..';\r\n\r\nimport { Transform } from '../../../WebGL/Transform';\r\n\r\nexport class Rect extends MeshBase {\r\n\r\n    v = `#version 300 es\r\n\r\n    in vec3 a_position;\r\n    in vec2 a_uv;\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat4 uCameraMatrix;\r\n\r\n    uniform vec2 u_resolution;\r\n\r\n    out vec2 uv;\r\n\r\n    void main() {\r\n        // gl_Position = vec4(a_position , 0, 1);\r\n        gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4( a_position.x, a_position.y, a_position.z, 1.0);\r\n        uv = a_uv;\r\n    }\r\n    `;\r\n\r\n    f = `#version 300 es\r\n\r\n    precision mediump float;\r\n    uniform vec4 u_color;\r\n    in vec2 uv;\r\n\r\n    out vec4 outColor;\r\n\r\n    void main() {\r\n\r\n\t\t\tfloat c = (uv.x <= 0.1 || uv.x >=0.9 || uv.y <= 0.1 || uv.y >= 0.9)? 0.0 : 1.0;\r\n\t\t\toutColor = vec4(c,c,c,1.0-c);\r\n    }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    positionAttributeLocation: number;\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    colorLocation: WebGLUniformLocation | null;\r\n\r\n    positionBuffer: WebGLBuffer | null;\r\n    vao: WebGLVertexArrayObject | null;\r\n\r\n    translation: number[] = [];\r\n    color: number[] = [];\r\n    width: number;\r\n    height: number;\r\n\r\n    mesh: Float32Array;\r\n\r\n    transform: Transform;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n\r\n        this.program = GLShaderCommon.getShaderProgram(this.gl, this.v, this.f);\r\n\r\n        if (this.program) {\r\n            this.positionAttributeLocation = this.gl.getAttribLocation(this.program, 'a_position');\r\n\r\n            this.perspective = this.gl.getUniformLocation(this.program, 'uPMatrix');\r\n            this.modelMatrix = this.gl.getUniformLocation(this.program, 'uMVMatrix');\r\n            this.cameraMatrix = this.gl.getUniformLocation(this.program, 'uCameraMatrix');\r\n\r\n            this.colorLocation = this.gl.getUniformLocation(this.program, 'u_color');\r\n        }\r\n        this.positionBuffer = this.gl.createBuffer();\r\n        this.vao = this.gl.createVertexArray();\r\n        this.gl.bindVertexArray(this.vao);\r\n\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\r\n        this.gl.enableVertexAttribArray(this.positionAttributeLocation);\r\n\r\n        // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\r\n        var size = 3;          // 2 components per iteration\r\n        var type = this.gl.FLOAT;   // the data is 32bit floats\r\n        var normalize = false; // don't normalize the data\r\n        var stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\r\n        var offset = 0;        // start at the beginning of the buffer\r\n        this.gl.vertexAttribPointer(this.positionAttributeLocation, size, type, normalize, stride, offset);\r\n\r\n        // First let's make some variables\r\n        // to hold the translation, width and height of the rectangle\r\n        this.translation = [-1, -1];\r\n        this.color = [Math.random(), Math.random(), Math.random(), 1];\r\n        this.width = 2;\r\n        this.height = 2;\r\n\r\n        this.mesh = new Float32Array(this.getRectangle(this.translation[0], this.translation[1], this.width, this.height));\r\n\r\n        this.transform = new Transform();\r\n        this.gl.useProgram(this.program);\r\n\r\n        // this.gl.uniform2f(this.resolutionUniformLocation, this.gl.canvas.width, this.gl.canvas.height);\r\n        this.gl.uniform4fv(this.colorLocation, this.color);\r\n\r\n        this.gl.uniformMatrix4fv(this.perspective, false, app.camera.projectionMatrix);\r\n        this.gl.uniformMatrix4fv(this.modelMatrix, false, this.transform.getViewMatrix());\r\n        this.gl.uniformMatrix4fv(this.cameraMatrix, false, app.camera.viewMatrix);\r\n        this.gl.useProgram(null);\r\n\r\n    }\r\n    getRectangle(x: number, y: number, width: number, height: number) {\r\n        let x1 = x;\r\n        let x2 = x + width;\r\n        let y1 = y;\r\n        let y2 = y + height;\r\n\r\n        return [\r\n            x1, y1, 0,\r\n            x2, y1, 0,\r\n            x1, y2, 0,\r\n            x1, y2, 0,\r\n            x2, y1, 0,\r\n            x2, y2, 0,\r\n        ];\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.perspective, false, matData);\r\n        return this;\r\n    }\r\n    setModelMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.modelMatrix, false, matData);\r\n        return this;\r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.cameraMatrix, false, matData);\r\n        return this;\r\n    }\r\n    render() {\r\n        this.update();\r\n        this.gl.useProgram(this.program);\r\n        this.transform.updateMatrix();\r\n        this.setModelMatrix(this.transform.getViewMatrix());\r\n        this.setPerspective(this.app.camera.projectionMatrix);\r\n        this.setCameraMatrix(this.app.camera.viewMatrix);\r\n\r\n        this.gl.bindVertexArray(this.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, this.mesh, this.gl.STATIC_DRAW);\r\n\r\n        // Draw the rectangle.\r\n        var primitiveType = this.gl.TRIANGLES;\r\n        var offset = 0;\r\n        var count = 6;\r\n        this.gl.drawArrays(primitiveType, offset, count);\r\n\r\n    }\r\n    update() {\r\n        this.transform.position.x += 0.01;\r\n    }\r\n\r\n}","\r\nexport class GLShaderCommon {\r\n\r\n    static getShaderProgram(gl: WebGL2RenderingContext, vertexShader: string, fragmentShader: string, needValidate: boolean = true) {\r\n        let vShader = GLShaderCommon.createShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertexShader);\r\n        let fShader = GLShaderCommon.createShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragmentShader);\r\n        if (vShader && fShader) {\r\n            let program = GLShaderCommon.createProgram(gl, vShader, fShader, needValidate);\r\n\r\n            if (program) {\r\n                return program;\r\n            } else {\r\n                console.error('vertex fragment shader error'); return null;\r\n            }\r\n        } else {\r\n            console.error('vertex fragment shader error'); return null;\r\n        }\r\n    }\r\n    static getShader(gl: WebGL2RenderingContext, type: number, source: string) {\r\n        const shader = gl.createShader(type);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        // Check if compiled successfully\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.log('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\r\n            gl.deleteShader(shader);\r\n            return null;\r\n        }\r\n        // Set the attributes, varying, and uniform to shader\r\n        // shader.attributes = this.attributesFromSource(source);\r\n        // shader.varyings = this.varyingsFromSource(source);\r\n        // shader.uniforms = this.uniformsFromSource(source);\r\n        return shader;\r\n    }\r\n    static createProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null) { return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        // gl.bindAttribLocation(program,ATTR_POSITION_LOC,ATTR_POSITION_NAME);\r\n        // gl.bindAttribLocation(program,ATTR_NORMAL_LOC,ATTR_NORMAL_NAME);\r\n        // gl.bindAttribLocation(program,ATTR_UV_LOC,ATTR_UV_NAME);\r\n\r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n\r\n    // ...............................\r\n\r\n    // static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n    //     let shader = gl.createShader(type as number);\r\n    //     gl.shaderSource(shader, shaderString);\r\n    //     gl.compileShader(shader);\r\n    //     gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    //     return shader as Webglsh;\r\n    //     // console.log(gl.getShaderInfoLog(shader));\r\n    //     // gl.deleteShader(shader);\r\n    //     // return null;\r\n    // }\r\n    static createShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n    static createShaderFromPath(gl: WebGL2RenderingContext, type: WebGLShader, url: string) {\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) { return null; }\r\n        gl.shaderSource(shader, GLShaderCommon.getSourceSynch(url) as string);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    static getSourceSynch(url: string) {\r\n        const req = new XMLHttpRequest();\r\n        req.open('GET', url, false);\r\n        req.send(null);\r\n        return (req.status === 200) ? req.responseText : null;\r\n    }\r\n\r\n    // static LoadTextResource(url: string, callback:(data: any, d2:any) => void ) {\r\n    //     let request = new XMLHttpRequest();\r\n    //     request.open('GET', url + '?please-dont-cache=' + Math.random(), true);\r\n    //     request.onload = function () {\r\n    //         if (request.status < 200 || request.status > 299) {\r\n    //             callback('Error: HTTP Status ' + request.status + ' on resource ' + url);\r\n    //         } else {\r\n    //             callback(null, request.responseText);\r\n    //         }\r\n    //     };\r\n    //     request.send();\r\n    // }\r\n    // static LoadShader(url: string, callback:(data: null, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, callback);\r\n    // }\r\n    static loadImage(url: string, callback: (data: null, image: HTMLElement) => void) {\r\n        const image = new Image();\r\n        image.onload = function () {\r\n            callback(null, image);\r\n        };\r\n        image.src = url;\r\n    }\r\n    // static LoadJSONResource(url: string, callback:(data: string, callback:string) => void ) {\r\n    //     GLUtility.LoadTextResource(url, function (err: Error, result) {\r\n    //         if (err) {\r\n    //             callback(err);\r\n    //         } else {\r\n    //             try {\r\n    //                 callback(null, JSON.parse(result));\r\n    //             } catch (e) {\r\n    //                 callback(e);\r\n    //             }\r\n    //         }\r\n    //     });\r\n    // }\r\n}\r\n","import { Vector3 } from './Vector3';\r\n\r\nexport class Matrix4 {\r\n    raw: Float32Array;\r\n    // ....................................................................\r\n    // Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    // from glMatrix\r\n    static perspective(out: Float32Array, fovy: number, aspect: number, near: number, far: number) {\r\n        let f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n    static ortho(out: number[], left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    }\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    // make the rows into the columns\r\n    static transpose(out: number[], a: number[]) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) { return null; }\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Operation\r\n\r\n    // https:// github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Matrix4, v: number[]) {\r\n        let x = v[0], y = v[1], z = v[2], w = v[3];\r\n        let c1r1 = mat4[0], c2r1 = mat4[1], c3r1 = mat4[2], c4r1 = mat4[3],\r\n            c1r2 = mat4[4], c2r2 = mat4[5], c3r2 = mat4[6], c4r2 = mat4[7],\r\n            c1r3 = mat4[8], c2r3 = mat4[9], c3r3 = mat4[10], c4r3 = mat4[11],\r\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    // From glMatrix\r\n    // Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n        //  Cache only the current line of the second matrix\r\n        let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    }\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array, rad: number, axis: number) {\r\n        let x = axis[0], y = axis[1], z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) { return null; }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\r\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\r\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return out;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat?: Float32Array) {\r\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\r\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\r\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\r\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) { return false; }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8] * z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9] * z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10] * z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11] * z + out[15];\r\n    }\r\n    constructor() {\r\n        this.raw = Matrix4.identity();\r\n    }\r\n    // ....................................................................\r\n    // Transformations Methods\r\n    vtranslate(v: Vector3) {\r\n        Matrix4.translate(this.raw, v.x, v.y, v.z);\r\n        return this;\r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.raw, x, y, z);\r\n        return this;\r\n    }\r\n    rotateY(rad: number) { Matrix4.rotateY(this.raw, rad); return this; }\r\n    rotateX(rad: number) { Matrix4.rotateX(this.raw, rad); return this; }\r\n    rotateZ(rad: number) { Matrix4.rotateZ(this.raw, rad); return this; }\r\n\r\n    vscale(vec3: Vector3) { Matrix4.scale(this.raw, vec3.x, vec3.y, vec3.z); return this; }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.raw, x, y, z);\r\n        return this;\r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.raw);\r\n        return this;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Methods\r\n    // Bring is back to identity without changing the transform values.\r\n    resetRotation() {\r\n        for (let i = 0; i < this.raw.length; i++) {\r\n            if (i >= 12 && i <= 14) { continue; }\r\n            this.raw[i] = (i % 5 === 0) ? 1 : 0;  // only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // reset data back to identity.\r\n    reset() {\r\n        for (let i = 0; i < this.raw.length; i++) { this.raw[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n}","\r\nexport class Vector3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    magnitude(v?: Vector3) {\r\n        if (v === undefined) { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z); }\r\n        let x = v.x - this.x, y = v.y - this.y, z = v.y - this.z;\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    }\r\n\r\n    normalize() {\r\n        let mag = this.magnitude();\r\n        this.x /= mag; this.y /= mag; this.z /= mag;\r\n        return this;\r\n    }\r\n    set(x: number, y: number, z: number) {\r\n        this.x = x; this.y = y; this.z = z;\r\n        return this;\r\n    }\r\n    multiScalar(v: number) {\r\n        this.x *= v; this.y *= v; this.z *= v; return this;\r\n    }\r\n    getArray() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    getFloatArray() {\r\n        return new Float32Array([this.x, this.y, this.z]);\r\n    }\r\n    clone() {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    }\r\n} ","import { Vector3 } from '../Utility/Vector3';\r\nimport { Matrix4 } from '../Utility/Matrix4';\r\n\r\nexport class Transform {\r\n    static deg2Rad = Math.PI / 180; // Cache result, one less operation to do for each update.\r\n\r\n    position: Vector3;\r\n    scale: Vector3;\r\n    rotation: Vector3;\r\n    matView: Matrix4;\r\n    matNormal: Float32Array;\r\n\r\n    forward: Float32Array;\r\n    up: Float32Array;\r\n    right: Float32Array;\r\n\r\n    constructor() {\r\n        this.position = new Vector3(0, 0, 0);\t// Traditional X,Y,Z 3d position\r\n        this.scale = new Vector3(1, 1, 1);\t// How much to scale a mesh. Having a 1 means no scaling is done.\r\n        this.rotation = new Vector3(0, 0, 0);\t// Hold rotation values based on degrees, Object will translate it to radians\r\n        this.matView = new Matrix4();\t\t// Cache the results when calling updateMatrix\r\n        this.matNormal = new Float32Array(9);\t// This is a Mat3, raw array to hold the values is enough for what its used for\r\n\r\n        // Direction Vectors\r\n        this.forward = new Float32Array(4);\t// When rotating, keep track of what the forward direction is\r\n        this.up = new Float32Array(4);\t// what the up direction is, invert to get bottom\r\n        this.right = new Float32Array(4);\t// what the right direction is, invert to get left\r\n    }\r\n    updateMatrix() {\r\n        this.matView.reset() // Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(this.rotation.x * Transform.deg2Rad)\r\n            .rotateZ(this.rotation.z * Transform.deg2Rad)\r\n            .rotateY(this.rotation.y * Transform.deg2Rad)\r\n            .vscale(this.scale);\r\n\r\n        // Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.matNormal, this.matView.raw);\r\n\r\n        // Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw); // Z\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw); // Y\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw); // X\r\n\r\n        return this.matView.raw;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward, [0, 0, 1, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.up, [0, 1, 0, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.right, [1, 0, 0, 0], this.matView.raw);\r\n        return this;\r\n    }\r\n\r\n    getViewMatrix() { return this.matView.raw; }\r\n    getNormalMatrix() { return this.matNormal; }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0);\r\n        this.scale.set(1, 1, 1);\r\n        this.rotation.set(0, 0, 0);\r\n    }\r\n}\r\n"],"names":["MeshBase","constructor","scene","this","add","render","Rect","app","super","v","f","gl","program","positionAttributeLocation","perspective","modelMatrix","cameraMatrix","colorLocation","positionBuffer","vao","translation","color","width","height","mesh","transform","canvas","GLShaderCommon","getAttribLocation","getUniformLocation","createBuffer","createVertexArray","bindVertexArray","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","type","FLOAT","vertexAttribPointer","Math","random","Float32Array","getRectangle","Transform","useProgram","uniform4fv","uniformMatrix4fv","camera","projectionMatrix","getViewMatrix","viewMatrix","x","y","x2","y2","setPerspective","matData","setModelMatrix","setCameraMatrix","update","updateMatrix","bufferData","STATIC_DRAW","primitiveType","TRIANGLES","drawArrays","position","static","vertexShader","fragmentShader","needValidate","vShader","createShader","VERTEX_SHADER","fShader","FRAGMENT_SHADER","createProgram","console","error","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","validateProgram","VALIDATE_STATUS","shaderString","url","getSourceSynch","req","XMLHttpRequest","open","send","status","responseText","callback","image","Image","onload","src","Matrix4","a","out","fovy","aspect","near","far","tan","nf","left","right","bottom","top","lr","bt","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","z","w","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b","b0","b1","b2","b3","rad","s","sin","c","cos","axis","t","b12","b20","b21","b22","len","sqrt","abs","mat","undefined","raw","identity","vtranslate","translate","rotateY","rotateX","rotateZ","vscale","vec3","scale","invert","resetRotation","i","length","reset","Vector3","magnitude","normalize","mag","set","multiScalar","getArray","getFloatArray","clone","rotation","matView","matNormal","forward","up","deg2Rad","updateDirection","getNormalMatrix","PI"],"sourceRoot":""}
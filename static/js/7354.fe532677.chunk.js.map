{"version":3,"file":"static/js/7354.fe532677.chunk.js","mappings":"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","sources":["njslab/LabStarter/Starter-DeckGL/MapboxGLWrapper/index.ts","njslab/LabStarter/Starter-DeckGL/lib/index.ts","njslab/LabStarter/Starter-DeckGL/DeckGL/index.ts","njslab/LabStarter/Starter-DeckGL/CanvasCustom/index.ts","njslab/LabStarter/Starter-DeckGL/UI/index.ts","njslab/LabStarter/Starter-DeckGL/index.ts"],"sourcesContent":["import mapboxgl from \"mapbox-gl\";\r\n\r\n// import { , PolygonLayer, COORDINATE_SYSTEM, ArcLayer, ScatterplotLayer } from 'deck.gl';\r\nimport { Deck } from '@deck.gl/core';\r\nimport { OrbitView } from '@deck.gl/core';\r\nimport { PolygonLayer, ArcLayer, ScatterplotLayer } from '@deck.gl/layers';\r\nimport { MapboxOverlay } from '@deck.gl/mapbox'; // If you are using Mapbox\r\n\r\n\r\n\r\nimport { Solution } from '../';\r\n\r\nimport { downloadImage } from '../lib';\r\n\r\nexport class MapboxGLWrapper {\r\n    public solution: Solution;\r\n    public map: mapboxgl.Map;\r\n\r\n    public canvasMapbox;\r\n    constructor(solution: Solution) {\r\n        this.solution = solution;\r\n        this.initMap(solution.divHost.id);\r\n    }\r\n    private initMap(id: string) {\r\n\r\n        // this.map = new Deck({\r\n        //     parent: divCon,\r\n        //     initialViewState: INITIAL_VIEW_STATE,\r\n        //     controller: true,\r\n        //     layers: [\r\n        //       new ScatterplotLayer({\r\n        //         data: [\r\n        //           {position: [-122.45, 37.8], color: [255, 0, 0], radius: 100}\r\n        //         ],\r\n        //         getFillColor: d => d.color,\r\n        //         getRadius: d => d.radius\r\n        //       })\r\n        //     ]\r\n        // });\r\n\r\n\r\n \r\n        \r\n        // this.map\r\n        // https://account.mapbox.com\r\n        // mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            preserveDrawingBuffer: true,\r\n            container: id,\r\n            zoom: 6,\r\n            // pitch: 30,\r\n            // minZoom: 10,\r\n            // center: [-74.5, 40],\r\n            center: [-77.430815, 37.801833],\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n            \r\n        });\r\n        this.map.dragRotate.disable();\r\n\r\n\r\n        // new ScatterplotLayer({\r\n        //     id: 'scatter-plot',\r\n        //     data: YOUR_DATA_ARRAY, // Your data goes here\r\n        //     getPosition: d => [d.longitude, d.latitude],\r\n        //     getRadius: d => d.radius,\r\n        //     getColor: d => d.color,\r\n        //   }),\r\n\r\n        // this.map.addLayer({layer})\r\n\r\n\r\n\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        this.map.on('click', (e) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n        window.addEventListener('keydown', (k) => {\r\n            // console.log(k)\r\n            // if (k.key === 'p'){\r\n\r\n            // }\r\n        });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n        \r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n        this.map.on('load', () => { this.initPost(); });\r\n    }\r\n    public initPost(){\r\n        this.solution.initPost();\r\n\r\n        // const canvas = document.createElement('canvas');\r\n        // this.solution.divHost.appendChild(canvas);\r\n        // canvas.id = 'canvasID';\r\n        // canvas.width = this.solution.divHost.clientWidth;\r\n        // canvas.height = this.solution.divHost.clientHeight;\r\n        \r\n        // this.initCustomCanvas();\r\n\r\n        // this.solution.renderer.canvas.style.width = '200%';\r\n        // this.solution.renderer.canvas.style.height = '200%';\r\n        this.canvasMapbox = this.map.getCanvas();\r\n\r\n        // this.solution.renderer.canvas.width = this.canvasMapbox.width ;\r\n        // this.solution.renderer.canvas.height = this.canvasMapbox.height ;\r\n    }\r\n    public initCustomCanvas(){\r\n\r\n        this.solution.renderer.canvas.width = this.canvasMapbox.width ;\r\n        this.solution.renderer.canvas.height = this.canvasMapbox.height ;\r\n\r\n        // this.solution.renderer.canvas.style.width = '100%';\r\n        // this.solution.renderer.canvas.style.height = '100%';\r\n        this.solution.renderer.canvas.style.display = 'none';\r\n\r\n       const bound: any = this.map.getBounds();\r\n        // console.log(bound);\r\n\r\n       this.map.addSource('canvas-source', {\r\n            type: 'raster',\r\n            canvas: this.solution.renderer.canvas,\r\n            coordinates: [\r\n\r\n                // [ 180, 90],\r\n                // [ 180, -90],\r\n                // [ -180, -90], \r\n                // [ -180, 90]\r\n\r\n                \r\n                // [bound._sw[0], bound._sw[1]],\r\n                // [bound._sw[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._ne[1]],\r\n                // [bound._ne[0], bound._sw[1]],\r\n\r\n               [ -125.618336, 48.944262], \r\n               [ -125.618336, 24.786775], \r\n               [ -65.591812, 24.786775],\r\n               [ -65.591812, 48.944262]\r\n\r\n                // [91.4461, 21.5006],\r\n                // [100.3541, 21.5006],\r\n                // [100.3541, 13.9706],\r\n                // [91.4461, 13.9706]\r\n            ],\r\n            // Set to true if the canvas source is animated. If the canvas is static, animate should be set to false to improve performance.\r\n            animate: true\r\n            });\r\n             \r\n        this.map.addLayer({\r\n            id: 'canvas-layer',\r\n            type: 'raster',\r\n            source: 'canvas-source'\r\n            });\r\n\r\n    }\r\n    \r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        const v = new mapboxgl.LngLat(lng, lat);\r\n        // console.log(v);\r\n        this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({x, y} as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        const p = this.map.project([lon, lat])\r\n        return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // this.downloadImage();\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n     \r\n    }\r\n    public downloadImage() {\r\n        const canvasMapbox = this.map.getCanvas();\r\n        downloadImage(canvasMapbox, this.solution.renderer.canvas);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    // const canvasMapbox = this.map.getCanvas(); // this.solution.deckGL.deckLayer.deck.canvas; // this.map.getCanvas(); //  document.querySelector(\".mapboxgl-canvas\") as HTMLCanvasElement;\n\n    let canvasOut = document.createElement(\"canvas\");\n    canvasOut.width = canvasMapbox.width;\n    canvasOut.height = canvasMapbox.height;\n    let context = canvasOut.getContext(\"2d\");\n\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0;\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0);\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n\n    let img = new Image();\n    img.width = canvasMapbox.width;\n    img.height = canvasMapbox.height;\n    img.src = canvasOut.toDataURL();\n\n    let link = document.createElement('a');\n    link.download = fileName;\n    link.href = canvasOut.toDataURL();\n    link.click();    \n};\n","// import { MapboxLayer } from '@deck.gl/mapbox';\n// import {MapboxLayer} from '@deck.gl/mapbox';\n// import { ScatterplotLayer, ArcLayer } from '@deck.gl/layers';\n\n\nimport React from 'react';\nimport { Deck } from '@deck.gl/core';\nimport { ScatterplotLayer, ArcLayer } from '@deck.gl/layers';\nimport { MapboxOverlay } from '@deck.gl/mapbox';\nimport mapboxgl from 'mapbox-gl';\nimport { Solution } from '../';\n\n\n// import { Solution } from '../';\n\n// export class DeckGL {\n//     public solution: Solution;\n//     deckLayer: any;\n//     deckLayer2: any;\n//     map: mapboxgl.Map;\n//     constructor(solution: Solution) {\n//         this.solution = solution;\n//     }\n//     public initPost() {\n//         this.map = this.solution.mapboxWrapper.map;\n\n//         this.deckLayer = new MapboxLayer({\n//             id: 'my-scatterplot',\n//             type: ScatterplotLayer,\n//             data: [\n//                 {position: [-74.5, 40], size: 10000},\n//                 {position: [-74.5, 40.5], size: 5000},\n//                 {position: [-74.6, 40.5], size: 5800},\n//                 {position: [-74.7, 40.5], size: 100},\n//             ],\n//             // @ts-ignore\n//             getPosition: d => d.position,\n//             getRadius: d => d.size,\n//             getFillColor: d => [255, 140, 0],\n//             getLineColor: d => [255, 255, 0]\n//         });\n//         this.map.addLayer(this.deckLayer, 'waterway-label');\n\n\n\n//         const data = [\n//             { pickup: [-122.42, 37.8], dropoff: [-74.5, 40.5] },\n//             { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n//         ];\n\n\n//         this.deckLayer2 = new MapboxLayer({\n//             id: 'my-scatterplot2',\n//             type: ArcLayer,\n//             data: data,\n//             // @ts-ignore\n//             getSourcePosition: d => d.pickup,\n//             getTargetPosition: d => d.dropoff,\n//             getSourceColor: d => [255, 128, 0],\n//             getTargetColor: d => [0, 128, 255],\n//             strokeWidth: 5\n//           });\n\n//         // this.deckLayer2 =  new ArcLayer({\n//         //     data,\n//         //     // @ts-ignore\n//         //     getSourcePosition: d => d.pickup,\n//         //     // @ts-ignore\n//         //     getTargetPosition: d => d.dropoff,\n//         //     getSourceColor: d => [255, 128, 0],\n//         //     getTargetColor: d => [0, 128, 255],\n//         //     strokeWidth: 5\n//         // });\n   \n//         this.map.addLayer(this.deckLayer2 ); // 'water-shadow'\n//     }\n// }\n\n\nexport class DeckGL {\n    public solution: Solution;\n    deckLayer: any;\n    deckLayer2: any;\n    map: mapboxgl.Map;\n    deck: any;\n\n    constructor(solution: Solution) {\n        this.solution = solution;\n    }\n\n    public initPost() {\n        this.map = this.solution.mapboxWrapper.map;\n\n        // Initialize Deck.gl layers\n        this.deck = new Deck({\n            layers: [\n                new ScatterplotLayer({\n                    id: 'my-scatterplot',\n                    data: [\n                        { position: [-74.5, 40], size: 10000 },\n                        { position: [-74.5, 40.5], size: 5000 },\n                        { position: [-74.6, 40.5], size: 5800 },\n                        { position: [-74.7, 40.5], size: 100 },\n                    ],\n                    getPosition: d => d.position,\n                    getRadius: d => d.size,\n                    getFillColor: d => [255, 140, 0],\n                    getLineColor: d => [255, 255, 0]\n                }),\n                new ArcLayer({\n                    id: 'my-scatterplot2',\n                    data: [\n                        { pickup: [-122.42, 37.8], dropoff: [-74.5, 40.5] },\n                        { pickup: [-122.43, 37.8], dropoff: [-122.42, 37.75] }\n                    ],\n                    getSourcePosition: d => d.pickup,\n                    getTargetPosition: d => d.dropoff,\n                    getSourceColor: d => [255, 128, 0],\n                    getTargetColor: d => [0, 128, 255],\n                    strokeWidth: 5\n                })\n            ]\n        });\n\n        // Create MapboxOverlay and add it to the map\n        const overlay = new MapboxOverlay(this.deck);\n\n        this.map.on('load', () => {\n            this.map.addControl(overlay); // Add the overlay to the Mapbox map\n        });\n    }\n}","import { RendererCanvas } from '../../../../lib';\nimport { Solution } from '../';\n\nexport class Renderer extends RendererCanvas {\n    public app: Solution\n    public time: number = 0.0;\n    public pts: number[][] = [];\n    public isActive = false;\n    constructor(div: any, app: Solution) {\n        super(div);\n        this.app = app;\n        this.canvas.id = 'mapboxCustom'\n\n        // const dd = app.mapboxWrapper.map.getCanvas();\n\n        // this.canvas.width = dd.width;\n        // this.canvas.height = dd.height;\n        this.canvas.style.position = 'absolute';\n        // this.canvas.style.width = '100%';\n        // this.canvas.style.height = '100%';\n        this.canvas.style.pointerEvents = 'none';\n        this.canvas.style.mixBlendMode = 'color-dodge'\n\n        // console.log(dd.width, dd.height,)\n        // TODO\n        // You code goes here for one time operation\n        // this.pts.push([0, 0]); \n        // this.pts.push([this.canvas.width * 2, this.canvas.height * 2]); \n        // this.pts.push([-71.093161, 42.358871]);\n\n        this.start();\n    }\n    public initPost() {\n        this.ctx.globalCompositeOperation = 'color-dodge';\n        this.isActive = true;\n        // \n    }\n    public mouseDown = (x: number, y: number): void => {\n\n    }\n    public mouseUp = (x: number, y: number): void => {\n\n    }\n    public mouseDrag = (x: number, y: number): void => {\n\n    }\n    public render(ctx: CanvasRenderingContext2D): void {\n        if (!this.isActive) { return; }\n        this.time += 0.1;\n\n        const z = this.app.mapboxWrapper.map.getZoom();\n        const zoomFactor = Math.pow(2, z) * 0.1\n        \n\n        for(let i = 0 ; i < this.pts.length; ++i) {\n            const pt = this.pts[i];\n            const p = this.app.mapboxWrapper.toScreen(pt[0], pt[1]);\n            // const p = this.app.mapboxWrapper.map.unproject({x: 10, y: 10})\n    \n\n            const size = 0.25 * zoomFactor;\n\n            ctx.beginPath();\n            ctx.arc(p[0], p[1], size + ((Math.sin(this.time + i) + 3) * zoomFactor ), 0, Math.PI * 2);\n            ctx.closePath();\n            ctx.fillStyle = 'rgba(0, 255, 0, 0.7)';\n            ctx.fill();\n        }\n\n    }\n}","import { Solution } from '../';\nexport class UIWrapper {\n    public solution: Solution;\n    public divHost: HTMLElement;\n    constructor(solution: Solution) {\n        this.solution = solution;\n        this.divHost = solution.divHost;\n        this.initUI();\n    }\n    public initUI() {\n        const divMenu = document.createElement('div');\n        this.divHost.appendChild(divMenu);\n\n        const div = document.createElement('div');\n        div.textContent = 'download';\n        div.style.position = 'relative';\n        div.style.margin = '10px';\n        div.onclick = () => {\n            this.solution.mapboxWrapper.downloadImage();\n        }\n        divMenu.appendChild(div);\n    }\n}","import { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { DeckGL } from './DeckGL';\r\nimport { Renderer } from './CanvasCustom';\r\nimport { UIWrapper } from './UI';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    public deckGL: DeckGL\r\n    public renderer: Renderer;\r\n    public uiWrapper: UIWrapper;\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'relative';\r\n        \r\n        this.deckGL = new DeckGL(this);\r\n        this.mapboxWrapper = new MapboxGLWrapper(this);\r\n        this.mapboxWrapper.mouseDown = this.mouseDown\r\n        this.mapboxWrapper.mouseUp = this.mouseUp\r\n        this.mapboxWrapper.mouseClick = this.mouseClick\r\n        this.mapboxWrapper.mouseMove = this.mouseMove\r\n        \r\n        this.renderer = new Renderer(this.divHost, this);\r\n\r\n        this.uiWrapper = new UIWrapper(this);\r\n    }\r\n    public initPost() {\r\n        this.renderer.initPost();\r\n        this.deckGL.initPost();\r\n    }\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseUp = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // TODO\r\n        // console.log(e);\r\n        // console.log(e['lngLat']);\r\n        this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n        // this.renderer.pts.push([e.point.x, e.point.y])\r\n    }\r\n    public mouseMove = (e)  =>{\r\n        // TODO\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}"],"names":["MapboxGLWrapper","constructor","solution","map","canvasMapbox","center","lng","lat","mapboxgl","setCenter","toMap","x","y","p","this","unproject","toScreen","lon","project","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","divHost","id","process","preserveDrawingBuffer","container","zoom","style","dragRotate","disable","on","window","addEventListener","k","div","document","getElementsByClassName","position","display","initPost","getCanvas","initCustomCanvas","renderer","canvas","width","height","getBounds","addSource","type","coordinates","animate","addLayer","source","downloadImage","customCanvas","fileName","canvasOut","createElement","context","getContext","globalAlpha","drawImage","img","Image","src","toDataURL","link","download","href","click","DeckGL","deckLayer","deckLayer2","deck","mapboxWrapper","Deck","layers","ScatterplotLayer","data","size","getPosition","d","getRadius","getFillColor","getLineColor","ArcLayer","pickup","dropoff","getSourcePosition","getTargetPosition","getSourceColor","getTargetColor","strokeWidth","overlay","MapboxOverlay","addControl","Renderer","RendererCanvas","app","super","time","pts","isActive","mouseDrag","pointerEvents","mixBlendMode","start","ctx","globalCompositeOperation","render","z","getZoom","zoomFactor","Math","pow","i","length","pt","beginPath","arc","sin","PI","closePath","fillStyle","fill","UIWrapper","initUI","divMenu","appendChild","textContent","margin","onclick","Solution","deckGL","uiWrapper","push","getElementById","keyDown","destroy","lastElementChild","removeChild"],"sourceRoot":""}
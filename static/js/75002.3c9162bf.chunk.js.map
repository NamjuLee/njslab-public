{"version":3,"file":"static/js/75002.3c9162bf.chunk.js","mappings":"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","sources":["njslab/GIS/ReactMapGL-canvas-viz/Controller/index.tsx","njslab/GIS/ReactMapGL-canvas-viz/Core/index.ts","webpack://NJS-Lab/./src/njslab/GIS/ReactMapGL-canvas-viz/style.module.css?5531","njslab/GIS/ReactMapGL-canvas-viz/App.tsx","njslab/GIS/ReactMapGL-canvas-viz/index.tsx"],"sourcesContent":["import { Button } from 'antd';\nimport { takeScreenshot } from '../Core';\n\nconst Controller = ({ mapRef }) => {\n\n    const onCapture = (e) => {\n        const canvas = mapRef.getCanvas()\n\n        takeScreenshot(mapRef).then((dataURL) => {\n            const img = new Image()\n            img.width = canvas.width\n            img.height = canvas.height\n            img.src = dataURL as string;\n            // img.onload = function () {\n            //   console.log('done')\n            //   ctx.drawImage(img, 0, 0)\n            // }\n\n            const link = document.createElement('a')\n            link.download = 'fileName.png'\n            link.href = dataURL as string;\n            link.click()\n\n        });\n    }\n\n    return (\n        <div>\n            <div>menu</div>\n\n            <Button type=\"text\" onClick={onCapture}>capture</Button>\n            {/* <Button type=\"text\" onClick={onCapture}>capture</Button> */}\n            {/* <Button type=\"text\" onClick={onCapture}>capture</Button> */}\n\n        </div>\n    )\n}\n\nexport default Controller","\nexport const downloadImage = (canvasMapbox, customCanvas, fileName = 'map.png') => {\n    // console.log({ canvasMapbox, customCanvas })\n    // const canvasMapbox = this.map.getCanvas(); // this.solution.deckGL.deckLayer.deck.canvas; // this.map.getCanvas(); //  document.querySelector(\".mapboxgl-canvas\") as HTMLCanvasElement;\n    const canvasOut = document.createElement('canvas')\n    canvasOut.width = canvasMapbox.width\n    canvasOut.height = canvasMapbox.height\n    const context = canvasOut.getContext('2d')\n    // console.log('context', context)\n    // context.globalAlpha = 1.0;\n    context.globalAlpha = 1.0\n    // context.drawImage(this.deckLayer.deck.canvas, 0, 0);\n    context.drawImage(canvasMapbox, 0, 0)\n    // context.drawImage(this.solution.renderer.canvas, 0, 0, canvasMapbox.width, canvasMapbox.height);\n    context.drawImage(customCanvas, 0, 0, canvasMapbox.width, canvasMapbox.height)\n    const dataURL = canvasOut.toDataURL()\n    const img = new Image()\n    img.width = canvasMapbox.width\n    img.height = canvasMapbox.height\n    img.src = dataURL\n    const link = document.createElement('a')\n    link.download = fileName\n    link.href = dataURL\n    link.click()\n    return dataURL\n}\n\nexport const takeScreenshot = (map) => {\n    return new Promise(function (resolve, reject) {\n        map.once('render', function () {\n            resolve(map.getCanvas().toDataURL())\n        })\n        /* trigger render */\n        map.setBearing(map.getBearing())\n    })\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"mapContainer\":\"style_mapContainer__VmRBv\",\"menu\":\"style_menu__OZNbn\"};","import mapboxgl from 'mapbox-gl';\nimport Map, { Layer, Marker, Popup, Source } from 'react-map-gl';\nimport { Suspense, useCallback, useState, useRef, useEffect, useMemo } from 'react';\nimport { csvToJsonArray } from '../../../lib/NJSCore/Core/NData'\nimport Controller from './Controller/index';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport styles from './style.module.css';\n\nconst App = () => {\n  const mapRef = useRef();\n\n  const [dataElection, setDataElection] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(process.env.PUBLIC_URL + '/static/dataDummyReady/presidential_election_county_summary_bead.csv');\n        if (!response.ok) {\n          throw new Error('Failed to load csv data');\n        }\n\n        const csvText = await response.text();\n        const result = csvToJsonArray(csvText)\n        // console.log(result)\n        setDataElection(result)\n      } catch (error) {\n        console.error('Error fetching GeoJSON:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const interpolateColor = useCallback((input) => {\n    if (input < 0 || input > 1) {\n      throw new Error('Input must be between 0 and 1.')\n    }\n    const red = Math.round(255 * (1 - input))\n    const blue = Math.round(255 * input)\n    return [red, 0, blue]\n  }, [])\n\n  const getLocPctServed = useCallback((geoid) => {\n\n    const county = dataElection.find((item) => {\n      const paddedCountyFips = item.county_fips.toString().padStart(5, '0')\n      return paddedCountyFips === geoid\n    })\n\n    if (county) {\n      return {\n        colorData: parseFloat(county.vote_per_D) || 0,\n        vote_per_D: county.vote_per_D,\n        vote_per_R: county.vote_per_R,\n        loc_pct_served: parseFloat(county.loc_pct_served) || 0\n      }\n    }\n    return null\n  }, [dataElection])\n\n  const [hoveredPoint, setHoveredPoint] = useState(null);\n  const onHover = useCallback((event) => {\n    const county = event.features && event.features[0];\n    if (county) {\n      setHoveredPoint({\n        ...county.properties,\n        longitude: event.lngLat.lng,\n        latitude: event.lngLat.lat,\n      });\n    } else {\n      setHoveredPoint(null);\n    }\n  }, []);\n\n  const onClick = useCallback((event) => {\n    const features = event.target.queryRenderedFeatures(event.point);\n\n    if (event?.features?.length > 0) {\n      // console.log(event, features);\n    }\n  }, []);\n\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(process.env.PUBLIC_URL + '/static/dataDummyReady/underserved_locations.geojson');\n        if (!response.ok) {\n          throw new Error('Failed to load GeoJSON data');\n        }\n\n        const geojsonData = await response.json();\n        setDataPoint(geojsonData);\n      } catch (error) {\n        console.error('Error fetching GeoJSON:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(process.env.PUBLIC_URL + '/static/data/us_counties.geojson');\n        if (!response.ok) {\n          throw new Error('Failed to load GeoJSON data');\n        }\n\n        const geojsonData = await response.json();\n        setDataPolygon(geojsonData);\n      } catch (error) {\n        console.error('Error fetching GeoJSON:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const [dataPoint, setDataPoint] = useState({\n    type: 'FeatureCollection',\n    features: [],\n  });\n  const layerIDPoint = 'my-layer-circle';\n  const layerStylePointCircle: any = {\n    id: layerIDPoint,\n    type: 'circle',\n    paint: {\n      'circle-radius': 6,\n      'circle-color': '#4E3FC8',\n      'circle-opacity': 0.8,\n      'circle-stroke-width': 2,\n      'circle-stroke-color': '#fff',\n    },\n  };\n\n\n  const decayFactor = 1.5;\n\n  const [dataPolygon, setDataPolygon] = useState({\n    type: 'FeatureCollection',\n    features: [],\n  });\n  const layerIDPolygon = 'polygon-layer';\n  const layerStylePolygon: any = {\n    id: layerIDPolygon,\n    type: 'fill',\n    paint: {\n      // 'fill-color': '#f00',\n      'fill-color': [\n        'rgba',\n        ['get', 'R'],\n        ['get', 'G'],\n        ['get', 'B'],\n        ['get', 'O']\n      ],\n      'fill-opacity': 0.5,\n      'fill-outline-color': '#000',\n    },\n  };\n  const updatedGeoJSON = useMemo(\n    () => ({\n      ...dataPolygon,\n      features: dataPolygon.features.map((feature) => {\n        const county = getLocPctServed(feature.properties.GEOID)\n        if (!county) return feature\n\n        const voteR = parseFloat(county.vote_per_R)\n        const voteD = parseFloat(county.vote_per_D)\n        const sum = voteR + voteD\n        const percentageD = voteD / sum\n        const color = interpolateColor(percentageD)\n\n        return {\n          ...feature,\n          properties: {\n            ...feature.properties,\n            R: color[0],\n            G: 0,\n            B: color[2],\n            O:\n              1 -\n              Math.min(county.loc_pct_served ** 2 * decayFactor * 0.0001, 1),\n            loc_pct_served: county.loc_pct_served,\n            vote_per_D: county.vote_per_D,\n            vote_per_R: county.vote_per_R\n          }\n        }\n      })\n    }),\n    [dataPolygon, getLocPctServed, interpolateColor, decayFactor]\n  )\n  \n\n  return (\n    // <div ref={mapContainer} className={styles.mapContainer}>\n    // <div>\n    <div className={styles.mapContainer}>\n      <div className={styles.menu}>\n        <Controller mapRef={mapRef.current} />\n      </div>\n      <Suspense>\n        <Map\n          // @ts-ignore\n          mapLib={mapboxgl}\n          ref={mapRef}\n          initialViewState={{\n            longitude: -100,\n            latitude: 40,\n            zoom: 3.5,\n            // latitude: 37.7577,\n            // longitude: -122.4376,\n            // zoom: 8,\n          }}\n          style={{\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 0,\n            flex: 1,\n          }}\n          mapStyle='mapbox://styles/mapbox/dark-v10'\n          mapboxAccessToken={process.env.REACT_APP_MAPBOX}\n          dragRotate={false}\n          interactiveLayerIds={[\n            layerIDPoint, \n            // layerIDPolygon\n          ]}\n          onMouseMove={onHover}\n          onClick={onClick}\n          // onMove={(evt) => setViewport(evt.viewState)}\n        >\n          <Source id={layerIDPoint} type='geojson' data={dataPoint}>\n            <Layer {...layerStylePointCircle} />\n          </Source>\n\n          <Source id={layerIDPolygon} type='geojson' data={updatedGeoJSON}>\n            <Layer {...layerStylePolygon} />\n          </Source>\n\n          {hoveredPoint && (\n            <Popup\n              longitude={hoveredPoint.longitude}\n              latitude={hoveredPoint.latitude}\n              offset={[0, -15]}\n              closeButton={false}\n              className='z-10'\n            >\n              <div className='p-2'>\n                <h3 className='font-bold'>{hoveredPoint.NAME}</h3>\n                <p>GEOID: { JSON.stringify(hoveredPoint)}</p>\n              </div>\n            </Popup>\n          )}\n        </Map>\n      </Suspense>\n    </div>\n  );\n};\nexport default App;\n","\"use client\";\r\n\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\n\r\nexport class Solution {\r\n  divHost: HTMLDivElement;\r\n  constructor(id: string) {\r\n    this.divHost = document.getElementById(id) as HTMLDivElement;\r\n    const div = document.createElement(\"div\");\r\n    div.style.height = \"100%\";\r\n    div.style.width = \"100%\";\r\n    this.divHost.appendChild(div);\r\n\r\n    const root = ReactDOM.createRoot(div);\r\n\r\n    root.render(\r\n      // <React.StrictMode>\r\n      // <HelleApp /> syntax sugar\r\n      React.createElement(App, {})\r\n      // </React.StrictMode>\r\n    );\r\n  }\r\n  public destroy() {\r\n    try {\r\n      while (this.divHost && this.divHost.lastElementChild) {\r\n        const lastChild = this.divHost.lastElementChild as Node;\r\n        this.divHost.removeChild(lastChild);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error removing child elements:\", error);\r\n    }\r\n  }\r\n}\r\n"],"names":["mapRef","type","onClick","e","canvas","getCanvas","map","Promise","resolve","reject","once","toDataURL","setBearing","getBearing","then","dataURL","img","Image","width","height","src","link","document","createElement","download","href","click","useRef","dataElection","setDataElection","useState","useEffect","async","response","fetch","process","ok","Error","csvText","text","result","csvToJsonArray","error","console","fetchData","interpolateColor","useCallback","input","Math","round","getLocPctServed","geoid","county","find","item","county_fips","toString","padStart","colorData","parseFloat","vote_per_D","vote_per_R","loc_pct_served","hoveredPoint","setHoveredPoint","onHover","event","features","properties","longitude","lngLat","lng","latitude","lat","target","queryRenderedFeatures","point","length","geojsonData","json","setDataPoint","setDataPolygon","dataPoint","layerIDPoint","layerStylePointCircle","id","paint","dataPolygon","layerIDPolygon","layerStylePolygon","updatedGeoJSON","useMemo","feature","GEOID","voteR","voteD","color","R","G","B","O","min","className","styles","current","Suspense","mapLib","mapboxgl","ref","initialViewState","zoom","style","position","top","left","right","bottom","zIndex","flex","mapStyle","mapboxAccessToken","dragRotate","interactiveLayerIds","onMouseMove","data","offset","closeButton","NAME","JSON","stringify","Solution","constructor","divHost","this","getElementById","div","appendChild","ReactDOM","render","React","App","destroy","lastElementChild","lastChild","removeChild"],"sourceRoot":""}
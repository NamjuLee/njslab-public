{"version":3,"file":"static/js/78411.f424ed94.chunk.js","mappings":"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","sources":["njslab/Workshop/workshop-graph/13_Graph-Map/MapboxGLWrapper/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/CanvasRenderer/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/Graph/util.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/Graph/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/Algorithm/Search.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/Algorithm/Dijkstra.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/Algorithm/AStar.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/Algorithm/MST.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/Controller/Common/SceneManager/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/Controller/Common/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/Controller/Renderer/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/GraphSystem/Algorithm/Delaunay.ts","njslab/Workshop/workshop-graph/13_Graph-Map/Controller/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/UIGraph/index.ts","njslab/Workshop/workshop-graph/13_Graph-Map/index.ts"],"sourcesContent":["import mapboxgl from 'mapbox-gl';\r\n\r\nexport class MapboxGLWrapper {\r\n    public map: mapboxgl.Map\r\n    constructor(id: string) {\r\n\r\n        this.initMap(id);\r\n    }\r\n    private initMap(id: string) {\r\n        // https://account.mapbox.com\r\n        // mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        mapboxgl.accessToken = process.env.REACT_APP_MAPBOX;\r\n        this.map = new mapboxgl.Map({\r\n            container: id,\r\n            zoom: 13,\r\n            // minZoom: 10,\r\n            center: [-73.97646684462907, 40.76334819495341],\r\n            style: 'mapbox://styles/mapbox/dark-v10' // 'mapbox://styles/mapbox/streets-v11'\r\n        });\r\n        this.map.dragRotate.disable();\r\n\r\n        // https://docs.mapbox.com/mapbox-gl-js/api/events/#mapmouseevent#type\r\n        this.map.on('mousemove', (e) => { this.mouseMove(e); });\r\n        this.map.on('click', (e) => { this.mouseClick(e); });\r\n        this.map.on('mousedown', (e) => { this.mouseDown(e); });\r\n        this.map.on('dblclick', (e) => { this.mouseDClick(e); });\r\n        this.map.on('mouseup', (e) => { this.mouseUp(e); });\r\n\r\n        let div = document.getElementsByClassName('mapboxgl-canvas')[0] as HTMLDivElement;\r\n        div.style.position = 'absolute';\r\n        \r\n        div = document.getElementsByClassName('mapboxgl-control-container')[0] as HTMLDivElement;\r\n        div.style.display = 'none';\r\n\r\n    }\r\n    public dd = () => {\r\n        // this.map.\r\n    }\r\n    public center = (lng: number = -99.292649, lat: number = 39.043903) => {\r\n        // const v = new mapboxgl.LngLat(lon, lat);\r\n        // console.log(v);\r\n        this.map.setCenter({ lat, lng })\r\n    }\r\n    public toMap = (x: number, y: number) => {\r\n        const p = this.map.unproject({x, y} as any)\r\n        return [p.lng, p.lat];\r\n    }\r\n    public toScreen = (lon: number, lat: number) => {\r\n        const p = this.map.project([lon, lat])\r\n        return [p.x, p.y];\r\n    }\r\n    public mouseDown = (e) => {\r\n        // console.log(this.toScreen(-71.093161, 42.358871))\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseUp = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseMove = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseClick = (e) => {\r\n        // console.log(e)\r\n        \r\n        // console.log(this.toMap(100, 100));\r\n        // console.log(e.point)\r\n        // this.center()\r\n        // this.map.zoomTo(0)\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n    public mouseDClick = (e) => {\r\n        // console.log(JSON.stringify(e.point), e.lngLat.wrap())\r\n    }\r\n}\r\n\r\n\r\n","import { RendererCanvas } from '../../../../../lib';\nimport { Solution } from '..';\nexport class CanvasRenderer extends RendererCanvas {\n    public app: Solution;\n\n    public time: number = 0.0;\n    public pts: number[][] = [];\n\n    public offscreen: OffscreenCanvas;\n    constructor(div: any, app: Solution) {\n        super(div);\n        this.app = app;\n        this.canvas.id = 'mapboxCustom'\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.width = '100%';\n        this.canvas.style.height = '100%';\n        this.canvas.style.pointerEvents = 'none';\n\n        this.offscreen = new OffscreenCanvas(this.canvas);\n\n        this.start();\n    }\n    public mouseDown = (x: number, y: number): void => {\n\n    }\n    public mouseUp = (x: number, y: number): void => {\n\n    }\n    public mouseDrag = (x: number, y: number): void => {\n\n    }\n    public render(ctx: CanvasRenderingContext2D): void {\n        this.time += 0.1;\n\n        this.offscreen.reset();\n\n        this.app.controller && this.app.controller.render(ctx, this.offscreen.ctx);\n\n    }\n}\n\nclass OffscreenCanvas {\n    public refCanvas: HTMLCanvasElement;\n    public canvas: HTMLCanvasElement;\n    public ctx: CanvasRenderingContext2D;\n    constructor(canvas) {\n        this.refCanvas = canvas;\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n\n        this.canvas.style.background = 'rgba(255, 0, 0, 0.12)';\n        this.canvas.style.zIndex = '10';\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.pointerEvents = 'none';\n        this.canvas.style.display = 'none';\n\n        window.addEventListener('resize', this.resize);\n        // this.canvas.width = canvas.width;\n        // this.canvas.height = canvas.height;\n        this.resize();\n        this.appendCanvas();\n    }\n    private appendCanvas() {\n\n        this.refCanvas.parentElement.appendChild(this.canvas);\n    }\n    public getPix = (x: number, y: number) => {\n        return this.ctx.getImageData(x,y,1,1).data;\n    }\n    private resize = () => {\n        const bounding = this.refCanvas.getBoundingClientRect();\n        this.canvas.width = bounding.width;\n        this.canvas.height = bounding.height;\n    }\n    public destroy() {\n        window.removeEventListener('resize', this.resize);\n        try {\n            while (this.refCanvas !== undefined && this.refCanvas.lastElementChild !== undefined) {\n                this.refCanvas.removeChild(this.refCanvas.lastElementChild);\n            }\n        } catch (error) { }\n    }\n    public reset() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n}","\nexport class Vector3 {\n    public x: number;\n    public y: number;\n    public z: number;\n    constructor(x: number, y: number, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z\n    }\n}\n\nexport const distance = (v0: Vector3, v1: Vector3) => {\n    return Math.sqrt(distance2(v0, v1));\n}\nconst distance2 = (v0: Vector3, v1: Vector3) => {\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\n}\n\nexport const getLineIntersectPlane = (x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number) => {\n    // Check if none of the lines are of length 0\n    if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n        return undefined;\n    }\n\n    const denominator = ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n    // Lines are parallel\n    if (denominator === 0) {\n        return undefined;\n    }\n\n    const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n    const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\n\n    // is the intersection along the segments\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n        return undefined;\n    }\n\n    // Return a object with the x and y coordinates of the intersection\n    const x = x1 + ua * (x2 - x1);\n    const y = y1 + ua * (y2 - y1);\n\n    return [x, y];\n};\n\nconst lerp = (a: number, b: number, t: number) => { return a + t * (b - a); }\n\nexport const pointOnLine = (p: Vector3, p0: Vector3, p1: Vector3) => {\n    let dx = p1.x - p0.x,\n        dy = p1.y - p0.y,\n        t = ((p.x - p0.x) * dx + (p.y - p0.y) * dy) / (dx * dx + dy * dy),\n        x = lerp(p0.x, p1.x, t),\n        y = lerp(p0.y, p1.y, t);\n    return new Vector3(x, y);\n}\n\nexport const downloadJson = (collection, name = 'download',) => {\n    const link = document.createElement('a');\n    link.href = 'data:application/json;charset=utf-8,' + encodeURIComponent(collection);\n    link.download = `${name}`;\n    link.click();\n};\n\nexport const getRandomColor = () => {\n    let letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\nexport const getRandomColorRGB = () => {\n    return [\n        Math.floor(Math.random() * 255),\n        Math.floor(Math.random() * 255),\n        Math.floor(Math.random() * 255),\n    ];\n}","\nimport { Vector3, distance, getRandomColorRGB } from './util';\n\nimport { GraphSystem} from '..';\n\nexport class GraphCommon {\n    public type = 'node';\n    public isSelected = false;\n    public id = 0;\n    public visited = false;\n    public data: any = [];\n}\nexport class Graph {\n    public graphSystem: GraphSystem;\n    public nodes: Node[] = [];\n    public edges: Edge[] = [];\n    public nodesHash = {}\n\n    constructor(graphSystem: GraphSystem) {\n        this.graphSystem = graphSystem;\n    }\n   \n}\nexport class Edge extends GraphCommon {\n    public n0: Node;\n    public n1: Node;\n    public length: number = -1;\n    public color: number[] = getRandomColorRGB();\n    constructor(n0: Node, n1: Node) {\n        super();\n        this.type = 'edge';\n        this.n0 = n0;\n        this.n1 = n1;\n    }\n    public getLength() {\n        this.length = distance(this.n0.vec, this.n1.vec);\n        return this.length;\n    }\n    public toJSON() {\n        return {\n            id: this.id,\n            n0: this.n0.id,\n            n1: this.n1.id,\n            data: this.data,\n        };\n    }\n    public remove() {\n        this.n0.removeEdge(this);\n        this.n1.removeEdge(this);\n    }\n}\nexport class Node extends GraphCommon {\n    public graph: Graph;\n    public vec: Vector3;\n    public edges: Edge[] = [];\n    public r: number = 5;\n\n    public networkDistance = -1;\n    public countVisit = 0;\n    \n    public color: number[] = getRandomColorRGB();\n    constructor(graph: Graph, x: number, y: number, z: number = 0) {\n        super();\n        this.graph = graph;\n        this.type = 'node';\n        this.vec = new Vector3(x, y, z);\n    }\n    public reset(): void {\n        this.networkDistance = -1;\n        this.countVisit = 0;\n        this.visited = false;\n    }\n    public toJSON() {\n        return {\n            id: this.id,\n            vec: {x: this.vec.x, y: this.vec.y, z: this.vec.z},\n            data: this.data\n        };\n    }\n    public remove() {\n        this.graph.graphSystem.removeNode(this);\n    }\n    public removeEdge(other: Edge) {\n        this.edges.splice(this.edges.indexOf(other), 1);\n    }\n}\n","import { Node } from '../Graph';\n\n// ........................................... BFS\nexport const getBFS = (node: Node) => {\n    let num = 0;\n    let outSortedBFS = [];\n    let queue: Node[] = [];\n    node.visited = true;\n\n    queue.push(node);\n    outSortedBFS.push(node);\n\n    while (queue.length > 0) {\n        const current = queue.shift();\n\n        for (let i = 0; i < current.edges.length; ++i) {\n            const edge = current.edges[i];\n            const other = edge.n0 === current ? edge.n1 : edge.n0;\n            if (!other.visited) {\n                other.visited = true;\n                outSortedBFS.push(other);\n                queue.push(other);\n            }\n        }\n        if (num++ > 100000) {\n            // console.log('safeguard'); \n            return;\n        }\n    }\n    return outSortedBFS;\n};\n\nexport const getDFS = (node: Node) => {\n    const outSortedDFS = [];\n    const dfs = (node: Node) => {\n        if (node.visited) { return; }\n        node.visited = true;\n        outSortedDFS.push(node);\n        for (let i = 0; i < node.edges.length; ++i) {\n            const edge = node.edges[i];\n            const other = edge.n0 === node ? edge.n1 : edge.n0;\n            dfs(other);\n        }\n    }\n    dfs(node);\n    return outSortedDFS;\n};","import { Node, Graph } from '../Graph';\n\nexport const getPath = (graph: Graph, p0: Node, p1: Node) => {\n    propagationByNode(graph.nodes, p0, costFnDistance, 0.1);\n    return backPropagation(graph.nodes, p1);\n}\n\n\nconst distanceTo = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): number => {\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\n}\n// ..............................................................\nconst costFnDistance = (p0: Node, p1: Node, beta: number = 0.0002) => {\n    return distanceTo(p0.vec.x, p0.vec.y, p0.vec.z, p1.vec.x, p1.vec.y, p1.vec.z);\n}\nconst propagationByNode = (nodes: Node[], origin: Node, optimizer?: (current: Node, np: Node, Beta: number) => number | undefined, Beta: number = 1) => { //, PixelMap pMap, transitionCostDelegate cost) {\n    if (optimizer === undefined) {\n        optimizer = costFnDistance;\n    }\n\n    for (let i = 0; i < nodes.length; ++i) { nodes[i].reset(); }\n\n    let queue: Node[] = [origin];\n    origin.networkDistance = 0;\n\n    for (let i = 0; i < 10000000; ++i) {\n        if (queue.length === 0) { break; }\n        let currentNode: Node = queue[0];\n        queue.shift();\n\n        for (let j = 0; j < currentNode.edges.length; ++j) {\n            const edge = currentNode.edges[j];\n            const np: Node = currentNode === edge.n0 ? edge.n1 : edge.n0\n\n            const newCost = optimizer(currentNode, np, Beta);\n            const result = (currentNode.networkDistance + newCost);\n            const newTemp = result; /// this.UNIT_VALUE; // result < 0.001 ? result  : result / this.UNIT_VALUE;\n            if (np.networkDistance === -1.0 || newTemp < np.networkDistance) {\n                np.networkDistance = newTemp;\n                queue.push(np);\n            }\n        }\n    }\n}\n\nconst backPropagation = (nodes: Node[], destination: Node): Node[] => {\n    let j = 0; let k = 0;\n    // this.nodeTarget = destination;\n\n    let path: Node[] = [];\n    if (destination.networkDistance !== -1.0) {\n        path.push(nodes[destination.id]);\n\n        let currentNode: Node = destination;\n        for (j = 0; j < 100000; ++j) {\n\n            let smallest: Node = currentNode;\n            smallest.countVisit++;\n\n            for (k = 0; k < currentNode.edges.length; ++k) {\n                const edge = currentNode.edges[k];\n                const np: Node = currentNode === edge.n0 ? edge.n1 : edge.n0;\n\n                if (np.networkDistance < smallest.networkDistance) {\n                    smallest = np;\n                }\n            }\n\n            if (smallest === currentNode) {\n                break;\n            }\n            currentNode = smallest;\n            path.push(nodes[currentNode.id]);\n\n        }\n\n    }\n    return path;\n}\n\n\nclass GraphDijkstra {\n    public nodes: NodeDijkstra[] = [];\n    public edges: EdgeDijkstra[] = [];\n    public nodeOrigin: Node;\n    public nodeTarget: Node;\n    public constructor() {\n\n    }\n}\nclass EdgeDijkstra {\n    public id: number = -1;\n    public n0: NodeDijkstra;\n    public n1: NodeDijkstra;\n\n    constructor(n0: NodeDijkstra, n1: NodeDijkstra) {\n        this.n0 = n0;\n        this.n1 = n1;\n        this.n0.edges.push(this);\n        this.n1.edges.push(this);\n        n0.nodes.push(n1);\n        n1.nodes.push(n0);\n    }\n}\nclass NodeDijkstra {\n    public id: number = -1;\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public edges: EdgeDijkstra[] = [];\n    public nodes: NodeDijkstra[] = [];\n\n    public networkDistance: number = -1;\n    public countVisit: number = 0;\n\n    constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    public reset(): void {\n        this.networkDistance = -1;\n        this.countVisit = 0;\n    }\n    public deepCopy(): NodeDijkstra {\n        let n = new NodeDijkstra(this.x, this.y, this.z);\n        n.id = this.id;\n        return n;\n    }\n}\n\n\n","import { Node, Graph } from '../Graph';\r\n\r\nexport const getPath = (graph: Graph, p0: Node, p1: Node) => {\r\n\r\n    const nodes = []\r\n    for(let i = 0 ; i < graph.nodes.length; ++i) {\r\n        const node =graph.nodes[i];\r\n        const newNode = new NodeAStar(node.vec.x, node.vec.y, node.vec.z)\r\n        newNode.id = node.id;\r\n        nodes.push(newNode);\r\n    }\r\n\r\n    const edges = []\r\n    for(let i = 0 ; i < graph.edges.length; ++i) {\r\n        const edge =graph.edges[i];\r\n        const newEdge = new EdgeAStar( nodes[edge.n0.id], nodes[edge.n1.id]  )\r\n        edges.push(newEdge);\r\n    }\r\n    return AStart.gePath(nodes[p0.id], nodes[p1.id])\r\n}\r\n\r\n\r\nclass AStart {\r\n    public static TYPE = {\r\n        Manhattan: 'Manhattan  ',\r\n        Euclidean: 'Euclidean ',\r\n    }\r\n    public static strength = 0.01;\r\n    public static distanceManhattan = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\r\n        return Math.abs(x0 - x1) + Math.abs(y0 - y1) + Math.abs(z0 - z1);\r\n    }\r\n    public static distanceEuclidean = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => {\r\n        return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\r\n    }\r\n    public static gePath = (startNode: NodeAStar, endNode, type?: string) => {\r\n        this.typeHeuristic = this.distanceEuclidean;\r\n        if (type === AStart.TYPE.Manhattan) {\r\n            this.typeHeuristic = this.distanceManhattan;\r\n        }\r\n        \r\n        const openNodes = [startNode];\r\n        const closedNodes: NodeAStar[] = [];\r\n        let result = undefined;\r\n        let count = 100;\r\n        while (count--) {\r\n            result = this.propagation(openNodes, closedNodes, endNode);\r\n            if (result !== undefined && result.length) {\r\n                return result;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static path: NodeAStar[] = [];\r\n    private static propagation = (openNodes, closedNodes, endNode) => {\r\n        if (openNodes.length > 0) {\r\n            // console.log(openNodes)\r\n            //find the lowest f in open nodes\r\n            let lowestF = 0;\r\n            for (let i = 0; i < openNodes.length; i++) {\r\n                if (openNodes[i].f < openNodes[lowestF].f) {\r\n                    lowestF = i;\r\n                }\r\n\r\n                if (openNodes[i].f === openNodes[lowestF].f) {\r\n                    if (openNodes[i].g > openNodes[lowestF].g) {\r\n                        lowestF = i;\r\n                    }\r\n                }\r\n            }\r\n            let current: NodeAStar = openNodes[lowestF];\r\n\r\n            if (current === endNode) {\r\n                //reached the end node so wait a sec and restart\r\n                return [current, current.previous, ...this.path];\r\n            }\r\n\r\n            //calculate path\r\n            this.path = [];\r\n            let temp = current;\r\n            while (temp.previous) {\r\n                this.path.push(temp.previous);\r\n                temp = temp.previous;\r\n\r\n                if (temp.previous === this.path[this.path.length-2]) {\r\n                    break;\r\n                }\r\n            }\r\n            // console.log(this.path.length);\r\n\r\n            openNodes.splice(openNodes.indexOf(current), 1);\r\n            closedNodes.push(current);\r\n\r\n            let neighbors = current.neighbors;\r\n            for (let i = 0; i < neighbors.length; i++) {\r\n                let neighbor = neighbors[i];\r\n\r\n                if (!closedNodes.includes(neighbor) && !neighbor.blocked) {\r\n                    let tempG = current.g + this.heuristic(neighbor, current) * this.strength;\r\n\r\n                    if (!openNodes.includes(neighbor)) {\r\n                        openNodes.push(neighbor);\r\n                    }\r\n                    else {\r\n                        continue;\r\n                    }\r\n\r\n                    neighbor.g = tempG;\r\n                    neighbor.h = this.heuristic(neighbor, endNode);\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    neighbor.previous = current\r\n                }\r\n            }\r\n            return undefined;\r\n        } else {\r\n            return this.path;\r\n        }\r\n    }\r\n    private static typeHeuristic: (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number) => number;\r\n    private static heuristic = (a: NodeAStar, b: NodeAStar) => {\r\n        return this.typeHeuristic(a.x, a.y, a.z, b.x, b.y, b.z);\r\n    }\r\n\r\n}\r\nclass NodeAStar {\r\n    public id = -1;\r\n\r\n    public f = 0;\r\n    public h = 0;\r\n\r\n    public g = 0;\r\n\r\n    public x = 0;\r\n    public y = 0;\r\n    public z = 0;\r\n    public neighbors: NodeAStar[] = [];\r\n    public edges: EdgeAStar[] = [];\r\n    public previous = undefined;\r\n    public blocked = false;\r\n    constructor(x: number, y: number, z: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n}\r\nclass EdgeAStar {\r\n    public id: number = -1;\r\n    public n0: NodeAStar;\r\n    public n1: NodeAStar;\r\n\r\n    constructor(n0: NodeAStar, n1: NodeAStar) {\r\n        this.n0 = n0;\r\n        this.n1 = n1;\r\n        this.n0.edges.push(this);\r\n        this.n1.edges.push(this);\r\n        n0.neighbors.push(n1);\r\n        n1.neighbors.push(n0);\r\n    }\r\n}\r\n\r\nconst buildNetwork = (lns: any) => {\r\n    //  console.log(lns);\r\n\r\n    let nodes: NodeAStar[] = []\r\n    let edges: EdgeAStar[] = []\r\n\r\n    let nodesForEdge: NodeAStar[] = [];\r\n    for (let i = 0; i < lns.length; ++i) {\r\n        let p0 = lns[i].p0;\r\n        let p1 = lns[i].p1;\r\n        nodesForEdge.push(AddNode(p0, nodes));\r\n        nodesForEdge.push(AddNode(p1, nodes));\r\n    }\r\n    for (let i = 0; i < nodesForEdge.length; i += 2) {\r\n        AddEdge(nodesForEdge[i], nodesForEdge[i + 1], edges);\r\n    }\r\n\r\n    return nodes\r\n}\r\n\r\nconst AddEdge = (n1: NodeAStar, n2: NodeAStar, edges: EdgeAStar[]): EdgeAStar | undefined => {\r\n    if (n1 === n2) return undefined;\r\n\r\n    const testedEdge = findEdge(n1, n2, edges);\r\n    if (testedEdge !== undefined) {\r\n        return testedEdge;\r\n    }\r\n\r\n    let edge = new EdgeAStar(n1, n2);\r\n    edge.id = edges.length;\r\n    edges.push(edge);\r\n    return edge;\r\n}\r\nconst findEdge = (n0: NodeAStar, n1: NodeAStar, edges: EdgeAStar[]): EdgeAStar | undefined => {\r\n    for (let i = 0; i < edges.length; ++i) {\r\n        if ((edges[i].n0 === n0 && edges[i].n1 === n1) || (edges[i].n0 === n1 && edges[i].n1 === n0)) {\r\n            return edges[i];\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\nconst AddNode = (p: any, nodes: NodeAStar[]): NodeAStar => {\r\n    for (let i = 0; i < nodes.length; ++i) {\r\n        if (distanceTo(p.x, p.y, p.z, nodes[i].x, nodes[i].y, nodes[i].z) < 0.01) {\r\n            return nodes[i];\r\n        }\r\n    }\r\n\r\n    let node = new NodeAStar(p.x, p.y, p.z);\r\n    node.id = nodes.length;\r\n    nodes.push(node);\r\n    return node;\r\n}\r\n\r\n\r\nconst distanceTo = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): number => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\r\n}","import { Graph } from '../Graph'\r\nclass GraphMST {\r\n    private nodes = [];\r\n    private edges = [];\r\n    constructor() {\r\n        this.nodes = [];\r\n        this.edges = [];\r\n    }\r\n    addVertex(node) {\r\n        this.nodes.push(node);\r\n    }\r\n\r\n    addEdge(n0, n1, weight) {\r\n        this.edges.push(\r\n            { n0, n1, weight }\r\n        );\r\n    }\r\n    primMST(startNode) {\r\n        const visited = {};\r\n        const MST = [];\r\n\r\n        visited[startNode] = true;\r\n\r\n        while (MST.length < this.nodes.length - 1) {\r\n            let minEdge = null;\r\n\r\n            this.edges.forEach(edge => {\r\n                if ((visited[edge.n0] && !visited[edge.n1]) || (!visited[edge.n0] && visited[edge.n1])) {\r\n                    if (!minEdge || edge.weight < minEdge.weight) {\r\n                        minEdge = edge;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (!minEdge) break;\r\n\r\n            MST.push(minEdge);\r\n            visited[minEdge.n0] = true;\r\n            visited[minEdge.n1] = true;\r\n        }\r\n        return MST;\r\n    }\r\n}\r\n\r\n\r\nexport const getMST = (graph: Graph) => {\r\n    const g = new GraphMST();\r\n\r\n    for (let i = 0; i < graph.nodes.length; ++i) {\r\n        g.addVertex(graph.nodes[i].id);\r\n    }\r\n    for (let i = 0; i < graph.edges.length; ++i) {\r\n        const edge = graph.edges[i];\r\n        g.addEdge(edge.n0.id, edge.n1.id, edge.getLength() )\r\n    }\r\n\r\n    const MST = g.primMST(0);\r\n    // console.log(\"Minimum Spanning Tree:\");\r\n    // MST.forEach(edge => { console.log(`${edge.n0} - ${edge.n1} : ${edge.weight}`); });\r\n\r\n    return MST;\r\n}","import { Graph, Node, Edge } from './Graph';\n\nimport { getBFS, getDFS } from './Algorithm/Search';\nimport { getPath } from './Algorithm/Dijkstra';\nimport { getPath as getPathAStar } from './Algorithm/AStar';\nimport { getMST } from './Algorithm/MST';\n\nimport {\n    Vector3, distance,\n    getLineIntersectPlane, pointOnLine,\n} from './Graph/util';\n\nexport { Node, Edge } from './Graph';\n// import { Solution } from '../..';\n\nexport class GraphSystem {\n    static minDis = 0.00001;\n    public graph: Graph;\n    public pathMST = undefined;\n\n    public nodeStart: Node | undefined = undefined;\n    public nodeEnd: Node | undefined = undefined;\n\n    public nodePre: Node | Edge | undefined = undefined;\n\n    private _captured: Node | Edge | undefined = undefined;\n\n    constructor() {\n        this.graph = new Graph(this);\n\n    }\n    public get captured() {\n        return this._captured\n    }\n    public set captured(v) {\n        if (this._captured) {\n            this._captured.isSelected = false;\n        }\n        this._captured = v;\n        if (v) {\n            this._captured.isSelected = true;\n        }\n    }\n    public resetCapture() {\n        this.captured = undefined;\n        this.nodePre = undefined;\n    }\n    public getPix(x: number, y: number) {\n        return new Uint8ClampedArray()\n    }\n    // ..............................................................\n    public addNode(x: number, y: number, z: number = 0) {\n        const node = new Node(this.graph, x, y, 0);\n        this.graph.nodes.push(node);\n        this.graph.nodesHash[node.color.join()] = node\n        this.resetCapture();\n        return node;\n    }\n    public addEdge(n0: Node, n1: Node) {\n        if (n0 === n1) return undefined;\n        if (this.findEdgeByNodes(n0, n1)) return undefined;\n\n        const edge = new Edge(n0, n1);\n        n0.edges.push(edge);\n        n1.edges.push(edge);\n        this.graph.edges.push(edge);\n\n        this.edgeSplitByEdge(edge);\n\n        this.resetCapture();\n        return edge;\n    }\n    public addEdgeByClosestNode(node: Node) {\n        const nn = this.findNode(node);\n        if (nn) this.addEdge(node, nn);\n        this.resetCapture();\n    }\n    public addEdgeSplit(n0: Node, n1: Node) {\n        const edge = new Edge(n0, n1);\n        n0.edges.push(edge);\n        n1.edges.push(edge);\n        this.graph.edges.push(edge);\n        return edge;\n    }\n    // ..............................................................\n    public edgeSplitByNode(node: Node, edge: Edge) {\n        const n0 = edge.n0;\n        const n1 = edge.n1;\n\n        this.addEdge(n0, node);\n        this.addEdge(node, n1);\n\n        this.removeEdge(edge);\n        this.resetCapture();\n    }\n    // edge split from a moved node by it's edges\n    public edgeSplitByNodeEdges(node: Node) {\n        const edgeRemove = [];\n\n        let theEdgeLength = node.edges.length;\n        for (let j = 0; j < theEdgeLength; ++j) {\n            // console.log(j);\n\n            const edge = node.edges[j];\n            const nodes: Node[] = [];\n\n            for (let i = this.graph.edges.length - 1; i > -1; --i) {\n                const other = this.graph.edges[i];\n                if (edge.n0 !== other.n0 &&\n                    edge.n0 !== other.n1 &&\n                    edge.n1 !== other.n0 &&\n                    edge.n1 !== other.n1) {\n                    const inter = getIntersectEdge(edge, other);\n                    if (inter) {\n                        // console.log(inter)\n                        const nn = new Node(this.graph, inter[0], inter[1]);\n                        this.graph.nodesHash[nn.color.join()] = nn;\n                        this.graph.nodes.push(nn);\n                        this.addEdgeSplit(nn, other.n0);\n                        this.addEdgeSplit(nn, other.n1);\n\n                        this.removeEdge(other);\n                        nodes.push(nn);\n                    }\n                }\n            }\n\n            if (nodes.length > 0) {\n                let nodeFirst = edge.n0;\n                nodes.push(edge.n1);\n                const disList = nodes.map((n) => { return distance(n.vec, edge.n0.vec); });\n                const indices = disList.map((val, index) => index);\n                const sortedDis = indices.sort((a, b) => disList[a] - disList[b]);\n                this.addEdgeSplit(nodeFirst, nodes[sortedDis[0]]);\n                for (let i = 0; i < sortedDis.length - 1; ++i) {\n                    this.addEdgeSplit(nodes[sortedDis[i]], nodes[sortedDis[i + 1]]);\n                }\n\n                // edge.n0.removeEdge(edge);\n                // edge.n1.removeEdge(edge);\n                edgeRemove.push(edge);\n                this.graph.edges.splice(this.graph.edges.indexOf(edge), 1);\n            }\n        }\n\n        edgeRemove.forEach((e) => {\n            e.n0.removeEdge(e);\n            e.n1.removeEdge(e);\n        });\n        \n        if (edgeRemove.length === 0) {\n            return false;\n        } else {\n            this.updateID();\n            return true;\n        }\n    }\n    // add a node by edge intersection\n    public edgeSplitByEdge(edge: Edge, updateID = true) {\n        const nodes: Node[] = [];\n\n        for (let i = this.graph.edges.length - 1; i > -1; --i) {\n            const other = this.graph.edges[i];\n            if (edge.n0 !== other.n0 &&\n                edge.n0 !== other.n1 &&\n                edge.n1 !== other.n0 &&\n                edge.n1 !== other.n1) {\n                const inter = getIntersectEdge(edge, other);\n                if (inter) {\n                    // console.log(inter)\n                    const nn = new Node(this.graph, inter[0], inter[1])\n                    this.graph.nodes.push(nn);\n                    this.graph.nodesHash[nn.color.join()] = nn;\n\n                    this.addEdgeSplit(nn, other.n0);\n                    this.addEdgeSplit(nn, other.n1);\n\n                    this.removeEdge(other);\n                    nodes.push(nn);\n                }\n            }\n        }\n\n        if (nodes.length > 0) {\n            let nodeFirst = edge.n0;\n            nodes.push(edge.n1);\n            const disList = nodes.map((n) => { return distance(n.vec, edge.n0.vec); });\n            const indices = disList.map((val, index) => index);\n            const sortedDis = indices.sort((a, b) => disList[a] - disList[b]);\n            this.addEdgeSplit(nodeFirst, nodes[sortedDis[0]]);\n            for (let i = 0; i < sortedDis.length - 1; ++i) {\n                this.addEdgeSplit(nodes[sortedDis[i]], nodes[sortedDis[i + 1]]);\n            }\n            this.removeEdge(edge);\n        }\n\n        updateID && this.updateID();\n    }\n    // ..............................................................\n    public removeNode(node: Node) {\n        node.edges.forEach((edge) => {\n            if (edge.n0 === node) {\n                edge.n1.removeEdge(edge)\n            } else {\n                edge.n0.removeEdge(edge)\n            }\n            this.graph.edges.splice(this.graph.edges.indexOf(edge), 1);\n        });\n\n        this.graph.nodes.splice(this.graph.nodes.indexOf(node), 1);\n        delete this.graph.nodesHash[node.color.join()];\n\n        this.updateID();\n        this.resetCapture();\n    }\n    public removeEdge(other: Edge) {\n        other.n0.removeEdge(other);\n        other.n1.removeEdge(other);\n        this.graph.edges.splice(this.graph.edges.indexOf(other), 1);\n    }\n    // ..............................................................\n    public findNode(node: Node) {\n        let theDis = Number.MAX_VALUE;\n        let index = -1;\n        for (let i = 0; i < this.graph.nodes.length; ++i) {\n            if (this.graph.nodes[i] === node) continue;\n            const vec = this.graph.nodes[i].vec;\n            const dis = distance(vec, node.vec);\n            if (theDis > dis) {\n                theDis = dis;\n                index = i;\n            }\n        }\n        if (index > -1) { return this.graph.nodes[index]; }\n        return undefined;\n    }\n    public findNodeVec(x: number, y: number, minDis = GraphSystem.minDis) {\n        // const sp = this.\n        const dataPixel = this.getPix(x, y);\n        // console.log(dataPixel);\n        if (dataPixel) {\n            // console.log(dataPixel);\n            let newArray = new Uint8ClampedArray(dataPixel.subarray(0, dataPixel.length - 1));\n\n            const node = this.graph.nodesHash[newArray.join()]\n            // console.log({node})\n            // console.log(this.graph)\n            if (node) {\n                return node\n            }\n        }\n\n        return undefined\n\n        // // console.log(this.graph)\n        // let theDis = Number.MAX_VALUE;\n        // let index = -1;\n        // const v = new Vector3(x, y);\n        // for (let i = 0; i < this.graph.nodes.length; ++i) {\n        //     const vec = this.graph.nodes[i].vec;\n        //     const dis = distance(vec, v);\n        //     if (theDis > dis) {\n        //         theDis = dis;\n        //         index = i;\n        //     }\n        // }\n        // // console.log(this.graph.nodes)\n        // if (index > -1 && theDis < minDis) { return this.graph.nodes[index]; }\n        // return undefined;\n    }\n    public findEdgeVec(x: number, y: number, minDis = GraphSystem.minDis) {\n        const mv = new Vector3(x, y, 0)\n        for (let i = 0; i < this.graph.edges.length; ++i) {\n            const edge = this.graph.edges[i];\n            const cp = pointOnLine(mv, edge.n0.vec, edge.n1.vec);\n\n            const dis = distance(mv, cp);\n            if (dis < minDis) {\n                return { edge, vec: cp };\n            }\n        }\n        return undefined;\n    }\n    public findEdgeByEdge(edge: Edge) {\n        return this.findEdgeByNodes(edge.n0, edge.n1);\n    }\n    public findEdgeByNodes(n0: Node, n1: Node) {\n        for (let i = 0; i < this.graph.edges.length; ++i) {\n            const other = this.graph.edges[i];\n            if ((n0 === other.n0 && n1 === other.n1) || (n0 === other.n1 && n1 === other.n0)) {\n                return other;\n            }\n        }\n        return undefined;\n    }\n    public getEdgeByTwoNode(n0: Node, n1: Node) {\n        for (let i = 0; i < this.graph.edges.length; ++i) {\n            const edge = this.graph.edges[i];\n            if ((edge.n0 === n0 && edge.n1 === n1) || (edge.n0 === n1 && edge.n1 === n0)) {\n                return edge;\n            }\n        }\n        return undefined;\n    }\n    public mergeTwoNodes(n0: Node, n1: Node) {\n\n        const others = []\n        for (let i = 0; i < n1.edges.length; ++i) {\n            const edge = n1.edges[i];\n            if (edge.n0 === n1) {\n                others.push(edge.n1);\n            } else {\n                others.push(edge.n0);\n            }\n        }\n        n1.remove();\n\n        others.forEach((n) => {\n            if (!this.getEdgeByTwoNode(n0, n)) {\n                this.addEdge(n0, n);\n            }\n        })\n    }\n    // ..............................................................\n    public updateID() {\n        for (let i = 0; i < this.graph.nodes.length; ++i) { this.graph.nodes[i].id = i; }\n        for (let i = 0; i < this.graph.edges.length; ++i) { this.graph.edges[i].id = i; }\n    }\n    public resetVisit() {\n        for (let i = 0; i < this.graph.nodes.length; ++i) { this.graph.nodes[i].visited = false; }\n    }\n\n    public setNodeStart() {\n        if (this.captured) {\n            this.nodeStart = this.captured as Node;\n        }\n    }\n    public setNodeEnd() {\n        if (this.captured) {\n            this.nodeEnd = this.captured as Node;\n        }\n    }\n    // ..............................................................\n    public computePath() {\n        if (this.nodeStart && this.nodeEnd) {\n            return computePath(this.graph, this.nodeStart.id, this.nodeEnd.id);\n        }\n    }\n    public computePathAStar() {\n        if (this.nodeStart && this.nodeEnd) {\n            return computePathAStar(this.graph, this.nodeStart.id, this.nodeEnd.id);\n        }\n    }\n    // ..............................................................\n    public computeMST() {\n        const mst = computeMST(this.graph);\n        this.pathMST = mst;\n        // console.log(this.pathMST);\n        return mst;\n    }\n    public computeBFS() {\n        this.resetVisit();\n        const arraySearch = getBFS(this.graph.nodes[0]);\n        const ids = arraySearch.map((d) => d.id);\n        // console.log(ids);\n        return ids;\n    }\n    public computeDFS() {\n        this.resetVisit();\n        const arraySearch = getDFS(this.graph.nodes[0]);\n        const ids = arraySearch.map((d) => d.id);\n        // console.log(ids);\n        return ids;\n    }\n}\n\n// ..............................................................\n\nconst getIntersectEdge = (e0: Edge, e1: Edge) => {\n    return getIntersect(e0.n0, e0.n1, e1.n0, e1.n1);\n};\nconst getIntersect = (n0: Node, n1: Node, n2: Node, n3: Node) => {\n    return getLineIntersectPlane(n0.vec.x, n0.vec.y, n1.vec.x, n1.vec.y, n2.vec.x, n2.vec.y, n3.vec.x, n3.vec.y);\n};\nconst computeMST = (graph) => {\n    const pathMST = getMST(graph);\n    return pathMST;\n};\nconst computePath = (graph, idStart, idEnd) => {\n    const path = getPath(graph, graph.nodes[idStart], graph.nodes[idEnd]);\n    return path;\n};\nconst computePathAStar = (graph, idStart, idEnd) => {\n    const path = getPathAStar(graph, graph.nodes[idStart], graph.nodes[idEnd]);\n    return path;\n};\n","\nexport class SceneManager {\n  private histories: any = [];\n  private currentIndex = -1;\n  public reset() {\n    this.histories = [];\n    this.currentIndex = -1;\n  }\n  public push(data: any) {\n    if (this.currentIndex < this.histories.length - 1) {\n      this.histories.splice(this.currentIndex + 1, this.histories.length);\n    }\n    this.histories.push(data);\n    this.currentIndex = this.histories.length - 1;\n  }\n  public getCurrentIndex() {\n    return this.currentIndex;\n  }\n  public getHistoryLength() {\n    return this.histories.length;\n  }\n  public getCurrentState() {\n    return { currentIndex: this.getCurrentIndex(), historyNum: this.getHistoryLength() };\n  }\n  public undo() {\n    if (this.currentIndex === 0) { return undefined; }\n    this.currentIndex--;\n    return this.histories[this.currentIndex];\n  }\n  public redo() {\n    this.currentIndex++;\n    this.currentIndex = this.currentIndex < this.histories.length ? this.currentIndex : this.histories.length - 1;\n    return this.histories[this.currentIndex];\n  }\n}\n\nexport class SceneState {\n  private manager: SceneManager;\n  constructor() {\n    // this.scene = scene;\n    this.manager = new SceneManager();\n  }\n  public getLog() {\n    return this.manager.getCurrentState();\n  }\n  public resetState() {\n    this.manager.reset();\n    this.captureState([]);\n  }\n  public captureState(data) {\n    this.manager.push(data);\n    // this.manager.push(this.scene.common.getData());\n    const state = this.manager.getCurrentState();\n    // console.log(state);\n    return state;\n  }\n  public undo() {\n    return this.manager.undo();\n    // const state = this.manager.undo();\n    // this.scene.common.populateArea(state);\n  }\n  public redo() {\n    return this.manager.redo();\n    // const state = this.manager.redo();\n    // this.scene.common.populateArea(state);\n  }\n}\n\n\n","import { downloadJson } from '../../GraphSystem/Graph/util';\nimport { Controller } from '..';\nimport { GraphSystem } from '../../GraphSystem';\nimport { SceneState } from './SceneManager';\n\nexport class Common {\n    public controller: Controller;\n    public sceneState: SceneState;\n\n    public graphSystem: GraphSystem;\n\n    constructor(controller: Controller) {\n        this.controller = controller;\n        this.graphSystem = this.controller.graphSystem;\n        this.sceneState = new SceneState();\n    }\n    public reset() {\n        const graph = this.controller.graphSystem.graph;\n        graph.nodes = [];\n        graph.edges = [];\n        this.capture();\n    }\n    public capture() {\n        // console.trace();\n        this.sceneState.captureState(this.toJSON());\n        this.updateUndoRedoHist();\n    }\n    public updateUndoRedoHist() {\n        if (this.controller.divHist) {\n            const hist = this.sceneState.getLog();\n            this.controller.divHist.textContent = `hist: ${hist.currentIndex}/${hist.historyNum - 1}`;\n        }\n    }\n    public setCommandMode(v) {\n        this.controller.commandMode = v;\n    }\n    public toScreen = (x: number, y: number) => {\n        return this.controller.projection(x, y)\n    }\n    // ...........................................\n    public undo() {\n        const data = this.sceneState.undo();\n        data && this.dump(data);\n        this.updateUndoRedoHist();\n        this.controller.graphSystem.resetCapture();\n        // console.log('undo', data);\n    }\n    public redo() {\n        const data = this.sceneState.redo();\n        data && this.dump(data);\n        this.updateUndoRedoHist();\n        this.controller.graphSystem.resetCapture();\n        // console.log('redo', data);\n    }\n    // ...........................................\n    public toJSON() {\n        const data = { \n            node: [], edge: [],\n            MST: this.controller.common.computeMST(),\n\n        }\n        this.controller.graphSystem.graph.nodes.forEach((n) => { data.node.push(n.toJSON()); });\n        this.controller.graphSystem.graph.edges.forEach((e) => { data.edge.push(e.toJSON()); });\n\n        return data;\n    }\n    public exportJSON() {\n        const obj = JSON.stringify(this.toJSON());\n        downloadJson(obj, 'graph.json');\n    }\n    public dump(data) {\n        const graphSystem = this.controller.graphSystem;\n        graphSystem.graph.nodes = [];\n        graphSystem.graph.edges = [];\n\n        for (let i = 0; i < data.node.length; ++i) {\n            const nodeData = data.node[i];\n            const node = graphSystem.addNode(nodeData.vec.x, nodeData.vec.y, nodeData.vec.z);\n            node.id = nodeData.id;\n            node.data = nodeData.data;\n        }\n        for (let i = 0; i < data.edge.length; ++i) {\n            const edgeData = data.edge[i];\n            const edge = graphSystem.addEdge(graphSystem.graph.nodes[edgeData.n0], graphSystem.graph.nodes[edgeData.n1]);\n            edge.id = edgeData.id;\n            edge.data = edgeData.data;\n        }\n    }\n    public populate() {\n        const x = Math.random() * this.controller.canvas.width;\n        const y = Math.random() * this.controller.canvas.height;\n        this.controller.mouseClick(x, y, undefined);\n    }\n    // ...........................................\n    public toggleDelaunay(v: boolean) { this.controller.renderer.toggleDelaunay = v; }\n    public toggleMST(v: boolean) { this.controller.renderer.toggleMST = v; }\n    public computeMST() {\n        return this.controller.graphSystem.computeMST();\n    }\n    public computedBSF() {\n        const result = this.controller.graphSystem.computeBFS();\n        this.updateSearchResult('BFS: ' + result.join(', '));\n    }\n    public computedDFS() {\n        const result = this.controller.graphSystem.computeDFS();\n        this.updateSearchResult('DFS: ' + result.join(', '));\n    }\n    public updateSearchResult(result: string) {\n        this.controller.divSearchResult.textContent = result;\n    }\n    public computedDijkstra(v: boolean) {\n        this.controller.renderer.toggleDijkstra = v;\n    }\n    public computedAStar(v: boolean) {\n        this.controller.renderer.toggleAStar = v;\n    }\n    // ...........................................\n    public toggleOffscreenBind = (v: boolean) => {\n\n    }\n    // ...........................................\n    public removeSelection() {\n        // console.log(this.graphSystem.captured)\n        if (this.controller.graphSystem.captured) {\n            this.controller.graphSystem.captured.remove();\n            this.controller.graphSystem.captured = undefined;\n        }\n    }\n    public addNodeWithClosestNode(x, y) {\n        // console.log(x, y)\n        const node = this.graphSystem.addNode(x, y, 0);\n        // console.log(node)\n        this.graphSystem.addEdgeByClosestNode(node);\n    }\n}","import { Controller } from '..';\nimport { Node, Edge } from '../../GraphSystem';\nimport { getDelaunay } from '../../GraphSystem/Algorithm/Delaunay';\n\nexport class GraphRenderer {\n    public controller: Controller;\n\n    public toggleDelaunay = false;\n    public toggleMST = false;\n\n    public toggleDijkstra = false;\n    public toggleAStar = false;\n\n    constructor(controller: Controller) {\n        this.controller = controller;\n    }\n    public projection(x: number, y: number) {\n        return this.controller.projection(x, y);\n    }\n    public render(ctx: CanvasRenderingContext2D, ctxOff: CanvasRenderingContext2D) {\n\n\n\n\n\n        // this.graph.render(ctx);\n        // this.divSel.textContent = JSON.stringify(this.graphSystem.captured);\n\n        if (this.controller.graphSystem.captured) {\n            this.controller.divSel.textContent = this.controller.graphSystem.captured.type;\n        } else {\n            this.controller.divSel.textContent = 'undefined';\n        }\n\n        this.renderNodeStartEnd(ctx, ctxOff);\n\n        ctx.beginPath();\n        ctx.arc(this.controller.m.x, this.controller.m.y, 2, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fillStyle = '#888';\n        ctx.fill();\n\n\n        if (this.toggleMST) {\n\n            this.controller.common.computeMST();\n\n            // if (this.controller.graphSystem.pathMST) {\n            const nodes = this.controller.graphSystem.graph.nodes;\n\n            // console.log('========');\n            ctx.strokeStyle = '#ff0';\n            ctx.beginPath();\n            this.controller.graphSystem.pathMST.forEach(e => {\n                const v0 = this.controller.common.toScreen(nodes[e.n0].vec.x, nodes[e.n0].vec.y);\n                const v1 = this.controller.common.toScreen(nodes[e.n1].vec.x, nodes[e.n1].vec.y);\n                ctx.moveTo(v0[0], v0[1]);\n                ctx.lineTo(v1[0], v1[1]);\n            });\n            ctx.lineWidth = 5;\n            ctx.stroke();\n            // }\n        }\n\n        if (this.toggleDelaunay) {\n            getDelaunay(ctx, this.controller.graphSystem.graph.nodes, this.controller.common.toScreen);\n        }\n\n        if (this.toggleDijkstra && this.controller.graphSystem.nodeStart && this.controller.graphSystem.nodeEnd) {\n            const paths = this.controller.graphSystem.computePath();\n            const pathProjected = paths.map((v) =>\n                this.controller.common.toScreen(v.vec.x, v.vec.y)\n            );\n\n            ctx.beginPath();\n            ctx.moveTo(pathProjected[0][0], pathProjected[0][1]);\n            for (let i = 1; i < pathProjected.length; ++i) ctx.lineTo(pathProjected[i][0], pathProjected[i][1]);\n            ctx.strokeStyle = '#f0f';\n            ctx.lineWidth = 5;\n            ctx.stroke();\n        }\n\n        if (this.toggleAStar && this.controller.graphSystem.nodeStart && this.controller.graphSystem.nodeEnd) {\n            const pathProjected = this.controller.graphSystem.computePathAStar().map((v) =>\n                this.controller.common.toScreen(v.x, v.y)\n            );\n\n            ctx.beginPath();\n            ctx.moveTo(pathProjected[0][0], pathProjected[0][1]);\n            for (let i = 1; i < pathProjected.length; ++i) ctx.lineTo(pathProjected[i][0], pathProjected[i][1]);\n            ctx.strokeStyle = '#f0f';\n            ctx.lineWidth = 5;\n            ctx.stroke();\n        }\n\n        this.renderGraph(ctx, ctxOff);\n\n    }\n    public renderNodeStartEnd(ctx, ctxOff) {\n        ctx.fillStyle = '#0ff';\n        if (this.controller.graphSystem.nodeStart) {\n            const v = this.controller.graphSystem.nodeStart.vec;\n            ctx.beginPath();\n            ctx.arc(v.x, v.y, 8, 0, Math.PI * 2.0);\n            ctx.closePath();\n            ctx.fill();\n        }\n        if (this.controller.graphSystem.nodeEnd) {\n            const v = this.controller.graphSystem.nodeEnd.vec;\n            ctx.beginPath();\n            ctx.arc(v.x, v.y, 8, 0, Math.PI * 2.0);\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n    public renderGraph(ctx: CanvasRenderingContext2D, ctxOff: CanvasRenderingContext2D) {\n\n        this.controller.log = `N:${this.controller.graphSystem.graph.nodes.length}, E:${this.controller.graphSystem.graph.edges.length}`;\n        // console.log(`N:${this.controller.graphSystem.graph.nodes.length}, E:${this.controller.graphSystem.graph.edges.length}`)\n\n        this.controller.graphSystem.graph.edges.forEach((e: Edge) => { this.renderGraphEdge(ctx, ctxOff, e); })\n        this.controller.graphSystem.graph.nodes.forEach((n: Node) => { this.renderGraphNode(ctx, ctxOff, n); })\n    }\n    public renderGraphNode(ctx: CanvasRenderingContext2D, ctxOff: CanvasRenderingContext2D, node: Node) {\n\n        let p = this.projection(node.vec.x, node.vec.y);\n\n        ctx.beginPath();\n        ctx.arc(p[0], p[1], node.r, 0, 3.14 * 2);\n        ctx.closePath();\n        ctx.fillStyle = '#ff0000';\n        ctx.fill();\n        if (node.isSelected) {\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = '#00f';\n            ctx.stroke();\n        }\n\n        ctx.strokeStyle = '#ff0000';\n        ctx.lineWidth = 1;\n        ctx.strokeText(`${node.networkDistance}`, p[0], p[1] - 20);\n        ctx.strokeText(`${node.id}`, p[0], p[1] - 7);\n\n        // Offscreen\n        ctxOff.beginPath();\n        ctxOff.arc(p[0], p[1], node.r + 1, 0, 3.14 * 2);\n        ctxOff.closePath();\n        ctxOff.fillStyle = `rgb(${node.color.join()})`;\n        ctxOff.fill();\n\n    }\n    public renderGraphEdge(ctx: CanvasRenderingContext2D, ctxOff: CanvasRenderingContext2D, edge: Edge) {\n\n\n        if (edge.isSelected) {\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = '#00f';\n            ctx.beginPath();\n            let p = this.projection(edge.n0.vec.x, edge.n0.vec.y);\n            ctx.moveTo(p[0], p[1]);\n\n            p = this.projection(edge.n1.vec.x, edge.n1.vec.y);\n            ctx.lineTo(p[0], p[1]);\n            ctx.stroke();\n        }\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        let p = this.projection(edge.n0.vec.x, edge.n0.vec.y);\n        ctx.moveTo(p[0], p[1]);\n\n        p = this.projection(edge.n1.vec.x, edge.n1.vec.y);\n        ctx.lineTo(p[0], p[1]);\n        ctx.strokeStyle = '#0f0';\n        ctx.stroke();\n\n        ctx.strokeStyle = '#00ff00';\n        ctx.lineWidth = 1\n        const x = edge.n0.vec.x + (edge.n1.vec.x - edge.n0.vec.x) * 0.5\n        const y = edge.n0.vec.y + (edge.n1.vec.y - edge.n0.vec.y) * 0.5\n        p = this.projection(x, y);\n        ctx.strokeText(`${edge.id}`, p[0], p[1] - 7)\n    }\n}\n\n\nconst projectionVs = (vs: any, toScreen) => {\n    return vs.map((v) => {\n        console.log(v)\n        // toScreen(v.vec.x, v.vec.y)\n\n        return toScreen(v.vec.x, v.vec.y);\n    })\n}","import { Delaunay, NVector3 } from '../../../../../../lib/NJSCore';\n\nexport const getDelaunay = (ctx, vs, toScreen) => {\n    const delaunay = new Delaunay(vs.map((v) => {\n        // console.log(v.vec);\n        const sp = toScreen(v.vec.x, v.vec.y);\n        return new NVector3(sp[0], sp[1]);\n    }));\n    // console.log(delaunay)\n    delaunay.DrawTriClass(ctx, '#fff');\n}","import { GraphSystem, Edge, Node } from '../GraphSystem';\nimport { Vector3, distance } from '../GraphSystem/Graph/util'\nimport { Common } from './Common';\nimport { GraphRenderer } from './Renderer';\n\n// import { Graph, Vector3,  } from './GraphSystem';\n\nexport class Controller {\n    public common: Common;\n    public graphSystem: GraphSystem;\n    public renderer: GraphRenderer;\n\n    public commandMode: string = 'drawing'\n\n    public canvas: HTMLCanvasElement;\n\n    public divHist: HTMLDivElement; // = document.createElement('div');\n    public divLog: HTMLDivElement;\n    public divSel: HTMLDivElement;\n    public divSearchResult: HTMLDivElement;\n\n    public needPopulate = false;\n    public m = new Vector3(0, 0, 0);\n    public log: string = '';\n\n    private wasMoved = false;\n    public pressed = false;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.graphSystem = new GraphSystem();\n        this.common = new Common(this)\n        this.renderer = new GraphRenderer(this)\n        this.canvas = canvas;\n    }\n    public projection = (x: number, y: number) => {\n        return [x, y]\n    }\n    // ..........................................................\n    public mouseDown(x: number, y: number, e: any): void {\n        // console.log('down', e.point);\n        const node = this.graphSystem.findNodeVec(e.point.x, e.point.y);\n        // console.log({ node });\n\n        if (this.graphSystem.captured && this.graphSystem.captured !== node) {\n            this.graphSystem.nodePre = this.graphSystem.captured;\n        }\n        // console.log('down capture', node);\n        this.graphSystem.captured = node;\n\n\n        // console.log('down', this.graphSystem.captured)\n\n        this.pressed = true;\n    }\n    public mouseClick(x: number, y: number, e: any): void {\n        // console.log('click', x, y);\n        this.graphSystem.captured = this.graphSystem.findNodeVec(e.point.x, e.point.y);\n        // console.log('click', this.graphSystem.captured)\n        // debugger\n\n        // // add edge between selected node and pre-selected node\n        // if (this.graphSystem.nodePre && this.graphSystem.captured) {\n        //     // console.log('connection needed')\n        //     this.graphSystem.addEdge(this.graphSystem.nodePre as Node, this.graphSystem.captured as Node);\n        //     this.common.capture();\n        //     this.updatePost()\n        //     return;\n        // }\n\n\n        // // add a node on edge\n        // const closeEdge = this.graphSystem.findEdgeVec(x, y);\n        // if (closeEdge && this.graphSystem.captured === undefined) {\n        //     const node = this.graphSystem.addNode(closeEdge.vec.x, closeEdge.vec.y);\n        //     this.graphSystem.edgeSplitByNode(node, closeEdge.edge);\n        //     this.common.capture();\n        //     this.updatePost()\n        //     return;\n        // }\n\n\n        // // click on canvas for adding a node with closest node\n        // console.log(this.graphSystem.captured)\n        // // this.graphSystem.addNode(x, y)\n\n        if (this.graphSystem.captured === undefined) {\n            this.common.addNodeWithClosestNode(x, y)\n            this.common.capture();\n            this.updatePost()\n            return;\n        }\n    }\n\n    public mouseMove(x: number, y: number): void {\n        // console.log('move');\n        this.m.x = x;\n        this.m.y = y;\n    }\n    public mouseUp() {\n        // console.log('up');\n        // this.graphSystem.captured = undefined;\n        let needCapture = false;\n\n\n        if (this.graphSystem.captured && this.graphSystem.captured.type === 'node') {\n            const node = this.graphSystem.captured as Node;\n            // console.log('up', node)\n\n            // Edge split from a moved node by it's edges\n            needCapture = this.graphSystem.edgeSplitByNodeEdges(node);\n\n\n            // // Add a node by edge intersection\n            // node.edges.forEach((e, i) => {\n            //     // setTimeout(() => {\n            //     console.log(node.edges.length)\n            //     this.graphSystem.edgeSplitByEdge(e);\n            //     // }, 100);\n            // })\n\n\n            // merge two node into one node\n            const other = this.graphSystem.findNode(node);\n            if (other) {\n                const v0 = this.common.toScreen(node.vec.x, node.vec.y);\n                const v1 = this.common.toScreen(other.vec.x, other.vec.y);\n                const dis = distance(new Vector3(v0[0], v0[1], 0), new Vector3(v1[0], v1[1], 0));\n                if (dis < 16) {\n                    this.graphSystem.mergeTwoNodes(other, node);\n                    needCapture = true;\n                }\n            }\n\n            // detect move for capturing scene states\n            if (this.wasMoved) {\n                this.wasMoved = false;\n                needCapture = true;\n            }\n\n            this.graphSystem.captured = undefined;\n            this.updatePost();\n        }\n\n        // update undo redo history\n        needCapture && this.common.capture();\n\n        this.pressed = false;\n    }\n    public mouseDrag(x: number, y: number): void {\n        // console.log('drag');\n        if (this.graphSystem.captured && this.graphSystem.captured.type === 'node') {\n            const node = this.graphSystem.captured as Node;\n            node.vec.x = x;\n            node.vec.y = y;\n        }\n        this.wasMoved = true;\n    }\n    public updatePost() {\n        if (this.renderer.toggleMST) {\n            this.graphSystem.computeMST();\n        }\n    }\n\n    public render(ctx: CanvasRenderingContext2D, ctxOff: CanvasRenderingContext2D) {\n        if (this.needPopulate) {\n            this.populate();\n        }\n\n        this.divLog.textContent = this.log;\n        // console.log(this.divLog.textContent)\n\n        this.renderer.render(ctx, ctxOff);\n    }\n    // .................... AIP Call\n    public exportJSON() { return this.common.exportJSON(); }\n    public populate() { return this.common.populate(); }\n}\n\n","import { Solution } from '..';\nexport class UIGraph {\n    app: Solution;\n\n    constructor(app: Solution) {\n        this.app = app;\n        this.initUI();\n    }\n    public initUI() {\n        const divMenu = document.createElement('div');\n        divMenu.style.width = '160px';\n        divMenu.style.position = 'absolute';\n        divMenu.style.background = '#222';\n        divMenu.style.padding = '10px';\n        this.app.divHost.appendChild(divMenu);\n\n\n        const divRemove = document.createElement('button');\n        divRemove.textContent = 'remove';\n        divRemove.onclick = () => {\n            this.app.controller.common.removeSelection();\n        }\n        divMenu.appendChild(divRemove);\n\n        const divText = document.createElement('div');\n        divText.textContent = 'N:0, E:0';\n        divText.style.color = '#bbb';\n        divMenu.appendChild(divText);\n        this.app.controller.divLog = divText;\n\n        const divHist = document.createElement('div');\n        divHist.textContent = 'hist: 0';\n        divHist.style.color = '#bbb';\n        divMenu.appendChild(divHist);\n        this.app.controller.divHist = divHist;\n\n        const divSel = document.createElement('div');\n        divSel.textContent = 'undefined';\n        divSel.style.color = '#bbb';\n        divMenu.appendChild(divSel);\n        this.app.controller.divSel = divSel;\n\n        const divDivider0 = getDivider();\n        divMenu.appendChild(divDivider0);\n\n\n        // .....................................................\n\n\n        // .....................................................\n\n        const divDelaunay = getCheckBox('Delaunay', (v) => { this.app.controller.common.toggleDelaunay(v); })\n        divMenu.appendChild(divDelaunay.div);\n\n        const divMST = getCheckBox('MST', (v) => { this.app.controller.common.toggleMST(v); })\n        divMenu.appendChild(divMST.div);\n\n        const divDFS = getBtn('DFS', () => { this.app.controller.common.computedDFS(); })\n        divMenu.appendChild(divDFS);\n\n        const divBFS = getBtn('BFS', () => { this.app.controller.common.computedBSF(); })\n        divMenu.appendChild(divBFS);\n\n        const divSearchResult = document.createElement('div');\n        const divSearchResultP = document.createElement('p');\n        divSearchResultP.style.marginTop = '2px';\n        divSearchResult.appendChild(divSearchResultP);\n        divMenu.appendChild(divSearchResult);\n        this.app.controller.divSearchResult = divSearchResultP;\n\n\n        const divDijkstra = getCheckBox('Dijkstra', (v) => { this.app.controller.common.computedDijkstra(v); })\n        divMenu.appendChild(divDijkstra.div);\n        const divAStar = getCheckBox('*Star', (v) => { this.app.controller.common.computedAStar(v); })\n        divMenu.appendChild(divAStar.div);\n\n        const divStart = getBtn('Start', () => { this.app.controller.common.graphSystem.setNodeStart(); });\n        divMenu.appendChild(divStart);\n        const divEnd = getBtn('End', () => { this.app.controller.common.graphSystem.setNodeEnd(); });\n        divMenu.appendChild(divEnd);\n\n\n        const divOffscreen = getCheckBox('Offscreen', (v) => { this.app.controller.common.toggleOffscreenBind(v); })\n        divMenu.appendChild(divOffscreen.div);\n\n        // const divSearchResult = document.createElement('div');\n        // const divSearchResultP = document.createElement('p');\n        // divSearchResultP.style.marginTop = '2px';\n        // divSearchResult.appendChild(divSearchResultP);\n        // divMenu.appendChild(divSearchResult);\n        // this.app.controller.divSearchResult = divSearchResultP;\n\n\n        const divDivider = getDivider();\n        divMenu.appendChild(divDivider);\n\n\n        const divDrawing = getDrawingModeRadio(['Selection', 'Drawing Line', 'Drawing Pline'], (v) => {\n            console.log({ v });\n            this.app.controller.common.setCommandMode(v);\n        });\n        divMenu.appendChild(divDrawing);\n\n\n\n        // .....................................................\n\n        const containerA = document.createElement('div');\n        containerA.style.background = '#111';\n        containerA.style.margin = '5px';\n        containerA.style.height = '100px';\n        // containerA.style.display = 'grid';\n        divMenu.appendChild(containerA);\n\n        const undoBtn = getBtn('undo', () => { this.app.controller.common.undo(); })\n        containerA.appendChild(undoBtn);\n\n        const redoBtn = getBtn('redo', () => { this.app.controller.common.redo(); })\n        containerA.appendChild(redoBtn);\n\n\n        const btnExport = document.createElement('button');\n        btnExport.textContent = 'Export JSON';\n        containerA.appendChild(btnExport);\n        btnExport.onclick = () => {\n            this.app.controller.exportJSON();\n        }\n\n        const resetBtn = getBtn('reset', () => { this.app.controller.common.reset(); })\n        containerA.appendChild(resetBtn);\n\n        const divBtn = document.createElement('button');\n        divBtn.textContent = 'run';\n        divBtn.onclick = () => {\n            this.app.controller.needPopulate = !this.app.controller.needPopulate;\n        }\n        containerA.appendChild(divBtn);\n\n\n        // .....................................................\n    }\n}\n\nconst getBtn = (title: string, fn: () => void) => {\n    const divBtn = document.createElement('button');\n    divBtn.textContent = title;\n    divBtn.onclick = () => { fn(); }\n    return divBtn;\n};\nexport const getCheckBox = (title: string, fn: (v: boolean) => void) => {\n    const div = document.createElement('div');\n    div.style.display = 'flex';\n\n    const checkBox = document.createElement('input');\n    checkBox.type = 'checkbox';\n    checkBox.defaultChecked = false;\n    const text = document.createElement('div');\n    text.textContent = title;\n    text.style.color = '#aaa';\n    div.appendChild(checkBox);\n    div.appendChild(text);\n    checkBox.onchange = () => fn(checkBox.checked);\n    return {\n        div, checkBox\n    };\n};\n\nconst getDivider = (color = '#fff', lineWidth = 1) => {\n    const div = document.createElement('div');\n    div.style.background = color;\n    div.style.height = lineWidth + 'px';\n    return div;\n};\n\n\nconst getDrawingModeRadio = (radioValues = ['A', 'B', 'C'], fn: (v: string) => void) => {\n\n    const container = document.createElement('div');\n    container.style.background = '#111';\n    container.style.margin = '5px';\n    container.style.height = '100px';\n    container.style.display = 'grid';\n\n    const title = document.createElement('div');\n    title.textContent = 'Command Mode';\n    container.appendChild(title);\n    // container\n\n    radioValues.forEach(value => {\n        const label = document.createElement('label');\n        label.className = 'radio-item';\n\n        const radio = document.createElement('input');\n        radio.type = 'radio';\n        radio.name = 'ratio';\n        radio.value = value;\n\n        const text = document.createTextNode(value);\n        label.appendChild(radio);\n        label.appendChild(text);\n        container.appendChild(label);\n\n        // Add event listener to handle radio button change\n        radio.addEventListener('change', function () {\n            // if (this.value === 'a') {\n            //     title.textContent = 'Command Mode' + ': Section'\n            // } else if (this.value === 'b') {\n            //     title.textContent = 'Command Mode' + ': Line'\n            // } else if (this.value === 'c') {\n            //     title.textContent = 'Command Mode' + ': Polyline from the closest node'\n            // }\n            fn(this.value)\n        });\n    });\n\n    return container;\n}","\r\nimport { MapboxGLWrapper } from './MapboxGLWrapper';\r\nimport { CanvasRenderer } from './CanvasRenderer';\r\nimport { Controller } from './Controller';\r\nimport { UIGraph } from './UIGraph';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLDivElement;\r\n    public mapboxWrapper: MapboxGLWrapper;\r\n    public renderer: CanvasRenderer;\r\n\r\n    public controller: Controller;\r\n    public ui: UIGraph;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id) as HTMLDivElement;\r\n        this.divHost.style.position = 'relative';\r\n\r\n        this.mapboxWrapper = new MapboxGLWrapper(this.divHost.id);\r\n        this.mapboxWrapper.mouseDown = this.mouseDown\r\n        this.mapboxWrapper.mouseUp = this.mouseUp\r\n        this.mapboxWrapper.mouseClick = this.mouseClick\r\n        this.mapboxWrapper.mouseMove = this.mouseMove\r\n\r\n        setTimeout(() => {\r\n            this.renderer = new CanvasRenderer(this.divHost, this);\r\n            \r\n\r\n            this.controller = new Controller(this.renderer.canvas);\r\n            this.controller.projection = (x: number, y: number) => {return this.mapboxWrapper.toScreen(x,y)}\r\n            // this.controller.mouseClick(-73.97646684462907, 40.76334819495341);\r\n    \r\n            this.ui = new UIGraph(this);\r\n            this.initPost();\r\n        }, 100);\r\n\r\n    }\r\n\r\n    public mouseDown = (e) => {\r\n        // TODO\r\n        this.controller.mouseDown(e['lngLat']['lng'], e['lngLat']['lat'], e)\r\n\r\n        if (this.controller.graphSystem.captured) {\r\n            this.mapboxWrapper.map.dragPan.disable();\r\n        }\r\n    }\r\n    public mouseUp = (e) => {\r\n        // this.controller.mouseUp(e['lngLat']['lng'], e['lngLat']['lat'])\r\n        // TODO\r\n        this.controller.mouseUp()\r\n    }\r\n    public mouseDrag = (e) => {\r\n        // console.log('drag');\r\n        this.mapboxWrapper.map.dragPan.disable();\r\n        this.controller.mouseDrag(e['lngLat']['lng'], e['lngLat']['lat'])\r\n        // TODO\r\n    }\r\n    public mouseClick = (e) => {\r\n        // TODO\r\n        // console.log(e);\r\n        // console.log(e['lngLat']);\r\n        // this.renderer.pts.push([e['lngLat']['lng'], e['lngLat']['lat']])\r\n        this.controller.mouseClick(e['lngLat']['lng'], e['lngLat']['lat'], e)\r\n    }\r\n    public mouseMove = (e)  =>{\r\n        // TODO\r\n        if (this.controller.pressed) {\r\n            this.mouseDrag(e);\r\n            return;\r\n        } else {\r\n            this.mapboxWrapper.map.dragPan.enable();\r\n        }\r\n        // console.log('move');\r\n        this.controller.mouseMove(e['lngLat']['lng'], e['lngLat']['lat'])\r\n    }\r\n    public keyDown(k: KeyboardEvent) {\r\n        // TODO\r\n    }\r\n    public destroy() {\r\n        this.renderer.destroy();\r\n        try {\r\n            while (this.divHost && this.divHost.lastElementChild) {\r\n                const lastChild = this.divHost.lastElementChild as Node;\r\n                this.divHost.removeChild(lastChild);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error removing child elements:', error);\r\n        }\r\n        \r\n    }\r\n    public initPost() {\r\n\r\n        this.controller.common.toggleOffscreenBind = (v) => {\r\n            if (v) this.renderer.offscreen.canvas.style.display = 'block';\r\n            else this.renderer.offscreen.canvas.style.display = 'none';\r\n        }\r\n        this.controller.common.graphSystem.getPix = (x: number, y: number): Uint8ClampedArray => {\r\n            return this.renderer.offscreen.getPix(x, y);\r\n        }\r\n    }\r\n}\r\n"],"names":["MapboxGLWrapper","constructor","id","map","dd","center","lng","lat","setCenter","toMap","x","y","p","this","unproject","toScreen","lon","project","mouseDown","e","mouseUp","mouseMove","mouseClick","mouseDClick","initMap","mapboxgl","process","container","zoom","style","dragRotate","disable","on","div","document","getElementsByClassName","position","display","CanvasRenderer","RendererCanvas","app","super","time","pts","offscreen","mouseDrag","canvas","width","height","pointerEvents","OffscreenCanvas","start","render","ctx","reset","controller","refCanvas","getPix","getImageData","data","resize","bounding","getBoundingClientRect","createElement","getContext","background","zIndex","window","addEventListener","appendCanvas","parentElement","appendChild","destroy","removeEventListener","undefined","lastElementChild","removeChild","error","clearRect","Vector3","z","distance","v0","v1","Math","sqrt","distance2","lerp","a","b","t","pointOnLine","p0","p1","dx","dy","getRandomColorRGB","floor","random","GraphCommon","type","isSelected","visited","Graph","graphSystem","nodes","edges","nodesHash","Edge","n0","n1","length","color","getLength","vec","toJSON","remove","removeEdge","Node","graph","r","networkDistance","countVisit","removeNode","other","splice","indexOf","distanceTo","x0","y0","z0","x1","y1","z1","costFnDistance","propagationByNode","origin","optimizer","Beta","i","queue","currentNode","shift","j","edge","np","newCost","newTemp","push","backPropagation","destination","k","path","smallest","AStart","TYPE","Manhattan","Euclidean","strength","distanceManhattan","abs","distanceEuclidean","gePath","startNode","endNode","typeHeuristic","openNodes","closedNodes","result","count","propagation","lowestF","f","g","current","previous","temp","neighbors","neighbor","includes","blocked","tempG","heuristic","h","NodeAStar","EdgeAStar","GraphMST","addVertex","node","addEdge","weight","primMST","MST","minEdge","forEach","GraphSystem","pathMST","nodeStart","nodeEnd","nodePre","_captured","captured","v","resetCapture","Uint8ClampedArray","addNode","join","findEdgeByNodes","edgeSplitByEdge","addEdgeByClosestNode","nn","findNode","addEdgeSplit","edgeSplitByNode","edgeSplitByNodeEdges","edgeRemove","theEdgeLength","inter","getIntersectEdge","nodeFirst","disList","n","sortedDis","val","index","sort","updateID","theDis","Number","MAX_VALUE","dis","findNodeVec","minDis","dataPixel","newArray","subarray","findEdgeVec","mv","cp","findEdgeByEdge","getEdgeByTwoNode","mergeTwoNodes","others","resetVisit","setNodeStart","setNodeEnd","computePath","computePathAStar","computeMST","mst","computeBFS","num","outSortedBFS","getBFS","d","computeDFS","outSortedDFS","dfs","getDFS","e0","e1","getIntersect","n2","n3","x2","y2","x3","y3","x4","y4","denominator","ua","ub","getLineIntersectPlane","getMST","idStart","idEnd","getPath","newNode","newEdge","getPathAStar","SceneManager","histories","currentIndex","getCurrentIndex","getHistoryLength","getCurrentState","historyNum","undo","redo","SceneState","manager","getLog","resetState","captureState","Common","sceneState","projection","toggleOffscreenBind","capture","updateUndoRedoHist","divHist","hist","textContent","setCommandMode","commandMode","dump","common","exportJSON","collection","name","link","href","encodeURIComponent","download","click","downloadJson","JSON","stringify","nodeData","edgeData","populate","toggleDelaunay","renderer","toggleMST","computedBSF","updateSearchResult","computedDFS","divSearchResult","computedDijkstra","toggleDijkstra","computedAStar","toggleAStar","removeSelection","addNodeWithClosestNode","GraphRenderer","ctxOff","divSel","renderNodeStartEnd","beginPath","arc","m","closePath","fillStyle","fill","strokeStyle","moveTo","lineTo","lineWidth","stroke","vs","Delaunay","sp","NVector3","DrawTriClass","getDelaunay","pathProjected","renderGraph","PI","log","renderGraphEdge","renderGraphNode","strokeText","Controller","divLog","needPopulate","wasMoved","pressed","point","updatePost","needCapture","UIGraph","initUI","divMenu","padding","divHost","divRemove","onclick","divText","divDivider0","getDivider","divDelaunay","getCheckBox","divMST","divDFS","getBtn","divBFS","divSearchResultP","marginTop","divDijkstra","divAStar","divStart","divEnd","divOffscreen","divDivider","divDrawing","getDrawingModeRadio","console","containerA","margin","undoBtn","redoBtn","btnExport","resetBtn","divBtn","title","fn","checkBox","defaultChecked","text","onchange","checked","radioValues","value","label","className","radio","createTextNode","Solution","mapboxWrapper","ui","dragPan","enable","getElementById","setTimeout","initPost","keyDown","lastChild"],"sourceRoot":""}
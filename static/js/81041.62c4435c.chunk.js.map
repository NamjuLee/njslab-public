{"version":3,"file":"static/js/81041.62c4435c.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_07/Core/Canvas.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Core/Renderer.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Core/Scene.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Geometry/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Geometry/Primatives/PointScreen.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Geometry/Primatives/PointWorld.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Utility/Matrix4.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Utility/Vector3.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Camera.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Model.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Transform.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/VAO.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/index.ts"],"sourcesContent":["import { NGL3dApp } from '..';\r\n\r\nexport class Canvas {\r\n    app: NGL3dApp;\r\n\r\n    gl: WebGL2RenderingContext;\r\n    canvas: HTMLCanvasElement;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n\r\n        this.canvas = document.createElement('canvas');\r\n        if (this.app.host) {\r\n            this.app.host.appendChild(this.canvas);\r\n            this.canvas.width = this.app.host.clientWidth;\r\n            this.canvas.height = this.app.host.clientHeight;\r\n        }\r\n        const gl = this.canvas.getContext('webgl2');\r\n        if (gl !== null) {\r\n            this.gl = gl;\r\n        }\r\n\r\n        this.loop(this.gl);\r\n    }\r\n    // fFitScreen = function(wp,hp) { return this.fSetSize(window.innerWidth * (wp || 1),window.innerHeight * (hp || 1)); }\r\n\r\n    loop(gl: WebGL2RenderingContext) {\r\n        this.clear(gl);\r\n        requestAnimationFrame(() => { this.loop(gl); });\r\n\r\n        this.app.renderer.render(gl);\r\n        // console.log('working');\r\n    }\r\n    clear(gl: WebGL2RenderingContext) {\r\n        gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n}\r\n","import { NGL3dApp } from '..';\r\n\r\nexport class Renderer {\r\n    app: NGL3dApp;\r\n    constructor(app: NGL3dApp) {\r\n        this.app = app;\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        if (this.app.camera) { this.app.camera.updateViewMatrix(); }\r\n\r\n        // console.log(gl);\r\n\r\n        // console.log(this.app.scene.triList);\r\n\r\n        this.app.scene.geometries.forEach((e) => { e.render(gl); });\r\n\r\n    }\r\n}","import { NGL3dApp } from '..';\r\n\r\nimport { GeometryBase } from '../Geometry/Core/Base';\r\n\r\nexport class Scene {\r\n    NGL3dApp: NGL3dApp;\r\n\r\n    geometries: GeometryBase[] = [];\r\n\r\n    constructor(NGL3dApp: NGL3dApp) {\r\n        this.NGL3dApp = NGL3dApp;\r\n    }\r\n    add(mesh: GeometryBase) {\r\n        this.geometries.push(mesh);\r\n    }\r\n}","import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        this.scene.add(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n}","\r\nimport { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\nimport { Shader, ATTR } from '../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\n// import { vaoCommon } from '../../WebGL/vaoCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[], pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n            gl.useProgram(this.program); // Done setting up shader\r\n            let uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n            // gl.useProgram(null); // Done setting up shader\r\n        }\r\n\r\n    }\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends GeometryBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat4 uCameraMatrix;\r\n\r\n    uniform vec3 uColor[4];\t//Color Array\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) { finalColor = color; }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    t: number = 0.0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO(incAxis: boolean = true) {\r\n        let verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        let p;\t// Temp letiable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(half);\r\n            verts.push(half);\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(-half);\r\n            verts.push(-half);\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(p);\r\n            verts.push(p);\t\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(p);\r\n            verts.push(p);\t\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n        }\r\n\r\n        if (incAxis) {\r\n            // x axis\r\n            verts.push(-1.1);\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(1);\t\t// c2\r\n\r\n            verts.push(1.1);\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // y axis\r\n            verts.push(0);      // x1\r\n            verts.push(-1.1);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(2);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(1.1);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(2);\t\t// c2\r\n\r\n            // z axis\r\n            verts.push(0);\t\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(-1.1);\t// z1\r\n            verts.push(3);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(1.1);\t// z2\r\n            verts.push(3);\t\t// c2\r\n        }\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.vao = new VAO(this.gl, 'grid', verts); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.vao.drawMode = this.gl.LINES;\r\n        this.vao.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.vao.vertexComponentLen = 4;\r\n        this.vao.vertexCount = verts.length / this.vao.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.vao.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.vao.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.vao.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vao.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mvaoCache[\"grid\"] = this.vao;\r\n        return this.vao;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col, this.app.camera.projectionMatrix);\r\n        this.vao = this.GetVAO();\r\n        this.model = new Model(this.vao);\r\n    }\r\n    render() {\r\n        // his.shader.activate();\r\n        // this.ro += 0.04;\r\n        // this.shader.set(this.ro);\r\n        // this.shader.renderModel(this.model);\r\n\r\n        // let p = this.model.transform.position;\t\t// Just an pointer to transform position, make code smaller\r\n        // console.log(p);\r\n        // let angle = Math.atan2(p.y, p.x)  + (1 * this.t);\t\t// Calc the current angle plus 1 degree per second rotation\r\n        // let radius = Math.sqrt(p.x * p.x + p.y * p.y);\t// Calc the distance from origin.\r\n        // let scale = Math.max(0.2,  Math.abs(Math.sin(angle)) * 1.2  );   // Just messing with numbers and seeing what happens :)\r\n        // console.log(angle, radius);\r\n\r\n        // this.model.setScale(scale, scale, 1);\r\n        // this.model.setPosition( radius * Math.cos(angle), radius * Math.sin(angle), 0 );\r\n        // this.model.transform.rotation.z += 15 * this.t;\r\n        // this.model.transform.rotation.x += 30 * this.t;\r\n        // this.model.transform.rotation.y += 60 * this.t;\r\n\r\n        this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.t = 0.01;\r\n    }\r\n}","import { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\n\r\nimport { Shader } from '../../WebGL/Shader';\r\n\r\nclass PointShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            this.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n        }\r\n        gl.useProgram(null); // Done setting up shader\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        this.gl.uniform1f(this.uPointSize, size);\r\n        this.gl.uniform1f(this.uAngle, angle);\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport class PointScreen extends GeometryBase {\r\n    vOld = `#version 300 es\r\n        in vec3 a_position;\r\n\r\n        uniform float uPointSize;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(a_position, 1.0);\r\n        }\r\n    `;\r\n    fOld = `#version 300 es\r\n        precision mediump float;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            finalColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n        }\r\n    `;\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n\r\n        uniform mediump float uPointSize;\r\n        uniform float uAngle;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = vec4(cos(uAngle) * 0.8 + a_position.x, sin(uAngle) * 0.8 + a_position.y, a_position.z, 1.0);\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        uniform float uPointSize;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            float c = (40. - uPointSize ) / 20.;\r\n            finalColor = vec4(c, c, c, 1.0);\r\n        }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: PointShader;\r\n\r\n    size: number = 2.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        this.shader = new PointShader(gl, this.v, this.f);\r\n\r\n        this.vao = new VAO(gl, 'dots', [0, 0, 0, 0.1, 0.1, 0, 0.1, -0.1, 0, -0.1, -0.1, 0, -0.1, 0.1, 0]);\r\n        this.vao.drawMode = gl.POINTS; // Most often the draw mode will be triangles, but in this instance we need Points\r\n\r\n        this.model = new Model(this.vao);\r\n    }\r\n    render() {\r\n        // console.log(gl);\r\n        this.size += 0.01;\r\n        let size = (Math.sin(this.size) * 10.0) + 30.0;\r\n        // gl.uniform1f(this.uPointSizeLoc, size);\r\n\r\n        // gl.uniform1f(this.uAngle, this.size);\r\n        // gl.drawArrays(gl.POINTS, 0, this.gVertCnt);\r\n        this.rotation += 0.02;\r\n\r\n        this.shader.activate();\r\n        this.shader.set(size, this.rotation);\r\n        this.shader.renderModel(this.model);\r\n    }\r\n}","import { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\n\r\nimport { Shader } from '../../WebGL/Shader';\r\n\r\nclass PointShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    pMatrix: Float32Array;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n        this.pMatrix = pMatrix;\r\n\r\n        // Our shader uses custom uniforms, this is the time to get its location for future use.\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n\r\n            this.uPointSize = gl.getUniformLocation(this.program, 'uPointSize');\r\n            this.uAngle = gl.getUniformLocation(this.program, 'uAngle');\r\n\r\n            // gl.useProgram(this.program);\r\n            gl.useProgram(null); // Done setting up shader\r\n        }\r\n    }\r\n\r\n    // Simple function that passes in Angle and Pointsize uniform data to the shader program.\r\n    set(size: number, angle: number) {\r\n        // this.gl.useProgram(null);\r\n        this.gl.uniform1f(this.uAngle, angle);\r\n        this.gl.uniform1f(this.uPointSize, size);\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport class PointWorld extends GeometryBase {\r\n    v = `#version 300 es\r\n\r\n        in vec3 a_position;\r\n\r\n        uniform mat4 uPMatrix;\r\n        uniform mat4 uMVMatrix;\r\n        uniform mat4 uCameraMatrix;\r\n\r\n        uniform mediump float uPointSize;\r\n        uniform float uAngle;\r\n\r\n        void main(void) {\r\n            gl_PointSize = uPointSize;\r\n            gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(cos(uAngle) * 0.8 + a_position.x, sin(uAngle) * 0.8 + a_position.y, a_position.z, 1.0);\r\n        }\r\n    `;\r\n    f = `#version 300 es\r\n        precision mediump float;\r\n\r\n        uniform float uPointSize;\r\n\r\n        out vec4 finalColor;\r\n\r\n        void main(void) {\r\n            float c =  uPointSize / 20.;\r\n            finalColor = vec4(0, 50, c, 1.0);\r\n        }\r\n    `;\r\n\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: PointShader;\r\n\r\n    size: number = 20.5;\r\n    rotation: number = 0.0;\r\n\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        this.shader = new PointShader(gl, this.v, this.f, this.app.camera.projectionMatrix);\r\n\r\n        this.vao = new VAO(gl, 'dots', [0, 0, 0, 0.1, 0.1, 0, 0.1, -0.1, 0, -0.1, -0.1, 0, -0.1, 0.1, 0]);\r\n        this.vao.drawMode = gl.POINTS; // Most often the draw mode will be triangles, but in this instance we need Points\r\n\r\n        this.model = new Model(this.vao);\r\n        // this.isDone = true;\r\n    }\r\n    render() {\r\n        // console.log(gl);\r\n        this.size += 0.01;\r\n        let size = (Math.sin(this.size) * 10.0) + 20.0;\r\n        // gl.uniform1f(this.uPointSizeLoc, size);\r\n\r\n        // gl.uniform1f(this.uAngle, this.size);\r\n        // gl.drawArrays(gl.POINTS, 0, this.gVertCnt);\r\n        this.rotation += 0.03;\r\n\r\n        this.shader.activate();\r\n        this.shader.setPerspective(this.shader.pMatrix);\r\n        this.shader.set(size, this.rotation);\r\n        // this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.shader.setCameraMatrix(this.app.camera.viewMatrix);\r\n        this.shader.renderModel(this.model.preRender());\r\n    }\r\n}","import { Vector3 } from './Vector3';\r\n\r\nexport class Matrix4 {\r\n    raw: Float32Array;\r\n    // ....................................................................\r\n    // Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    // from glMatrix\r\n    static perspective(out: Float32Array, fovy: number, aspect: number , near: number, far: number ) {\r\n        let f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n    static ortho(out: number[], left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    }\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    // make the rows into the columns\r\n    static transpose(out: number[], a: number[]) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n        //  Calculate the determinant\r\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return null; }\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Operation\r\n\r\n    // https:// github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Matrix4 , v: number[]) {\r\n        let x = v[0], y = v[1], z = v[2], w = v[3];\r\n        let c1r1 = mat4[ 0], c2r1 = mat4[ 1], c3r1 = mat4[ 2], c4r1 = mat4[ 3],\r\n            c1r2 = mat4[ 4], c2r2 = mat4[ 5], c3r2 = mat4[ 6], c4r2 = mat4[ 7],\r\n            c1r3 = mat4[ 8], c2r3 = mat4[ 9], c3r3 = mat4[10], c4r3 = mat4[11],\r\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8]\t* v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9]\t* v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10]\t* v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11]\t* v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    // From glMatrix\r\n    // Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) { \r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n        //  Cache only the current line of the second matrix\r\n        let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\t\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    }\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array , rad: number, axis: number) {\r\n        let x = axis[0], y = axis[1], z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) { return null; }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\r\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\r\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return out;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat?: Float32Array ) {\r\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\r\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\r\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\r\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return false; }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8]\t* z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9]\t* z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10]\t* z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11]\t* z + out[15];\r\n    }\r\n    constructor() { \r\n        this.raw = Matrix4.identity(); \r\n    }\r\n    // ....................................................................\r\n    // Transformations Methods\r\n    vtranslate(v: Vector3) {\r\n        Matrix4.translate(this.raw, v.x, v.y, v.z);\r\n        return this; \r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.raw, x, y, z); \r\n        return this;\r\n    }\r\n    rotateY(rad: number) {\t\tMatrix4.rotateY(this.raw, rad); return this; }\r\n    rotateX(rad: number) {\t\tMatrix4.rotateX(this.raw, rad); return this; }\r\n    rotateZ(rad: number) {\t\tMatrix4.rotateZ(this.raw, rad); return this; }\r\n\r\n    vscale(vec3: Vector3) {\t\tMatrix4.scale(this.raw, vec3.x, vec3.y, vec3.z); return this; }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.raw, x, y, z); \r\n        return this; \r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.raw); \r\n        return this; \r\n    }\r\n\r\n    // ....................................................................\r\n    // Methods\r\n    // Bring is back to identity without changing the transform values.\r\n    resetRotation() {\t\r\n        for (let i = 0; i < this.raw.length; i++) {\r\n            if (i >= 12 && i <= 14) {continue; }\r\n            this.raw[i] = (i % 5 === 0) ? 1 : 0;  // only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // reset data back to identity.\r\n    reset() { \r\n        for (let i = 0; i < this.raw.length; i++) { this.raw[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n}","\r\nexport class Vector3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0 ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    magnitude(v?: Vector3) {\r\n        if (v === undefined) {return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z ); }\r\n        let x = v.x - this.x, y = v.y - this.y, z = v.y - this.z;\r\n        return Math.sqrt( x * x + y * y + z * z );\r\n    }\r\n\r\n    normalize() { \r\n        let mag = this.magnitude(); \r\n        this.x /= mag; this.y /= mag; this.z /= mag; \r\n        return this;\r\n    }\r\n    set(x: number, y: number, z: number) {\r\n         this.x = x; this.y = y; this.z = z;\t\r\n         return this;\r\n    }\r\n    multiScalar(v: number) { \r\n        this.x *= v; this.y *= v; this.z *= v; return this; \r\n    }\r\n    getArray() {\r\n         return [this.x, this.y, this.z]; }\r\n    getFloatArray() {\r\n         return new Float32Array([this.x, this.y, this.z]); }\r\n    clone() {\r\n         return new Vector3(this.x, this.y, this.z); \r\n    }\r\n} ","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    \r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}","import { Matrix4 } from '../Utility/Matrix4';\r\nimport { Transform } from './Transform';\r\n\r\nexport enum CAMERA_MODE {\r\n    FREE = 0,\r\n    ORBIT = 1\r\n\r\n}\r\n\r\nexport class Camera {\r\n\r\n    projectionMatrix: Float32Array;\r\n    viewMatrix: Float32Array;\r\n    transform: Transform;\r\n\r\n    mode: CAMERA_MODE;\r\n\r\n    constructor(gl: WebGL2RenderingContext, fov: number = 45, near: number = 0.1, far: number = 100) {\r\n        // Setup the perspective matrix\r\n        this.projectionMatrix = new Float32Array(16);\r\n        var ratio = gl.canvas.width / gl.canvas.height;\r\n        Matrix4.perspective(this.projectionMatrix, fov || 45, ratio, near || 0.1, far || 100.0);\r\n\r\n        this.transform = new Transform();\t\t// Setup transform to control the position of the camera\r\n        this.viewMatrix = new Float32Array(16);\t// Cache the matrix that will hold the inverse of the transform.\r\n\r\n        this.mode = CAMERA_MODE.ORBIT;\t\t// Set what sort of control mode to use.\r\n    }\r\n\r\n    panX(v: number) {\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; } //  Panning on the X Axis is only allowed when in free mode\r\n        this.updateViewMatrix();\r\n        this.transform.position.x += this.transform.right[0] * v;\r\n        this.transform.position.y += this.transform.right[1] * v;\r\n        this.transform.position.z += this.transform.right[2] * v;\r\n    }\r\n\r\n    panY(v: number) {\r\n        this.updateViewMatrix();\r\n        this.transform.position.y += this.transform.up[1] * v;\r\n        if (this.mode === CAMERA_MODE.ORBIT) { return; }// Can only move up and down the y axix in orbit mode\r\n        this.transform.position.x += this.transform.up[0] * v;\r\n        this.transform.position.z += this.transform.up[2] * v;\r\n    }\r\n\r\n    panZ(v: number) {\r\n        this.updateViewMatrix();\r\n        if (this.mode === CAMERA_MODE.ORBIT) {\r\n            this.transform.position.z += v; // orbit mode does translate after rotate, so only need to set Z, the rotate will handle the rest.\r\n        } else {\r\n            // in freemode to move forward, we need to move based on our forward which is relative to our current rotation\r\n            this.transform.position.x += this.transform.forward[0] * v;\r\n            this.transform.position.y += this.transform.forward[1] * v;\r\n            this.transform.position.z += this.transform.forward[2] * v;\r\n        }\r\n    }\r\n\r\n    // To have different modes of movements, this function handles the view matrix update for the transform object.\r\n    updateViewMatrix() {\r\n        // Optimize camera transform update, no need for scale nor rotateZ\r\n        if (this.mode === CAMERA_MODE.FREE) {\r\n            this.transform.matView.reset()\r\n                .vtranslate(this.transform.position)\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad);\r\n\r\n        } else {\r\n            this.transform.matView.reset()\r\n                .rotateX(this.transform.rotation.x * Transform.deg2Rad)\r\n                .rotateY(this.transform.rotation.y * Transform.deg2Rad)\r\n                .vtranslate(this.transform.position);\r\n\r\n        }\r\n\r\n        this.transform.updateDirection();\r\n\r\n        // Cameras work by doing the inverse transformation on all meshes, the camera itself is a lie :)\r\n        Matrix4.invert(this.viewMatrix, this.transform.matView.raw);\r\n        return this.viewMatrix;\r\n    }\r\n}\r\n\r\nexport class CameraController {\r\n    canvas: HTMLCanvasElement;\r\n    camera: Camera;\r\n    rotateRate: number;\r\n    panRate: number;\r\n    zoomRate: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    initX: number;\r\n    initY: number;\r\n    prevX: number;\r\n    prevY: number;\r\n\r\n    onUpHandler: (e: MouseEvent) => void;\r\n    onMoveHandler: (e: MouseEvent) => void;\r\n\r\n    constructor(gl: WebGL2RenderingContext, camera: Camera) {\r\n        // var box = gl.canvas.getBoundingClientRect();\r\n        this.canvas = gl.canvas as HTMLCanvasElement;\t\t\t\t\t\t// Need access to the canvas html element, main to access events\r\n        this.camera = camera;\t\t\t\t\t\t\t// Reference to the camera to control\r\n\r\n        this.rotateRate = -300;\t\t\t\t\t\t\t// How fast to rotate, degrees per dragging delta\r\n        this.panRate = 5;\t\t\t\t\t\t\t\t// How fast to pan, max unit per dragging delta\r\n        this.zoomRate = 200;\t\t\t\t\t\t\t// How fast to zoom or can be viewed as forward/backward movement\r\n\r\n        this.offsetX = 10; // box.left;\t\t\t\t\t\t// Help calc global x,y mouse cords.\r\n        this.offsetY = 10; // box.top;\r\n\r\n        this.initX = 0;\t\t\t\t\t\t\t\t\t// Starting X,Y position on mouse down\r\n        this.initY = 0;\r\n        this.prevX = 0;\t\t\t\t\t\t\t\t\t// Previous X,Y position on mouse move\r\n        this.prevY = 0;\r\n\r\n        // // tslint:disable-next-line:no-any\r\n        this.onUpHandler = (e: MouseEvent) => (this.onMouseUp(e));\t// Cache func reference that gets bound and unbound a lot\r\n        this.onMoveHandler = (e: MouseEvent) => { this.onMouseMove(e); };\r\n\r\n        this.canvas.addEventListener('mousedown', (e) => { this.onMouseDown(e); });\t\t// Initializes the up and move events\r\n        this.canvas.addEventListener('mousewheel', (e) => { this.onMouseWheel(e); });\t// Handles zoom/forward movement\r\n    }\r\n\r\n    // Transform mouse x,y cords to something useable by the canvas.\r\n    // tslint:disable-next-line:no-any\r\n    getMouseVec2(e: any) {\r\n        return { x: e.pageX - this.offsetX, y: e.pageY - this.offsetY };\r\n    }\r\n\r\n    // Begin listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseDown(e: any) {\r\n        this.initX = this.prevX = e.pageX - this.offsetX;\r\n        this.initY = this.prevY = e.pageY - this.offsetY;\r\n\r\n        this.canvas.addEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.addEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n\r\n    // End listening for dragging movement\r\n    // tslint:disable-next-line:no-any\r\n    onMouseUp(e: any) {\r\n        this.canvas.removeEventListener('mouseup', this.onUpHandler);\r\n        this.canvas.removeEventListener('mousemove', this.onMoveHandler);\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseWheel(e: any) {\r\n        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail))); // Try to map wheel movement to a number between -1 and 1\r\n        this.camera.panZ(delta * (this.zoomRate / this.canvas.height));\t\t// Keep the movement speed the same, no matter the height diff\r\n    }\r\n    // tslint:disable-next-line:no-any\r\n    onMouseMove(e: any) {\r\n        var x = e.pageX - this.offsetX,\t// Get X,y where the canvas's position is origin.\r\n            y = e.pageY - this.offsetY,\r\n            dx = x - this.prevX,\t\t// Difference since last mouse move\r\n            dy = y - this.prevY;\r\n\r\n        // When shift is being helt down, we pan around else we rotate.\r\n        if (!e.shiftKey) {\r\n            this.camera.transform.rotation.y += dx * (this.rotateRate / this.canvas.width);\r\n            this.camera.transform.rotation.x += dy * (this.rotateRate / this.canvas.height);\r\n        } else {\r\n            this.camera.panX(-dx * (this.panRate / this.canvas.width));\r\n            this.camera.panY(dy * (this.panRate / this.canvas.height));\r\n        }\r\n\r\n        this.prevX = x;\r\n        this.prevY = y;\r\n    }\r\n}","import { VAO } from './VAO';\r\nimport { Transform } from './Transform';\r\n\r\nexport class Model {\r\n    vao: VAO;\r\n    transform: Transform;\r\n    constructor(vao: VAO) {\r\n        this.transform = new Transform();\r\n        this.vao = vao;\r\n    }\r\n\r\n    setScale(x: number, y: number, z: number) {\r\n         this.transform.scale.set(x, y, z); \r\n         return this; \r\n        }\r\n    setPosition(x: number, y: number, z: number) {\r\n         this.transform.position.set(x, y, z); \r\n         return this; \r\n        }\r\n    setRotation(x: number, y: number, z: number) {\r\n         this.transform.rotation.set(x, y, z); \r\n         return this; \r\n        }\r\n\r\n    addScale(x: number, y: number, z: number) {\tthis.transform.scale.x += x;\tthis.transform.scale.y += y;\tthis.transform.scale.y += y;\t\r\n        return this; \r\n    }\r\n    addPosition(x: number, y: number, z: number) {\tthis.transform.position.x += x; this.transform.position.y += y; this.transform.position.z += z; \r\n        return this; \r\n    }\r\n    addRotation(x: number, y: number, z: number) {\tthis.transform.rotation.x += x; this.transform.rotation.y += y; this.transform.rotation.z += z; \r\n        return this; \r\n    }\r\n\r\n    preRender() {\r\n         this.transform.updateMatrix(); \r\n         return this; \r\n    }\r\n}","// import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\n// import { AttribLocations, UniformLocations } from './AttribLocations';\r\nimport { Model } from './Model';\r\n\r\nexport enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_NAME = 'a_color',\r\n    ATTR_COLOR_LOC = 4,\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    norm: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_POSITION_NAME);\r\n        this.norm = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\nexport class UniformLocations {\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    \r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    vShader: WebGLShader | null;\r\n    fShader: WebGLShader | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext , vertShaderSrc: string, fragShaderSrc: string, needValidate: boolean = true ) {\r\n        this.gl = gl;\r\n\r\n        this.vShader = ShaderUtility.CreateShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertShaderSrc);\r\n        this.fShader = ShaderUtility.CreateShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragShaderSrc);\r\n        \r\n        if (this.vShader && this.fShader ) { \r\n            let program = ShaderUtility.CreateProgram(gl, this.vShader, this.fShader, needValidate);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.attribLoc = new AttribLocations(gl, this.program);\r\n                this.uniformLoc = new UniformLocations(gl, this.program);\r\n                return;\r\n                // gl.useProgram(this.program);\r\n                // this.attribLoc = new AttribLocations(gl, this.program);\r\n                // this.uniformLoc = new UniformLocations(gl, this.program);\r\n                // gl.useProgram(null);\r\n                // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n            }\r\n\r\n            // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n        }\r\n    }\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n         this.gl.useProgram(this.program); return this; \r\n    }\r\n    deactivate() { \r\n        this.gl.useProgram(null); return this; \r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) {this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData); \r\n        return this; \r\n    }\r\n    setModelMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modelMatrix, false, matData); \r\n        return this; \r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData); \r\n        return this; \r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    } \r\n    // Handle rendering a model\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n        \r\n        if (model.vao.noCulling) {this.gl.disable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) {this.gl.enable(this.gl.BLEND); }\r\n        \r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0); \r\n        } else {\r\n            this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n        if (model.vao.noCulling) {this.gl.enable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) {this.gl.disable(this.gl.BLEND); }\r\n        \r\n        return this;\r\n    }\r\n}\r\n\r\nclass ShaderUtility {\r\n    static CreateProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null ) {return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.bindAttribLocation(program, ATTR.ATTR_POSITION_LOC, ATTR.ATTR_POSITION_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_NORMAL_LOC, ATTR.ATTR_NORMAL_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_UV_LOC, ATTR.ATTR_UV_NAME);\r\n        \r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n    static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n}","import { Vector3 } from '../Utility/Vector3';\r\nimport { Matrix4 } from '../Utility/Matrix4';\r\n\r\nexport class Transform {\r\n    static deg2Rad = Math.PI / 180; // Cache result, one less operation to do for each update.\r\n\r\n    position: Vector3;\r\n    scale: Vector3;\r\n    rotation: Vector3;\r\n    matView: Matrix4;\r\n    matNormal: Float32Array;\r\n\r\n    forward: Float32Array;\r\n    up: Float32Array;\r\n    right: Float32Array;\r\n\r\n    constructor() {\r\n        this.position\t= new Vector3(0, 0, 0);\t// Traditional X,Y,Z 3d position\r\n        this.scale\t\t= new Vector3(1, 1, 1);\t// How much to scale a mesh. Having a 1 means no scaling is done.\r\n        this.rotation\t= new Vector3(0, 0, 0);\t// Hold rotation values based on degrees, Object will translate it to radians\r\n        this.matView \t= new Matrix4();\t\t// Cache the results when calling updateMatrix\r\n        this.matNormal\t= new Float32Array(9);\t// This is a Mat3, raw array to hold the values is enough for what its used for\r\n\r\n        // Direction Vectors\r\n        this.forward\t= new Float32Array(4);\t// When rotating, keep track of what the forward direction is\r\n        this.up\t\t\t= new Float32Array(4);\t// what the up direction is, invert to get bottom\r\n        this.right\t\t= new Float32Array(4);\t// what the right direction is, invert to get left\r\n    }\r\n    updateMatrix() {\r\n        this.matView.reset() // Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(this.rotation.x * Transform.deg2Rad)\r\n            .rotateZ(this.rotation.z * Transform.deg2Rad)\r\n            .rotateY(this.rotation.y * Transform.deg2Rad)\r\n            .vscale(this.scale);\r\n\r\n        // Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.matNormal, this.matView.raw);\r\n\r\n        // Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward,\t[0, 0, 1, 0], this.matView.raw); // Z\r\n        Matrix4.transformVec4(this.up,\t\t[0, 1, 0, 0], this.matView.raw); // Y\r\n        Matrix4.transformVec4(this.right,\t[1, 0, 0, 0], this.matView.raw); // X\r\n\r\n        return this.matView.raw;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward,\t[0, 0, 1, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.up,\t\t[0, 1, 0, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.right,\t[1, 0, 0, 0], this.matView.raw);\r\n        return this;\r\n    }\r\n\r\n    getViewMatrix() {\treturn this.matView.raw; }\r\n    getNormalMatrix() {\treturn this.matNormal; }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0);\r\n        this.scale.set(1, 1, 1);\r\n        this.rotation.set(0, 0, 0);\r\n    }\r\n}\r\n","import { ATTR } from './AttribLocations';\r\n\r\nexport enum DRAW_MODE {\r\n    // \r\n}\r\n\r\nexport class RTN {\r\n    name: string;\r\n    \r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor() {\r\n        // \r\n    }\r\n}\r\n\r\nexport class VAO {\r\n    name: string;\r\n\r\n    noCulling: boolean = true;\r\n    doBlending: boolean = true;\r\n    \r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, name: string , aryVert: number[], aryInd?: number[] | null, aryNorm?: number[] | null, aryUV?: number[] | null ) {\r\n        this.name = name;\r\n        this.drawMode = gl.TRIANGLES;\r\n\r\n        this.vao = gl.createVertexArray();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n        gl.bindVertexArray(this.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            this.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            this.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            this.vertexCount = aryVert.length / this.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm != null) {\r\n            this.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV != null) {\r\n            this.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd != null) {\r\n            this.bufIndex = gl.createBuffer();\r\n            this.indexCount = aryInd.length;\r\n            console.log(this);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        }\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n    }\r\n\r\n}","import { Canvas } from './Core/Canvas';\r\nimport { Renderer } from './Core/Renderer';\r\nimport { Scene } from './Core/Scene';\r\n\r\nimport { Camera, CameraController } from './WebGL/Camera';\r\n\r\nimport { GridAxis } from './Geometry/Primatives/GridAxis';\r\n\r\nimport { PointScreen } from './Geometry/Primatives/PointScreen';\r\nimport { PointWorld } from './Geometry/Primatives/PointWorld';\r\n\r\nexport class NGL3dApp {\r\n\r\n    host: HTMLElement;\r\n    canvas: Canvas;\r\n    renderer: Renderer;\r\n    scene: Scene;\r\n\r\n    camera: Camera;\r\n    cameraCtrl: CameraController;\r\n    \r\n    constructor(id: string) {\r\n        // console.log('id: ' + id + ', NGL3dApp 07 Init!!!!!');\r\n        const host = document.getElementById(id);\r\n        if (host) {this.host = host; }\r\n        \r\n        this.scene = new Scene(this);\r\n        this.renderer = new Renderer(this);\r\n        this.canvas = new Canvas(this);\r\n\r\n        this.camera = new Camera(this.canvas.gl);\r\n        this.camera.transform.position.set(0, 1, 3);\r\n        this.cameraCtrl = new CameraController(this.canvas.gl, this.camera);\r\n\r\n        let d = new PointScreen(this);\r\n        // console.log(d);\r\n\r\n        let d1 = new PointWorld(this);\r\n        // console.log(d1);\r\n\r\n        let dd = new GridAxis(this);\r\n        // console.log(dd);\r\n    }\r\n\r\n}\r\n\r\n// camera"],"names":["Canvas","constructor","app","gl","canvas","this","document","createElement","host","appendChild","width","clientWidth","height","clientHeight","getContext","loop","clear","requestAnimationFrame","renderer","render","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","Renderer","camera","updateViewMatrix","scene","geometries","forEach","e","Scene","NGL3dApp","add","mesh","push","GeometryBase","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","pMatrix","super","uPointSize","uAngle","program","setPerspective","useProgram","uColor","getUniformLocation","uniform3fv","renderModel","model","setModelMatrix","transform","getViewMatrix","bindVertexArray","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","v","f","shader","ro","t","initShader","GetVAO","p","incAxis","verts","half","size","i","VAO","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","projectionMatrix","Model","activate","setCameraMatrix","viewMatrix","preRender","PointShader","set","angle","uniform1f","PointScreen","vOld","fOld","rotation","POINTS","Math","sin","PointWorld","Matrix4","static","a","out","fovy","aspect","near","far","tan","nf","left","right","bottom","top","lr","bt","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","x","y","z","w","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b","b0","b1","b2","b3","rad","s","c","cos","axis","b12","b20","b21","b22","len","sqrt","abs","mat","undefined","raw","identity","vtranslate","translate","rotateY","rotateX","rotateZ","vscale","vec3","scale","invert","resetRotation","reset","Vector3","magnitude","normalize","mag","multiScalar","getArray","getFloatArray","clone","AttribLocations","position","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","perspective","modelMatrix","cameraMatrix","mainTexture","CAMERA_MODE","Camera","fov","mode","ratio","Transform","ORBIT","panX","panY","up","panZ","forward","FREE","matView","updateDirection","CameraController","rotateRate","panRate","zoomRate","offsetX","offsetY","initX","initY","prevX","prevY","onUpHandler","onMoveHandler","onMouseUp","onMouseMove","addEventListener","onMouseDown","onMouseWheel","getMouseVec2","pageX","pageY","removeEventListener","delta","max","min","wheelDelta","detail","dx","dy","shiftKey","setScale","setPosition","setRotation","addScale","addPosition","addRotation","updateMatrix","norm","ATTR_POSITION_NAME","vertShaderSrc","fragShaderSrc","needValidate","attribLoc","uniformLoc","vShader","fShader","ShaderUtility","CreateShader","VERTEX_SHADER","FRAGMENT_SHADER","CreateProgram","deactivate","dispose","getParameter","CURRENT_PROGRAM","deleteProgram","matData","uniformMatrix4fv","noCulling","disable","CULL_FACE","doBlending","enable","BLEND","vertexShader","fragmentShader","createProgram","attachShader","bindAttribLocation","ATTR_POSITION_LOC","ATTR_NORMAL_LOC","ATTR_UV_LOC","linkProgram","getProgramParameter","LINK_STATUS","error","getProgramInfoLog","console","log","deleteShader","validateProgram","VALIDATE_STATUS","type","shaderString","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","matNormal","deg2Rad","getNormalMatrix","PI","DRAW_MODE","RTN","name","bufNormals","bufUV","bufIndex","aryVert","aryInd","aryNorm","aryUV","TRIANGLES","ELEMENT_ARRAY_BUFFER","Uint16Array","id","cameraCtrl","getElementById"],"sourceRoot":""}
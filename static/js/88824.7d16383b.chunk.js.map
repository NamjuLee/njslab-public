{"version":3,"file":"static/js/88824.7d16383b.chunk.js","mappings":"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","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_07/Geometry/Core/Base.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Geometry/Primatives/GridAxis.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Utility/Matrix4.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/Utility/Vector3.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Model.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Shader.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/Transform.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_07/WebGL/VAO.ts"],"sourcesContent":["import { Scene } from '../../Core/Scene';\r\n\r\nexport class GeometryBase {\r\n    scene: Scene;\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        this.scene.add(this);\r\n    }\r\n    render(gl: WebGL2RenderingContext) {\r\n        //\r\n    }\r\n}","\r\nimport { VAO } from '../../WebGL/VAO';\r\nimport { Model } from '../../WebGL/Model';\r\nimport { Shader, ATTR } from '../../WebGL/Shader';\r\n\r\nimport { NGL3dApp } from '../..';\r\nimport { GeometryBase } from '../Core/Base';\r\n// import { vaoCommon } from '../../WebGL/vaoCommon';\r\n\r\nclass GridAxisShader extends Shader {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext, vertSrc: string, fragSrc: string, aryColor: number[], pMatrix: Float32Array) {\r\n        super(gl, vertSrc, fragSrc);\t// Call the base class constructor which will setup most of what we need\r\n\r\n        if (this.program) {\r\n            this.setPerspective(pMatrix);\r\n            gl.useProgram(this.program); // Done setting up shader\r\n            let uColor = gl.getUniformLocation(this.program, 'uColor');\r\n            gl.uniform3fv(uColor, aryColor);\r\n            // gl.useProgram(null); // Done setting up shader\r\n        }\r\n\r\n    }\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n\r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n        } else { this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount); }\r\n\r\n        this.gl.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n}\r\nexport class GridAxis extends GeometryBase {\r\n    v = `#version 300 es\r\n    in vec3 a_position;\t//Standard position data.\r\n    layout(location=4) in float a_color;\t//Will hold the 4th custom position of the custom position buffer.\r\n\r\n    uniform mat4 uPMatrix;\r\n    uniform mat4 uMVMatrix;\r\n    uniform mat4 uCameraMatrix;\r\n\r\n    uniform vec3 uColor[4];\t//Color Array\r\n\r\n    out lowp vec4 color;\t//Color to send to fragment shader.\r\n\r\n    void main(void) {\r\n        color = vec4(uColor[ int(a_color) ],1.0); //Using the 4th float as a color index.\r\n        gl_Position = uPMatrix * uCameraMatrix * uMVMatrix * vec4(a_position, 1.0);\r\n    }\r\n    `;\r\n    f = `#version 300 es\r\n    precision mediump float;\r\n\r\n    in vec4 color;\r\n    out vec4 finalColor;\r\n\r\n    void main(void) { finalColor = color; }\r\n    `;\r\n    app: NGL3dApp;\r\n    gl: WebGL2RenderingContext;\r\n\r\n    vao: VAO;\r\n    model: Model;\r\n    shader: GridAxisShader;\r\n\r\n    ro: number = 0;\r\n    t: number = 0.0;\r\n    constructor(app: NGL3dApp) {\r\n        super(app.scene);\r\n        this.app = app;\r\n        this.gl = app.canvas.gl;\r\n        this.initShader(this.gl);\r\n    }\r\n    GetVAO(incAxis: boolean = true) {\r\n        let verts = [],\r\n            size = 1.8,\t\t\t// W/H of the outer box of the grid, from origin we can only go 1 unit in each direction, so from left to right is 2 units max\r\n            div = 10.0,\t\t\t// How to divide up the grid\r\n            step = size / div,\t// Steps between each line, just a number we increment by for each line in the grid.\r\n            half = size / 2;\t// From origin the starting position is half the size.\r\n\r\n        let p;\t// Temp letiable for position value.\r\n        for (let i = 0; i <= div; i++) {\r\n            // Vertical line\r\n            p = -half + (i * step);\r\n            verts.push(p);\t\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(half);\r\n            verts.push(half);\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c2\r\n\r\n            verts.push(p);\t\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(-half);\r\n            verts.push(-half);\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n\r\n            // Horizontal line\r\n            p = half - (i * step);\r\n            verts.push(-half);\t// x1\r\n            verts.push(0);\t\t// y1 verts.push(p);\r\n            verts.push(p);\t\t// z1 verts.push(0);\r\n            verts.push(0);\t\t// c1\r\n\r\n            verts.push(half);\t// x2\r\n            verts.push(0);\t\t// y2 verts.push(p);\r\n            verts.push(p);\t\t// z2 verts.push(0);\r\n            verts.push(0);\t\t// c2 verts.push(1);\r\n        }\r\n\r\n        if (incAxis) {\r\n            // x axis\r\n            verts.push(-1.1);\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(1);\t\t// c2\r\n\r\n            verts.push(1.1);\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(1);\t\t// c2\r\n\r\n            // y axis\r\n            verts.push(0);      // x1\r\n            verts.push(-1.1);\t// y1\r\n            verts.push(0);\t\t// z1\r\n            verts.push(2);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(1.1);\t// y2\r\n            verts.push(0);\t\t// z2\r\n            verts.push(2);\t\t// c2\r\n\r\n            // z axis\r\n            verts.push(0);\t\t// x1\r\n            verts.push(0);\t\t// y1\r\n            verts.push(-1.1);\t// z1\r\n            verts.push(3);\t\t// c2\r\n\r\n            verts.push(0);\t\t// x2\r\n            verts.push(0);\t\t// y2\r\n            verts.push(1.1);\t// z2\r\n            verts.push(3);\t\t// c2\r\n        }\r\n\r\n        // Setup\r\n        // let attrColorLoc = 4;\r\n        this.vao = new VAO(this.gl, 'grid', verts); // { drawMode:gl.LINES, vao:gl.createVertexArray() };\r\n        this.vao.drawMode = this.gl.LINES;\r\n        this.vao.vao = this.gl.createVertexArray();\r\n\r\n        // Do some math\r\n        this.vao.vertexComponentLen = 4;\r\n        this.vao.vertexCount = verts.length / this.vao.vertexComponentLen;\r\n        let strideLen = Float32Array.BYTES_PER_ELEMENT * this.vao.vertexComponentLen; // Stride Length is the Vertex Size for the buffer in Bytes\r\n\r\n        // Setup our Buffer\r\n        this.vao.bufVertices = this.gl.createBuffer();\r\n        this.gl.bindVertexArray(this.vao.vao);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vao.bufVertices);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\r\n        this.gl.enableVertexAttribArray(ATTR.ATTR_COLOR_LOC);\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_POSITION_LOC\t\t\t\t\t\t// Attribute Location\r\n            , 3\t\t\t\t\t\t\t\t\t\t// How big is the vector by number count\r\n            , this.gl.FLOAT \t\t\t\t\t\t\t\t// What type of number we passing in\r\n            , false\t\t\t\t\t\t\t\t\t// Does it need to be normalized?\r\n            , strideLen\t\t\t\t\t\t\t\t// How big is a vertex chunk of data.\r\n            , 0\t\t\t\t\t\t\t\t\t\t// Offset by how much\r\n        );\r\n\r\n        this.gl.vertexAttribPointer(\r\n            ATTR.ATTR_COLOR_LOC\t\t\t\t\t\t\t// new shader has \"in float a_color\" as the second attrib\r\n            , 1\t\t\t\t\t\t\t\t\t\t// This atttrib is just a single float\r\n            , this.gl.FLOAT\r\n            , false\r\n            , strideLen\t\t\t\t\t\t\t\t// Each vertex chunk is 4 floats long\r\n            , Float32Array.BYTES_PER_ELEMENT * 3\t\t// skip first 3 floats in our vertex chunk, its like str.substr(3,1) in theory.\r\n        );\r\n\r\n        // Cleanup and Finalize\r\n        this.gl.bindVertexArray(null);\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        // this.gl.mvaoCache[\"grid\"] = this.vao;\r\n        return this.vao;\r\n    }\r\n    initShader(gl: WebGL2RenderingContext) {\r\n        const col = [0.8, 0.8, 0.8, 1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n        this.shader = new GridAxisShader(gl, this.v, this.f, col, this.app.camera.projectionMatrix);\r\n        this.vao = this.GetVAO();\r\n        this.model = new Model(this.vao);\r\n    }\r\n    render() {\r\n        // his.shader.activate();\r\n        // this.ro += 0.04;\r\n        // this.shader.set(this.ro);\r\n        // this.shader.renderModel(this.model);\r\n\r\n        // let p = this.model.transform.position;\t\t// Just an pointer to transform position, make code smaller\r\n        // console.log(p);\r\n        // let angle = Math.atan2(p.y, p.x)  + (1 * this.t);\t\t// Calc the current angle plus 1 degree per second rotation\r\n        // let radius = Math.sqrt(p.x * p.x + p.y * p.y);\t// Calc the distance from origin.\r\n        // let scale = Math.max(0.2,  Math.abs(Math.sin(angle)) * 1.2  );   // Just messing with numbers and seeing what happens :)\r\n        // console.log(angle, radius);\r\n\r\n        // this.model.setScale(scale, scale, 1);\r\n        // this.model.setPosition( radius * Math.cos(angle), radius * Math.sin(angle), 0 );\r\n        // this.model.transform.rotation.z += 15 * this.t;\r\n        // this.model.transform.rotation.x += 30 * this.t;\r\n        // this.model.transform.rotation.y += 60 * this.t;\r\n\r\n        this.shader.activate().setCameraMatrix(this.app.camera.viewMatrix).renderModel(this.model.preRender());\r\n        this.t = 0.01;\r\n    }\r\n}","import { Vector3 } from './Vector3';\r\n\r\nexport class Matrix4 {\r\n    raw: Float32Array;\r\n    // ....................................................................\r\n    // Static Data Methods\r\n    static identity() {\r\n        let a = new Float32Array(16);\r\n        a[0] = a[5] = a[10] = a[15] = 1;\r\n        return a;\r\n    }\r\n\r\n    // from glMatrix\r\n    static perspective(out: Float32Array, fovy: number, aspect: number , near: number, far: number ) {\r\n        let f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);\r\n        out[0] = f / aspect;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = f;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = (far + near) * nf;\r\n        out[11] = -1;\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = (2 * far * near) * nf;\r\n        out[15] = 0;\r\n    }\r\n\r\n    static ortho(out: number[], left: number, right: number, bottom: number, top: number, near: number, far: number) {\r\n        let lr = 1 / (left - right),\r\n            bt = 1 / (bottom - top),\r\n            nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n    }\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js\r\n    // make the rows into the columns\r\n    static transpose(out: number[], a: number[]) {\r\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n        if (out === a) {\r\n            let a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a01;\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a02;\r\n            out[9] = a12;\r\n            out[11] = a[14];\r\n            out[12] = a03;\r\n            out[13] = a13;\r\n            out[14] = a23;\r\n        } else {\r\n            out[0] = a[0];\r\n            out[1] = a[4];\r\n            out[2] = a[8];\r\n            out[3] = a[12];\r\n            out[4] = a[1];\r\n            out[5] = a[5];\r\n            out[6] = a[9];\r\n            out[7] = a[13];\r\n            out[8] = a[2];\r\n            out[9] = a[6];\r\n            out[10] = a[10];\r\n            out[11] = a[14];\r\n            out[12] = a[3];\r\n            out[13] = a[7];\r\n            out[14] = a[11];\r\n            out[15] = a[15];\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n    static normalMat3(out: Float32Array, a: Float32Array) {\r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n        //  Calculate the determinant\r\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return null; }\r\n\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        return out;\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Operation\r\n\r\n    // https:// github.com/gregtatum/mdn-model-view-projection/blob/master/shared/matrices.js\r\n    static multiplyVector(mat4: Matrix4 , v: number[]) {\r\n        let x = v[0], y = v[1], z = v[2], w = v[3];\r\n        let c1r1 = mat4[ 0], c2r1 = mat4[ 1], c3r1 = mat4[ 2], c4r1 = mat4[ 3],\r\n            c1r2 = mat4[ 4], c2r2 = mat4[ 5], c3r2 = mat4[ 6], c4r2 = mat4[ 7],\r\n            c1r3 = mat4[ 8], c2r3 = mat4[ 9], c3r3 = mat4[10], c4r3 = mat4[11],\r\n            c1r4 = mat4[12], c2r4 = mat4[13], c3r4 = mat4[14], c4r4 = mat4[15];\r\n\r\n        return [\r\n            x * c1r1 + y * c1r2 + z * c1r3 + w * c1r4,\r\n            x * c2r1 + y * c2r2 + z * c2r3 + w * c2r4,\r\n            x * c3r1 + y * c3r2 + z * c3r3 + w * c3r4,\r\n            x * c4r1 + y * c4r2 + z * c4r3 + w * c4r4\r\n        ];\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/vec4.js, vec4.transformMat4\r\n    static transformVec4(out: Float32Array, v: number[], m: Float32Array) {\r\n        out[0] = m[0] * v[0] + m[4] * v[1] + m[8]\t* v[2] + m[12] * v[3];\r\n        out[1] = m[1] * v[0] + m[5] * v[1] + m[9]\t* v[2] + m[13] * v[3];\r\n        out[2] = m[2] * v[0] + m[6] * v[1] + m[10]\t* v[2] + m[14] * v[3];\r\n        out[3] = m[3] * v[0] + m[7] * v[1] + m[11]\t* v[2] + m[15] * v[3];\r\n        return out;\r\n    }\r\n\r\n    // From glMatrix\r\n    // Multiple two mat4 together\r\n    static mult(out: Float32Array, a: Float32Array, b: Float32Array) { \r\n        let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\r\n            a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\r\n            a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\r\n            a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n        //  Cache only the current line of the second matrix\r\n        let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n        b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n        return out;\t\r\n    }\r\n\r\n    // ....................................................................\r\n    // Static Transformation\r\n    static scale(out: Float32Array, x: number, y: number, z: number) {\r\n        out[0] *= x;\r\n        out[1] *= x;\r\n        out[2] *= x;\r\n        out[3] *= x;\r\n        out[4] *= y;\r\n        out[5] *= y;\r\n        out[6] *= y;\r\n        out[7] *= y;\r\n        out[8] *= z;\r\n        out[9] *= z;\r\n        out[10] *= z;\r\n        out[11] *= z;\r\n        return out;\r\n    }\r\n\r\n    static rotateY(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c - a20 * s;\r\n        out[1] = a01 * c - a21 * s;\r\n        out[2] = a02 * c - a22 * s;\r\n        out[3] = a03 * c - a23 * s;\r\n        out[8] = a00 * s + a20 * c;\r\n        out[9] = a01 * s + a21 * c;\r\n        out[10] = a02 * s + a22 * c;\r\n        out[11] = a03 * s + a23 * c;\r\n        return out;\r\n    }\r\n\r\n    static rotateX(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7],\r\n            a20 = out[8],\r\n            a21 = out[9],\r\n            a22 = out[10],\r\n            a23 = out[11];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[4] = a10 * c + a20 * s;\r\n        out[5] = a11 * c + a21 * s;\r\n        out[6] = a12 * c + a22 * s;\r\n        out[7] = a13 * c + a23 * s;\r\n        out[8] = a20 * c - a10 * s;\r\n        out[9] = a21 * c - a11 * s;\r\n        out[10] = a22 * c - a12 * s;\r\n        out[11] = a23 * c - a13 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotateZ(out: Float32Array, rad: number) {\r\n        let s = Math.sin(rad),\r\n            c = Math.cos(rad),\r\n            a00 = out[0],\r\n            a01 = out[1],\r\n            a02 = out[2],\r\n            a03 = out[3],\r\n            a10 = out[4],\r\n            a11 = out[5],\r\n            a12 = out[6],\r\n            a13 = out[7];\r\n\r\n        //  Perform axis-specific matrix multiplication\r\n        out[0] = a00 * c + a10 * s;\r\n        out[1] = a01 * c + a11 * s;\r\n        out[2] = a02 * c + a12 * s;\r\n        out[3] = a03 * c + a13 * s;\r\n        out[4] = a10 * c - a00 * s;\r\n        out[5] = a11 * c - a01 * s;\r\n        out[6] = a12 * c - a02 * s;\r\n        out[7] = a13 * c - a03 * s;\r\n        return out;\r\n    }\r\n\r\n    static rotate(out: Float32Array , rad: number, axis: number) {\r\n        let x = axis[0], y = axis[1], z = axis[2],\r\n            len = Math.sqrt(x * x + y * y + z * z),\r\n            s, c, t,\r\n            a00, a01, a02, a03,\r\n            a10, a11, a12, a13,\r\n            a20, a21, a22, a23,\r\n            b00, b01, b02,\r\n            b10, b11, b12,\r\n            b20, b21, b22;\r\n\r\n        if (Math.abs(len) < 0.000001) { return null; }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = out[0]; a01 = out[1]; a02 = out[2]; a03 = out[3];\r\n        a10 = out[4]; a11 = out[5]; a12 = out[6]; a13 = out[7];\r\n        a20 = out[8]; a21 = out[9]; a22 = out[10]; a23 = out[11];\r\n\r\n        //  Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        //  Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n        return out;\r\n    }\r\n\r\n    static invert(out: Float32Array, mat?: Float32Array ) {\r\n        if (mat === undefined) { mat = out; }// If input isn't sent, then output is also input\r\n\r\n        let a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],\r\n            a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],\r\n            a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],\r\n            a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],\r\n\r\n            b00 = a00 * a11 - a01 * a10,\r\n            b01 = a00 * a12 - a02 * a10,\r\n            b02 = a00 * a13 - a03 * a10,\r\n            b03 = a01 * a12 - a02 * a11,\r\n            b04 = a01 * a13 - a03 * a11,\r\n            b05 = a02 * a13 - a03 * a12,\r\n            b06 = a20 * a31 - a21 * a30,\r\n            b07 = a20 * a32 - a22 * a30,\r\n            b08 = a20 * a33 - a23 * a30,\r\n            b09 = a21 * a32 - a22 * a31,\r\n            b10 = a21 * a33 - a23 * a31,\r\n            b11 = a22 * a33 - a23 * a32,\r\n\r\n            //  Calculate the determinant\r\n            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {return false; }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return true;\r\n    }\r\n\r\n    // https:// github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js  mat4.scalar.translate = function (out, a, v) {\r\n    static translate(out: Float32Array, x: number, y: number, z: number) {\r\n        out[12] = out[0] * x + out[4] * y + out[8]\t* z + out[12];\r\n        out[13] = out[1] * x + out[5] * y + out[9]\t* z + out[13];\r\n        out[14] = out[2] * x + out[6] * y + out[10]\t* z + out[14];\r\n        out[15] = out[3] * x + out[7] * y + out[11]\t* z + out[15];\r\n    }\r\n    constructor() { \r\n        this.raw = Matrix4.identity(); \r\n    }\r\n    // ....................................................................\r\n    // Transformations Methods\r\n    vtranslate(v: Vector3) {\r\n        Matrix4.translate(this.raw, v.x, v.y, v.z);\r\n        return this; \r\n    }\r\n    translate(x: number, y: number, z: number) {\r\n        Matrix4.translate(this.raw, x, y, z); \r\n        return this;\r\n    }\r\n    rotateY(rad: number) {\t\tMatrix4.rotateY(this.raw, rad); return this; }\r\n    rotateX(rad: number) {\t\tMatrix4.rotateX(this.raw, rad); return this; }\r\n    rotateZ(rad: number) {\t\tMatrix4.rotateZ(this.raw, rad); return this; }\r\n\r\n    vscale(vec3: Vector3) {\t\tMatrix4.scale(this.raw, vec3.x, vec3.y, vec3.z); return this; }\r\n    scale(x: number, y: number, z: number) {\r\n        Matrix4.scale(this.raw, x, y, z); \r\n        return this; \r\n    }\r\n\r\n    invert() {\r\n        Matrix4.invert(this.raw); \r\n        return this; \r\n    }\r\n\r\n    // ....................................................................\r\n    // Methods\r\n    // Bring is back to identity without changing the transform values.\r\n    resetRotation() {\t\r\n        for (let i = 0; i < this.raw.length; i++) {\r\n            if (i >= 12 && i <= 14) {continue; }\r\n            this.raw[i] = (i % 5 === 0) ? 1 : 0;  // only positions 0,5,10,15 need to be 1 else 0.\r\n        }\r\n        return this;\r\n    }\r\n\r\n    // reset data back to identity.\r\n    reset() { \r\n        for (let i = 0; i < this.raw.length; i++) { this.raw[i] = (i % 5 === 0) ? 1 : 0; } // only positions 0,5,10,15 need to be 1 else 0.\r\n        return this;\r\n    }\r\n}","\r\nexport class Vector3 {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    constructor(x: number = 0, y: number = 0, z: number = 0 ) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    magnitude(v?: Vector3) {\r\n        if (v === undefined) {return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z ); }\r\n        let x = v.x - this.x, y = v.y - this.y, z = v.y - this.z;\r\n        return Math.sqrt( x * x + y * y + z * z );\r\n    }\r\n\r\n    normalize() { \r\n        let mag = this.magnitude(); \r\n        this.x /= mag; this.y /= mag; this.z /= mag; \r\n        return this;\r\n    }\r\n    set(x: number, y: number, z: number) {\r\n         this.x = x; this.y = y; this.z = z;\t\r\n         return this;\r\n    }\r\n    multiScalar(v: number) { \r\n        this.x *= v; this.y *= v; this.z *= v; return this; \r\n    }\r\n    getArray() {\r\n         return [this.x, this.y, this.z]; }\r\n    getFloatArray() {\r\n         return new Float32Array([this.x, this.y, this.z]); }\r\n    clone() {\r\n         return new Vector3(this.x, this.y, this.z); \r\n    }\r\n} ","export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\n\r\nexport class UniformLocations {\r\n\r\n    uPointSize: WebGLUniformLocation | null;\r\n    uAngle: WebGLUniformLocation | null;\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    \r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}","import { VAO } from './VAO';\r\nimport { Transform } from './Transform';\r\n\r\nexport class Model {\r\n    vao: VAO;\r\n    transform: Transform;\r\n    constructor(vao: VAO) {\r\n        this.transform = new Transform();\r\n        this.vao = vao;\r\n    }\r\n\r\n    setScale(x: number, y: number, z: number) {\r\n         this.transform.scale.set(x, y, z); \r\n         return this; \r\n        }\r\n    setPosition(x: number, y: number, z: number) {\r\n         this.transform.position.set(x, y, z); \r\n         return this; \r\n        }\r\n    setRotation(x: number, y: number, z: number) {\r\n         this.transform.rotation.set(x, y, z); \r\n         return this; \r\n        }\r\n\r\n    addScale(x: number, y: number, z: number) {\tthis.transform.scale.x += x;\tthis.transform.scale.y += y;\tthis.transform.scale.y += y;\t\r\n        return this; \r\n    }\r\n    addPosition(x: number, y: number, z: number) {\tthis.transform.position.x += x; this.transform.position.y += y; this.transform.position.z += z; \r\n        return this; \r\n    }\r\n    addRotation(x: number, y: number, z: number) {\tthis.transform.rotation.x += x; this.transform.rotation.y += y; this.transform.rotation.z += z; \r\n        return this; \r\n    }\r\n\r\n    preRender() {\r\n         this.transform.updateMatrix(); \r\n         return this; \r\n    }\r\n}","// import { GLShaderCommon } from '../Utility/GLShaderCommon';\r\n// import { AttribLocations, UniformLocations } from './AttribLocations';\r\nimport { Model } from './Model';\r\n\r\nexport enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_NAME = 'a_color',\r\n    ATTR_COLOR_LOC = 4,\r\n}\r\n\r\nexport class AttribLocations {\r\n\r\n    position: number;\r\n    norm: number;\r\n    uv: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_POSITION_NAME);\r\n        this.norm = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}\r\nexport class UniformLocations {\r\n\r\n    perspective: WebGLUniformLocation | null;\r\n    modelMatrix: WebGLUniformLocation | null;\r\n    cameraMatrix: WebGLUniformLocation | null;\r\n    mainTexture: WebGLUniformLocation | null;\r\n    \r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.perspective =\tgl.getUniformLocation(program, 'uPMatrix');\r\n        this.modelMatrix =\tgl.getUniformLocation(program, 'uMVMatrix');\r\n        this.cameraMatrix =\tgl.getUniformLocation(program, 'uCameraMatrix');\r\n        this.mainTexture =\tgl.getUniformLocation(program, 'uMainTex' );\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n\r\n    gl: WebGL2RenderingContext;\r\n    program: WebGLProgram | null;\r\n\r\n    attribLoc: AttribLocations;\r\n    uniformLoc: UniformLocations;\r\n\r\n    vShader: WebGLShader | null;\r\n    fShader: WebGLShader | null;\r\n\r\n    constructor(gl: WebGL2RenderingContext , vertShaderSrc: string, fragShaderSrc: string, needValidate: boolean = true ) {\r\n        this.gl = gl;\r\n\r\n        this.vShader = ShaderUtility.CreateShader(gl, gl.VERTEX_SHADER as unknown as WebGLShader, vertShaderSrc);\r\n        this.fShader = ShaderUtility.CreateShader(gl, gl.FRAGMENT_SHADER as unknown as WebGLShader, fragShaderSrc);\r\n        \r\n        if (this.vShader && this.fShader ) { \r\n            let program = ShaderUtility.CreateProgram(gl, this.vShader, this.fShader, needValidate);\r\n\r\n            if (program) {\r\n                this.program = program;\r\n                gl.useProgram(this.program);\r\n                this.attribLoc = new AttribLocations(gl, this.program);\r\n                this.uniformLoc = new UniformLocations(gl, this.program);\r\n                return;\r\n                // gl.useProgram(this.program);\r\n                // this.attribLoc = new AttribLocations(gl, this.program);\r\n                // this.uniformLoc = new UniformLocations(gl, this.program);\r\n                // gl.useProgram(null);\r\n                // this.uniformLoc = {};\t// TODO : Replace in later lessons with get standardUniformLocations.\r\n            }\r\n\r\n            // Note :: Extended shaders should deactivate shader when done calling super and setting up custom parts in the constructor.\r\n        }\r\n    }\r\n    // ...................................................\r\n    // Methods\r\n    activate() {\r\n         this.gl.useProgram(this.program); return this; \r\n    }\r\n    deactivate() { \r\n        this.gl.useProgram(null); return this; \r\n    }\r\n\r\n    // function helps clean up resources when shader is no longer needed.\r\n    dispose() {\r\n        // unbind the program if its currently active\r\n        if (this.gl.getParameter(this.gl.CURRENT_PROGRAM) === this.program) {this.gl.useProgram(null); }\r\n        this.gl.deleteProgram(this.program);\r\n    }\r\n    setPerspective(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.perspective, false, matData); \r\n        return this; \r\n    }\r\n    setModelMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.modelMatrix, false, matData); \r\n        return this; \r\n    }\r\n    setCameraMatrix(matData: Float32Array) {\r\n        this.gl.uniformMatrix4fv(this.uniformLoc.cameraMatrix, false, matData); \r\n        return this; \r\n    }\r\n    // ...................................................\r\n    // RENDER RELATED METHODS\r\n\r\n    // Setup custom properties\r\n    preRender() {\r\n        //\r\n    } \r\n    // Handle rendering a model\r\n    renderModel(model: Model) {\r\n        this.setModelMatrix(model.transform.getViewMatrix());\t// Set the transform, so the shader knows where the model exists in 3d space\r\n        this.gl.bindVertexArray(model.vao.vao);\t// Enable VAO, this will set all the predefined attributes for the shader\r\n        \r\n        if (model.vao.noCulling) {this.gl.disable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) {this.gl.enable(this.gl.BLEND); }\r\n        \r\n        if (model.vao.indexCount) {\r\n            this.gl.drawElements(model.vao.drawMode, model.vao.indexCount, this.gl.UNSIGNED_SHORT, 0); \r\n        } else {\r\n            this.gl.drawArrays(model.vao.drawMode, 0, model.vao.vertexCount);\r\n        }\r\n\r\n        this.gl.bindVertexArray(null);\r\n        if (model.vao.noCulling) {this.gl.enable(this.gl.CULL_FACE); }\r\n        if (model.vao.doBlending) {this.gl.disable(this.gl.BLEND); }\r\n        \r\n        return this;\r\n    }\r\n}\r\n\r\nclass ShaderUtility {\r\n    static CreateProgram(gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader, needValidate: boolean = true): WebGLProgram | null {\r\n        const program = gl.createProgram();\r\n        if (program === null ) {return null; }\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n\r\n        gl.bindAttribLocation(program, ATTR.ATTR_POSITION_LOC, ATTR.ATTR_POSITION_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_NORMAL_LOC, ATTR.ATTR_NORMAL_NAME);\r\n        gl.bindAttribLocation(program, ATTR.ATTR_UV_LOC, ATTR.ATTR_UV_NAME);\r\n        \r\n        gl.linkProgram(program);\r\n\r\n        // Check that shader program was able to link to WebGL\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            const error = gl.getProgramInfoLog(program);\r\n            console.log('Failed to link program: ' + error);\r\n            gl.deleteProgram(program);\r\n            gl.deleteShader(fragmentShader);\r\n            gl.deleteShader(vertexShader);\r\n            return null;\r\n        }\r\n        if (needValidate) {\r\n            gl.validateProgram(program);\r\n            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\r\n                console.error('Failed to validate program', gl.getProgramInfoLog(program));\r\n                gl.deleteProgram(program);\r\n                gl.deleteShader(fragmentShader);\r\n                gl.deleteShader(vertexShader);\r\n                return null;\r\n            }\r\n        }\r\n        gl.deleteShader(fragmentShader);\r\n        gl.deleteShader(vertexShader);\r\n        return program;\r\n    }\r\n    static CreateShader(gl: WebGL2RenderingContext, type: WebGLShader, shaderString: string) {\r\n        // console.log(type);\r\n        const shader = gl.createShader(type as unknown as number);\r\n        if (shader === null) {return null; }\r\n        gl.shaderSource(shader, shaderString);\r\n        gl.compileShader(shader);\r\n        const suc = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n        if (suc) { return shader; }\r\n        console.log(gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n}","import { Vector3 } from '../Utility/Vector3';\r\nimport { Matrix4 } from '../Utility/Matrix4';\r\n\r\nexport class Transform {\r\n    static deg2Rad = Math.PI / 180; // Cache result, one less operation to do for each update.\r\n\r\n    position: Vector3;\r\n    scale: Vector3;\r\n    rotation: Vector3;\r\n    matView: Matrix4;\r\n    matNormal: Float32Array;\r\n\r\n    forward: Float32Array;\r\n    up: Float32Array;\r\n    right: Float32Array;\r\n\r\n    constructor() {\r\n        this.position\t= new Vector3(0, 0, 0);\t// Traditional X,Y,Z 3d position\r\n        this.scale\t\t= new Vector3(1, 1, 1);\t// How much to scale a mesh. Having a 1 means no scaling is done.\r\n        this.rotation\t= new Vector3(0, 0, 0);\t// Hold rotation values based on degrees, Object will translate it to radians\r\n        this.matView \t= new Matrix4();\t\t// Cache the results when calling updateMatrix\r\n        this.matNormal\t= new Float32Array(9);\t// This is a Mat3, raw array to hold the values is enough for what its used for\r\n\r\n        // Direction Vectors\r\n        this.forward\t= new Float32Array(4);\t// When rotating, keep track of what the forward direction is\r\n        this.up\t\t\t= new Float32Array(4);\t// what the up direction is, invert to get bottom\r\n        this.right\t\t= new Float32Array(4);\t// what the right direction is, invert to get left\r\n    }\r\n    updateMatrix() {\r\n        this.matView.reset() // Order is very important!!\r\n            .vtranslate(this.position)\r\n            .rotateX(this.rotation.x * Transform.deg2Rad)\r\n            .rotateZ(this.rotation.z * Transform.deg2Rad)\r\n            .rotateY(this.rotation.y * Transform.deg2Rad)\r\n            .vscale(this.scale);\r\n\r\n        // Calcuate the Normal Matrix which doesn't need translate, then transpose and inverses the mat4 to mat3\r\n        Matrix4.normalMat3(this.matNormal, this.matView.raw);\r\n\r\n        // Determine Direction after all the transformations.\r\n        Matrix4.transformVec4(this.forward,\t[0, 0, 1, 0], this.matView.raw); // Z\r\n        Matrix4.transformVec4(this.up,\t\t[0, 1, 0, 0], this.matView.raw); // Y\r\n        Matrix4.transformVec4(this.right,\t[1, 0, 0, 0], this.matView.raw); // X\r\n\r\n        return this.matView.raw;\r\n    }\r\n\r\n    updateDirection() {\r\n        Matrix4.transformVec4(this.forward,\t[0, 0, 1, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.up,\t\t[0, 1, 0, 0], this.matView.raw);\r\n        Matrix4.transformVec4(this.right,\t[1, 0, 0, 0], this.matView.raw);\r\n        return this;\r\n    }\r\n\r\n    getViewMatrix() {\treturn this.matView.raw; }\r\n    getNormalMatrix() {\treturn this.matNormal; }\r\n\r\n    reset() {\r\n        this.position.set(0, 0, 0);\r\n        this.scale.set(1, 1, 1);\r\n        this.rotation.set(0, 0, 0);\r\n    }\r\n}\r\n","import { ATTR } from './AttribLocations';\r\n\r\nexport enum DRAW_MODE {\r\n    // \r\n}\r\n\r\nexport class RTN {\r\n    name: string;\r\n    \r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor() {\r\n        // \r\n    }\r\n}\r\n\r\nexport class VAO {\r\n    name: string;\r\n\r\n    noCulling: boolean = true;\r\n    doBlending: boolean = true;\r\n    \r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor(gl: WebGL2RenderingContext, name: string , aryVert: number[], aryInd?: number[] | null, aryNorm?: number[] | null, aryUV?: number[] | null ) {\r\n        this.name = name;\r\n        this.drawMode = gl.TRIANGLES;\r\n\r\n        this.vao = gl.createVertexArray();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n        gl.bindVertexArray(this.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            this.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            this.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            this.vertexCount = aryVert.length / this.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm != null) {\r\n            this.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV != null) {\r\n            this.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd != null) {\r\n            this.bufIndex = gl.createBuffer();\r\n            this.indexCount = aryInd.length;\r\n            console.log(this);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            // gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n\r\n        }\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n    }\r\n\r\n}"],"names":["GeometryBase","constructor","scene","this","add","render","gl","GridAxisShader","Shader","vertSrc","fragSrc","aryColor","pMatrix","super","uPointSize","uAngle","program","setPerspective","useProgram","uColor","getUniformLocation","uniform3fv","renderModel","model","setModelMatrix","transform","getViewMatrix","bindVertexArray","vao","indexCount","drawElements","drawMode","UNSIGNED_SHORT","drawArrays","vertexCount","GridAxis","app","v","f","shader","ro","t","canvas","initShader","GetVAO","p","incAxis","verts","half","size","i","push","VAO","LINES","createVertexArray","vertexComponentLen","length","strideLen","Float32Array","BYTES_PER_ELEMENT","bufVertices","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","ATTR","vertexAttribPointer","FLOAT","camera","projectionMatrix","Model","activate","setCameraMatrix","viewMatrix","preRender","Matrix4","static","a","out","fovy","aspect","near","far","Math","tan","nf","left","right","bottom","top","lr","bt","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","mat4","x","y","z","w","c1r1","c2r1","c3r1","c4r1","c1r2","c2r2","c3r2","c4r2","c1r3","c2r3","c3r3","c4r3","m","b","b0","b1","b2","b3","rad","s","sin","c","cos","axis","b12","b20","b21","b22","len","sqrt","abs","mat","undefined","raw","identity","vtranslate","translate","rotateY","rotateX","rotateZ","vscale","vec3","scale","invert","resetRotation","reset","Vector3","magnitude","normalize","mag","set","multiScalar","getArray","getFloatArray","clone","AttribLocations","position","normal","uv","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","UniformLocations","perspective","modelMatrix","cameraMatrix","mainTexture","Transform","setScale","setPosition","setRotation","rotation","addScale","addPosition","addRotation","updateMatrix","norm","ATTR_POSITION_NAME","vertShaderSrc","fragShaderSrc","needValidate","attribLoc","uniformLoc","vShader","fShader","ShaderUtility","CreateShader","VERTEX_SHADER","FRAGMENT_SHADER","CreateProgram","deactivate","dispose","getParameter","CURRENT_PROGRAM","deleteProgram","matData","uniformMatrix4fv","noCulling","disable","CULL_FACE","doBlending","enable","BLEND","vertexShader","fragmentShader","createProgram","attachShader","bindAttribLocation","ATTR_POSITION_LOC","ATTR_NORMAL_LOC","ATTR_UV_LOC","linkProgram","getProgramParameter","LINK_STATUS","error","getProgramInfoLog","console","log","deleteShader","validateProgram","VALIDATE_STATUS","type","shaderString","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","matView","matNormal","forward","up","deg2Rad","updateDirection","getNormalMatrix","PI","DRAW_MODE","RTN","name","bufNormals","bufUV","bufIndex","aryVert","aryInd","aryNorm","aryUV","TRIANGLES","ELEMENT_ARRAY_BUFFER","Uint16Array"],"sourceRoot":""}
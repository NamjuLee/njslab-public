{"version":3,"file":"static/js/89440.0a17b4b1.chunk.js","mappings":"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","sources":["njslab/Visualization/MetaballsBasic/index.ts"],"sourcesContent":["import { RendererCanvas } from \"../../../lib\";\r\n\r\ntype Point = { x: number; y: number; value?: number };\r\n\r\nconst generateScatterData = (\r\n  canvas: HTMLCanvasElement,\r\n  numPoints: number\r\n): Point[] => {\r\n  const points: Point[] = [];\r\n  for (let i = 0; i < numPoints; i++) {\r\n    points.push({\r\n      x: Math.random() * canvas.width,\r\n      y: Math.random() * canvas.height,\r\n    });\r\n  }\r\n  return points;\r\n};\r\n\r\n// 2D 밀도 계산\r\nconst calculateDensity = (\r\n  canvas: HTMLCanvasElement,\r\n  points: Point[],\r\n  gridSize: number\r\n): number[][] => {\r\n  const cols = Math.ceil(canvas.width / gridSize);\r\n  const rows = Math.ceil(canvas.height / gridSize);\r\n  const densityGrid: number[][] = Array.from({ length: rows }, () =>\r\n    Array(cols).fill(0)\r\n  );\r\n\r\n  points.forEach(({ x, y }) => {\r\n    const col = Math.floor(x / gridSize);\r\n    const row = Math.floor(y / gridSize);\r\n    if (densityGrid[row] && densityGrid[row][col] !== undefined) {\r\n      densityGrid[row][col] += 1; // 밀도를 증가시킴\r\n    }\r\n  });\r\n\r\n  return densityGrid;\r\n};\r\n\r\nconst getColorForDensity = (density: number, maxDensity: number): string => {\r\n  const ratio = Math.min(density / maxDensity, 1);\r\n  const r = Math.floor(255 * ratio);\r\n  const g = Math.floor(255 * (1 - ratio));\r\n  const b = 128;\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n};\r\n\r\n// 히트맵 렌더링\r\nconst renderHeatmap = (ctx, densityGrid: number[][], gridSize: number) => {\r\n  const maxDensity = Math.max(...densityGrid.flat());\r\n  densityGrid.forEach((row, rowIndex) => {\r\n    row.forEach((density, colIndex) => {\r\n      const x = colIndex * gridSize;\r\n      const y = rowIndex * gridSize;\r\n      ctx.fillStyle = getColorForDensity(density, maxDensity);\r\n      ctx.fillRect(x, y, gridSize, gridSize);\r\n    });\r\n  });\r\n};\r\n\r\nconst renderMetaballMap = (\r\n  ctx,\r\n  densityGrid: number[][],\r\n  gridSize: number,\r\n  threshold: number\r\n) => {\r\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n  densityGrid.forEach((row, rowIndex) => {\r\n    row.forEach((density, colIndex) => {\r\n      if (density > threshold) {\r\n        const x = colIndex * gridSize;\r\n        const y = rowIndex * gridSize;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          x + gridSize / 2,\r\n          y + gridSize / 2,\r\n          gridSize / 2,\r\n          0,\r\n          Math.PI * 2\r\n        );\r\n        ctx.fillStyle = \"rgba(255, 0, 0, 0.5)\";\r\n        ctx.fill();\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// 메타볼 필드 생성\r\nconst createMetaballField = (\r\n  ctx,\r\n  points: Point[],\r\n\r\n  gridSize: number,\r\n  influenceRadius: number\r\n): number[][] => {\r\n  const cols = Math.ceil(ctx.canvas.width / gridSize);\r\n  const rows = Math.ceil(ctx.canvas.height / gridSize);\r\n  const field = Array.from({ length: rows }, () => Array(cols).fill(0));\r\n\r\n  points.forEach(({ x, y }) => {\r\n    const col = Math.floor(x / gridSize);\r\n    const row = Math.floor(y / gridSize);\r\n\r\n    for (let i = -influenceRadius; i <= influenceRadius; i++) {\r\n      for (let j = -influenceRadius; j <= influenceRadius; j++) {\r\n        const nx = col + j;\r\n        const ny = row + i;\r\n\r\n        if (nx >= 0 && ny >= 0 && ny < rows && nx < cols) {\r\n          const dx = nx * gridSize + gridSize / 2 - x;\r\n          const dy = ny * gridSize + gridSize / 2 - y;\r\n          const distanceSquared = dx * dx + dy * dy;\r\n\r\n          // 영향력 추가 (1 / distance^2 방식)\r\n          if (distanceSquared < influenceRadius * influenceRadius) {\r\n            field[ny][nx] += 1 / distanceSquared;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  return field;\r\n};\r\n\r\n// 메타볼 렌더링\r\nconst renderSmoothMetaballs = (\r\n  ctx,\r\n  field: number[][],\r\n  gridSize: number,\r\n  threshold: number\r\n) => {\r\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n  field.forEach((row, rowIndex) => {\r\n    row.forEach((value, colIndex) => {\r\n      if (value >= threshold) {\r\n        const x = colIndex * gridSize;\r\n        const y = rowIndex * gridSize;\r\n\r\n        // 부드러운 색상 (투명도 적용)\r\n        const intensity = Math.min((value - threshold) / threshold, 1);\r\n        const color = `rgba(255, 0, 0, ${intensity})`;\r\n\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          x + gridSize / 2,\r\n          y + gridSize / 2,\r\n          gridSize / 2,\r\n          0,\r\n          Math.PI * 2\r\n        );\r\n        ctx.fill();\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport class Solution {\r\n  public divHost: HTMLElement;\r\n  public renderer: Renderer;\r\n  constructor(id: string) {\r\n    this.divHost = document.getElementById(id);\r\n\r\n    // Center align\r\n    this.divHost.style.display = \"flex\";\r\n    this.divHost.style.alignItems = \"center\";\r\n\r\n    const div = document.createElement(\"div\");\r\n    div.style.marginLeft = \"auto\";\r\n    div.style.marginRight = \"auto\";\r\n    div.style.backgroundColor = \"#555\";\r\n    div.style.width = \"1000px\";\r\n    div.style.height = \"600px\";\r\n\r\n    this.divHost.appendChild(div);\r\n\r\n    // TODO\r\n    // You code goes here for one time operation\r\n\r\n    this.renderer = new Renderer(div);\r\n\r\n    // console.log(this.renderer);\r\n    // !! you should execute it for rendering\r\n    // this.start();\r\n  }\r\n  public destroy() {\r\n    if (this.divHost) {\r\n      try {\r\n        while (this.divHost.firstChild) {\r\n          this.divHost.removeChild(this.divHost.firstChild);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error in destroy method:\", error);\r\n      }\r\n    } else {\r\n      console.warn(\"divHost is undefined in destroy method\");\r\n    }\r\n  }\r\n}\r\n\r\nexport class Renderer extends RendererCanvas {\r\n  constructor(div: any) {\r\n    super(div);\r\n    this.canvas.style.position = \"relative\";\r\n    this.canvas.style.width = \"100%\";\r\n    this.canvas.style.height = \"100%\";\r\n\r\n    // TODO\r\n    // You code goes here for one time operation\r\n    //\r\n    const points = generateScatterData(this.canvas, 1000);\r\n\r\n    console.log(points);\r\n\r\n    const gridSize = 10; // Grid의 크기\r\n    const densityGrid = calculateDensity(this.canvas, points, gridSize);\r\n\r\n    //   renderHeatmap(this.ctx, densityGrid, gridSize);\r\n\r\n    // 메타볼 렌더링\r\n    const threshold = 0.01; // 밀도 임계값\r\n    renderMetaballMap(this.ctx, densityGrid, gridSize, threshold);\r\n\r\n    // 메타볼 생성 및 렌더링\r\n    //   const gridSize = 10; // 픽셀 단위 그리드 크기\r\n    const influenceRadius = 150; // 메타볼 영향 반경\r\n    //   const threshold = 0.01; // 필드 임계값\r\n\r\n    const field = createMetaballField( this.ctx, points, gridSize, influenceRadius);\r\n    renderSmoothMetaballs(this.ctx, field, gridSize, threshold);\r\n\r\n\r\n    this.isStatic = true;\r\n    this.start();\r\n  }\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    // TODO\r\n    // You code goes here for the rending loop\r\n    // !! can stop render after this frame.\r\n    // this.isStatic = true;\r\n  }\r\n}\r\n"],"names":["Solution","constructor","id","divHost","renderer","this","document","getElementById","style","display","alignItems","div","createElement","marginLeft","marginRight","backgroundColor","width","height","appendChild","Renderer","destroy","firstChild","removeChild","error","console","warn","RendererCanvas","super","canvas","position","points","numPoints","i","push","x","Math","random","y","generateScatterData","log","densityGrid","gridSize","cols","ceil","rows","Array","from","length","fill","forEach","col","floor","row","undefined","calculateDensity","ctx","threshold","clearRect","rowIndex","density","colIndex","beginPath","arc","PI","fillStyle","renderMetaballMap","field","influenceRadius","j","nx","ny","dx","dy","distanceSquared","createMetaballField","value","intensity","min","color","renderSmoothMetaballs","isStatic","start","render"],"sourceRoot":""}
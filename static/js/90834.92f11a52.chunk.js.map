{"version":3,"file":"static/js/90834.92f11a52.chunk.js","mappings":"oGAAO,IAAKA,E,+BAIX,SAJWA,GAAAA,EAAW,UAAXA,EAAW,UAAXA,EAAW,UAItB,CAJWA,IAAAA,EAAW,KAMhB,MAAMC,EAAU,CAACC,EAAWC,EAAWC,KAC1C,IAGIC,EAAGC,EAHHC,GAAKL,EAAI,IAAM,IACfM,EAAIL,EAAI,IAAMI,EACdE,EAAIF,EAAIH,EAAI,IACNM,EAAI,EAcd,OAZAF,EAAI,QAAYA,EAAIA,EAAIA,EAAI,QAAYA,EAAIA,EAAIA,GAAKA,EAAI,GAAK,KAAO,OACrED,EAAI,GAAYA,EAAIA,EAAIA,EAAI,QAAYA,EAAIA,EAAIA,GAAKA,EAAI,GAAK,KAAO,OACrEE,EAAI,SAAYA,EAAIA,EAAIA,EAAI,QAAYA,EAAIA,EAAIA,GAAKA,EAAI,GAAK,KAAO,OAErEJ,EAAQ,OAAJG,GAAkB,OAALD,GAAmB,MAALE,EAC/BH,GAAS,MAALE,EAAkB,OAAJD,EAAiB,MAAJE,EAC/BC,EAAQ,MAAJF,GAAkB,KAALD,EAAkB,MAAJE,EAE/BJ,EAAKA,EAAI,SAAc,MAAQM,KAAKC,IAAIP,EAAG,EAAI,KAAO,KAAS,MAAQA,EACvEC,EAAKA,EAAI,SAAc,MAAQK,KAAKC,IAAIN,EAAG,EAAI,KAAO,KAAS,MAAQA,EACvEI,EAAKA,EAAI,SAAc,MAAQC,KAAKC,IAAIF,EAAG,EAAI,KAAO,KAAS,MAAQA,EAEhE,CAA+B,IAA9BC,KAAKE,IAAI,EAAGF,KAAKG,IAAI,EAAGT,IACF,IAA9BM,KAAKE,IAAI,EAAGF,KAAKG,IAAI,EAAGR,IACM,IAA9BK,KAAKE,IAAI,EAAGF,KAAKG,IAAI,EAAGJ,IAAU,EAsBzBK,EAAW,CAACV,EAAWC,EAAWI,IACpC,IAAM,CAACC,KAAKK,MAAMX,GAAIM,KAAKK,MAAMV,GAAIK,KAAKK,MAAMN,IAAIO,KAAIT,IAC3D,MAAMU,EAAMV,EAAEW,SAAS,IACvB,OAAsB,IAAfD,EAAIE,OAAe,IAAMF,EAAMA,CAAG,IAC1CG,KAAK,I,0BCpDL,IAAKC,GAQX,SARWA,GAAAA,EAAY,cAAZA,EAAY,gBAAZA,EAAY,gBAAZA,EAAY,kBAAZA,EAAY,QAAZA,EAAY,YAAZA,EAAY,kBAQvB,CARWA,IAAAA,EAAY,KCEjB,MAAMC,EAAgB,WAAgC,IAA/BC,EAAI,uDAAG,GAAIC,EAAS,uDAAG,GACjD,OAAO,IAAIC,EAAAA,IAAkBF,EAAMC,EACvC,EACaE,EAAgB,CAACC,EAAcC,EAAcC,EAAcC,EAAcC,EAAcC,KAEhG,MAAMC,EAAW,IAAIR,EAAAA,IAA0B,CAC3CS,MAAO,yBACPC,UAAW,EACXC,MAAO,EACPC,SAAU,EACVC,QAAS,IAGPC,EAAS,GAETC,GAAaV,EAAOH,GAAS,GAC7Bc,GAAaV,EAAOH,GAAS,GAC7Bc,GAAaV,EAAOH,GAAS,GAEnC,IAAK,IAAIc,EAAI,EAAIA,GAAK,KAAMA,EAAG,CAC3B,MAAMC,EAAUjB,EAAQa,EAAYG,EAC9BE,EAAUjB,EAAQa,EAAYE,EAC9BG,EAAUjB,EAAQa,EAAYC,EAEpCJ,EAAOQ,KAAM,IAAItB,EAAAA,IAAcmB,EAAShB,EAAMC,IAC9CU,EAAOQ,KAAM,IAAItB,EAAAA,IAAcmB,EAAShB,EAAMI,IAC9CO,EAAOQ,KAAM,IAAItB,EAAAA,IAAcE,EAAMC,EAAMkB,IAC3CP,EAAOQ,KAAM,IAAItB,EAAAA,IAAcK,EAAMF,EAAMkB,IAE3CP,EAAOQ,KAAM,IAAItB,EAAAA,IAAcE,EAAMkB,EAAShB,IAC9CU,EAAOQ,KAAM,IAAItB,EAAAA,IAAcK,EAAMe,EAAShB,IAC9CU,EAAOQ,KAAM,IAAItB,EAAAA,IAAcmB,EAAShB,EAAMC,IAC9CU,EAAOQ,KAAM,IAAItB,EAAAA,IAAcmB,EAASb,EAAMF,IAE9CU,EAAOQ,KAAM,IAAItB,EAAAA,IAAcE,EAAMC,EAAMkB,IAC3CP,EAAOQ,KAAM,IAAItB,EAAAA,IAAcE,EAAMI,EAAMe,IAE3CP,EAAOQ,KAAM,IAAItB,EAAAA,IAAcE,EAAMkB,EAAShB,IAC9CU,EAAOQ,KAAM,IAAItB,EAAAA,IAAcE,EAAMkB,EAASb,GAClD,CAEA,MAAMgB,GAAe,IAAIvB,EAAAA,KAAuBwB,cAAeV,GAG/D,OADa,IAAId,EAAAA,IAAoBuB,EAAcf,EACxC,ECrCR,MAAMiB,EAuBTC,YAAYC,EAAsBC,GAAoC,IAAlBC,EAAK,uDAAG,QAAO,KAtBnEF,SAAG,OACHG,YAAM,OACNC,UAAI,OACJC,SAAG,OACHC,EAAY,EAAI,KAEhBC,cAAQ,OACRC,YAAM,OACNC,WAAK,OACLC,aAAoB,GAAG,KAEvBC,cAAQ,OACRC,eAAS,OAETC,QAAS,EAAM,KAEfC,MAAQ,IAAIzC,EAAAA,IAAc,EAAG,GAAG,KAEhC0C,iBAAmBC,EAAU,KAE7BC,cAAQ,EAGJC,KAAKlB,IAAMA,EACXkB,KAAKd,KAAOH,EAEZ,MAAMkB,EAASC,SAASC,cAAc,OACtCH,KAAKd,KAAKkB,OAAOH,GACjBA,EAAOI,MAAMC,SAAW,WAExB,MAAMC,EAAWL,SAASC,cAAc,OACxCI,EAASC,YAAcxB,EACvBiB,EAAOG,OAAOG,GAEd,MAAME,EAAcP,SAASC,cAAc,OAC3CM,EAAYD,YAAc,WAC1BP,EAAOG,OAAOK,GACdA,EAAYC,QAAU,KFpCF,EAACC,EAAWC,KAEpC,MAOMC,EAPUC,KACZ,MAAMC,EAAgB,GACtB,IAAK,IAAI1C,EAAI,EAAGA,EAAIyC,EAAEjE,OAAQwB,IAAO0C,EAAItC,KAAKqC,EAAEE,WAAW3C,IAC3D,OAAO,IAAI4C,WAAWF,EAAI,EAIjBG,CAAQC,KAAKC,UAAUT,EAAG,KAAM,IAEvCU,EAAO,IAAIC,KAAK,CAACT,GAAO,CAAEU,KAAM,eAChCC,EAAMC,IAAIC,gBAAgBL,GAC1BM,EAAOzB,SAASC,cAAc,KACpCwB,EAAKC,aAAa,OAAQJ,GAC1BG,EAAKC,aAAa,WAAYhB,GAC9B,MAAMiB,EAAQ3B,SAAS4B,YAAY,eACnCD,EAAME,eAAe,SAAS,GAAM,EAAMC,OAAQ,EAAG,EAAG,EAAG,EAAG,GAAG,GAAO,GAAO,GAAO,EAAO,EAAG,MAChGL,EAAKM,cAAcJ,EAAM,EEqBjBK,CAFmBf,KAAKC,UAAUpB,KAAKD,UAEd,gBAAgB,EAG7CC,KAAKmC,YACT,CACAA,aACInC,KAAKT,MAAQ,IAAIpC,EAAAA,IACjB6C,KAAKT,MAAM6C,WAAa,IAAIjF,EAAAA,IAAY,IAAK,IAAK,KAClD6C,KAAKT,MAAM8C,YAAa,EAExBrC,KAAKT,MAAM6C,WAAa,IAAIjF,EAAAA,IAAa,UAEzC6C,KAAKV,OAAS,IAAInC,EAAAA,IAAwB,GAAI6C,KAAKd,KAAKoD,YAActC,KAAKd,KAAKqD,aAAc,EAAG,KACjGvC,KAAKV,OAAOgB,SAASkC,IAAI,EAAG,EAAG,KAU/BxC,KAAKX,SAAW,IAAIlC,EAAAA,IAAoB,CAAEsF,WAAW,EAAMC,OAAO,IAClE1C,KAAKX,SAASsD,cAAc3C,KAAKd,KAAKoD,YAActC,KAAKd,KAAKqD,cAC9DvC,KAAKX,SAASuD,WAAWC,GAAK,eAC9B7C,KAAKX,SAASyD,QAAQ9C,KAAKd,KAAKoD,YAAatC,KAAKd,KAAKqD,cACvDvC,KAAKd,KAAK6D,YAAY/C,KAAKX,SAASuD,YAEpC5C,KAAKP,SAAW,IAAIuD,EAAAA,cAAehD,KAAKV,OAAQU,KAAKX,SAASuD,YAC9D5C,KAAKP,SAASwD,WAAY,EAC1BjD,KAAKP,SAASyD,eAAgB,EAC9BlD,KAAKP,SAAS0D,YAAa,EAC3BnD,KAAKP,SAAS2D,YAAc,GAC5BpD,KAAKP,SAAS4D,UAAY,EAC1BrD,KAAKP,SAAS6D,SAEdtD,KAAKN,UAAY,IAAIvC,EAAAA,IAErB6C,KAAKuD,MACT,CACAA,OACIvD,KAAKwD,YACLxD,KAAKyD,MACT,CACAD,YACIxD,KAAKX,SAASuD,WAAWc,YAAeC,GAAkB3D,KAAK4D,UAAUD,GACzE3D,KAAKX,SAASuD,WAAWiB,YAAeF,GAAkB3D,KAAK8D,UAAUH,GACzE3D,KAAKX,SAASuD,WAAWmB,UAAaJ,GAAkB3D,KAAKgE,QAAQL,EACzE,CACAG,UAAUH,GAEN,GAAI3D,KAAKH,YAAa,CAClBoE,QAAQC,IAAIlE,KAAKH,YAAYgB,MAC7B,MAAMsD,EAAKhD,KAAKC,UAAUpB,KAAKH,YAAYgB,MAAMuD,MAAM,KACvDpE,KAAKlB,IAAIuF,SAASC,UAAY,GAC9B,IAAK,IAAIxD,KAAKqD,EACVnE,KAAKlB,IAAIuF,SAASC,WAAaxD,EAAI,MAG3C,CAIJ,CACAkD,QAAQL,GACJ,CAEJC,UAAUD,GACN3D,KAAKJ,MAAM3D,EAAK0H,EAAErF,QAAU0B,KAAKd,KAAKoD,YAAe,EAAI,EACzDtC,KAAKJ,MAAM5D,GAAO2H,EAAEpF,QAAUyB,KAAKd,KAAKqD,aAAgB,EAAI,CAChE,CACAkB,OAGI,GAFAc,uBAAsB,KAAQvE,KAAKyD,MAAM,KAEpCzD,KAAKL,OAAU,OAEpBK,KAAKP,SAAS6D,SACdtD,KAAKN,UAAU8E,cAAexE,KAAKJ,MAAOI,KAAKV,QAE/C,MAAMmF,EAAazE,KAAKN,UAAUgF,iBAAkB1E,KAAKR,cAErDiF,EAAW5H,OAAS,EAEhBmD,KAAKH,cAAgB4E,EAAY,GAAIE,SACjC3E,KAAKH,YAGTG,KAAKH,YAAc4E,EAAY,GAAIE,SAYnC3E,KAAKH,YAQTG,KAAKH,iBAAcC,GAIvBE,KAAKX,SAASuF,OAAO5E,KAAKT,MAAOS,KAAKV,QAEtCU,KAAK6E,SACL7E,KAAKZ,GAAK,GACd,CACAyF,SAEA,CACAC,QAAQ/E,EAAegF,GACnB/E,KAAKD,SAAWA,EAChB,MAAMiF,EAAW,IAAI7H,EAAAA,IAAqB,EAAG,GAAK,IAElD,IAAM,IAAIkB,EAAI,EAAGA,EAAI0B,EAASc,KAAKhE,OAAQwB,IAAM,CAC7C,MAAMwC,EAAYd,EAASc,KAAKxC,GAE1B4G,EAASzI,EAASqE,EAAKqE,IAAI,GAAIrE,EAAKqE,IAAI,GAAIrE,EAAKqE,IAAI,IACrDC,EAAM,IAAIhI,EAAAA,IAA2B,CAAES,MAAOqH,IACpDE,EAAIC,SAAW,IAAIjI,EAAAA,IAAY8H,GAC/B,MAAMN,EAAS,IAAIxH,EAAAA,IAAY6H,EAAUG,GAEzCR,EAAOrE,SAASrE,EAAI4E,EAAKwE,IAAI,GAC7BV,EAAOrE,SAAStE,EAAI6E,EAAKwE,IAAI,GAC7BV,EAAOrE,SAASpE,EAAI2E,EAAKwE,IAAI,GAM7BV,EAAO7G,MAAM7B,EAAI8D,EAASuF,OAC1BX,EAAO7G,MAAM9B,EAAI+D,EAASuF,OAC1BX,EAAO7G,MAAM5B,EAAI6D,EAASuF,OAE1BX,EAAa,KAAI9D,EAEjBb,KAAKlB,IAAIyG,UAAUhG,MAAMiG,IAAIb,GAC7B3E,KAAKlB,IAAIyG,UAAU/F,aAAaf,KAAKkG,EACzC,CAIA,OAFA3E,KAAKlB,IAAIyG,UAAUhG,MAAMiG,IAAIxI,EAAc,GAAI,KAEvC+H,GACJ,KAAKtJ,EAAYgK,IACbzF,KAAKlB,IAAIyG,UAAUhG,MAAMiG,IAAIpI,GAAe,EAAG,GAAI,IAAK,IAAK,GAAI,KACjE,MACJ,KAAK3B,EAAYiK,IACb1F,KAAKlB,IAAIyG,UAAUhG,MAAMiG,IAAIpI,GAAe,GAAI,GAAI,EAAG,IAAK,IAAK,MACjE,MACJ,QACI4C,KAAKlB,IAAIyG,UAAUhG,MAAMiG,IAAIpI,GAAe,GAAI,GAAI,EAAG,IAAK,IAAK,MAI7E,ECpNG,MAAMuI,EAKT9G,YAAY+G,EAAuB/E,GAAmE,IAAxD7B,EAAK,uDAAG,QAAS+F,EAAkB,uDAAGtJ,EAAYoK,IAAG,KAJnGN,eAAS,OACTK,aAAO,OACP7G,SAAG,OACHsF,cAAQ,EAEJrE,KAAK4F,QAAUA,EAEf,MAAM7G,EAAMmB,SAASC,cAAc,OAC/BpB,IACAiB,KAAKjB,IAAMA,EACXiB,KAAKjB,IAAIsB,MAAMyF,MAAQ,QACvB9F,KAAKjB,IAAIsB,MAAM0F,OAAS,QACxB/F,KAAKjB,IAAIsB,MAAM2F,gBAAkB,UACjChG,KAAKjB,IAAIsB,MAAM4F,OAAS,OAExBjG,KAAKjB,IAAIsB,MAAM6F,MAAQ,OAEvBlG,KAAK4F,QAAQxF,OAAOJ,KAAKjB,KACzBiB,KAAKmG,KAAKtF,EAAM7B,EAAO+F,GAE/B,CACAqB,WAAWvF,GAAiD,IAAtC7B,EAAK,uDAAG,QAAS+F,EAAkB,uCACrD/E,KAAKuF,UAAY,IAAI3G,EAAUoB,KAAMA,KAAKjB,IAAKC,GAC/CgB,KAAKuF,UAAUT,QAAQjE,EAAMkE,GAC7B/E,KAAKuF,UAAU5F,QAAS,EAExB,MAAM0E,EAAWnE,SAASC,cAAc,OAExCkE,EAAShE,MAAMyF,MAAQ,QACvBzB,EAAShE,MAAM0F,OAAS,QACxB1B,EAAShE,MAAM+B,WAAa,UAC5BiC,EAAShE,MAAM4F,OAAS,OAExB5B,EAAShE,MAAM6F,MAAQ,OACvBlG,KAAKqE,SAAWA,EAChBrE,KAAK4F,QAAQxF,OAAOiE,EAExB,E,eCrCG,MAAMgC,EAaTxH,cAA+D,IAAnD2C,EAAW,uDAAG,mCAAkC,KAX5DA,SAAG,OACH8E,UAAI,OACJC,aAAO,OAEPxG,SAAW,CACPyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOtJ,EAAYoK,IACnBP,OAAQ,GAIRtF,KAAKwB,IAAMA,EACXxB,KAAKsG,KAAOtE,OAAOyE,SAAWjF,CAClC,CACA4E,aAAkD,IAAvCrB,EAAkB,uDAAGtJ,EAAYoK,IACxC7F,KAAKuG,cAAgBG,MAAM,GAAD,OAAI1G,KAAKsG,MAAQ,CAACK,KAAM,SAClD3G,KAAKuG,cAAgBvG,KAAKuG,QAAQK,OAElC,IAAIC,EAAQ7G,KAAKuG,QAAQnC,MAAM,WAC3B0C,EAAQ,GACZ,IAAK,IAAIzI,EAAI,EAAGA,EAAIwI,EAAMhK,SAAUwB,EAAG,CACnC,IAAI0I,EAAUF,EAAMxI,GAAG+F,MAAM,KACzB4C,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQlK,SAAUoK,GAC9BC,EAAAA,EAAAA,IAASH,EAAQE,IACjBD,EAAIvI,MAAMsI,EAAQE,IAElBD,EAAIvI,KAAKsI,EAAQE,IAGzBH,EAAMrI,KAAKuI,EACf,CAIA,IAOIpG,EAAMuG,EAAGC,EAAGjL,EAAG+I,EAAKG,EAPpBtF,EAAW,CACXyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOA,EACPO,OAAQ,IAIZ,IAAK,IAAIjH,EAAI,EAAIA,EAAIyI,EAAMjK,OAAQwB,GAAK,EAAG,CAQvC,GANAuC,EAAOkG,EAAMzI,GAAG,GAChB8I,IAAOL,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC7D+I,IAAON,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC7DlC,IAAO2K,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC7D6G,EAAMxJ,EAAQyL,EAAEC,EAAEjL,GAEV4I,IACCtJ,EAAYgK,IAAKJ,EAAM,CAAC+B,EAAGD,GAAQ,EAALhL,QAC1BkJ,EAAMH,EAEnB,MAAMvE,EAAI,CACNC,KAAMA,EACNyE,IAAKA,EACLH,IAAKA,EACLmC,IAAK,CAACF,EAAEC,EAAEjL,GACVmL,IAAK,CAACR,EAAMzI,GAAIyI,EAAMzI,EAAI,GAAIyI,EAAMzI,EAAI,KAG5C0B,EAASc,KAAKpC,KAAKkC,EACvB,CAGAX,KAAKD,SAAWA,CACpB,CACOwH,cACH,OAAOvH,KAAKD,QAChB,EC3EG,MAAMyH,EAaT3I,cAA6D,IAAjD2C,EAAW,uDAAG,iCAAgC,KAX1DA,SAAG,OACH8E,UAAI,OACJC,aAAO,OAEPxG,SAAW,CACPyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOtJ,EAAYoK,IACnBP,OAAQ,GAIRtF,KAAKwB,IAAMA,EACXxB,KAAKsG,KAAOtE,OAAOyE,SAAWjF,CAClC,CACA4E,aAAkD,IAAvCrB,EAAkB,uDAAGtJ,EAAYoK,IACxC7F,KAAKuG,cAAgBG,MAAM,GAAD,OAAI1G,KAAKsG,MAAQ,CAACK,KAAM,SAClD3G,KAAKuG,cAAgBvG,KAAKuG,QAAQK,OAElC,IAAIC,EAAQ7G,KAAKuG,QAAQnC,MAAM,WAC3B0C,EAAQ,GACZ,IAAK,IAAIzI,EAAI,EAAGA,EAAIwI,EAAMhK,SAAUwB,EAAG,CACnC,IAAI0I,EAAUF,EAAMxI,GAAG+F,MAAM,KACzB4C,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQlK,SAAUoK,GAC9BC,EAAAA,EAAAA,IAASH,EAAQE,IACjBD,EAAIvI,MAAMsI,EAAQE,IAElBD,EAAIvI,KAAKsI,EAAQE,IAGzBH,EAAMrI,KAAKuI,EACf,CAEA/C,QAAQC,IAAI,cAAe4C,GAE3B,IAOIlG,EAAMuG,EAAGC,EAAGjL,EAAG+I,EAAKG,EAPpBtF,EAAW,CACXyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOA,EACPO,OAAQ,IAIZ,IAAK,IAAIjH,EAAI,EAAIA,EAAIyI,EAAMjK,OAAQwB,IAAK,CAcpC,GAZAuC,EAAOkG,EAAMzI,GAAG,GAChB8I,IAAQL,EAAMzI,GAAG,KAAQyI,EAAMzI,GAAG,KAAQyI,EAAMzI,GAAG,KAAQyI,EAAMzI,GAAG,MAASyI,EAAMzI,GAAG,KAAQ,EAC9F+I,IAAQN,EAAMzI,GAAG,KAAYyI,EAAMzI,GAAG,KAAYyI,EAAMzI,GAAG,KAAYyI,EAAMzI,GAAG,MAAayI,EAAMzI,GAAG,KAAY,EAClHlC,IAAQ2K,EAAMzI,GAAG,KAAYyI,EAAMzI,GAAG,KAAYyI,EAAMzI,GAAG,KAAYyI,EAAMzI,GAAG,MAAayI,EAAMzI,GAAG,KAAY,EAClH6G,EAAMxJ,EAAQyL,EAAGC,EAAGjL,GAEpB8H,QAAQC,IAAI,KAAM7F,EAAI,EAAG+I,EAAGjL,GAMpB4I,IACCtJ,EAAYgK,IAAKJ,EAAM,CAAC+B,EAAGD,GAAQ,EAALhL,QAC1BkJ,EAAMH,EAGnB,MAAMvE,EAAI,CACNC,KAAMA,EACNyE,IAAKA,EACLH,IAAKA,EACLmC,IAAK,CAACF,EAAGC,EAAGjL,GACZmL,IAAK,CAACR,EAAMzI,GAAIyI,EAAMzI,EAAI,GAAIyI,EAAMzI,EAAI,KAG5C0B,EAASc,KAAKpC,KAAKkC,EACvB,CAEAsD,QAAQC,IAAInE,GACZC,KAAKD,SAAWA,CACpB,CACOwH,cACH,OAAOvH,KAAKD,QAChB,EChFG,MAAM0H,EAaT5I,cAA0D,IAA9C2C,EAAW,uDAAG,8BAA6B,KAXvDA,SAAG,OACH8E,UAAI,OACJC,aAAO,OAEPxG,SAAW,CACPyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOtJ,EAAYoK,IACnBP,OAAQ,GAIRtF,KAAKwB,IAAMA,EACXxB,KAAKsG,KAAOtE,OAAOyE,SAAWjF,CAClC,CACA4E,aAAkD,IAAvCrB,EAAkB,uDAAGtJ,EAAYoK,IACxC7F,KAAKuG,cAAgBG,MAAM,GAAD,OAAI1G,KAAKsG,MAAQ,CAACK,KAAM,SAClD3G,KAAKuG,cAAgBvG,KAAKuG,QAAQK,OAElC,IAAIC,EAAQ7G,KAAKuG,QAAQnC,MAAM,WAC3B0C,EAAQ,GACZ,IAAK,IAAIzI,EAAI,EAAGA,EAAIwI,EAAMhK,SAAUwB,EAAG,CACnC,IAAI0I,EAAUF,EAAMxI,GAAG+F,MAAM,KACzB4C,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQlK,SAAUoK,GAC9BC,EAAAA,EAAAA,IAASH,EAAQE,IACjBD,EAAIvI,MAAMsI,EAAQE,IAElBD,EAAIvI,KAAKsI,EAAQE,IAGzBH,EAAMrI,KAAKuI,EACf,CAIA,IAQIpG,EAAMuG,EAAGC,EAAGjL,EAAG+I,EAAKG,EARpBtF,EAAW,CACXyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOA,EACPO,OAAQ,EACRoC,MAAO,IAIX,IAAI,IAAIrJ,EAAI,EAAIA,EAAIyI,EAAMjK,OAAQwB,GAAK,EAAG,CAQtC,GANAuC,EAAOkG,EAAMzI,GAAG,GAChB8I,IAAQL,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9D+I,IAAQN,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9DlC,IAAQ2K,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9D6G,EAAMxJ,EAAQyL,EAAEC,EAAEjL,GAEV4I,IACCtJ,EAAYgK,IAAKJ,EAAM,CAAC+B,EAAGD,GAAQ,EAALhL,QAC1BkJ,EAAMH,EAKnB,MAAMvE,EAAI,CACNC,KAAMA,EACNyE,IAAKA,EACLH,IAAKA,EACLmC,IAAK,CAACF,EAAEC,EAAEjL,GACVmL,IAAK,CAACR,EAAMzI,GAAIyI,EAAMzI,EAAI,GAAIyI,EAAMzI,EAAI,IACxCqJ,MAAOZ,EAAMzI,GAAG,IAGpB0B,EAASc,KAAKpC,KAAKkC,EACvB,CAGAX,KAAKD,SAAWA,CACpB,CACOwH,cACH,OAAOvH,KAAKD,QAChB,EC/EG,MAAM4H,EAaT9I,cAAoE,IAAxD2C,EAAW,uDAAG,wCAAuC,KAXjEA,SAAG,OACH8E,UAAI,OACJC,aAAO,OAEPxG,SAAW,CACPyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOtJ,EAAYoK,IACnBP,OAAQ,GAIRtF,KAAKwB,IAAMA,EACXxB,KAAKsG,KAAOtE,OAAOyE,SAAWjF,CAClC,CACA4E,aAAkD,IAAvCrB,EAAkB,uDAAGtJ,EAAYoK,IACxC7F,KAAKuG,cAAgBG,MAAM,GAAD,OAAI1G,KAAKsG,MAAQ,CAACK,KAAM,SAClD3G,KAAKuG,cAAgBvG,KAAKuG,QAAQK,OAElC,IAAIC,EAAQ7G,KAAKuG,QAAQnC,MAAM,WAC3B0C,EAAQ,GACZ,IAAK,IAAIzI,EAAI,EAAGA,EAAIwI,EAAMhK,SAAUwB,EAAG,CACnC,IAAI0I,EAAUF,EAAMxI,GAAG+F,MAAM,KACzB4C,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQlK,SAAUoK,GAC9BC,EAAAA,EAAAA,IAASH,EAAQE,IACjBD,EAAIvI,MAAMsI,EAAQE,IAElBD,EAAIvI,KAAKsI,EAAQE,IAGzBH,EAAMrI,KAAKuI,EACf,CAIA,IAOIpG,EAAMuG,EAAGC,EAAGjL,EAAG+I,EAAKG,EAPpBtF,EAAW,CACXyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOA,EACPO,OAAQ,GAIZ,IAAI,IAAIjH,EAAI,EAAIA,EAAIyI,EAAMjK,OAAQwB,GAAK,EAAG,CAQtC,GANAuC,EAAOkG,EAAMzI,GAAG,GAChB8I,IAAQL,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9D+I,IAAQN,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9DlC,IAAQ2K,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9D6G,EAAMxJ,EAAQyL,EAAEC,EAAEjL,GAEV4I,IACCtJ,EAAYgK,IAAKJ,EAAM,CAAC+B,EAAGD,GAAQ,EAALhL,QAC1BkJ,EAAMH,EAKnB,MAAMvE,EAAI,CACNC,KAAMA,EACNyE,IAAKA,EACLH,IAAKA,EACLmC,IAAK,CAACF,EAAEC,EAAEjL,GACVmL,IAAK,CAACR,EAAMzI,GAAIyI,EAAMzI,EAAI,GAAIyI,EAAMzI,EAAI,KAG5C0B,EAASc,KAAKpC,KAAKkC,EACvB,CAGAX,KAAKD,SAAWA,CACpB,CACOwH,cACH,OAAOvH,KAAKD,QAChB,EC7EG,MAAM6H,EAaT/I,cAAoD,IAAxC2C,EAAW,uDAAG,wBAAuB,KAXjDA,SAAG,OACH8E,UAAI,OACJC,aAAO,OAEPxG,SAAW,CACPyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOtJ,EAAYoK,IACnBP,OAAQ,GAIRtF,KAAKwB,IAAMA,EACXxB,KAAKsG,KAAOtE,OAAOyE,SAAWjF,CAClC,CACA4E,aAAkD,IAAvCrB,EAAkB,uDAAGtJ,EAAYoK,IACxC7F,KAAKuG,cAAgBG,MAAM,GAAD,OAAI1G,KAAKsG,MAAQ,CAACK,KAAM,SAClD3G,KAAKuG,cAAgBvG,KAAKuG,QAAQK,OAElC,IAAIC,EAAQ7G,KAAKuG,QAAQnC,MAAM,WAC3B0C,EAAQ,GACZ,IAAK,IAAIzI,EAAI,EAAGA,EAAIwI,EAAMhK,SAAUwB,EAAG,CACnC,IAAI0I,EAAUF,EAAMxI,GAAG+F,MAAM,KACzB4C,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQlK,SAAUoK,GAC9BC,EAAAA,EAAAA,IAASH,EAAQE,IACjBD,EAAIvI,MAAMsI,EAAQE,IAElBD,EAAIvI,KAAKsI,EAAQE,IAGzBH,EAAMrI,KAAKuI,EACf,CAIA,IAOIpG,EAAMuG,EAAGC,EAAGjL,EAAG+I,EAAKG,EAPpBtF,EAAW,CACXyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOA,EACPO,OAAQ,GAIZ,IAAI,IAAIjH,EAAI,EAAIA,EAAIyI,EAAMjK,OAAQwB,GAAK,EAAG,CAQtC,GANAuC,EAAOkG,EAAMzI,GAAG,GAChB8I,IAAQL,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9D+I,IAAQN,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9DlC,IAAQ2K,EAAMzI,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,KAAQyI,EAAMzI,EAAE,GAAG,IAAO,EAC9D6G,EAAMxJ,EAAQyL,EAAEC,EAAEjL,GAEV4I,IACCtJ,EAAYgK,IAAKJ,EAAM,CAAC+B,EAAGD,GAAQ,EAALhL,QAC1BkJ,EAAMH,EAKnB,MAAMvE,EAAI,CACNC,KAAMA,EACNyE,IAAKA,EACLH,IAAKA,EACLmC,IAAK,CAACF,EAAEC,EAAEjL,GACVmL,IAAK,CAACR,EAAMzI,GAAIyI,EAAMzI,EAAI,GAAIyI,EAAMzI,EAAI,KAG5C0B,EAASc,KAAKpC,KAAKkC,EACvB,CAGAX,KAAKD,SAAWA,CACpB,CACOwH,cACH,OAAOvH,KAAKD,QAChB,EC9EG,MAAM8H,EAYThJ,cAA2G,IAA/F2C,EAAW,uDAAG,+EAA8E,KAXxGuD,WAAK,OACLvD,SAAG,OACH+E,aAAO,OAEPxG,SAAW,CACPyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOtJ,EAAYoK,IACnBP,OAAQ,GAIRtF,KAAKwB,IAAMA,CACf,CACA4E,aAAkD,IAAvCrB,EAAkB,uDAAGtJ,EAAYoK,IACxC7F,KAAKuG,cAAgBG,MAAM,GAAD,OAAI1G,KAAKwB,KAAO,CAACmF,KAAM,SACjD3G,KAAKuG,cAAgBvG,KAAKuG,QAAQuB,OAIlC,IAMIzC,EAAKzE,EAAMjE,EAAK0K,EAAKnC,EAAK6C,EAN1BhI,EAAW,CACXyG,KAAM,CAAC,EACP3F,KAAM,GACNkE,MAAOA,EACPO,OAAQ,GAGZ,IAAI,IAAIjH,KAAK2B,KAAKuG,QAAS,CAOvB,OANA5J,EAAO0B,EACPuC,EAAOZ,KAAKuG,QAAQlI,GAAS,KAC7BgJ,EAAOrH,KAAKuG,QAAQlI,GAAQ,IAC5B6G,EAAOlF,KAAKuG,QAAQlI,GAAQ,IAC5B0J,EAAO/H,KAAKuG,QAAQlI,GAAQ,IAEpB0G,GACJ,KAAKtJ,EAAYiK,IAAKL,EAAMrF,KAAKuG,QAAQlI,GAAQ,IAAG,MAIpD,KAAK5C,EAAYgK,IACb,MAAMuC,EAAWhI,KAAKuG,QAAQlI,GAAQ,IACtCgH,EAAM,CAAC2C,EAAS,GAAIA,EAAS,IAAmB,EAAfA,EAAS,IAC1C,MACJ,QAAS3C,EAAMrF,KAAKuG,QAAQlI,GAAQ,IAGxC,MAAMsC,EAAI,CACNC,KAAMA,EACNjE,IAAKA,EACL0I,IAAKA,EACLH,IAAKA,EACLmC,IAAKA,EACLU,IAAKA,GAGThI,EAASc,KAAKpC,KAAKkC,EACvB,CAGAX,KAAKD,SAAWA,CACpB,CACOwH,cACH,OAAOvH,KAAKD,QAChB,ECjEG,MAAMkI,EAGTpJ,YAAY8B,GAAqD,IAAtCuH,EAAgB,uDAAG,iBAAgB,KAF9DrH,UAAI,OACJqH,cAAQ,EAEJlI,KAAKa,KAAOF,EACZX,KAAKkI,SAAWA,CAEpB,CACOC,eACH,IAAIC,EAAM,CAAC,EACXpI,KAAKa,KAAKwH,SAAQ,CAACC,EAAGC,EAAGC,KAAQJ,EAAIG,GAAKD,CAAC,IAE3C,IAAIzH,EAAOb,KAAKyI,wBAAyBtH,KAAKC,UAAUgH,EAAK,OAC7D,MAAM/G,EAAO,IAAIC,KAAK,CAACT,GAAO,CAAEU,KAAM,qBAChCC,EAAMC,IAAIC,gBAAgBL,GAC1BM,EAAOzB,SAASC,cAAc,KACpCwB,EAAKC,aAAa,OAAQJ,GAC1BG,EAAKC,aAAa,WAAY5B,KAAKkI,SAAW,SAC9C,MAAMrG,EAAQ3B,SAAS4B,YAAY,eACnCD,EAAME,eAAe,SAAS,GAAM,EAAMC,OAAQ,EAAG,EAAG,EAAG,EAAG,GAAG,GAAO,GAAO,GAAO,EAAO,EAAG,MAChGL,EAAKM,cAAcJ,EAEvB,CACO6G,cACH,IAAIC,EAAU,GACd,IAAK,IAAItK,EAAI,EAAGA,EAAI2B,KAAKa,KAAKhE,SAAUwB,EAAG,CACvC,IAAK,IAAI4I,EAAI,EAAGA,EAAIjH,KAAKa,KAAKxC,GAAGxB,SAAUoK,EACvC0B,GAAW3I,KAAKa,KAAKxC,GAAG4I,GACpBA,EAAIjH,KAAKa,KAAKxC,GAAGxB,OAAS,IAAK8L,GAAW,KAElDA,GAAW,IACf,CACA,MAAMtH,EAAO,IAAIC,KAAK,CAACqH,GAAU,CAAEpH,KAAM,4BACnCC,EAAMC,IAAIC,gBAAgBL,GAC1BM,EAAOzB,SAASC,cAAc,KACpCwB,EAAKC,aAAa,OAAQJ,GAC1BG,EAAKC,aAAa,WAAY5B,KAAKkI,SAAW,QAC9C,MAAMrG,EAAQ3B,SAAS4B,YAAY,eACnCD,EAAME,eAAe,SAAS,GAAM,EAAMC,OAAQ,EAAG,EAAG,EAAG,EAAG,GAAG,GAAO,GAAO,GAAO,EAAO,EAAG,MAChGL,EAAKM,cAAcJ,EACvB,CACO+G,QAAe,CACdH,wBAAwB3H,GAC5B,IAAIC,EAAgB,GACpB,IAAK,IAAI1C,EAAI,EAAGA,EAAIyC,EAAEjE,OAAQwB,IAAO0C,EAAItC,KAAKqC,EAAEE,WAAW3C,IAC3D,OAAO,IAAI4C,WAAWF,EAC1B,ECvCG,MAAM8H,EAwBThK,YAAYE,GAAoC,IAAlBC,EAAK,uDAAG,QAAO,KAvB7CC,YAAM,OACNC,UAAI,OACJC,SAAG,OACHC,EAAY,EAAI,KAEhBC,cAAQ,OACRC,YAAM,OACNC,WAAK,OACLC,aAAoB,GAAG,KAEvBC,cAAQ,OACRC,eAAS,OAETC,QAAS,EAAM,KAEfC,MAAQ,IAAIzC,EAAAA,IAAc,EAAG,GAAG,KAEhC0C,iBAAmBC,EAAU,KAI7BwI,EAAc,CAAC,EAAE,EAAE,GAGftI,KAAKd,KAAOH,EAEZ,MAAMkB,EAASC,SAASC,cAAc,OACtCH,KAAKd,KAAKkB,OAAOH,GACjBA,EAAOI,MAAMC,SAAW,WAExB,MAAMC,EAAWL,SAASC,cAAc,OACxCI,EAASC,YAAcxB,EACvBiB,EAAOG,OAAOG,GAEd,MAAME,EAAcP,SAASC,cAAc,OAC3CM,EAAYD,YAAc,WAC1BP,EAAOG,OAAOK,GAOdT,KAAK8I,YACT,CACOA,aACH9I,KAAKT,MAAQ,IAAIpC,EAAAA,IACjB6C,KAAKT,MAAM6C,WAAa,IAAIjF,EAAAA,IAAY,IAAK,IAAK,KAClD6C,KAAKT,MAAM8C,YAAa,EAExBrC,KAAKT,MAAM6C,WAAa,IAAIjF,EAAAA,IAAa,UAEzC6C,KAAKV,OAAS,IAAInC,EAAAA,IAAwB,GAAI6C,KAAKd,KAAKoD,YAActC,KAAKd,KAAKqD,aAAc,EAAG,KACjGvC,KAAKV,OAAOgB,SAASkC,IAAI,EAAG,EAAG,KAU/BxC,KAAKX,SAAW,IAAIlC,EAAAA,IAAoB,CAAEsF,WAAW,EAAMC,OAAO,IAClE1C,KAAKX,SAASsD,cAAc3C,KAAKd,KAAKoD,YAActC,KAAKd,KAAKqD,cAC9DvC,KAAKX,SAASuD,WAAWC,GAAK,eAC9B7C,KAAKX,SAASyD,QAAQ9C,KAAKd,KAAKoD,YAAatC,KAAKd,KAAKqD,cACvDvC,KAAKd,KAAK6D,YAAY/C,KAAKX,SAASuD,YAEpC5C,KAAKP,SAAW,IAAIuD,EAAAA,cAAehD,KAAKV,OAAQU,KAAKX,SAASuD,YAC9D5C,KAAKP,SAASwD,WAAY,EAC1BjD,KAAKP,SAASyD,eAAgB,EAC9BlD,KAAKP,SAAS0D,YAAa,EAC3BnD,KAAKP,SAAS2D,YAAc,GAC5BpD,KAAKP,SAAS4D,UAAY,EAC1BrD,KAAKP,SAAS6D,SAEdtD,KAAKN,UAAY,IAAIvC,EAAAA,IAErB6C,KAAKmG,MACT,CACOA,OACHnG,KAAK+I,YACL/I,KAAKgJ,OAELhJ,KAAKT,MAAMiG,IAAIxI,EAAc,GAAI,KACjCgD,KAAKL,QAAS,CAClB,CACOoJ,YACH/I,KAAKX,SAASuD,WAAWc,YAAeC,GAAkB3D,KAAKiJ,UAAUtF,GACzE3D,KAAKX,SAASuD,WAAWiB,YAAeF,GAAkB3D,KAAKkJ,UAAUvF,GACzE3D,KAAKX,SAASuD,WAAWmB,UAAaJ,GAAkB3D,KAAKmJ,QAAQxF,EACzE,CACOuF,UAAUvF,GAET3D,KAAKH,aACLoE,QAAQC,IAAIlE,KAAKH,YAAYgB,KAWrC,CACOsI,QAAQxF,GACX,CAEGsF,UAAUtF,GACb3D,KAAKJ,MAAM3D,EAAK0H,EAAErF,QAAU0B,KAAKd,KAAKoD,YAAe,EAAI,EACzDtC,KAAKJ,MAAM5D,GAAO2H,EAAEpF,QAAUyB,KAAKd,KAAKqD,aAAgB,EAAI,CAChE,CACOyG,OAGH,GAFAzE,uBAAsB,KAAQvE,KAAKgJ,MAAM,KAEpChJ,KAAKL,OAAU,OAEpBK,KAAKP,SAAS6D,SACdtD,KAAKN,UAAU8E,cAAexE,KAAKJ,MAAOI,KAAKV,QAE/C,MAAMmF,EAAazE,KAAKN,UAAUgF,iBAAkB1E,KAAKR,cAErDiF,EAAW5H,OAAS,EAEhBmD,KAAKH,cAAgB4E,EAAY,GAAIE,SACjC3E,KAAKH,aACLG,KAAKH,YAAYlC,SAASyH,SAASgE,OAAQpJ,KAAKH,YAAYwJ,YAEhErJ,KAAKH,YAAc4E,EAAY,GAAIE,OACnC3E,KAAKH,YAAYwJ,WAAarJ,KAAKH,YAAYlC,SAASyH,SAASkE,SACjEtJ,KAAKH,YAAYlC,SAASyH,SAASgE,OAAQ,UAE3CpJ,KAAKH,YAAY/B,MAAM7B,EAAI,IAC3B+D,KAAKH,YAAY/B,MAAM9B,EAAI,IAC3BgE,KAAKH,YAAY/B,MAAM5B,EAAI,IAC3B+H,QAAQC,IAAIlE,KAAKH,eAKjBG,KAAKH,cACLG,KAAKH,YAAYlC,SAASyH,SAASgE,OAAQpJ,KAAKH,YAAYwJ,YAE5DrJ,KAAKH,YAAY/B,MAAM7B,EAAI,EAC3B+D,KAAKH,YAAY/B,MAAM9B,EAAI,EAC3BgE,KAAKH,YAAY/B,MAAM5B,EAAI,GAG/B8D,KAAKH,iBAAcC,GAIvBE,KAAKX,SAASuF,OAAO5E,KAAKT,MAAOS,KAAKV,QAEtCU,KAAK4E,SACL5E,KAAKZ,GAAK,GACd,CACOwF,SACHX,QAAQC,IAAI,cAChB,CACOY,QAAQyE,EAAcC,EAAoBzE,GAC7C,MAAMC,EAAW,IAAI7H,EAAAA,IAAqB,GAAK,GAAK,IAEpD,IAAM,IAAIkB,EAAI,EAAGA,EAAIkL,EAAQ1M,OAAQwB,IAAM,CACvC,MAAMwC,EAAY0I,EAAQlL,GAEpB4G,EAASzI,EAASgN,EAAOnL,GAAG,GAAImL,EAAOnL,GAAG,GAAImL,EAAOnL,GAAG,IACxD8G,EAAM,IAAIhI,EAAAA,IAA2B,CAAES,MAAOqH,IACpDE,EAAIC,SAAW,IAAIjI,EAAAA,IAAY8H,GAC/B,MAAMN,EAAS,IAAIxH,EAAAA,IAAY6H,EAAUG,GAEzCR,EAAOrE,SAASrE,EAAI4E,EAAK,GACzB8D,EAAOrE,SAAStE,EAAI6E,EAAK,GACzB8D,EAAOrE,SAASpE,EAAI2E,EAAK,GAMzB8D,EAAO7G,MAAM7B,EAAI,EACjB0I,EAAO7G,MAAM9B,EAAI,EACjB2I,EAAO7G,MAAM5B,EAAI,EAEjByI,EAAa,KAAI9D,EAEjBb,KAAKT,MAAMiG,IAAIb,GACf3E,KAAKR,aAAaf,KAAKkG,EAC3B,CAcJ,ECzMG,MAAM8E,EAET5K,YAAYE,GAAmB,KAD/BA,SAAG,EAECiB,KAAKjB,IAAMA,CACf,CACA,aAGI,MAAM2K,EAAW,IAAIlC,QACfkC,EAASvD,KAAK1K,EAAYgK,KAChC,MAAMkE,EAAeD,EAASnC,cAGxBqC,EAAa,IAAIvD,QACjBuD,EAAWzD,KAAK1K,EAAYgK,KAClC,MAAMoE,EAAiBD,EAAWrC,cAGnC,IAAK,IAAIlJ,EAAI,EAAIA,EAAIsL,EAAa9I,KAAKhE,SAAUwB,EAAG,CAE/C,MAAMyL,EAAaH,EAAa9I,KAAKxC,GAAGgJ,IAExC,IAAI0C,EAASC,OAAOC,iBAChBC,GAAS,EAEb,IAAK,IAAIjD,EAAI,EAAIA,EAAI4C,EAAehJ,KAAKhE,SAAUoK,EAAG,CAElD,MAAMkD,EAAaN,EAAehJ,KAAKoG,GAAGI,IAEpC+C,EAAWC,EAAYP,EAAYK,GACrCC,EAAWL,IACXA,EAASK,EACTF,EAAQjD,EAEhB,CACA0C,EAAa9I,KAAKxC,GAAmB,eAAIwL,EAAehJ,KAAKqJ,GAAa,IAI/E,CAGC,MAAMI,EAAiB,IAAI7C,QACrB6C,EAAenE,KAAK1K,EAAYgK,KACtC,MAAM8E,EAAqBD,EAAe/C,cAG1C,IAAK,IAAIlJ,EAAI,EAAIA,EAAIsL,EAAa9I,KAAKhE,SAAUwB,EAAG,CAEhD,MAAMyL,EAAaH,EAAa9I,KAAKxC,GAAGgJ,IAExC,IAAI0C,EAASC,OAAOC,iBAChBC,GAAS,EAEb,IAAK,IAAIjD,EAAI,EAAIA,EAAIsD,EAAmB1J,KAAKhE,SAAUoK,EAAG,CAEtD,MAAMkD,EAAaI,EAAmB1J,KAAKoG,GAAGI,IAExC+C,EAAWC,EAAYP,EAAYK,GACrCC,EAAWL,IACXA,EAASK,EACTF,EAAQjD,EAEhB,CACA0C,EAAa9I,KAAKxC,GAAU,MAAIkM,EAAmB1J,KAAKqJ,GAAc,KAI3E,CAIC,MAAMM,EAAY,IAAI5C,QAChB4C,EAAUrE,KAAK1K,EAAYgK,KACjC,MAAMgF,EAAgBD,EAAUjD,cAG1BmD,EAA0B,IAAI/C,QAC9B+C,EAAwBvE,KAAK1K,EAAYgK,KAC/C,MAAMkF,EAA8BD,EAAwBnD,cAG5D,IAAK,IAAIlJ,EAAI,EAAIA,EAAIoM,EAAc5J,KAAKhE,SAAUwB,EAAG,CAEjD,MAAMyL,EAAaW,EAAc5J,KAAKxC,GAAGgJ,IAEzC,IAAI0C,EAASC,OAAOC,iBAChBC,GAAS,EAEb,IAAK,IAAIjD,EAAI,EAAIA,EAAI0D,EAA4B9J,KAAKhE,SAAUoK,EAAG,CAE/D,MAAMkD,EAAaQ,EAA4B9J,KAAKoG,GAAGI,IAEjD+C,EAAWC,EAAYP,EAAYK,GACrCC,EAAWL,IACXA,EAASK,EACTF,EAAQjD,EAEhB,CACAwD,EAAc5J,KAAKxC,GAAgC,4BAAIsM,EAA4B9J,KAAKqJ,GAAa,IAK1G,CAEClK,KAAKjB,IAAIsB,MAAMyF,MAAQ,QACvB,IAAI8E,EAAiB,IAAI/B,EAAY7I,KAAKjB,IAAK,sCAC/CkF,QAAQC,IAAI0G,GAEZ,MAAMC,EAA8B,GAC9BC,EAAiC,GACvC,IAAI,IAAIzM,EAAI,EAAIA,EAAIsL,EAAa9I,KAAKhE,SAAUwB,EAAG,CAC/C,MAAMsC,EAAIgJ,EAAa9I,KAAKxC,GAC5B4F,QAAQC,IAAIvD,GACRtC,EAAI,IAEJwM,EAAgBpM,KAAKkC,EAAE0G,KAEvByD,EAAmBrM,KAAKkC,EAAEuE,KAElC,CACA0F,EAAe9F,QAAQ+F,EAAiBC,EAAqBrP,EAAYgK,KAEzE,MAAMsF,EAAgC,GAChCC,EAAmC,GACzC,IAAI,IAAI3M,EAAI,EAAIA,EAAIwL,EAAehJ,KAAKhE,SAAUwB,EAAG,CACjD,MAAMsC,EAAIkJ,EAAehJ,KAAKxC,GAC9B4F,QAAQC,IAAIvD,GACRtC,EAAI,IAEJ0M,EAAkBtM,KAAKkC,EAAE0G,KAEzB2D,EAAqBvM,KAAKkC,EAAEuE,KAEpC,CAIA0F,EAAe9F,QAAQiG,EAAmBC,EAAuBvP,EAAYgK,KAE7E,MAAMwF,EAA+B,GAC/BC,EAAkC,GACxC,IAAK,IAAI7M,EAAI,EAAIA,EAAIoM,EAAc5J,KAAKhE,SAAUwB,EAAG,CACjD,MAAMsC,EAAI8J,EAAc5J,KAAKxC,GAEzBA,EAAI,IAEJ4M,EAAiBxM,KAAKkC,EAAE0G,KAExB6D,EAAoBzM,KAAK,CAAC,IAAI,EAAE,IAExC,CACAmM,EAAe9F,QAAQmG,EAAkBC,EAAsBzP,EAAYgK,KAG3E,MAAM0F,EAAyC,GACzCC,EAA4C,GAClD,IAAK,IAAI/M,EAAI,EAAIA,EAAIsM,EAA4B9J,KAAKhE,SAAUwB,EAAG,CAC/D,MAAMsC,EAAIgK,EAA4B9J,KAAKxC,GAEvCA,EAAI,IAEJ8M,EAA2B1M,KAAKkC,EAAE0G,KAElC+D,EAA8B3M,KAAK,CAAC,EAAE,IAAI,IAElD,CACAmM,EAAe9F,QAAQqG,EAA4BC,EAAgC3P,EAAYgK,KAG/F,MAAM4F,EAAa,GACbC,EAAgB,GAChBC,EAAK,IAAI1D,QACT0D,EAAGpF,KAAK1K,EAAYgK,KAC1B,MAAM+F,EAAUD,EAAGhE,cACnB,IAAK,IAAIlJ,EAAI,EAAIA,EAAImN,EAAQ3K,KAAKhE,SAAUwB,EAAG,CAC3C,MAAMsC,EAAI6K,EAAQ3K,KAAKxC,GAEnBA,EAAI,IAEJgN,EAAW5M,KAAKkC,EAAE0G,KAElBiE,EAAc7M,KAAKkC,EAAEuE,KAE7B,CAUA,IAAK,IAAI7G,EAAI,EAAIA,EAAIsL,EAAa9I,KAAKhE,SAAUwB,EAAG,CAEhD,MAAMyL,EAAaH,EAAa9I,KAAKxC,GAAGgJ,IAExC,IAAI0C,EAASC,OAAOC,iBAChBC,GAAS,EAEb,IAAK,IAAIjD,EAAI,EAAIA,EAAI4C,EAAehJ,KAAKhE,SAAUoK,EAAG,CAElD,MAAMkD,EAAaN,EAAehJ,KAAKoG,GAAGI,IAEpC+C,EAAWhO,KAAKqP,IAAIrP,KAAKqP,IAAI3B,EAAW,IAAO1N,KAAKqP,IAAItB,EAAW,KACrEC,EAAWL,IACXA,EAASK,EACTF,EAAQjD,EAEhB,CACA0C,EAAa9I,KAAKxC,GAAsB,kBAAIwL,EAAehJ,KAAKqJ,GAAa,IAClF,CAEA,IAAK,IAAI7L,EAAI,EAAIA,EAAIsL,EAAa9I,KAAKhE,SAAUwB,EAAG,CAEnD,MAAMyL,EAAaH,EAAa9I,KAAKxC,GAAGgJ,IAExC,IAAI0C,EAASC,OAAOC,iBAChBC,GAAS,EAEb,IAAK,IAAIjD,EAAI,EAAIA,EAAI4C,EAAehJ,KAAKhE,SAAUoK,EAAG,CAElD,MAAMkD,EAAaN,EAAehJ,KAAKoG,GAAGI,IAEpC+C,EAAWhO,KAAKqP,IAAIrP,KAAKqP,IAAI3B,EAAW,IAAO1N,KAAKqP,IAAItB,EAAW,KACrEC,EAAWL,IACXA,EAASK,EACTF,EAAQjD,EAEhB,CACA0C,EAAa9I,KAAKxC,GAAsB,kBAAIwL,EAAehJ,KAAKqJ,GAAa,IAClF,CAIKjG,QAAQC,IAAI,qBAAsByF,GAClC1F,QAAQC,IAAI,sBAAuBuG,GAEnC,IAAIiB,EAAQ,CAAC,OAAQ,iBAAkB,QAAS,oBAAqB,oBAAqB,OAC1F,IAAI,IAAIrN,KAAKsL,EAAa9I,KAAK,GAC3BoD,QAAQC,IAAI7F,GAGhB,IAAIsN,EAAgB,CAACD,GACrB,IAAK,IAAIrN,EAAI,EAAIA,EAAIsL,EAAa9I,KAAKhE,SAAUwB,EAAG,CAChD,MAAMwC,EAAY,GAClB,IAAI,IAAIoG,EAAI,EAAIA,EAAIyE,EAAM7O,SAAUoK,EAAG,CACnC,MAAMtG,EAAIgJ,EAAa9I,KAAKxC,GAAGqN,EAAMzE,IACrCpG,EAAKpC,KAAKkC,EACd,CACAgL,EAASlN,KAAKoC,EAClB,CAGA,IAAI+K,EAAW,IAAI3D,EAAe0D,EAAU,oBAC5CC,EAASlD,cAITgD,EAAQ,CAAC,OAAQ,8BAA+B,OAChD,IAAI,IAAIrN,KAAKoM,EAAc5J,KAAK,GAC5BoD,QAAQC,IAAI7F,GAGhBsN,EAAW,CAACD,GACZ,IAAK,IAAIrN,EAAI,EAAIA,EAAIoM,EAAc5J,KAAKhE,SAAUwB,EAAG,CACjD,MAAMwC,EAAY,GAClB,IAAI,IAAIoG,EAAI,EAAIA,EAAIyE,EAAM7O,SAAUoK,EAAG,CACnC,MAAMtG,EAAI8J,EAAc5J,KAAKxC,GAAGqN,EAAMzE,IACtCpG,EAAKpC,KAAKkC,EACd,CACAgL,EAASlN,KAAKoC,EAClB,CACAoD,QAAQC,IAAIyH,GAEZC,EAAW,IAAI3D,EAAe0D,EAAU,qBACxCC,EAASlD,aACb,EAEG,MAAM2B,EAAc,CAACwB,EAAgBC,IACjC1B,EAASyB,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIC,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAEzD1B,EAAW,CAAC2B,EAAYC,EAAYC,EAAYC,EAAYC,EAAYC,IAC1EhQ,KAAKiQ,MAAMN,EAAKG,IAAOH,EAAKG,IAAOF,EAAKG,IAAOH,EAAKG,IAAOF,EAAKG,IAAOH,EAAKG,ICnRhF,MAAME,EAET,YAAmBzJ,GACf,IAAIyJ,EAAkBzJ,EAC1B,CAOAhE,YAAYgE,GAAa,KAJlB+H,oBAAc,OACd/H,QAAE,OACF9D,SAAG,EAGNiB,KAAK6C,GAAKA,EACV,MAAM9D,EAAMmB,SAASqM,eAAe1J,GAChC9D,IACAiB,KAAKjB,IAAMA,EACXiB,KAAKjB,IAAIsB,MAAMyF,MAAQ,OACvB9F,KAAKjB,IAAIsB,MAAM0F,OAAS,SAG5B/F,KAAKwM,WACT,CACA,kBACI,MAAMC,EAAOvM,SAASC,cAAc,OAUpC,IAAIoL,EATJkB,EAAKpM,MAAMyF,MAAQ,OACnB2G,EAAKpM,MAAM0F,OAAS,QACpB/F,KAAKjB,IAAIqB,OAAOqM,GAchBlB,EAAK,IAAIlF,QACHkF,EAAGpF,KAAK1K,EAAYgK,KAC1BzF,KAAK4K,eAAiB,IAAIjF,EAAe8G,EAAMlB,EAAGhE,cAAe,mCAAoC9L,EAAYgK,KACnF8F,EAAGhE,cAqOf,IAAIkC,EAAUzJ,KAAKjB,KAC3BoH,MAEd,ECrSG,MAAMuG,EAET7N,YAAYgE,GAAa,KADzB3D,UAAI,EAEAoN,EAAkBnG,KAAKtD,EAE3B,ECPG,MAAM8J,EAGT9N,YAAYgE,GAAa,KAFlB+C,aAAO,EAGV5F,KAAK4F,QAAU1F,SAASqM,eAAe1J,GAGvC7C,KAAK4F,QAAQvF,MAAMuM,QAAU,OAC7B5M,KAAK4F,QAAQvF,MAAMwM,WAAa,SAChC,MAAM9N,EAAMmB,SAASC,cAAc,OACnCpB,EAAIsB,MAAMyM,WAAa,OACvB/N,EAAIsB,MAAM0M,YAAc,OACxBhO,EAAIsB,MAAM2F,gBAAkB,OAC5BjH,EAAIsB,MAAM4F,OAAS,OACnBlH,EAAIsB,MAAM+B,WAAa,gBACvBpC,KAAK4F,QAAQ7C,YAAYhE,GAGzB,IAAI2N,EAAI7J,GACRoB,QAAQC,IAAI,cAChB,CACO8I,UAEH,KAAOhN,KAAK4F,QAAQqH,kBAChBjN,KAAK4F,QAAQsH,YAAYlN,KAAK4F,QAAQqH,iBAE9C,E","sources":["njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/NJSCoreLib/ColorUtility.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/NJSCoreLib/index.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/NJSCoreLib/ThreeHelper.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/AppThreeCanvas/ThreeCore/index.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/AppThreeCanvas/index.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/DataProcess/DataFoundationColorData.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/DataProcess/DataSkintoneColorData.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/DataProcess/DataSkinColorGroup.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/DataProcess/DataPersonalColorFabricTool.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/DataProcess/DataPCCSColor.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/DataProcess/DataColor.ts","njslab/Project/TheColorAI/template/lib/App/DownloadMatrix.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/Renderer/ThreeSimple.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/LGProcess.ts","njslab/Project/TheColorAI/template/lib/App/NJSLabSandboxCore/index.ts","njslab/Project/TheColorAI/template/lib/App/index.ts","njslab/Project/TheColorAI/template/index.ts"],"sourcesContent":["export enum COLOR_SPACE {\n    RGB = 'RGB',\n    HSV = 'HSV',\n    LAB = 'LAB',\n}\n\nexport const lab2rgb = (L: number, A: number, B: number) => {\n    let y = (L + 16) / 116,\n        x = A / 500 + y,\n        z = y - B / 200;\n    let r, g, b = 0;\n\n    x = 0.95047 * ((x * x * x > 0.008856) ? x * x * x : (x - 16 / 116) / 7.787);\n    y = 1.00000 * ((y * y * y > 0.008856) ? y * y * y : (y - 16 / 116) / 7.787);\n    z = 1.08883 * ((z * z * z > 0.008856) ? z * z * z : (z - 16 / 116) / 7.787);\n\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n\n    r = (r > 0.0031308) ? (1.055 * Math.pow(r, 1 / 2.4) - 0.055) : 12.92 * r;\n    g = (g > 0.0031308) ? (1.055 * Math.pow(g, 1 / 2.4) - 0.055) : 12.92 * g;\n    b = (b > 0.0031308) ? (1.055 * Math.pow(b, 1 / 2.4) - 0.055) : 12.92 * b;\n\n    return [Math.max(0, Math.min(1, r)) * 255,\n    Math.max(0, Math.min(1, g)) * 255,\n    Math.max(0, Math.min(1, b)) * 255];\n};\nexport const rgb2lab = (R: number, G: number, B: number) => { // 0 to 255\n    let r = R / 255,\n        g = G / 255,\n        b = B / 255,\n        x, y, z;\n\n    r = (r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = (g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = (b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n\n    x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n    y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000;\n    z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n\n    x = (x > 0.008856) ? Math.pow(x, 1 / 3) : (7.787 * x) + 16 / 116;\n    y = (y > 0.008856) ? Math.pow(y, 1 / 3) : (7.787 * y) + 16 / 116;\n    z = (z > 0.008856) ? Math.pow(z, 1 / 3) : (7.787 * z) + 16 / 116;\n\n    return [(116 * y) - 16, 500 * (x - y), 200 * (y - z)];\n};\nexport const RGBToHex = (r: number, g: number, b: number) => {\n    return '#' + [Math.round(r), Math.round(g), Math.round(b)].map(x => {\n        const hex = x.toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    }).join('');\n};","export enum BROWSER_TYPE {\n    OPERA = 'Opera',\n    CHROME = 'Chrome',\n    SAFARI = 'Safari',\n    FIREFOX = 'Firefox',\n    IE = 'IE',\n    EDGE = 'Edge',\n    UNKNOWN = 'unknown',\n}\n\n\nexport const downloadJSON = (d: string, name: string) => {\n\n    const encode = (s: string) => {\n        const out: number[] = [];\n        for (let i = 0; i < s.length; i++) { out.push(s.charCodeAt(i)); }\n        return new Uint8Array(out);\n    };\n\n    // reference : http://jsfiddle.net/soulwire/4ooupev9/\n    const data = encode((JSON.stringify(d, null, 4)));\n    // console.log(data);\n    const blob = new Blob([data], { type: 'NJSLab/lab' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', name);\n    const event = document.createEvent('MouseEvents');\n    event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    link.dispatchEvent(event);\n};\n\n\nexport class BrowserUtility {\n    private _type: BROWSER_TYPE;\n    private _isMobile: boolean;\n\n    // ?product=shirt&color=blue&newuser&size=m\n    public static getAllUrlParams(url: string = window.location.search) {\n        let queryString = url ? url.split('?')[1] : window.location.search.slice(1);\n        let obj = {};\n\n        if (queryString) {\n            queryString = queryString.split('#')[0];\n            let arr = queryString.split('&');\n\n            for (let i = 0; i < arr.length; i++) {\n                let a = arr[i].split('=');\n                let paramName = a[0];\n                let paramValue = typeof (a[1]) === 'undefined' ? true : a[1];\n\n                paramName = paramName.toLowerCase();\n                if (typeof paramValue === 'string') paramValue = paramValue.toLowerCase();\n\n                if (paramName.match(/\\[(\\d+)?\\]$/)) {\n                    let key = paramName.replace(/\\[(\\d+)?\\]/, '');\n                    if (!obj[key]) obj[key] = [];\n\n                    if (paramName && paramName.match(/\\[\\d+\\]$/)) {\n                        if ((/\\[(\\d+)\\]/.exec(paramName)) !== null) {\n                            let index = /\\[(\\d+)\\]/.exec(paramName);\n                            if (index && index[1]) {\n                                obj[key][index] = paramValue;\n                            }\n                        }\n                    } else {\n                        obj[key].push(paramValue);\n                    }\n                } else {\n                    if (!obj[paramName]) {\n                        obj[paramName] = paramValue;\n                    } else if (obj[paramName] && typeof obj[paramName] === 'string') {\n                        obj[paramName] = [obj[paramName]];\n                        obj[paramName].push(paramValue);\n                    } else {\n                        obj[paramName].push(paramValue);\n                    }\n                }\n            }\n        }\n\n        return obj;\n    }\n    constructor() {\n        this.DetectBrowser();\n        this.DetectIsMoile();\n        // console.debug(this.type, ', isMobile', this.isMobile);\n    }\n    private DetectBrowser() {\n        if ((navigator.userAgent.indexOf('Edge') !== -1)) {\n            this._type = BROWSER_TYPE.EDGE;\n            return;\n        }\n        if ((navigator.userAgent.indexOf('Opera') || navigator.userAgent.indexOf('OPR')) !== -1) {\n            this._type = BROWSER_TYPE.OPERA;\n        }\n        if (navigator.userAgent.indexOf('Chrome') !== -1) {\n            this._type = BROWSER_TYPE.CHROME;\n            return;\n        }\n        if (navigator.userAgent.indexOf('Safari') !== -1) {\n            this._type = BROWSER_TYPE.SAFARI;\n            return;\n        }\n        if (navigator.userAgent.indexOf('Firefox') !== -1) {\n            this._type = BROWSER_TYPE.FIREFOX;\n            return;\n            // } else if ((navigator.userAgent.indexOf('MSIE') !== -1) || (!!document.documentMode === true)) { // IF IE > 10\n        }\n        if ((navigator.userAgent.indexOf('MSIE') !== -1)) { // IF IE > 10\n            this._type = BROWSER_TYPE.IE;\n        }\n\n        // else {\n        this._type = BROWSER_TYPE.UNKNOWN;\n        // }\n    }\n    private DetectIsMoile() {\n        this._isMobile = false; // initiate as false\n        // device detection\n        // @ts-ignore\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)|plucker|pocket|psp|series(4|6)0|symbian|treo|up.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)\n            || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|m|r|s)|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw(n|u)|c55\\/|capi|ccwa|cdm|cell|chtm|cldc|cmd|comp|craw|dait|dbte|dc|devi|dica|dmob|doc|dopo|ds(12|d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly|g1 u|g560|gene|gf5|g-mo|go.w|good|grad|haie|hcit|hd(m|p|t)|hei|hpt|hip|hp i|hs-c|ht(c|tp)|hua|iac|ibro|idea|ig01|ikom|inno|ipaq|iris|jat|jemu|jigs|kddi|keji|kgt|klon|kpt|kwc|kyo(c|k)|leno|lexi|lg(g|50|54|a|l|u)|lynx|m1|m3ga|m50|mate|mc(01|21|ca)|mcr|merc|mi(o8|oa|ts)|mmef|mob(t|o|v)|mt(50|p1|v)|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(00|01|10)|ne(c|m|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|p800|pan(a|d|t)|pdxg|pg(13|[1-8]c)|phil|pire|play|pluc|pn2|pock|port|prox|psio|ptg|qa|qc(07|12|21|32|60)|qtek|r380|r600|rim9|rove|sa(ma|mm|ms|ny|va)|sc(01|h|oo|p)|sdk|sec(0|1|47|mc|nd|ri)|sgh|shar|sie(m)|sk(45|slid)|smart|sony|sp(h|v)|sy(01|mb)|t218|t6(00|10|18)|tcl|tdg|tel(i|m)|tmo|topl|tsh|ts70|tx9|up(b|g1|si)|utst|v400|v750|veri|virg|vk(40|50|53)|vx(52|53|60|61|70|80|81|83|85|98)|w3c|webc|whit|wi(g|nc|nw)|wmlb|wonu|x700|yas|your|zeto|zte/i.test(navigator.userAgent.substr(0, 4))) {\n            this._isMobile = true;\n        }\n    }\n    public get type() {\n        return this._type;\n    }\n    public get isMobile() {\n        return this._isMobile;\n    }\n}","import * as THREE from 'three';\n\nexport const getGridHelper = (size = 10, divisions = 10) => {\n    return new THREE.GridHelper( size, divisions );\n};\nexport const getGridLegend = (xMin: number, yMin: number, zMin: number, xMax: number, yMax: number, zMax: number) => {\n    // const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n    const material = new THREE.LineDashedMaterial( {\n        color: 'rgba(255,255,255, 0.5)',\n        linewidth: 3,\n        scale: 2,\n        dashSize: 3,\n        gapSize: 2,\n    } );\n\n    const points = [];\n\n    const xInterval = (xMax - xMin) / (10);\n    const yInterval = (yMax - yMin) / (10);\n    const zInterval = (zMax - zMin) / (10);\n\n    for (let i = 0 ; i <= 10; ++i) {\n        const offsetX = xMin + (xInterval * i);\n        const offsetY = yMin + (yInterval * i);\n        const offsetZ = zMin + (zInterval * i);\n\n        points.push( new THREE.Vector3(offsetX, yMin, zMin) );\n        points.push( new THREE.Vector3(offsetX, yMin, zMax) );\n        points.push( new THREE.Vector3(xMin, yMin, offsetZ) );\n        points.push( new THREE.Vector3(xMax, yMin, offsetZ) );\n\n        points.push( new THREE.Vector3(xMin, offsetY, zMin) );\n        points.push( new THREE.Vector3(xMax, offsetY, zMin) );\n        points.push( new THREE.Vector3(offsetX, yMin, zMin) );\n        points.push( new THREE.Vector3(offsetX, yMax, zMin) );\n\n        points.push( new THREE.Vector3(xMin, yMin, offsetZ) );\n        points.push( new THREE.Vector3(xMin, yMax, offsetZ) );\n\n        points.push( new THREE.Vector3(xMin, offsetY, zMin) );\n        points.push( new THREE.Vector3(xMin, offsetY, zMax) );\n    }\n\n    const geometryLine = new THREE.BufferGeometry().setFromPoints( points );\n\n    const line = new THREE.LineSegments( geometryLine, material );\n    return line;\n};","import * as THREE from 'three';\nimport { AppThreeCanvas } from '..';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\n// import { stringify } from 'querystring';\n\nimport { downloadJSON } from '../../NJSCoreLib';\nimport { RGBToHex, COLOR_SPACE } from '../../NJSCoreLib/ColorUtility';\nimport { getGridHelper, getGridLegend } from '../../NJSCoreLib/ThreeHelper';\n\nexport class ThreeCore {\n    app: AppThreeCanvas;\n    canvas: HTMLCanvasElement;\n    host: HTMLElement;\n    ctx: CanvasRenderingContext2D;\n    t: number = 0.0;\n\n    renderer: THREE.WebGLRenderer;\n    camera: THREE.PerspectiveCamera;\n    scene: THREE.Scene;\n    sceneRayCast: any = [];\n\n    controls: OrbitControls;\n    raycaster: THREE.Raycaster;\n\n    active = false;\n\n    mouse = new THREE.Vector2(0, 0);\n\n    INTERSECTED: any = undefined;\n\n    dataJson: any;\n\n    constructor(app: AppThreeCanvas , div: HTMLElement, title = 'Title') {\n        this.app = app;\n        this.host = div;\n\n        const divTop = document.createElement('div');\n        this.host.append(divTop);\n        divTop.style.position = 'absolute';\n\n        const divTitle = document.createElement('div');\n        divTitle.textContent = title;\n        divTop.append(divTitle);\n\n        const divDownload = document.createElement('div');\n        divDownload.textContent = 'download';\n        divTop.append(divDownload);\n        divDownload.onclick = () => {\n            const stringData = JSON.stringify(this.dataJson);\n            // console.log(stringData)\n            downloadJSON(stringData, 'download.json');\n        };\n\n        this.InitCanvas();\n    }\n    InitCanvas() {\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(200, 200, 200);\n        this.scene.castShadow = true;\n\n        this.scene.background = new THREE.Color( 0xefefef );\n\n        this.camera = new THREE.PerspectiveCamera(30, this.host.clientWidth / this.host.clientHeight, 1, 5000);\n        this.camera.position.set(0, 0, 250);\n\n        // const ambientLight = new THREE.AmbientLight(0xcccccc, 0.4);\n        // ambientLight.castShadow = true;\n        // this.scene.add(ambientLight);\n\n        // var pointLight = new THREE.PointLight(0xffffff, 0.8);\n        // pointLight.castShadow = true;\n        // this.scene.add(pointLight);\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(this.host.clientWidth / this.host.clientHeight);\n        this.renderer.domElement.id = 'ThreeSandbox';\n        this.renderer.setSize(this.host.clientWidth, this.host.clientHeight);\n        this.host.appendChild(this.renderer.domElement);\n\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n        this.controls.enablePan = true; // .screenSpacePanning = true;\n        this.controls.enableDamping = true;\n        this.controls.enableZoom = true;\n        this.controls.rotateSpeed = 0.2;\n        this.controls.zoomSpeed = 2;\n        this.controls.update();\n\n        this.raycaster = new THREE.Raycaster();\n\n        this.Init();\n    }\n    Init() {\n        this.EventBind();\n        this.Loop();\n    }\n    EventBind() {\n        this.renderer.domElement.onmousemove = (e: MouseEvent) => this.MouseMove(e);\n        this.renderer.domElement.onmousedown = (e: MouseEvent) => this.MouseDown(e);\n        this.renderer.domElement.onmouseup = (e: MouseEvent) => this.MouseUp(e);\n    }\n    MouseDown(e: MouseEvent) {\n        // console.log(e);\n        if (this.INTERSECTED) {\n            console.log(this.INTERSECTED.data);\n            const ss = JSON.stringify(this.INTERSECTED.data).split('&'); // .replace('&', '/br');\n            this.app.divPanel.innerHTML = '';\n            for (let s of ss) {\n                this.app.divPanel.innerHTML += s + '<br>' ;\n            }\n\n        } else {\n            // this.app.divPanel.innerHTML = '';\n        }\n\n    }\n    MouseUp(e: MouseEvent) {\n        // console.log(e);\n    }\n    MouseMove(e: MouseEvent) {\n        this.mouse.x = (e.offsetX / this.host.clientWidth) * 2 - 1;\n        this.mouse.y = - (e.offsetY / this.host.clientHeight) * 2 + 1;\n    }\n    Loop() {\n        requestAnimationFrame(() => { this.Loop(); });\n\n        if (!this.active) { return; }\n\n        this.controls.update();\n        this.raycaster.setFromCamera( this.mouse, this.camera );\n\n        const intersects = this.raycaster.intersectObjects( this.sceneRayCast );\n\n        if (intersects.length > 0 ) {\n\n            if (this.INTERSECTED !== intersects[ 0 ].object ) {\n                if (this.INTERSECTED ) {\n                    // this.INTERSECTED.material.emissive.setHex( this.INTERSECTED.currentHex );\n                }\n                this.INTERSECTED = intersects[ 0 ].object;\n                // this.INTERSECTED.currentHex = this.INTERSECTED.material.emissive.getHex();\n                // this.INTERSECTED.material.emissive.setHex( 0xff0000 );\n\n                // this.INTERSECTED.scale.x = 1.2;\n                // this.INTERSECTED.scale.y = 1.2;\n                // this.INTERSECTED.scale.z = 1.2;\n                // console.log(this.INTERSECTED);\n            }\n\n        } else {\n\n            if (this.INTERSECTED ) {\n                // this.INTERSECTED.material.emissive.setHex( this.INTERSECTED.currentHex );\n\n                // this.INTERSECTED.scale.x = 1.0;\n                // this.INTERSECTED.scale.y = 1.0;\n                // this.INTERSECTED.scale.z = 1.0;\n            }\n\n            this.INTERSECTED = undefined;\n\n        }\n\n        this.renderer.render(this.scene, this.camera);\n\n        this.Render();\n        this.t += 0.01;\n    }\n    Render() {\n\n    }\n    initVis(dataJson: any, space: COLOR_SPACE ) {\n        this.dataJson = dataJson;\n        const geometry = new THREE.SphereGeometry(5, 10 , 10);\n\n        for ( let i = 0; i < dataJson.data.length; i++ ) {\n            const data: any = dataJson.data[i];\n\n            const colHex = RGBToHex(data.rgb[0], data.rgb[1], data.rgb[2]);\n            const mat = new THREE.MeshLambertMaterial( { color: colHex } );\n            mat.emissive = new THREE.Color(colHex);\n            const object = new THREE.Mesh( geometry, mat );\n\n            object.position.x = data.xyz[0];\n            object.position.y = data.xyz[1];\n            object.position.z = data.xyz[2];\n\n            // object.rotation.x = Math.random() * 2 * Math.PI;\n            // object.rotation.y = Math.random() * 2 * Math.PI;\n            // object.rotation.z = Math.random() * 2 * Math.PI;\n\n            object.scale.x = dataJson.radius;\n            object.scale.y = dataJson.radius;\n            object.scale.z = dataJson.radius;\n\n            object['data'] = data;\n\n            this.app.threeCore.scene.add(object);\n            this.app.threeCore.sceneRayCast.push(object);\n        }\n\n        this.app.threeCore.scene.add(getGridHelper(50, 10));\n\n        switch (space) {\n            case COLOR_SPACE.LAB:\n                this.app.threeCore.scene.add(getGridLegend(-0, 0, -100, 100, 50, 10));\n                break;\n            case COLOR_SPACE.HSV:\n                this.app.threeCore.scene.add(getGridLegend(-0, -0, -0, 360, 100, 100));\n                break;\n            default:\n                this.app.threeCore.scene.add(getGridLegend(-0, -0, -0, 255, 255, 255));\n                break;\n        }\n\n    }\n\n}","import { COLOR_SPACE } from '../NJSCoreLib/ColorUtility';\nimport { ThreeCore } from './ThreeCore';\nexport class AppThreeCanvas {\n    threeCore: ThreeCore;\n    divHost: HTMLElement;\n    div: HTMLElement;\n    divPanel: HTMLElement;\n    constructor(divHost: HTMLElement,  data: any, title = 'Title', space: COLOR_SPACE = COLOR_SPACE.RGB) {\n        this.divHost = divHost;\n\n        const div = document.createElement('div');\n        if (div) {\n            this.div = div;\n            this.div.style.width = '600px';\n            this.div.style.height = '400px';\n            this.div.style.backgroundColor = '#ffffff';\n            this.div.style.margin = '10px';\n            // @ts-ignore\n            this.div.style.float = 'left';\n            // console.log(this.div);\n            this.divHost.append(this.div);\n            this.init(data, title, space);\n        }\n    }\n    async init(data: any, title = 'Title', space: COLOR_SPACE) {\n        this.threeCore = new ThreeCore(this, this.div, title);\n        this.threeCore.initVis(data, space);\n        this.threeCore.active = true;\n\n        const divPanel = document.createElement('div');\n\n        divPanel.style.width = '300px';\n        divPanel.style.height = '400px';\n        divPanel.style.background = '#fdfdfd';\n        divPanel.style.margin = '10px';\n        // @ts-ignore\n        divPanel.style.float = 'left';\n        this.divPanel = divPanel;\n        this.divHost.append(divPanel);\n\n    }\n\n}\n","import { isNumber } from '@tensorflow/tfjs-core/dist/util';\nimport { lab2rgb, COLOR_SPACE } from '../NJSCoreLib/ColorUtility';\n\nexport class DataFoundationColorData {\n\n    url: string;\n    path: string;\n    rawData: any;\n\n    dataJson = {\n        meta: {},\n        data: [],\n        space: COLOR_SPACE.RGB,\n        radius: 1\n    };\n\n    constructor(url: string = './data/FOUNDATION-COLOR-DATA.csv') {\n        this.url = url;\n        this.path = window.location + url;\n    }\n    async init(space: COLOR_SPACE = COLOR_SPACE.RGB) {\n        this.rawData = await fetch(`${this.path}`, {mode: 'cors'});\n        this.rawData = await this.rawData.text();\n\n        let texts = this.rawData.split(/\\r\\n|\\n/);\n        let lines = [];\n        for (let i = 0; i < texts.length; ++i) {\n            let theData = texts[i].split(',');\n            let row = [];\n            for (let j = 0; j < theData.length; ++j) {\n                if (isNumber(theData[j])) {\n                    row.push(+theData[j]);\n                } else {\n                    row.push(theData[j]);\n                }\n            }\n            lines.push(row);\n        }\n\n        // console.log('color mat :', lines)\n        // ..........................................................\n        let dataJson = {\n            meta: {},\n            data: [],\n            space: space,\n            radius: 0.2,\n        };\n\n        let name, l, a, b, rgb, xyz;\n        for (let i = 1 ; i < lines.length; i += 3) {\n\n            name = lines[i][1];\n            l = ((+lines[i][2]) + (+lines[i+1][2]) + (+lines[i+2][2])) / 3;\n            a = ((+lines[i][3]) + (+lines[i+1][3]) + (+lines[i+2][3])) / 3;\n            b = ((+lines[i][4]) + (+lines[i+1][4]) + (+lines[i+2][4])) / 3;\n            rgb = lab2rgb(l,a,b);\n\n            switch (space) {\n                case COLOR_SPACE.LAB: xyz = [a, l, b * -1]; break;\n                default: xyz = rgb; break;\n            }\n            const d = {\n                name: name,\n                xyz: xyz,\n                rgb: rgb,\n                lab: [l,a,b],\n                raw: [lines[i], lines[i + 1], lines[i + 2]],\n            };\n            // @ts-ignore\n            dataJson.data.push(d);\n        }\n\n        // console.log(dataJson);\n        this.dataJson = dataJson;\n    }\n    public getDataJson() {\n        return this.dataJson;\n    }\n}","import { isNumber } from '@tensorflow/tfjs-core/dist/util';\nimport { lab2rgb, COLOR_SPACE } from '../NJSCoreLib/ColorUtility';\nexport class DataSkintoneColorData {\n\n    url: string;\n    path: string;\n    rawData: any;\n\n    dataJson = {\n        meta: {},\n        data: [],\n        space: COLOR_SPACE.RGB,\n        radius: 1\n    };\n\n    constructor(url: string = './data/SKINTONE-COLOR-DATA.csv') {\n        this.url = url;\n        this.path = window.location + url;\n    }\n    async init(space: COLOR_SPACE = COLOR_SPACE.RGB) {\n        this.rawData = await fetch(`${this.path}`, {mode: 'cors'});\n        this.rawData = await this.rawData.text();\n\n        let texts = this.rawData.split(/\\r\\n|\\n/);\n        let lines = [];\n        for (let i = 0; i < texts.length; ++i) {\n            let theData = texts[i].split(',');\n            let row = [];\n            for (let j = 0; j < theData.length; ++j) {\n                if (isNumber(theData[j])) {\n                    row.push(+theData[j]);\n                } else {\n                    row.push(theData[j]);\n                }\n            }\n            lines.push(row);\n        }\n\n        console.log('color mat :', lines);\n        // ..........................................................\n        let dataJson = {\n            meta: {},\n            data: [],\n            space: space,\n            radius: 0.1,\n        };\n\n        let name, l, a, b, rgb, xyz;\n        for (let i = 2 ; i < lines.length; i++) {\n\n            name = lines[i][0];\n            l =  ((+lines[i][1]) + (+lines[i][4]) + (+lines[i][7]) + (+lines[i][10]) + (+lines[i][13])) / 5;\n            a =  ((+lines[i][1 + 1]) + (+lines[i][4 + 1]) + (+lines[i][7 + 1]) + (+lines[i][10 + 1]) + (+lines[i][13 + 1])) / 5;\n            b =  ((+lines[i][1 + 2]) + (+lines[i][4 + 2]) + (+lines[i][7 + 2]) + (+lines[i][10 + 2]) + (+lines[i][13 + 2])) / 5;\n            rgb = lab2rgb(l, a, b);\n\n            console.log('ab', i - 2, a, b);\n\n            // const x = a / ( a + b);\n            // const y = b / ( a + b);\n            // console.log(i - 2, x, y);\n\n            switch (space) {\n                case COLOR_SPACE.LAB: xyz = [a, l, b * -1]; break;\n                default: xyz = rgb; break;\n            }\n\n            const d = {\n                name: name,\n                xyz: xyz,\n                rgb: rgb,\n                lab: [l, a, b],\n                raw: [lines[i], lines[i + 1], lines[i + 2]],\n            };\n            // @ts-ignore\n            dataJson.data.push(d);\n        }\n\n        console.log(dataJson);\n        this.dataJson = dataJson;\n    }\n    public getDataJson() {\n        return this.dataJson;\n    }\n}","import { isNumber } from \"@tensorflow/tfjs-core/dist/util\";\nimport { lab2rgb, COLOR_SPACE } from \"../NJSCoreLib/ColorUtility\";\n\nexport class DataSkinColorGroup {\n\n    url: string;\n    path: string;\n    rawData: any;\n\n    dataJson = {\n        meta: {},\n        data: [],\n        space: COLOR_SPACE.RGB,\n        radius: 1,\n    };\n\n    constructor(url: string = './data/SKIN-COLOR-GROUP.csv') {\n        this.url = url;\n        this.path = window.location + url;\n    }\n    async init(space: COLOR_SPACE = COLOR_SPACE.RGB) {\n        this.rawData = await fetch(`${this.path}`, {mode: 'cors'});\n        this.rawData = await this.rawData.text();\n    \n        let texts = this.rawData.split(/\\r\\n|\\n/);\n        let lines = [];\n        for (let i = 0; i < texts.length; ++i) {\n            let theData = texts[i].split(',');\n            let row = [];\n            for (let j = 0; j < theData.length; ++j) {\n                if (isNumber(theData[j])){\n                    row.push(+theData[j]);\n                } else {\n                    row.push(theData[j]);\n                }\n            }\n            lines.push(row);\n        }\n      \n        // console.log('color mat :', lines)\n        // ..........................................................\n        let dataJson = {\n            meta: {},\n            data: [],\n            space: space,\n            radius: 1,\n            group: '',\n        };\n\n        let name, l, a, b, rgb, xyz;\n        for(let i = 1 ; i < lines.length; i += 3) {\n            // console.log(lines[i]);\n            name = lines[i][1]\n            l =  ((+lines[i][2]) + (+lines[i+1][2]) + (+lines[i+2][2])) / 3;\n            a =  ((+lines[i][3]) + (+lines[i+1][3]) + (+lines[i+2][3])) / 3;\n            b =  ((+lines[i][4]) + (+lines[i+1][4]) + (+lines[i+2][4])) / 3;\n            rgb = lab2rgb(l,a,b);\n\n            switch (space) {\n                case COLOR_SPACE.LAB: xyz = [a, l, b * -1]; break;\n                default: xyz = rgb; break;\n            }\n\n            // xyz = [a, l, b * -1]; \n    \n            const d = {\n                name: name,\n                xyz: xyz,\n                rgb: rgb,\n                lab: [l,a,b],\n                raw: [lines[i], lines[i + 1], lines[i + 2]],\n                group: lines[i][5],\n            }\n            // @ts-ignore\n            dataJson.data.push(d);\n        }\n\n        // console.log(dataJson);\n        this.dataJson = dataJson;\n    }\n    public getDataJson() {\n        return this.dataJson;\n    }\n}","import { isNumber } from \"@tensorflow/tfjs-core/dist/util\";\nimport { lab2rgb, COLOR_SPACE } from \"../NJSCoreLib/ColorUtility\";\n\nexport class DataPersonalColorFabricTool {\n\n    url: string;\n    path: string;\n    rawData: any;\n\n    dataJson = {\n        meta: {},\n        data: [],\n        space: COLOR_SPACE.RGB,\n        radius: 1,\n    };\n\n    constructor(url: string = './data/PERSONAL-COLOR-FABRIC-TOOL.csv') {\n        this.url = url;\n        this.path = window.location + url;\n    }\n    async init(space: COLOR_SPACE = COLOR_SPACE.RGB) {\n        this.rawData = await fetch(`${this.path}`, {mode: 'cors'});\n        this.rawData = await this.rawData.text();\n    \n        let texts = this.rawData.split(/\\r\\n|\\n/);\n        let lines = [];\n        for (let i = 0; i < texts.length; ++i) {\n            let theData = texts[i].split(',');\n            let row = [];\n            for (let j = 0; j < theData.length; ++j) {\n                if (isNumber(theData[j])){\n                    row.push(+theData[j]);\n                } else {\n                    row.push(theData[j]);\n                }\n            }\n            lines.push(row);\n        }\n      \n        // console.log('color mat :', lines)\n        // ..........................................................\n        let dataJson = {\n            meta: {},\n            data: [],\n            space: space,\n            radius: 1,\n        };\n\n        let name, l, a, b, rgb, xyz;\n        for(let i = 1 ; i < lines.length; i += 3) {\n\n            name = lines[i][1]\n            l =  ((+lines[i][2]) + (+lines[i+1][2]) + (+lines[i+2][2])) / 3;\n            a =  ((+lines[i][3]) + (+lines[i+1][3]) + (+lines[i+2][3])) / 3;\n            b =  ((+lines[i][4]) + (+lines[i+1][4]) + (+lines[i+2][4])) / 3;\n            rgb = lab2rgb(l,a,b);\n\n            switch (space) {\n                case COLOR_SPACE.LAB: xyz = [a, l, b * -1]; break;\n                default: xyz = rgb; break;\n            }\n\n            // xyz = [a, l, b * -1]; \n    \n            const d = {\n                name: name,\n                xyz: xyz,\n                rgb: rgb,\n                lab: [l,a,b],\n                raw: [lines[i], lines[i + 1], lines[i + 2]],\n            }\n            // @ts-ignore\n            dataJson.data.push(d);\n        }\n\n        // console.log(dataJson);\n        this.dataJson = dataJson;\n    }\n    public getDataJson() {\n        return this.dataJson;\n    }\n}","import { isNumber } from \"@tensorflow/tfjs-core/dist/util\";\nimport { lab2rgb, COLOR_SPACE } from \"../NJSCoreLib/ColorUtility\";\n\nexport class DataPCCSColor {\n\n    url: string;\n    path: string;\n    rawData: any;\n\n    dataJson = {\n        meta: {},\n        data: [],\n        space: COLOR_SPACE.RGB,\n        radius: 1,\n    };\n\n    constructor(url: string = './data/PCCS-COLOR.csv') {\n        this.url = url;\n        this.path = window.location + url;\n    }\n    async init(space: COLOR_SPACE = COLOR_SPACE.RGB) {\n        this.rawData = await fetch(`${this.path}`, {mode: 'cors'});\n        this.rawData = await this.rawData.text();\n    \n        let texts = this.rawData.split(/\\r\\n|\\n/);\n        let lines = [];\n        for (let i = 0; i < texts.length; ++i) {\n            let theData = texts[i].split(',');\n            let row = [];\n            for (let j = 0; j < theData.length; ++j) {\n                if (isNumber(theData[j])){\n                    row.push(+theData[j]);\n                } else {\n                    row.push(theData[j]);\n                }\n            }\n            lines.push(row);\n        }\n      \n        // console.log('color mat :', lines)\n        // ..........................................................\n        let dataJson = {\n            meta: {},\n            data: [],\n            space: space,\n            radius: 1,\n        };\n\n        let name, l, a, b, rgb, xyz;\n        for(let i = 1 ; i < lines.length; i += 3) {\n            // console.log(lines[i]);\n            name = lines[i][1]\n            l =  ((+lines[i][2]) + (+lines[i+1][2]) + (+lines[i+2][2])) / 3;\n            a =  ((+lines[i][3]) + (+lines[i+1][3]) + (+lines[i+2][3])) / 3;\n            b =  ((+lines[i][4]) + (+lines[i+1][4]) + (+lines[i+2][4])) / 3;\n            rgb = lab2rgb(l,a,b);\n\n            switch (space) {\n                case COLOR_SPACE.LAB: xyz = [a, l, b * -1]; break;\n                default: xyz = rgb; break;\n            }\n\n            // xyz = [a, l, b * -1]; \n    \n            const d = {\n                name: name,\n                xyz: xyz,\n                rgb: rgb,\n                lab: [l,a,b],\n                raw: [lines[i], lines[i + 1], lines[i + 2]],\n            }\n            // @ts-ignore\n            dataJson.data.push(d);\n        }\n\n        // console.log(dataJson);\n        this.dataJson = dataJson;\n    }\n    public getDataJson() {\n        return this.dataJson;\n    }\n}","import { COLOR_SPACE } from '../NJSCoreLib/ColorUtility';\n\nexport class DataColor {\n    space: COLOR_SPACE;\n    url: string;\n    rawData: any;\n\n    dataJson = {\n        meta: {},\n        data: [],\n        space: COLOR_SPACE.RGB,\n        radius: 1,\n    };\n\n    constructor(url: string = 'https://raw.githubusercontent.com/NamjuLee/data/master/color/color-data.json') {\n        this.url = url;\n    }\n    async init(space: COLOR_SPACE = COLOR_SPACE.RGB) {\n        this.rawData = await fetch(`${this.url}`, {mode: 'cors'});\n        this.rawData = await this.rawData.json();\n    \n        // console.log('color mat :', this.rawData)\n        // ..........................................................\n        let dataJson = {\n            meta: {},\n            data: [],\n            space: space,\n            radius: 1,\n        };\n        let xyz, name, hex, lab, rgb, hsv;\n        for(let i in this.rawData) {\n            hex =  i;\n            name = this.rawData[i]['name'];\n            lab =  this.rawData[i]['lab'];\n            rgb =  this.rawData[i]['rgb'];\n            hsv =  this.rawData[i]['hsv'];\n\n            switch (space) {\n                case COLOR_SPACE.HSV: xyz = this.rawData[i]['hsv']; break;\n\n                // case COLOR_SPACE.LAB: xyz = [a, l, b * -1]; break;\n                // case COLOR_SPACE.LAB: xyz = [a, l, b * -1]; break;\n                case COLOR_SPACE.LAB: \n                    const labColor = this.rawData[i]['lab']; \n                    xyz = [labColor[1], labColor[0], labColor[2] * -1]\n                    break;\n                default: xyz = this.rawData[i]['rgb']; break;\n            }\n\n            const d = {\n                name: name,\n                hex: hex,\n                xyz: xyz,\n                rgb: rgb,\n                lab: lab,\n                hsv: hsv,\n            }\n            // @ts-ignore\n            dataJson.data.push(d);\n        }\n\n        // console.log(dataJson);\n        this.dataJson = dataJson;\n    }\n    public getDataJson() {\n        return this.dataJson;\n    }\n}","\nexport class DownloadMatrix {\n    data: number[][];\n    fileName: string;\n    constructor(d: number[][], fileName: string = 'TrainData.json') {\n        this.data = d;\n        this.fileName = fileName;\n        // // console.log(d)\n    }\n    public DownloadJSON() {\n        let dic = {};\n        this.data.forEach((v, k, m) => { dic[k] = v; });\n        // reference : http://jsfiddle.net/soulwire/4ooupev9/\n        let data = this.EncodeFromJSONstringify((JSON.stringify(dic, null)));\n        const blob = new Blob([data], { type: 'esri/drawingTool' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.setAttribute('href', url);\n        link.setAttribute('download', this.fileName + '.json');\n        const event = document.createEvent('MouseEvents');\n        event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n        link.dispatchEvent(event);\n\n    }\n    public DownloadCSV() {\n        let csvFile = '';\n        for (let i = 0; i < this.data.length; ++i) {\n            for (let j = 0; j < this.data[i].length; ++j) {\n                csvFile += this.data[i][j];\n                if (j < this.data[i].length - 1) { csvFile += ','; }\n            }\n            csvFile += '\\n';\n        }\n        const blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.setAttribute('href', url);\n        link.setAttribute('download', this.fileName + '.csv');\n        const event = document.createEvent('MouseEvents');\n        event.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n        link.dispatchEvent(event);\n    }\n    public Dummy() { /* */ }\n    private EncodeFromJSONstringify(s: string) {\n        let out: number[] = [];\n        for (let i = 0; i < s.length; i++) { out.push(s.charCodeAt(i)); }\n        return new Uint8Array(out);\n    }\n}","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three-orbitcontrols-ts';\r\n// import { stringify } from 'querystring';\r\n\r\n// import { downloadJSON } from '../../NJSCoreLib';\r\nimport { RGBToHex, COLOR_SPACE } from '../NJSCoreLib/ColorUtility';\r\nimport { getGridHelper } from '../NJSCoreLib/ThreeHelper';\r\n\r\nexport class ThreeSimple {\r\n    canvas: HTMLCanvasElement;\r\n    host: HTMLElement;\r\n    ctx: CanvasRenderingContext2D;\r\n    t: number = 0.0;\r\n\r\n    renderer: THREE.WebGLRenderer;\r\n    camera: THREE.PerspectiveCamera;\r\n    scene: THREE.Scene;\r\n    sceneRayCast: any = [];\r\n\r\n    controls: OrbitControls;\r\n    raycaster: THREE.Raycaster;\r\n\r\n    active = false;\r\n\r\n    mouse = new THREE.Vector2(0, 0);\r\n\r\n    INTERSECTED: any = undefined;\r\n\r\n    // dataJson: any;\r\n\r\n    v: number[] = [0,0,0];\r\n\r\n    constructor(div: HTMLElement, title = 'Title') {\r\n        this.host = div;\r\n\r\n        const divTop = document.createElement('div');\r\n        this.host.append(divTop);\r\n        divTop.style.position = 'absolute';\r\n\r\n        const divTitle = document.createElement('div');\r\n        divTitle.textContent = title;\r\n        divTop.append(divTitle);\r\n\r\n        const divDownload = document.createElement('div');\r\n        divDownload.textContent = 'download';\r\n        divTop.append(divDownload);\r\n        // divDownload.onclick = () => {\r\n        //     const stringData = JSON.stringify(this.dataJson);\r\n        //     // console.log(stringData)\r\n        //     downloadJSON(stringData, 'download.json');\r\n        // };\r\n\r\n        this.initCanvas();\r\n    }\r\n    public initCanvas() {\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background = new THREE.Color(200, 200, 200);\r\n        this.scene.castShadow = true;\r\n\r\n        this.scene.background = new THREE.Color( 0xefefef );\r\n\r\n        this.camera = new THREE.PerspectiveCamera(30, this.host.clientWidth / this.host.clientHeight, 1, 5000);\r\n        this.camera.position.set(0, 0, 250);\r\n\r\n        // const ambientLight = new THREE.AmbientLight(0xcccccc, 0.4);\r\n        // ambientLight.castShadow = true;\r\n        // this.scene.add(ambientLight);\r\n\r\n        // var pointLight = new THREE.PointLight(0xffffff, 0.8);\r\n        // pointLight.castShadow = true;\r\n        // this.scene.add(pointLight);\r\n\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n        this.renderer.setPixelRatio(this.host.clientWidth / this.host.clientHeight);\r\n        this.renderer.domElement.id = 'ThreeSandbox';\r\n        this.renderer.setSize(this.host.clientWidth, this.host.clientHeight);\r\n        this.host.appendChild(this.renderer.domElement);\r\n\r\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\r\n        this.controls.enablePan = true; // .screenSpacePanning = true;\r\n        this.controls.enableDamping = true;\r\n        this.controls.enableZoom = true;\r\n        this.controls.rotateSpeed = 0.2;\r\n        this.controls.zoomSpeed = 2;\r\n        this.controls.update();\r\n\r\n        this.raycaster = new THREE.Raycaster();\r\n\r\n        this.init();\r\n    }\r\n    public init() {\r\n        this.eventBind();\r\n        this.loop();\r\n        \r\n        this.scene.add(getGridHelper(50, 10));\r\n        this.active = true;\r\n    }\r\n    public eventBind() {\r\n        this.renderer.domElement.onmousemove = (e: MouseEvent) => this.mouseMove(e);\r\n        this.renderer.domElement.onmousedown = (e: MouseEvent) => this.mouseDown(e);\r\n        this.renderer.domElement.onmouseup = (e: MouseEvent) => this.mouseUp(e);\r\n    }\r\n    public mouseDown(e: MouseEvent) {\r\n        // console.log(e);\r\n        if (this.INTERSECTED) {\r\n            console.log(this.INTERSECTED.data);\r\n            // const ss = stringify(this.INTERSECTED.data).split('&'); // .replace('&', '/br');\r\n            // this.app.divPanel.innerHTML = '';\r\n            // for (let s of ss) {\r\n            //     this.app.divPanel.innerHTML += s + '<br>' ;\r\n            // }\r\n\r\n        } else {\r\n            // this.app.divPanel.innerHTML = '';\r\n        }\r\n\r\n    }\r\n    public mouseUp(e: MouseEvent) {\r\n        // console.log(e);\r\n    }\r\n    public mouseMove(e: MouseEvent) {\r\n        this.mouse.x = (e.offsetX / this.host.clientWidth) * 2 - 1;\r\n        this.mouse.y = - (e.offsetY / this.host.clientHeight) * 2 + 1;\r\n    }\r\n    public loop() {\r\n        requestAnimationFrame(() => { this.loop(); });\r\n\r\n        if (!this.active) { return; }\r\n\r\n        this.controls.update();\r\n        this.raycaster.setFromCamera( this.mouse, this.camera );\r\n\r\n        const intersects = this.raycaster.intersectObjects( this.sceneRayCast );\r\n\r\n        if (intersects.length > 0 ) {\r\n\r\n            if (this.INTERSECTED !== intersects[ 0 ].object ) {\r\n                if (this.INTERSECTED ) {\r\n                    this.INTERSECTED.material.emissive.setHex( this.INTERSECTED.currentHex );\r\n                }\r\n                this.INTERSECTED = intersects[ 0 ].object;\r\n                this.INTERSECTED.currentHex = this.INTERSECTED.material.emissive.getHex();\r\n                this.INTERSECTED.material.emissive.setHex( 0xff0000 );\r\n\r\n                this.INTERSECTED.scale.x = 1.1;\r\n                this.INTERSECTED.scale.y = 1.1;\r\n                this.INTERSECTED.scale.z = 1.1;\r\n                console.log(this.INTERSECTED);\r\n            }\r\n\r\n        } else {\r\n\r\n            if (this.INTERSECTED ) {\r\n                this.INTERSECTED.material.emissive.setHex( this.INTERSECTED.currentHex );\r\n\r\n                this.INTERSECTED.scale.x = 1;\r\n                this.INTERSECTED.scale.y = 1;\r\n                this.INTERSECTED.scale.z = 1;\r\n            }\r\n\r\n            this.INTERSECTED = undefined;\r\n\r\n        }\r\n\r\n        this.renderer.render(this.scene, this.camera);\r\n\r\n        this.render();\r\n        this.t += 0.01;\r\n    }\r\n    public render() {\r\n        console.log('render loop');\r\n    }\r\n    public initVis(dataVis: any, colors: number[][], space: COLOR_SPACE ) {\r\n        const geometry = new THREE.SphereGeometry(0.5, 10 , 10);\r\n\r\n        for ( let i = 0; i < dataVis.length; i++ ) {\r\n            const data: any = dataVis[i];\r\n\r\n            const colHex = RGBToHex(colors[i][0], colors[i][1], colors[i][2]);\r\n            const mat = new THREE.MeshLambertMaterial( { color: colHex } );\r\n            mat.emissive = new THREE.Color(colHex);\r\n            const object = new THREE.Mesh( geometry, mat );\r\n\r\n            object.position.x = data[0];\r\n            object.position.y = data[1];\r\n            object.position.z = data[2];\r\n\r\n            // object.rotation.x = Math.random() * 2 * Math.PI;\r\n            // object.rotation.y = Math.random() * 2 * Math.PI;\r\n            // object.rotation.z = Math.random() * 2 * Math.PI;\r\n\r\n            object.scale.x = 1; //dataJson.radius;\r\n            object.scale.y = 1; //dataJson.radius;\r\n            object.scale.z = 1; //dataJson.radius;\r\n\r\n            object['data'] = data;\r\n\r\n            this.scene.add(object);\r\n            this.sceneRayCast.push(object);\r\n        }\r\n\r\n        // switch (space) {\r\n        //     case COLOR_SPACE.LAB:\r\n        //         this.app.threeCore.scene.add(getGridLegend(-0, 0, -100, 100, 50, 10));\r\n        //         break;\r\n        //     case COLOR_SPACE.HSV:\r\n        //         this.app.threeCore.scene.add(getGridLegend(-0, -0, -0, 360, 100, 100));\r\n        //         break;\r\n        //     default:\r\n        //         this.app.threeCore.scene.add(getGridLegend(-0, -0, -0, 255, 255, 255));\r\n        //         break;\r\n        // }\r\n\r\n    }\r\n\r\n}","import { COLOR_SPACE } from './NJSCoreLib/ColorUtility';\r\n\r\nimport { DataFoundationColorData } from './DataProcess/DataFoundationColorData';\r\nimport { DataSkintoneColorData } from './DataProcess/DataSkintoneColorData';\r\nimport { DataSkinColorGroup } from './DataProcess/DataSkinColorGroup';\r\nimport { DataPersonalColorFabricTool } from './DataProcess/DataPersonalColorFabricTool';\r\nimport { DataPCCSColor } from './DataProcess/DataPCCSColor';\r\nimport { DataColor } from './DataProcess/DataColor';\r\n\r\nimport { DownloadMatrix } from '../DownloadMatrix';\r\nimport { ThreeSimple } from './Renderer/ThreeSimple';\r\n\r\nexport class LGProcess {\r\n    div: HTMLElement;\r\n    constructor(div: HTMLElement) {\r\n        this.div = div;\r\n    }\r\n    public async init(){\r\n\r\n        // ........................................................... Task A\r\n        const skintone = new DataSkintoneColorData();\r\n        await skintone.init(COLOR_SPACE.LAB);\r\n        const skintoneData = skintone.getDataJson();\r\n        // console.log(skintoneData);\r\n\r\n        const foundation = new DataFoundationColorData();\r\n        await foundation.init(COLOR_SPACE.LAB);\r\n        const foundationData = foundation.getDataJson();\r\n        // console.log(foundationData);\r\n\r\n       for (let i = 0 ; i < skintoneData.data.length; ++i) {\r\n            // @ts-ignore\r\n            const dataOrigin = skintoneData.data[i].lab;\r\n\r\n            let theDis = Number.MAX_SAFE_INTEGER;\r\n            let theID = -1;\r\n\r\n            for (let j = 0 ; j < foundationData.data.length; ++j) {\r\n                // @ts-ignore\r\n                const dataTarget = foundationData.data[j].lab;\r\n                \r\n                const distance = distanceLab(dataOrigin, dataTarget);\r\n                if (distance < theDis) {\r\n                    theDis = distance;\r\n                    theID = j;\r\n                }\r\n            }\r\n            skintoneData.data[i]['foundationData'] = foundationData.data[theID]['name'];\r\n            // console.log('----------------------- from skintone to foundation');\r\n            // console.log('skintone id:', i, 'target id:', theID, 'cost', theDis);\r\n            // console.log(foundationData.data[theID])\r\n       }\r\n\r\n        // ........................................................... Task B\r\n        const skinColorGroup = new DataSkinColorGroup();\r\n        await skinColorGroup.init(COLOR_SPACE.LAB);\r\n        const skinColorGroupData = skinColorGroup.getDataJson();\r\n        // console.log('skinColorGroupData', skinColorGroupData)\r\n\r\n        for (let i = 0 ; i < skintoneData.data.length; ++i) {\r\n            // @ts-ignore\r\n            const dataOrigin = skintoneData.data[i].lab;\r\n\r\n            let theDis = Number.MAX_SAFE_INTEGER;\r\n            let theID = -1;\r\n\r\n            for (let j = 0 ; j < skinColorGroupData.data.length; ++j) {\r\n                // @ts-ignore\r\n                const dataTarget = skinColorGroupData.data[j].lab;\r\n                \r\n                const distance = distanceLab(dataOrigin, dataTarget);\r\n                if (distance < theDis) {\r\n                    theDis = distance;\r\n                    theID = j;\r\n                }\r\n            }\r\n            skintoneData.data[i]['group'] = skinColorGroupData.data[theID]['group'];\r\n            // console.log('----------------------- from skintone to foundation');\r\n            // console.log('skintone id:', i, 'target id:', theID, 'cost', theDis, 'group', skinColorGroupData.data[theID]['group']);\r\n            // console.log(skinColorGroupData.data[theID])\r\n       }\r\n\r\n\r\n        // ........................................................... Task C\r\n        const PCCSColor = new DataPCCSColor();\r\n        await PCCSColor.init(COLOR_SPACE.LAB);\r\n        const PCCSColorData = PCCSColor.getDataJson();\r\n        //    console.log(PCCSColorData)\r\n\r\n        const personalColorFabricTool = new DataPersonalColorFabricTool();\r\n        await personalColorFabricTool.init(COLOR_SPACE.LAB);\r\n        const personalColorFabricToolData = personalColorFabricTool.getDataJson();\r\n        // console.log(personalCFTData)\r\n\r\n        for (let i = 0 ; i < PCCSColorData.data.length; ++i) {\r\n            // @ts-ignore\r\n            const dataOrigin = PCCSColorData.data[i].lab;\r\n\r\n            let theDis = Number.MAX_SAFE_INTEGER;\r\n            let theID = -1;\r\n\r\n            for (let j = 0 ; j < personalColorFabricToolData.data.length; ++j) {\r\n                // @ts-ignore\r\n                const dataTarget = personalColorFabricToolData.data[j].lab;\r\n                \r\n                const distance = distanceLab(dataOrigin, dataTarget);\r\n                if (distance < theDis) {\r\n                    theDis = distance;\r\n                    theID = j;\r\n                }\r\n            }\r\n            PCCSColorData.data[i]['namePersonalColorFabricTool'] = personalColorFabricToolData.data[theID]['name'];\r\n            // console.log('----------------------- from personalCFT to PCCSColor');\r\n            // // @ts-ignore\r\n            // console.log('PCCSColorData id:', PCCSColorData.data[i].name, 'target id:', theID, 'cost', theDis);\r\n            // console.log(personalCFTData.data[theID])\r\n       }\r\n\r\n        this.div.style.width = '500px';\r\n        let appThreeCanvas = new ThreeSimple(this.div, '!!!!SKINTONE COLOR DATA, RGB Space');\r\n        console.log(appThreeCanvas);\r\n\r\n        const skintoneDataVis: number[][] = [];\r\n        const skintoneDataVisCol: number[][] = [];\r\n        for(let i = 0 ; i < skintoneData.data.length; ++i) {\r\n            const d = skintoneData.data[i];\r\n            console.log(d);\r\n            if (i > 0) {\r\n                // @ts-ignore\r\n                skintoneDataVis.push(d.lab);\r\n                // @ts-ignore\r\n                skintoneDataVisCol.push(d.rgb);\r\n            }\r\n        }\r\n        appThreeCanvas.initVis(skintoneDataVis, skintoneDataVisCol , COLOR_SPACE.LAB);\r\n\r\n        const foundationDataVis: number[][] = [];\r\n        const foundationDataVisCol: number[][] = [];\r\n        for(let i = 0 ; i < foundationData.data.length; ++i) {\r\n            const d = foundationData.data[i];\r\n            console.log(d);\r\n            if (i > 0) {\r\n                // @ts-ignore\r\n                foundationDataVis.push(d.lab);\r\n                 // @ts-ignore\r\n                foundationDataVisCol.push(d.rgb);\r\n            }\r\n        }\r\n        \r\n        //    console.log(data);\r\n        //    appThreeCanvas.initVis(data, data , COLOR_SPACE.LAB);\r\n        appThreeCanvas.initVis(foundationDataVis, foundationDataVisCol , COLOR_SPACE.LAB);\r\n\r\n        const PCCSColorDataVis: number[][] = [];\r\n        const PCCSColorDataVisCol: number[][] = [];\r\n        for (let i = 0 ; i < PCCSColorData.data.length; ++i) {\r\n            const d = PCCSColorData.data[i];\r\n            // console.log(d);\r\n            if (i > 0) {\r\n                // @ts-ignore\r\n                PCCSColorDataVis.push(d.lab);\r\n                // @ts-ignore\r\n                PCCSColorDataVisCol.push([255,0,0]);\r\n            }\r\n        }\r\n        appThreeCanvas.initVis(PCCSColorDataVis, PCCSColorDataVisCol , COLOR_SPACE.LAB);\r\n\r\n\r\n        const PERSONAL_COLOR_FABRIC_TOOL: number[][] = [];\r\n        const PERSONAL_COLOR_FABRIC_TOOLCol: number[][] = [];\r\n        for (let i = 0 ; i < personalColorFabricToolData.data.length; ++i) {\r\n            const d = personalColorFabricToolData.data[i];\r\n            // console.log(d);\r\n            if (i > 0) {\r\n                // @ts-ignore\r\n                PERSONAL_COLOR_FABRIC_TOOL.push(d.lab);\r\n                // @ts-ignore\r\n                PERSONAL_COLOR_FABRIC_TOOLCol.push([0,255,0]);\r\n            }\r\n        }\r\n        appThreeCanvas.initVis(PERSONAL_COLOR_FABRIC_TOOL, PERSONAL_COLOR_FABRIC_TOOLCol , COLOR_SPACE.LAB);\r\n\r\n\r\n        const dataLabVis = [];\r\n        const dataLabVisCol = [];\r\n        const d0 = new DataColor();\r\n        await d0.init(COLOR_SPACE.LAB);\r\n        const dataLab = d0.getDataJson();\r\n        for (let i = 0 ; i < dataLab.data.length; ++i) {\r\n            const d = dataLab.data[i];\r\n            // console.log(d);\r\n            if (i > 0) {\r\n                // @ts-ignore\r\n                dataLabVis.push(d.lab);\r\n                // @ts-ignore\r\n                dataLabVisCol.push(d.rgb);\r\n            }\r\n        }\r\n        \r\n        // appThreeCanvas.initVis(dataLabVis, dataLabVisCol , COLOR_SPACE.LAB);\r\n\r\n        // ..........................................................................\r\n\r\n        // skintoneData\r\n        // foundationData\r\n\r\n\r\n        for (let i = 0 ; i < skintoneData.data.length; ++i) {\r\n            // @ts-ignore\r\n            const dataOrigin = skintoneData.data[i].lab;\r\n\r\n            let theDis = Number.MAX_SAFE_INTEGER;\r\n            let theID = -1;\r\n\r\n            for (let j = 0 ; j < foundationData.data.length; ++j) {\r\n                // @ts-ignore\r\n                const dataTarget = foundationData.data[j].lab;\r\n                \r\n                const distance = Math.abs(Math.abs(dataOrigin[2]) -  Math.abs(dataTarget[2]));\r\n                if (distance < theDis) {\r\n                    theDis = distance;\r\n                    theID = j;\r\n                }\r\n            }\r\n            skintoneData.data[i]['foundationDataByB'] = foundationData.data[theID]['name'];\r\n       }\r\n\r\n       for (let i = 0 ; i < skintoneData.data.length; ++i) {\r\n        // @ts-ignore\r\n        const dataOrigin = skintoneData.data[i].lab;\r\n\r\n        let theDis = Number.MAX_SAFE_INTEGER;\r\n        let theID = -1;\r\n\r\n        for (let j = 0 ; j < foundationData.data.length; ++j) {\r\n            // @ts-ignore\r\n            const dataTarget = foundationData.data[j].lab;\r\n            \r\n            const distance = Math.abs(Math.abs(dataOrigin[1]) -  Math.abs(dataTarget[1]));\r\n            if (distance < theDis) {\r\n                theDis = distance;\r\n                theID = j;\r\n            }\r\n        }\r\n        skintoneData.data[i]['foundationDataByA'] = foundationData.data[theID]['name'];\r\n   }\r\n\r\n        // .......................................................................... Download skintoneData\r\n\r\n        console.log('final-skintoneData', skintoneData);\r\n        console.log('final-PCCSColorData', PCCSColorData);\r\n\r\n        let index = ['name', 'foundationData', 'group', 'foundationDataByA', 'foundationDataByB', 'lab'];\r\n        for(let i in skintoneData.data[0]) {\r\n            console.log(i);\r\n            // index.push(i + ',')\r\n        }\r\n        let dataList: any = [index];\r\n        for (let i = 0 ; i < skintoneData.data.length; ++i) {\r\n            const data: any = [];\r\n            for(let j = 0 ; j < index.length; ++j) {\r\n                const d = skintoneData.data[i][index[j]];\r\n                data.push(d);\r\n            }\r\n            dataList.push(data);\r\n        }\r\n        // console.log(dataList);\r\n\r\n        let download = new DownloadMatrix(dataList, 'skintoneData.csv')\r\n        download.DownloadCSV();\r\n\r\n        // .......................................................................... Download PCCSColorData\r\n\r\n        index = ['name', 'namePersonalColorFabricTool', 'lab' ];\r\n        for(let i in PCCSColorData.data[0]) {\r\n            console.log(i);\r\n            // index.push(i + ',')\r\n        }\r\n        dataList = [index];\r\n        for (let i = 0 ; i < PCCSColorData.data.length; ++i) {\r\n            const data: any = [];\r\n            for(let j = 0 ; j < index.length; ++j) {\r\n                const d = PCCSColorData.data[i][index[j]];\r\n                data.push(d);\r\n            }\r\n            dataList.push(data);\r\n        }\r\n        console.log(dataList);\r\n\r\n        download = new DownloadMatrix(dataList, 'PCCSColorData.csv');\r\n        download.DownloadCSV();\r\n    }\r\n}\r\nexport const distanceLab = (colA: number[], colB: number[]): number => {\r\n    return distance(colA[0], colA[1], colA[2], colB[0], colB[1], colB[2])\r\n};\r\nexport const distance = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): number => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\r\n};\r\nexport const distanceAB = (x0: number, y0: number, x1: number, y1: number): number => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1));\r\n};","\r\n// import { BrowserUtility } from './NJSCoreLib';\r\n\r\nimport { AppThreeCanvas } from './AppThreeCanvas';\r\n// import { CanvasCore, MouseEventData } from './AppCanvas/Canvas';\r\n// import { AppCanvas } from './AppCanvas';\r\n\r\nimport { COLOR_SPACE } from './NJSCoreLib/ColorUtility';\r\n// import { DataColor } from './DataProcess/DataColor';\r\nimport { DataFoundationColorData } from './DataProcess/DataFoundationColorData';\r\n// import { DataFoundationColorData } from './DataProcess/DataFoundationColorData';\r\n// import { DataFoundationColorData1 } from './DataProcess/DataFoundationColorData1';\r\n// import { DataFoundationColorData3 } from './DataProcess/DataFoundationColorData3';\r\n// import { DataPersonalCFT } from './AppThreeCanvas/DataProcess/DataPersonalCFT';\r\n// import { DataSkintoneColorData } from './DataProcess/DataSkintoneColorData';\r\n// import { AppCanvas } from './AppCanvas';\r\n\r\n// import { JSLinearRegression } from './NJSCoreLib/JSLinearRegression';\r\n// import { PolynomialRegression } from './NJSCoreLib/PolynomialRegression';\r\n\r\nimport { LGProcess } from './LGProcess';\r\n\r\nexport class NJSLabSandboxCore {\r\n\r\n    public static init(id: string) {\r\n        new NJSLabSandboxCore(id);\r\n    }\r\n\r\n    // public implementation: Implementation;\r\n    public appThreeCanvas: AppThreeCanvas;\r\n    public id: string;\r\n    public div: HTMLElement;\r\n\r\n    constructor(id: string) {\r\n        this.id = id;\r\n        const div = document.getElementById(id);\r\n        if (div) { \r\n            this.div = div;\r\n            this.div.style.width = '100%';\r\n            this.div.style.height = '400px';\r\n        }\r\n\r\n        this.InitParam();\r\n    }\r\n    public async InitParam() {\r\n        const div0 = document.createElement('div');\r\n        div0.style.width = '100%';\r\n        div0.style.height = '100px';\r\n        this.div.append(div0);\r\n\r\n\r\n        // const div1 = document.createElement('div');\r\n        // this.appThreeCanvas = new AppThreeCanvas(div1);\r\n        // this.div.append(div1);\r\n\r\n        let d0;\r\n        // const param = BrowserUtility.getAllUrlParams();\r\n        // console.log(param);\r\n\r\n        let data = {};\r\n\r\n        // // ..............................\r\n        d0 = new DataFoundationColorData();\r\n        await d0.init(COLOR_SPACE.LAB);\r\n        this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'FOUNDATION COLOR DATA, LAB Space', COLOR_SPACE.LAB);\r\n        data['FoundationColorData'] = d0.getDataJson();\r\n\r\n        // d0 = new DataFoundationColorData1();\r\n        // await d0.init(COLOR_SPACE.LAB);\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'FOUNDATION COLOR DATA 1, LAB Space', COLOR_SPACE.LAB);\r\n        // data['FoundationColorData1'] = d0.getDataJson();\r\n\r\n        // d0 = new DataFoundationColorData3();\r\n        // await d0.init(COLOR_SPACE.LAB);\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'FOUNDATION COLOR DATA 3, LAB Space', COLOR_SPACE.LAB);\r\n        // // new AppCanvas(div0, d0.getDataJson(), 'FOUNDATION COLOR DATA, RGB Space', COLOR_SPACE.LAB);\r\n        // data['FoundationColorData3'] = d0.getDataJson();\r\n\r\n\r\n        /*\r\n        d0 = new DataSkintoneColorData();\r\n        await d0.init(COLOR_SPACE.LAB);\r\n\r\n\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'SKINTONE COLOR DATA, RGB Space', COLOR_SPACE.LAB);\r\n\r\n        const d = d0.getDataJson();\r\n        data['DataSkintoneColorData'] = d;\r\n\r\n        console.log(d);\r\n\r\n        const dataTest = [];\r\n        const xT: number[] = [];\r\n        const yT: number[] = [];\r\n        const domainX: number[] = [ Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER ];\r\n        const domainY: number[] = [ Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER ];\r\n        for(let i = 0 ; i < d.data.length; ++i) {\r\n            // @ts-ignore\r\n            const xVal = d.data[i].lab[1];\r\n            // @ts-ignore\r\n            const yVal = d.data[i].lab[2];\r\n\r\n            if(xVal < domainX[0]) { domainX[0] = xVal; }\r\n            if(xVal > domainX[1]) { domainX[1] = xVal; }\r\n\r\n            if(yVal < domainY[0]) { domainY[0] = yVal; }\r\n            if(yVal > domainY[1]) { domainY[1] = yVal; }\r\n  \r\n            xT.push(xVal);\r\n            // @ts-ignore\r\n            yT.push(yVal);\r\n\r\n            dataTest.push([xVal, yVal]);\r\n        }\r\n\r\n        console.log('ddddddddddddd', domainX, domainY);\r\n\r\n        const xTNormal: number[] = [];\r\n        const yTNormal: number[] = [];\r\n        for(let i = 0 ; i < xT.length; ++i) {\r\n            xTNormal.push(remap(xT[i], domainX[0], domainX[1], -1.0, 1.0) );\r\n            yTNormal.push(remap(yT[i], domainY[0], domainY[1], -1.0, 1.0) );\r\n        }\r\n        console.log('xTNormal, yTNormal', xTNormal, yTNormal);\r\n        */\r\n\r\n\r\n        // let xProjection = -10\r\n        // let yProjection = 100\r\n\r\n        // const lgJS = new JSLinearRegression();\r\n        // lgJS.fit(xT, yT);\r\n        // let resultJS = lgJS.predict([xProjection, yProjection]);\r\n        // console.log(lgJS);\r\n        // console.log(resultJS);\r\n\r\n        // let dataTest = [\r\n        //     [9, 17.9],\r\n        //     [8, 17.5],\r\n        //     [7.5, 17],\r\n        //     [6.75, 16],\r\n        //     [8, 13.3],\r\n        //     [8.5, 15.2]\r\n        // ]\r\n\r\n\r\n        // let coolNum = 0;\r\n        // let warmNum = 0;\r\n\r\n        // console.log('=================================');\r\n        // for(let i = 0 ; i < dataTest.length; ++i) {\r\n        //     let theData = dataTest[i];\r\n        //     let pred = lgJS.predict([theData[0]]);\r\n        //     console.log('id:', i, 'pred', pred);\r\n        //     let diff =  theData[1] - pred[0];\r\n        //     if(theData[1] < pred[0]) {\r\n        //         coolNum++;\r\n        //         console.log('cool',  diff);\r\n        //     } else {\r\n        //         warmNum++\r\n        //         console.log('warm', diff );\r\n        //     }\r\n        // }\r\n        // console.log(coolNum,warmNum);\r\n\r\n\r\n        // const lgJSNormal= new JSLinearRegression();\r\n        // lgJS.fit(xTNormal, yTNormal);\r\n        // let resultJSNormal = lgJSNormal.predict([-1, 1]);\r\n\r\n        // const polynomialRegression = new PolynomialRegression(1);\r\n        // // for(let i = 0 ; i < 3000; ++i) {\r\n        //     polynomialRegression.train(xTNormal, yTNormal);\r\n        // // }\r\n\r\n\r\n\r\n        \r\n    //    const canvas = new CanvasCore(div0);\r\n    // //    canvas.scale = 7;\r\n    //    canvas.MouseDownPost = (m: MouseEventData) =>{\r\n    //        console.log(m);\r\n    //        xT.push(m.xs);\r\n    //        yT.push(m.ys);\r\n    //        lgJS.fit(xT, yT);\r\n    //        resultJS = lgJS.predict([xProjection, yProjection]);\r\n    //     //    console.log(xTNormal);\r\n    //    }\r\n    //    canvas.RenderBinder =  async (ctx: CanvasRenderingContext2D) => {\r\n    //         // console.log('dd');\r\n\r\n    //         for (let i = -10; i < 10; ++i) {\r\n    //             for (let j = -10; j < 10; ++j) {\r\n    //                 ctx.beginPath();\r\n    //                 ctx.fillStyle = 'rgba(255, 0, 0, 0.9)';\r\n    //                 ctx.arc(i * 1, j * 1, 0.02, 0, Math.PI * 2);\r\n    //                 ctx.closePath();\r\n    //                 ctx.fill();\r\n    //             }\r\n    //         }\r\n\r\n    //         for(let i = 0 ; i < xT.length; ++i) {\r\n    //             ctx.beginPath();\r\n    //             ctx.fillStyle = 'rgba(255, 0, 0, 0.9)';\r\n    //             ctx.arc(xT[i], yT[i], 0.2, 0, Math.PI * 2);\r\n    //             ctx.closePath();\r\n    //             ctx.fill();\r\n    //         }\r\n    //         ctx.beginPath();\r\n    //         ctx.moveTo(xProjection, resultJS[0]);\r\n    //         ctx.lineTo(yProjection, resultJS[1]);\r\n    //         ctx.lineWidth = 0.1;\r\n    //         ctx.strokeStyle = '#0000ff';\r\n    //         ctx.stroke();\r\n\r\n\r\n    //         // ctx.beginPath();\r\n    //         // ctx.fillStyle = 'rgba(255, 0, 0, 0.9)';\r\n    //         // ctx.arc(canvas.mPre.x, canvas.mPre.y, 3.5, 0, Math.PI * 2);\r\n    //         // ctx.closePath();\r\n    //         // ctx.fill();\r\n\r\n    //         // for(let i = 0 ; i < xTNormal.length; ++i) {\r\n    //         //     ctx.beginPath();\r\n    //         //     ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\r\n    //         //     ctx.arc(xTNormal[i], yTNormal[i], 0.12, 0, Math.PI * 2);\r\n    //         //     ctx.closePath();\r\n    //         //     ctx.fill();\r\n    //         // }\r\n    //         // ctx.beginPath();\r\n    //         // ctx.moveTo(-1, resultJSNormal[0]);\r\n    //         // ctx.lineTo(1, resultJSNormal[1]);\r\n    //         // ctx.lineWidth = 0.01;\r\n    //         // ctx.strokeStyle = '#00ff00';\r\n    //         // ctx.stroke();\r\n\r\n    //         // console.log(resultJSNormal)\r\n\r\n    //         // polynomialRegression.train(xT, yT);\r\n    //         // const dddd = await polynomialRegression.predict([-1, 1]);\r\n    //         // ctx.beginPath();\r\n    //         // ctx.moveTo(-1, dddd[0]);\r\n    //         // ctx.lineTo(1, dddd[1]);\r\n    //         // ctx.lineWidth = 0.2;\r\n    //         // ctx.strokeStyle = '#ff0000';\r\n    //         // ctx.stroke();\r\n    //         // console.log(dddd);\r\n    //    }\r\n    //    canvas.LoopInit();\r\n    //    canvas.SetLevel6();\r\n\r\n        // const pg = new AppCanvas(div0, d0.getDataJson(), 'projection');\r\n        // pg.threeCore.scale = 10;\r\n        // pg.render = async (ctx: CanvasRenderingContext2D) => {\r\n\r\n        //     ctx.beginPath();\r\n        //     ctx.moveTo(0, result[0]);\r\n        //     ctx.lineTo(100, result[1]);\r\n        //     ctx.lineWidth = 0.1;\r\n        //     ctx.strokeStyle = '#0000ff';\r\n        //     ctx.stroke();\r\n\r\n        // }\r\n        // console.log(data);\r\n\r\n        // d0 = new DataFoundationColorData();\r\n        // await d0.init(COLOR_SPACE.LAB);\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'FOUNDATION COLOR DATA, LAB Space');\r\n\r\n        // // ..............................\r\n\r\n        // d0 = new DataPersonalCFT();\r\n        // await d0.init();\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'PERSONAL COLOR FABRIC TOOL, RGB Space');\r\n\r\n        // d0 = new DataPersonalCFT();\r\n        // await d0.init(COLOR_SPACE.LAB);\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'PERSONAL COLOR FABRIC TOOL, LAB Space');\r\n\r\n\r\n        // // ..............................\r\n\r\n        // d0 = new DataColor();\r\n        // await d0.init();\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'Color, RGB Space');\r\n\r\n        // d0 = new DataColor();\r\n        // await d0.init(COLOR_SPACE.LAB);\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'Color, LAB Space', COLOR_SPACE.LAB);\r\n\r\n        // d0 = new DataColor();\r\n        // await d0.init(COLOR_SPACE.HSV);\r\n        // this.appThreeCanvas = new AppThreeCanvas(div0, d0.getDataJson(), 'Color, HSV Space', COLOR_SPACE.HSV);\r\n\r\n        const lgProcess = new LGProcess(this.div);\r\n        lgProcess.init();\r\n        // console.log(lgProcess);\r\n    }\r\n\r\n}\r\n\r\nexport const remap = (CValue: number, OldMin: number, OldMax: number, NewMin: number, NewMax: number) => {\r\n    return (((CValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin;\r\n};\r\nexport const distance = (x0: number, y0: number, z0: number, x1: number, y1: number, z1: number): number => {\r\n    return Math.sqrt((x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) + (z0 - z1) * (z0 - z1));\r\n};","\r\nimport { NJSLabSandboxCore } from './NJSLabSandboxCore';\r\n// import { NHandCam } from './ML/NHandCam';\r\nimport { NFaceCam } from './ML/NFaceCam';\r\nexport class App {\r\n    host: HTMLElement;\r\n    constructor(id: string) {\r\n        NJSLabSandboxCore.init(id);\r\n        // new NFaceCam(id);\r\n    }\r\n}\r\n\r\n","import {  App } from './lib/App';\r\n\r\nexport class Solution {\r\n    public divHost: HTMLElement;\r\n\r\n    constructor(id: string) {\r\n        this.divHost = document.getElementById(id)\r\n\r\n        // Center align\r\n        this.divHost.style.display = 'flex';\r\n        this.divHost.style.alignItems = 'center';\r\n        const div = document.createElement('div');\r\n        div.style.marginLeft = 'auto';\r\n        div.style.marginRight = 'auto';\r\n        div.style.backgroundColor = '#555';\r\n        div.style.margin = '50px';\r\n        div.style.background = 'rgba(0,0,0,0)';\r\n        this.divHost.appendChild(div);\r\n\r\n\r\n        new App(id);\r\n        console.log('color ai !!')\r\n    }\r\n    public destroy() {\r\n        // this.renderer.destroy();\r\n        while (this.divHost.lastElementChild) {\r\n            this.divHost.removeChild(this.divHost.lastElementChild);\r\n        }\r\n    }\r\n}\r\n"],"names":["COLOR_SPACE","lab2rgb","L","A","B","r","g","y","x","z","b","Math","pow","max","min","RGBToHex","round","map","hex","toString","length","join","BROWSER_TYPE","getGridHelper","size","divisions","THREE","getGridLegend","xMin","yMin","zMin","xMax","yMax","zMax","material","color","linewidth","scale","dashSize","gapSize","points","xInterval","yInterval","zInterval","i","offsetX","offsetY","offsetZ","push","geometryLine","setFromPoints","ThreeCore","constructor","app","div","title","canvas","host","ctx","t","renderer","camera","scene","sceneRayCast","controls","raycaster","active","mouse","INTERSECTED","undefined","dataJson","this","divTop","document","createElement","append","style","position","divTitle","textContent","divDownload","onclick","d","name","data","s","out","charCodeAt","Uint8Array","encode","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","setAttribute","event","createEvent","initMouseEvent","window","dispatchEvent","downloadJSON","InitCanvas","background","castShadow","clientWidth","clientHeight","set","antialias","alpha","setPixelRatio","domElement","id","setSize","appendChild","OrbitControls","enablePan","enableDamping","enableZoom","rotateSpeed","zoomSpeed","update","Init","EventBind","Loop","onmousemove","e","MouseMove","onmousedown","MouseDown","onmouseup","MouseUp","console","log","ss","split","divPanel","innerHTML","requestAnimationFrame","setFromCamera","intersects","intersectObjects","object","render","Render","initVis","space","geometry","colHex","rgb","mat","emissive","xyz","radius","threeCore","add","LAB","HSV","AppThreeCanvas","divHost","RGB","width","height","backgroundColor","margin","float","init","async","DataFoundationColorData","path","rawData","meta","location","fetch","mode","text","texts","lines","theData","row","j","isNumber","l","a","lab","raw","getDataJson","DataSkintoneColorData","DataSkinColorGroup","group","DataPersonalColorFabricTool","DataPCCSColor","DataColor","json","hsv","labColor","DownloadMatrix","fileName","DownloadJSON","dic","forEach","v","k","m","EncodeFromJSONstringify","DownloadCSV","csvFile","Dummy","ThreeSimple","initCanvas","eventBind","loop","mouseMove","mouseDown","mouseUp","setHex","currentHex","getHex","dataVis","colors","LGProcess","skintone","skintoneData","foundation","foundationData","dataOrigin","theDis","Number","MAX_SAFE_INTEGER","theID","dataTarget","distance","distanceLab","skinColorGroup","skinColorGroupData","PCCSColor","PCCSColorData","personalColorFabricTool","personalColorFabricToolData","appThreeCanvas","skintoneDataVis","skintoneDataVisCol","foundationDataVis","foundationDataVisCol","PCCSColorDataVis","PCCSColorDataVisCol","PERSONAL_COLOR_FABRIC_TOOL","PERSONAL_COLOR_FABRIC_TOOLCol","dataLabVis","dataLabVisCol","d0","dataLab","abs","index","dataList","download","colA","colB","x0","y0","z0","x1","y1","z1","sqrt","NJSLabSandboxCore","getElementById","InitParam","div0","App","Solution","display","alignItems","marginLeft","marginRight","destroy","lastElementChild","removeChild"],"sourceRoot":""}
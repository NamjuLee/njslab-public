{"version":3,"file":"static/js/94967.c07c8cb7.chunk.js","mappings":"0GAAO,IAAKA,E,iDAUX,SAVWA,GAAAA,EAAI,gCAAJA,EAAAA,EAAI,yCAAJA,EAAI,0BAAJA,EAAAA,EAAI,qCAAJA,EAAI,oBAAJA,EAAAA,EAAI,6BAAJA,EAAAA,EAAI,mCAAJA,EAAI,0BAUf,CAVWA,IAAAA,EAAI,KAYT,MAAMC,EAITC,YAAYC,EAA4BC,GAAwB,KAHhEC,cAAQ,OACRC,YAAM,OACNC,QAAE,EAEEC,KAAKH,SAAWF,EAAGM,kBAAkBL,EAASJ,EAAKU,kBACnDF,KAAKF,OAASH,EAAGM,kBAAkBL,EAASJ,EAAKU,kBACjDF,KAAKD,GAAKJ,EAAGM,kBAAkBL,EAASJ,EAAKW,aACjD,E,qFClBG,IAAKC,EAAAA,IAAAA,EAAS,IAId,MAAMC,EAcTX,cAAe,KAbfY,UAAI,OAEJC,SAAG,OACHC,iBAAW,OACXC,gBAAU,OACVC,WAAK,OACLC,cAAQ,OAERC,wBAAkB,OAClBC,iBAAW,OACXC,gBAAU,OACVC,cAAQ,CAIR,EAGG,MAAMC,EAETC,qBAAqBtB,EAA4BW,EAAcY,EAAmBC,EAAmBC,EAAoBC,GACrH,IAAIC,EAAM,IAAIjB,EAuDd,OAtDAiB,EAAIhB,KAAOA,EACXgB,EAAIP,SAAWpB,EAAG4B,UAElBD,EAAIf,IAAMZ,EAAG6B,oBACb7B,EAAG8B,gBAAgBH,EAAIf,UAIPmB,IAAZR,GAAoC,MAAXA,IACzBI,EAAId,YAAcb,EAAGgC,eACrBL,EAAIV,mBAAqB,EACzBU,EAAIT,YAAcK,EAAQU,OAASN,EAAIV,mBAEvCjB,EAAGkC,WAAWlC,EAAGmC,aAAcR,EAAId,aACnCb,EAAGoC,WAAWpC,EAAGmC,aAAc,IAAIE,aAAad,GAAUvB,EAAGsC,aAC7DtC,EAAGuC,wBAAwB1C,EAAAA,KAAAA,mBAC3BG,EAAGwC,oBAAoB3C,EAAAA,KAAAA,kBAAwB,EAAGG,EAAGyC,OAAO,EAAO,EAAG,SAK1DV,IAAZN,GAAoC,MAAXA,IACzBE,EAAIb,WAAad,EAAGgC,eACpBhC,EAAGkC,WAAWlC,EAAGmC,aAAcR,EAAIb,YACnCd,EAAGoC,WAAWpC,EAAGmC,aAAc,IAAIE,aAAaZ,GAAUzB,EAAGsC,aAC7DtC,EAAGuC,wBAAwB1C,EAAAA,KAAAA,iBAC3BG,EAAGwC,oBAAoB3C,EAAAA,KAAAA,gBAAsB,EAAGG,EAAGyC,OAAO,EAAO,EAAG,SAK1DV,IAAVL,GAAgC,MAATA,IACvBC,EAAIZ,MAAQf,EAAGgC,eACfhC,EAAGkC,WAAWlC,EAAGmC,aAAcR,EAAIZ,OACnCf,EAAGoC,WAAWpC,EAAGmC,aAAc,IAAIE,aAAaX,GAAQ1B,EAAGsC,aAC3DtC,EAAGuC,wBAAwB1C,EAAAA,KAAAA,aAC3BG,EAAGwC,oBAAoB3C,EAAAA,KAAAA,YAAkB,EAAGG,EAAGyC,OAAO,EAAO,EAAG,SAKrDV,IAAXP,GAAkC,MAAVA,IACxBG,EAAIX,SAAWhB,EAAGgC,eAClBL,EAAIR,WAAaK,EAAOS,OACxBjC,EAAGkC,WAAWlC,EAAG0C,qBAAsBf,EAAIX,UAC3ChB,EAAGoC,WAAWpC,EAAG0C,qBAAsB,IAAIC,YAAYnB,GAASxB,EAAGsC,aACnEtC,EAAGkC,WAAWlC,EAAG0C,qBAAsB,OAI3C1C,EAAG8B,gBAAgB,MACnB9B,EAAGkC,WAAWlC,EAAGmC,aAAc,MAGxBR,CACX,CACA5B,cACI,E","sources":["njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/AttribLocations.ts","njslab/LabStarter/AppNGL3d/NGL3dApp_04/WebGL/VAO.ts"],"sourcesContent":["export enum ATTR {\r\n    ATTR_POSITION_NAME = 'a_position',\r\n    ATTR_POSITION_LOC = 0,\r\n    ATTR_NORMAL_NAME = 'a_norm',\r\n    ATTR_NORMAL_LOC = 1,\r\n    ATTR_UV_NAME = 'a_uv',\r\n    ATTR_UV_LOC = 2,\r\n\r\n    ATTR_COLOR_LOC = 4,\r\n    ATTR_COLOR_NAME = 'a_color',\r\n}\r\n\r\nexport class AttribLocations {\r\n    position: number;\r\n    normal: number;\r\n    uv: number;\r\n    constructor(gl: WebGL2RenderingContext, program: WebGLProgram) {\r\n        this.position = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.normal = gl.getAttribLocation(program, ATTR.ATTR_NORMAL_NAME);\r\n        this.uv = gl.getAttribLocation(program, ATTR.ATTR_UV_NAME);\r\n    }\r\n}","import { ATTR } from './AttribLocations';\r\n\r\nexport enum DRAW_MODE {\r\n    //\r\n}\r\n\r\nexport class RTN {\r\n    name: string;\r\n\r\n    vao: WebGLVertexArrayObject | null;\r\n    bufVertices: WebGLBuffer | null;\r\n    bufNormals: WebGLBuffer | null;\r\n    bufUV: WebGLBuffer | null;\r\n    bufIndex: WebGLBuffer | null;\r\n\r\n    vertexComponentLen: number;\r\n    vertexCount: number;\r\n    indexCount: number;\r\n    drawMode: number;\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n}\r\n\r\nexport class VAO {\r\n\r\n    static createMeshVAO(gl: WebGL2RenderingContext, name: string, aryVert: number[], aryInd?: number[], aryNorm?: number[], aryUV?: number[]) {\r\n        let rtn = new RTN();\r\n        rtn.name = name;\r\n        rtn.drawMode = gl.TRIANGLES;\r\n\r\n        rtn.vao = gl.createVertexArray();\r\n        gl.bindVertexArray(rtn.vao);\t//  Bind it so all the calls to vertexAttribPointer/enableVertexAttribArray is saved to the vao.\r\n\r\n        // .......................................................\r\n        // Set up vertices\r\n        if (aryVert !== undefined && aryVert != null) {\r\n            rtn.bufVertices = gl.createBuffer();\t\t\t\t\t\t\t\t\t\t\t\t\t// Create buffer...\r\n            rtn.vertexComponentLen = 3;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// How many floats make up a vertex\r\n            rtn.vertexCount = aryVert.length / rtn.vertexComponentLen;\t\t\t\t\t\t\t\t// How many vertices in the array\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufVertices);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryVert), gl.STATIC_DRAW);\t\t// then push array into it.\r\n            gl.enableVertexAttribArray(ATTR.ATTR_POSITION_LOC);\t\t\t\t\t\t\t\t\t\t// Enable Attribute location\r\n            gl.vertexAttribPointer(ATTR.ATTR_POSITION_LOC, 3, gl.FLOAT, false, 0, 0);\t\t\t\t\t\t// Put buffer at location of the vao\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup normals\r\n        if (aryNorm !== undefined && aryNorm != null) {\r\n            rtn.bufNormals = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufNormals);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryNorm), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_NORMAL_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_NORMAL_LOC, 3, gl.FLOAT, false, 0, 0);\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup UV\r\n        if (aryUV !== undefined && aryUV != null) {\r\n            rtn.bufUV = gl.createBuffer();\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, rtn.bufUV);\r\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(aryUV), gl.STATIC_DRAW);\r\n            gl.enableVertexAttribArray(ATTR.ATTR_UV_LOC);\r\n            gl.vertexAttribPointer(ATTR.ATTR_UV_LOC, 2, gl.FLOAT, false, 0, 0);\t// UV only has two floats per component\r\n        }\r\n\r\n        // .......................................................\r\n        // Setup Index.\r\n        if (aryInd !== undefined && aryInd != null) {\r\n            rtn.bufIndex = gl.createBuffer();\r\n            rtn.indexCount = aryInd.length;\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, rtn.bufIndex);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(aryInd), gl.STATIC_DRAW);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n\r\n        // Clean up\r\n        gl.bindVertexArray(null);\t\t\t\t\t// Unbind the VAO, very Important. always unbind when your done using one.\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\t// Unbind any buffers that might be set\r\n\r\n        // this.mMeshCache[name] = rtn;\r\n        return rtn;\r\n    }\r\n    constructor() {\r\n        //\r\n    }\r\n}"],"names":["ATTR","AttribLocations","constructor","gl","program","position","normal","uv","this","getAttribLocation","ATTR_NORMAL_NAME","ATTR_UV_NAME","DRAW_MODE","RTN","name","vao","bufVertices","bufNormals","bufUV","bufIndex","vertexComponentLen","vertexCount","indexCount","drawMode","VAO","static","aryVert","aryInd","aryNorm","aryUV","rtn","TRIANGLES","createVertexArray","bindVertexArray","undefined","createBuffer","length","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","ELEMENT_ARRAY_BUFFER","Uint16Array"],"sourceRoot":""}
{"version":3,"file":"static/js/9559.5215b8cf.chunk.js","mappings":"sKAuBO,MAAMA,EAkBXC,YAAYC,GAAa,KAjBlBC,SAAG,OACHC,cAAQ,OACRC,EAAc,CAAC,EAAG,GAAG,KACrBC,EAAY,EAAI,KAChBC,IAAe,GAAG,KAClBC,OAAWC,EAAU,KAErBC,aAAO,OACPC,wBAAkB,OAClBC,YAAc,CAAC,IAAK,EAAG,GAAG,KAC1BC,WAAa,CAAC,EAAG,GAAI,GAAG,KACxBC,WAAa,GAAG,KAEhBC,UAAW,EAAM,KAExBC,KAAY,GAGVC,KAAKd,IAAMe,SAASC,eAAejB,GACnCe,KAAKb,SAAW,IAAIgB,EAAAA,GAAUlB,GAC9Be,KAAKb,SAASiB,UAAW,EACzBJ,KAAKb,SAASkB,cAAgB,IAAML,KAAKM,SACzCN,KAAKb,SAASoB,aAAgBC,GAAMR,KAAKS,WAAWD,GAEpDR,KAAKU,UACLV,KAAKW,MACP,CACOD,UACL,MAAMxB,EAAMe,SAASW,cAAc,OACnC1B,EAAI2B,MAAMC,SAAW,WACrB5B,EAAI2B,MAAME,OAAS,OACnBf,KAAKd,IAAI8B,YAAY9B,GAErBc,KAAKb,SAASA,SAAS8B,KAAKC,MAAMC,EAAI,GACtCnB,KAAKb,SAASA,SAAS8B,KAAKC,MAAME,EAAI,GACtCpB,KAAKb,SAASA,SAAS8B,KAAKC,MAAMG,EAAI,GACtCrB,KAAKb,SAASA,SAASmC,OAAOC,IAAM,IAEpCvB,KAAKb,SAASA,SAASmC,OAAOR,SAASU,IAAI,KAAM,IAAK,KACtDxB,KAAKb,SAASA,SAASsC,SAASC,OAAOF,IAAI,MAAW,MAAW,OAEjE,MAAMG,EAAW,IAAIC,EAAAA,IAAkB,IAAK,IAAK,KAC3CC,EAAY,IAAID,EAAAA,IAAoBD,GACpCG,EAAO,IAAIF,EAAAA,IAAmBC,GACpCC,EAAKhB,SAASU,IAAI,MAAW,MAAW,OAExCM,EAAKC,SAASC,MAAMC,EAAI,GACxBH,EAAKC,SAASC,MAAME,EAAI,GACxBJ,EAAKC,SAASC,MAAMG,EAAI,GAExBL,EAAKC,SAASK,WAAY,EAE1BN,EAAKC,SAASM,QAAU,IAExBP,EAAKC,SAASO,aAAc,EAC5BtC,KAAKb,SAASA,SAASoD,MAAMC,IAAIV,EAInC,CACOW,QACLzC,KAAKb,SAASsD,QACdzC,KAAKX,EAAI,EACTW,KAAKV,IAAM,GACXU,KAAKT,OAAIC,CACX,CAEOkD,eAEL,IAAK,IAAIC,EAAI,EAAGA,EAAI3C,KAAKD,KAAK6C,SAAUD,EAAG,CACzC,MAAME,EAAM7C,KAAKD,KAAK4C,GAGtB,IAAIG,EAAW,CAAC,EAAG,EAAG,GAYP,IAAXD,EAAI,GACNC,EAAW,CAAC,IAAK,EAAG,GACA,IAAXD,EAAI,GACbC,EAAW,CAAC,EAAG,IAAK,GACA,IAAXD,EAAI,GACbC,EAAW,CAAC,EAAG,EAAG,KACE,IAAXD,EAAI,KACbC,EAAW,CAAC,EAAG,IAAK,MAGtB,MAAMvD,EAAI,IAAIwD,EACZF,EAAI,GACJA,EAAI,GACJA,EAAI,GACJC,EAAS,GACTA,EAAS,GACTA,EAAS,IAGX9C,KAAKV,IAAI0D,KAAKzD,EAChB,CAEF,CAEO0D,cACLjD,KAAKb,SAASsD,QACdzC,KAAKW,MAEP,CACOA,QACLuC,EAAAA,EAAAA,IACEC,qDAIAC,MAAMC,IAMN,MAAMvB,EAAOuB,EAAEC,MAAM,eACrB,IAAK,IAAIX,EAAI,EAAGA,EAAIb,EAAKc,SAAUD,EAAG,CACpC,MAAMY,EAASzB,EAAKa,GAAGW,MAAM,KAevBvD,EAAO,EANFwD,EAAO,IACPA,EAAO,IACPA,EAAO,IACPA,EAAO,IACCA,EAAO,IAM1BvD,KAAKD,KAAKiD,KAAKjD,EACjB,CAEAC,KAAK0C,cAAc,GAEvB,CACOpC,SACLN,KAAKX,GAAK,IACZ,CACOmE,UAAUhD,GAEf,CAEKiD,YAAYC,GAKjB,CAEKjD,WAAWD,GAChB,CAEKmD,UACL,IACE,UACenE,IAAbQ,KAAKd,UACyBM,IAA9BQ,KAAKd,IAAI0E,kBAET5D,KAAKd,IAAI2E,YAAY7D,KAAKd,IAAI0E,iBAEjB,CAAf,MAAOE,GAAQ,CACjB9D,KAAKb,SAASwE,SAChB,EAGF,MAAMZ,EAMJ/D,YAAYmC,EAAGC,EAAGC,GAAyB,IAAtBY,EAAC,uDAAG,EAAGC,EAAC,uDAAG,EAAGC,EAAC,uDAAG,EAAC,KALjC4B,SAAG,OACH9B,EAAY,EAAE,KAEd+B,QAAE,EAGPhE,KAAK+D,IAAM,IAAIE,EAAAA,EAAQ9C,EAAGC,EAAGC,GAE7BrB,KAAKgE,GAAK,IAAIE,EAAAA,GAAOlE,KAAK+D,IAAK/D,KAAKiC,GACpCjC,KAAKgE,GAAGG,QAAW3D,GAAMR,KAAKmE,QAAQ3D,GAItCR,KAAKgE,GAAGjC,SAASC,MAAMR,IAAI,IAAII,EAAAA,IAAYK,EAAI,IAAKC,EAAI,IAAKC,EAAI,KACnE,CACOgC,QAAQ3D,GACb4D,QAAQC,IAAI,cAAc7D,EAC5B,E,+EC9NK,MAAM8D,EAUTtF,YAAYC,GAAa,KATlBsF,YAAM,OACNC,aAAO,OACPd,SAAG,OACHrE,EAAY,EAAI,KAChBiC,YAAM,OACNiB,WAAK,OACLpD,cAAQ,OACRsC,cAAQ,OACPgD,kBAAY,OAsDZC,KAAO,KACX1E,KAAKyE,aAAeE,sBAAsB3E,KAAK0E,MAC/C1E,KAAKyB,SAASmD,SACd5E,KAAK4E,OAAO5E,KAAKuC,OACjBvC,KAAKb,SAASmB,OAAON,KAAKuC,MAAOvC,KAAKsB,QACtCtB,KAAKX,GAAK,GAAI,EAzDdW,KAAKwE,QAAUvE,SAASC,eAAejB,GACvCe,KAAK6E,YACT,CACQA,aACJ7E,KAAKuC,MAAQ,IAAIX,EAAAA,IACjB5B,KAAK8E,MAAM,MACX9E,KAAKuC,MAAMwC,YAAa,EAExBnD,EAAAA,IAAAA,WAAAA,IAA8B,EAAG,EAAG,GAEpC5B,KAAKb,SAAW,IAAIyC,EAAAA,IAAoB,CAAEoD,WAAW,EAAMC,OAAO,IAClEjF,KAAKb,SAAS+F,cAAclF,KAAKwE,QAAQW,YAAcnF,KAAKwE,QAAQY,cACpEpF,KAAKb,SAASkG,WAAWpG,GAAK,QAC9Be,KAAKb,SAASkG,WAAWxE,MAAMC,SAAW,WAC1Cd,KAAKb,SAASmG,UAAUC,SAAU,EAClCvF,KAAKb,SAASqG,QAAQxF,KAAKwE,QAAQW,YAAanF,KAAKwE,QAAQY,cAC7DpF,KAAKwE,QAAQxD,YAAYhB,KAAKb,SAASkG,YAEvCrF,KAAKsB,OAAS,IAAIM,EAAAA,IAAwB,GAAI5B,KAAKwE,QAAQW,YAAcnF,KAAKwE,QAAQY,aAAc,EAAG,KACvGpF,KAAKyB,SAAW,IAAIgE,EAAAA,cAAczF,KAAKsB,OAAQtB,KAAKb,SAASkG,YAC7DrF,KAAKsB,OAAOR,SAASU,IAAI,IAAK,GAAI,IAClCxB,KAAKyB,SAASmD,SAEd5E,KAAKuE,OAASvE,KAAKb,SAASkG,WAE5BrF,KAAKW,MACT,CACOmE,MAAMY,GAEL1F,KAAKuC,MAAMoD,WADC,OAAZD,EACwB,IAAI9D,EAAAA,IAAY8D,GAEhB,IAEhC,CACQ/E,OACJX,KAAK4F,WAET,CACQA,YACJ5F,KAAKb,SAASkG,WAAWQ,YAAerF,GAAkBR,KAAK8F,aAAatF,GAC5ER,KAAKb,SAASkG,WAAWU,UAAavF,GAAkBR,KAAKgG,WAAWxF,GACxER,KAAKb,SAASkG,WAAWY,YAAezF,GAAkBR,KAAKkG,aAAa1F,GAC5ER,KAAKb,SAASkG,WAAWc,iBAAiB,SAAU3F,GAAkBR,KAAKoG,cAAc5F,KAEzF6F,OAAOF,iBAAiB,UAAU,IAAMnG,KAAKsG,kBAEjD,CACQA,iBACJtG,KAAKsB,OAAOiF,OAASvG,KAAKwE,QAAQW,YAAcnF,KAAKwE,QAAQY,aAC7DpF,KAAKsB,OAAOkF,yBACZxG,KAAKb,SAASqG,QAAQxF,KAAKwE,QAAQW,YAAanF,KAAKwE,QAAQY,aACjE,CAWOqB,QACHzG,KAAK0E,MACT,CACOoB,aAAatF,GAChB,CAEGwF,WAAWxF,GACd,CAEG4F,cAAc5F,GACjB,CAEGkG,eAAelG,GAClB,CAEG0F,aAAa1F,GAChB,CAEGmG,aAAanG,GAChB,CAEGoE,OAAOrC,GACV,CAEGoB,UAIH,IAHA0C,OAAOO,oBAAoB,UAAU,IAAM5G,KAAKsG,mBAChDO,qBAAqB7G,KAAKyE,cAC1BzE,KAAKyE,kBAAejF,EACbQ,KAAKwE,QAAQsC,WAChB9G,KAAKwE,QAAQX,YAAY7D,KAAKwE,QAAQsC,UAE9C,ECvGG,MAAMC,UAAgCzC,EAezCtF,YAAYgI,GACRC,MAD4C,uDAAG,QACtC,KAfND,mBAAa,OACbE,gBAAU,OAEVC,UAAY,IAAIvF,EAAAA,IAAkB,KAClCwF,MAAQ,IAAIxF,EAAAA,IAAgB,KAC5BxC,EAAI,IAAIwC,EAAAA,IAAgB,KAExByF,YAAM,OACNC,YAAM,OAENrG,UAAI,OACJsG,UAAI,OAwIJC,WAAcjF,MAEpB,KAEMhC,aAAgBC,MAAQ,KAYxBiH,YAAejH,MAAQ,KACvB0F,aAAe1F,IAClB,MAAMkH,EAAY1H,KAAK2H,QAAQnH,EAAGR,KAAKgH,cAAczE,MAAMqF,MAC3D5H,KAAKyH,YAAY,CAACjH,IAAGkH,aAAW,EAtJhC9F,EAAAA,IAAAA,WAAAA,IAA8B,EAAG,EAAG,GACpC5B,KAAKgH,cAAgBA,EAGrBhH,KAAK6H,WACL7H,KAAKyG,OACT,CACOoB,WAEH,MAAMC,EAAe,IAAIlG,EAAAA,IAAmB,SAC5C5B,KAAKuC,MAAMC,IAAIsF,GAEf9H,KAAKkH,WAAa,IAAItF,EAAAA,IAAiB,SAAU,KACjD5B,KAAKkH,WAAWpG,SAASK,EAAI,GAC7BnB,KAAKkH,WAAWnC,YAAa,EAC7B/E,KAAKuC,MAAMC,IAAIxC,KAAKkH,YAEpBlH,KAAKiB,KAAO,IAAIW,EAAAA,IAAiB,GACjC5B,KAAKiB,KAAKH,SAASO,EAAI,KAEvBrB,KAAKuC,MAAMC,IAAIxC,KAAKiB,MAGpBjB,KAAKuH,KAAO,IAAI3F,EAAAA,IADC,GAC0B,IAAK,QAAU,SAC1D5B,KAAKuH,KAAKQ,SAAS5G,GAAK6G,KAAKC,GAAK,EAClCjI,KAAKuC,MAAMC,IAAIxC,KAAKuH,MAEpB,MAAM5F,EAAW,IAAIC,EAAAA,IALJ,OAMXsG,EAAY,IAAItG,EAAAA,IAAwB,CAACI,MAAO,MAAUmG,KAAMvG,EAAAA,IAClEU,aAAa,EAAMD,QAAS,IAEhCrC,KAAKsH,OAAS,IAAI1F,EAAAA,IAAWD,EAAUuG,GAGvClI,KAAKuC,MAAMC,IAAIxC,KAAKsH,QAIpB,MAAMvF,EAAW,IAAIH,EAAAA,IAAwB,CAAEI,MAAO,QAChDoG,EAAiB,IAAIxG,EAAAA,IAAqB,IAAM,GAAI,IACpDyG,EAAe,IAAIzG,EAAAA,IAAWwG,EAAgBrG,GACpDsG,EAAaC,WAAW,GACxBtI,KAAKqH,OAASgB,EACdrI,KAAKuC,MAAMC,IAAI6F,EAanB,CACO5F,QAEP,CACIrC,aAASmI,GACTvI,KAAKuH,KAAKiB,QAAUD,CACxB,CACIE,aAASF,GACTvI,KAAKiB,KAAKuH,QAAUD,CACxB,CACOZ,QAAQnH,EAAekI,GAC1B1I,KAAKoH,MAAMjG,EAAKX,EAAEmI,QAAU3I,KAAKb,SAASkG,WAAWF,YAAe,EAAI,EACxEnF,KAAKoH,MAAMhG,GAAMZ,EAAEoI,QAAU5I,KAAKb,SAASkG,WAAWD,aAAgB,EAAI,EAE1EpF,KAAKmH,UAAU0B,cAAc7I,KAAKoH,MAAOpH,KAAKsB,QAE9C,MAAMwH,EAAa9I,KAAKmH,UAAU4B,iBAAiB,IAAKL,IACxD,GAAII,EAAWlG,OAAS,EASpB,OANA5C,KAAKZ,EAAEoC,IAAIsH,EAAW,GAAGE,MAAM7H,EAAG2H,EAAW,GAAGE,MAAM5H,EAAG0H,EAAW,GAAGE,MAAM3H,GAEzEyH,EAAW,GAAGG,SAAWjJ,KAAKqH,QAC9BrH,KAAKqH,OAAOvG,SAASU,IAAIsH,EAAW,GAAGE,MAAM7H,EAAG2H,EAAW,GAAGE,MAAM5H,EAAG0H,EAAW,GAAGE,MAAM3H,GAGxF,CACHyH,aACAxB,YAAQ9H,GAKhB,MAAM0J,EAAkBlJ,KAAKmH,UAAU4B,iBAAiB,CAAC/I,KAAKsH,SAC9D,OAAI4B,EAAgBtG,OAAS,GAEzB5C,KAAKZ,EAAEoC,IAAI0H,EAAgB,GAAGF,MAAM7H,EAAG+H,EAAgB,GAAGF,MAAM5H,EAAG8H,EAAgB,GAAGF,MAAM3H,GAC5FrB,KAAKqH,OAAOvG,SAASU,IAAI0H,EAAgB,GAAGF,MAAM7H,EAAG+H,EAAgB,GAAGF,MAAM5H,EAAG8H,EAAgB,GAAGF,MAAM3H,GACnG,CAACyH,gBAAYtJ,EAAW8H,OAAQ4B,SAJ3C,CAQJ,CACOtE,OAAOrC,GACVvC,KAAKwH,WAAWjF,GA2BhB,MAAM4G,EAAS,IAAIvH,EAAAA,IACnBuH,EAAOC,cAAwB,KAAVpB,KAAKC,IAC1BjI,KAAKkH,WAAWpG,SAASuI,aAAaF,EAC1C,CAMO/C,cAAc5F,GACjB,MAAMkH,EAAY1H,KAAK2H,QAAQnH,EAAGR,KAAKgH,cAAczE,MAAMqF,MAEvDF,EAAUoB,YAAcpB,EAAUoB,WAAW,IAE7CpB,EAAUoB,WAAW,GAAGG,OAAOK,SAASnF,QAAQuD,EAAUoB,WAAW,GAK7E,ECpKG,MAAMS,EAWTvK,YAAYgI,GAA2B,KAVhCA,mBAAa,OACbzE,WAAK,OAEZqF,KAAqB,GAQjB5H,KAAKgH,cAAgBA,EACrBhH,KAAKuC,MAAQyE,EAAc7H,SAASoD,KACxC,CACOE,QACH,IAAK,IAAIE,EAAI3C,KAAK4H,KAAKhF,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC5C,IAAI6G,EAAMxJ,KAAK4H,KAAKjF,GACpB3C,KAAKuC,MAAMkH,OAAOD,EACtB,CAaJ,CACOhH,IAAIoF,GAAmC,IAAjBD,IAAO,yDAChC3H,KAAKuC,MAAMC,IAAIoF,GACXD,GACA3H,KAAK4H,KAAK5E,KAAK4E,EAEvB,CACO6B,OAAO7B,GACV5H,KAAKuC,MAAMkH,OAAO7B,GAClB5H,KAAK4H,KAAK8B,OAAO1J,KAAK4H,KAAK+B,QAAQ/B,GAAO,EAC9C,EC1CG,MAAMgC,EAET5K,YAAY6K,GAAiB,KADtBA,SAAG,EAEN7J,KAAK6J,IAAMA,CACf,CACOC,OAEP,ECVG,MAAM7F,EAITjF,YAAYmC,EAAGC,EAAGC,GAAI,KAHfF,EAAY,EAAI,KAChBC,EAAY,EAAI,KAChBC,EAAY,EAEfrB,KAAKmB,EAAIA,EACTnB,KAAKoB,EAAIA,EACTpB,KAAKqB,EAAIA,CACb,ECJG,MAAM6C,EAaTlF,YAAYuJ,GAA2B,IAAfwB,EAAM,uDAAG,GAAG,KAR7BhG,SAAG,OACHgG,OAAiB,GAAI,KAErBhI,cAAQ,OACRJ,cAAQ,OACRiG,UAAI,EAOP5H,KAAK+D,IAAMwE,EACXvI,KAAK+J,OAASA,EACd/J,KAAKW,MACT,CAWOgD,UACHxD,EAAAA,IAAAA,MAAAA,OAA2BH,KAAK4H,KACpC,CACOzD,QAAQpE,GAEXC,KAAK4E,QACT,CAEOA,SACH5E,KAAK4H,KAAK9G,SAASU,IAAIxB,KAAK+D,IAAI5C,EAAGnB,KAAK+D,IAAI3C,EAAGpB,KAAK+D,IAAI1C,EAC5D,CACQV,OACJX,KAAK+B,SAAW,IAAIH,EAAAA,IAAwB,CAAEI,MAAO,WACrDhC,KAAK2B,SAAW,IAAIC,EAAAA,IAAqB5B,KAAK+J,OAAQ,GAAI,IAC1D/J,KAAK4H,KAAO,IAAIhG,EAAAA,IAAW5B,KAAK2B,SAAU3B,KAAK+B,UAC/C/B,KAAK4H,KAAK9G,SAASU,IAAIxB,KAAK+D,IAAI5C,EAAGnB,KAAK+D,IAAI3C,EAAGpB,KAAK+D,IAAI1C,GACxDrB,KAAK4H,KAAK0B,SAAWtJ,KACrBG,EAAAA,IAAAA,MAAAA,IAAwBH,KAAK4H,KACjC,EC/CG,MAAMzH,EAQTnB,YAAYC,GAAuC,IAA3B+K,EAAU,uDAAG,YAAW,KANzC/K,QAAE,OACFE,cAAQ,OACR8K,YAAM,OACN1H,WAAK,OACLyH,WAAa,OAGhB7J,EAAU0J,IAAM7J,KAChBA,KAAKf,GAAKA,EACVe,KAAKgK,WAAaA,EAElBhK,KAAKkK,cACT,CACOvG,UACH3D,KAAKb,SAASwE,SAClB,CACQuG,eACJlK,KAAKb,SAAW,IAAI4H,EAAwB/G,KAAMA,KAAKf,GAAIe,KAAKgK,YAChEhK,KAAKb,SAASqI,WAAcjF,GAAUvC,KAAKK,gBAC3CL,KAAKb,SAASsI,YAAejH,GAAMR,KAAKyH,YAAYjH,GACpDR,KAAKb,SAASoB,aAAgBC,GAAMR,KAAKO,aAAaC,GACtDR,KAAKuC,MAAQ,IAAIgH,EAAMvJ,MACvBA,KAAKiK,OAAS,IAAIL,EAAO5J,KAE7B,CACWyI,aAASF,GAChBvI,KAAKb,SAASsJ,SAAWF,CAC7B,CACWnI,aAASmI,GAChBvI,KAAKb,SAASiB,SAAWmI,CAC7B,CACO9F,QACHzC,KAAKb,SAASsD,QACdzC,KAAKuC,MAAME,QAEXzC,KAAKyG,OACT,CAEOA,QACH,CAEGpG,gBACH,CAEGoH,YAAYjH,GAAU,CACtBD,aAAaC,GAAU,EA/CrBL,EACK0J,SAAG,C","sources":["njslab/Project/TheColorAI/04-PCFT-viz-result/index.ts","njslab/Project/TheColorAI/base/NRenderer/Renderer/Base/Base.ts","njslab/Project/TheColorAI/base/NRenderer/Renderer/index.ts","njslab/Project/TheColorAI/base/NRenderer/Scene/index.ts","njslab/Project/TheColorAI/base/NRenderer/Common/index.ts","njslab/Project/TheColorAI/base/NRenderer/Geometry/Vector3.ts","njslab/Project/TheColorAI/base/NRenderer/Geometry/Point3.ts","njslab/Project/TheColorAI/base/NRenderer/index.ts"],"sourcesContent":["import * as THREE from \"three\";\r\n\r\nimport {\r\n  NRenderer,\r\n  Point3,\r\n  Arrow,\r\n  Vector3,\r\n  getSlider,\r\n  getCheckBox,\r\n  getDropdown,\r\n} from \"../base\";\r\n\r\nimport { getCSVFromURL } from \"../../../../lib\";\r\nimport {\r\n  ColorUtility,\r\n  getColorCosineSimilarity,\r\n  getColorDistance,\r\n  getColorDifferenceByDeltaE,\r\n} from \"../../../../lib/NJSCore\";\r\n\r\n// import { RendererThree } from './base/RendererThree';\r\n// import { getCheckBox } from '../../Workshop/workshop-vector-dynamics/base/util'\r\n\r\nexport class Solution {\r\n  public div: HTMLDivElement;\r\n  public renderer: NRenderer;\r\n  public m: number[] = [0, 0];\r\n  public t: number = 0.0;\r\n  public pts: Point[] = [];\r\n  public p: Point = undefined;\r\n\r\n  public divColB: HTMLDivElement;\r\n  public divColorResultText: HTMLDivElement;\r\n  public colorValueT = [255, 0, 0];\r\n  public colorValue = [4, 12, 0];\r\n  public resolution = 15;\r\n\r\n  public needGrid = false;\r\n\r\n  data: any = [];\r\n\r\n  constructor(id: string) {\r\n    this.div = document.getElementById(id) as HTMLDivElement;\r\n    this.renderer = new NRenderer(id);\r\n    this.renderer.showGrid = false;\r\n    this.renderer.updateBinding = () => this.render();\r\n    this.renderer.onMouseClick = (e) => this.mouseClick(e);\r\n\r\n    this.initDom();\r\n    this.init();\r\n  }\r\n  public initDom() {\r\n    const div = document.createElement(\"div\");\r\n    div.style.position = \"absolute\";\r\n    div.style.margin = \"15px\";\r\n    this.div.appendChild(div);\r\n\r\n    this.renderer.renderer.axis.scale.x = 51;\r\n    this.renderer.renderer.axis.scale.y = 51;\r\n    this.renderer.renderer.axis.scale.z = 51;\r\n    this.renderer.renderer.camera.far = 500;\r\n\r\n    this.renderer.renderer.camera.position.set(900, -300, 700);\r\n    this.renderer.renderer.controls.target.set(255 * 0.5, 255 * 0.5, 255 * 0.5);\r\n\r\n    const geometry = new THREE.BoxGeometry(255, 255, 255);\r\n    const wireframe = new THREE.EdgesGeometry(geometry);\r\n    const line = new THREE.LineSegments(wireframe);\r\n    line.position.set(255 * 0.5, 255 * 0.5, 255 * 0.5);\r\n    // @ts-expect-error\r\n    line.material.color.r = 0.5;\r\n    line.material.color.g = 0.5;\r\n    line.material.color.b = 0.5;\r\n    // @ts-expect-error\r\n    line.material.depthTest = false;\r\n    // @ts-expect-error\r\n    line.material.opacity = 0.25;\r\n    // @ts-expect-error\r\n    line.material.transparent = true;\r\n    this.renderer.renderer.scene.add(line);\r\n\r\n\r\n\r\n  }\r\n  public reset() {\r\n    this.renderer.reset();\r\n    this.t = 0.0;\r\n    this.pts = [];\r\n    this.p = undefined;\r\n  }\r\n\r\n  public processColor() {\r\n    // console.log(this.data);\r\n    for (let i = 0; i < this.data.length; ++i) {\r\n      const col = this.data[i];\r\n      // console.log(col);\r\n      //   class_mapping = {0: 'WS', 1: 'WA', 2: 'CS', 3: 'CW'}\r\n      let theColor = [0, 0, 0];\r\n      // if (col[4] === 1) {\r\n      //   theColor = [255, 0, 0];\r\n      // } else if (col[4] ===2) {\r\n      //   theColor = [0, 250, 0];\r\n      // } else if (col[4] === 3) {\r\n      //   theColor = [0, 0, 255];\r\n      // } else if (col[4] === 4) {\r\n      //   theColor = [0, 255, 255];\r\n      // }\r\n      // console.log()\r\n\r\n      if (col[4] === 1) {\r\n        theColor = [255, 0, 0];\r\n      } else if (col[4] === 2) {\r\n        theColor = [0, 250, 0];\r\n      } else if (col[4] === 3) {\r\n        theColor = [0, 0, 255];\r\n      } else if (col[4] === 4) {\r\n        theColor = [0, 255, 255];\r\n      }\r\n\r\n      const p = new Point(\r\n        col[0],\r\n        col[1],\r\n        col[2],\r\n        theColor[0],\r\n        theColor[1],\r\n        theColor[2]\r\n      );\r\n\r\n      this.pts.push(p);\r\n    }\r\n    // console.log(this.pts);\r\n  }\r\n\r\n  public updateColor() {\r\n    this.renderer.reset();\r\n    this.init();\r\n    // this.arrow.update();\r\n  }\r\n  public init() {\r\n    getCSVFromURL(\r\n      process.env.PUBLIC_URL +\r\n        // \"/static/data/color/PERSONAL_COLOR_FABRIC_TOOL.csv\"\r\n        \"/static/data/theColorAI/result.csv\"\r\n        // \"/static/data/theColorAI/resultWithPCA.csv\"\r\n    ).then((d) => {\r\n      // getCSVFromURL('/static/data/Blue_Bike_Stations.csv').then((d) => {\r\n      // console.log({ d });\r\n      //    let count = 0;\r\n      //    let latSum = 0;\r\n      //    let lonSum = 0;\r\n      const line = d.split(/\\r\\n|\\r|\\n/g);\r\n      for (let i = 1; i < line.length; ++i) {\r\n        const values = line[i].split(\",\");\r\n        // console.log(values)\r\n        // const l = +values[1];\r\n        // const a = +values[2];\r\n        // const b = +values[3];\r\n        // const c = 0\r\n        // // const c = +values[7];\r\n        // const className = +values[4];\r\n\r\n        const l = +values[1];\r\n        const a = +values[2];\r\n        const b = +values[3];\r\n        const c = +values[4];\r\n        const className = +values[5];\r\n\r\n        const data = [l, a, b, c, className];\r\n        // console.log(i, l, a, b, c, className);\r\n        // console.log(values);\r\n\r\n        this.data.push(data);\r\n      }\r\n      // console.log(this.data)\r\n      this.processColor();\r\n    });\r\n  }\r\n  public render(): void {\r\n    this.t += 0.001;\r\n  }\r\n  public mouseMove(e: MouseEvent): void {\r\n    // this.m[0] = x - this.canvas.width * 0.5;\r\n    // this.m[1] = y - this.canvas.height * 0.5;\r\n  }\r\n  public renderMouse(ctx) {\r\n    // ctx.fillStyle = '#eee';\r\n    // ctx.beginPath();\r\n    // ctx.arc(this.m[0], this.m[1], 3, 0, Math.PI * 2.0)\r\n    // ctx.closePath();\r\n    // ctx.fill();\r\n  }\r\n  public mouseClick(e: MouseEvent): void {\r\n    // console.log(e)\r\n  }\r\n  public destroy() {\r\n    try {\r\n      while (\r\n        this.div !== undefined &&\r\n        this.div.lastElementChild !== undefined\r\n      ) {\r\n        this.div.removeChild(this.div.lastElementChild);\r\n      }\r\n    } catch (error) {}\r\n    this.renderer.destroy();\r\n  }\r\n}\r\n\r\nclass Point {\r\n  public vec: Vector3;\r\n  public r: number = 1;\r\n\r\n  public pt: Point3;\r\n\r\n  constructor(x, y, z, r = 0, g = 0, b = 0) {\r\n    this.vec = new Vector3(x, y, z);\r\n\r\n    this.pt = new Point3(this.vec, this.r);\r\n    this.pt.onClick = (e) => this.onClick(e);\r\n\r\n    // const col = ColorUtility.lab2rgb(x,y,z)\r\n\r\n    this.pt.material.color.set(new THREE.Color(r / 255, g / 255, b / 255));\r\n  }\r\n  public onClick(e) {\r\n    console.log('iam clicked',e);\r\n  }\r\n  // public render(ctx: CanvasRenderingContext2D) {\r\n  //     ctx.beginPath();\r\n  //     ctx.arc(this.vec.x, this.vec.y, this.r, 0, Math.PI * 2.0)\r\n  //     ctx.closePath();\r\n  //     ctx.fill()\r\n  // }\r\n}\r\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three-orbitcontrols-ts';\n\nexport class RendererThreeVectorSandboxBase {\n    public canvas: HTMLCanvasElement;\n    public hostDiv: HTMLElement;\n    public ctx: CanvasRenderingContext2D;\n    public t: number = 0.0;\n    public camera: THREE.PerspectiveCamera;\n    public scene: THREE.Scene;\n    public renderer: THREE.WebGLRenderer;\n    public controls: OrbitControls;\n    private requestFrame: number;\n    constructor(id: string) {\n        this.hostDiv = document.getElementById(id) as HTMLDivElement;\n        this.initCanvas();\n    }\n    private initCanvas() {\n        this.scene = new THREE.Scene();\n        this.setBG(null)\n        this.scene.castShadow = true;\n\n        THREE.Object3D.DEFAULT_UP.set(0, 0, 1);\n\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        this.renderer.setPixelRatio(this.hostDiv.clientWidth / this.hostDiv.clientHeight);\n        this.renderer.domElement.id = 'Three';\n        this.renderer.domElement.style.position = 'absolute';\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n        this.hostDiv.appendChild(this.renderer.domElement);\n\n        this.camera = new THREE.PerspectiveCamera(30, this.hostDiv.clientWidth / this.hostDiv.clientHeight, 1, 5000);\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.camera.position.set(20, -20, 20);\n        this.controls.update();\n\n        this.canvas = this.renderer.domElement;\n\n        this.init();\n    }\n    public setBG(hexColor: string | null) {\n        if (hexColor!== null) {\n            this.scene.background = new THREE.Color(hexColor);\n        } else {\n            this.scene.background = null;\n        }\n    }\n    private init() {\n        this.eventBind();\n\n    }\n    private eventBind() {\n        this.renderer.domElement.onmousedown = (e: MouseEvent) => this.mouseDownPre(e);\n        this.renderer.domElement.onmouseup = (e: MouseEvent) => this.mouseUpPre(e);\n        this.renderer.domElement.onmousemove = (e: MouseEvent) => this.mouseMovePre(e);\n        this.renderer.domElement.addEventListener('click', (e: MouseEvent) => this.mouseClickPre(e))\n\n        window.addEventListener('resize', () => this.onWindowResize());\n\n    }\n    private onWindowResize() {\n        this.camera.aspect = this.hostDiv.clientWidth / this.hostDiv.clientHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(this.hostDiv.clientWidth, this.hostDiv.clientHeight);\n    }\n    private loop = () => {\n        this.requestFrame = requestAnimationFrame(this.loop);\n        this.controls.update();\n        this.update(this.scene);\n        this.renderer.render(this.scene, this.camera);\n        this.t += 0.01;\n\n        // console.log('rendering...');\n    }\n    // .............................................................................\n    public start() {\n        this.loop();\n    }\n    public mouseDownPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseUpPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDClickPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseMovePre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public mouseDragPre(e: MouseEvent) {\n        // console.log(e);\n    }\n    public update(scene: THREE.Scene) {\n        // console.log(e);\n    }\n    public destroy() {\n        window.removeEventListener('resize', () => this.onWindowResize());\n        cancelAnimationFrame(this.requestFrame);\n        this.requestFrame = undefined;\n        while (this.hostDiv.lastChild) {\n            this.hostDiv.removeChild(this.hostDiv.lastChild);\n        }\n    }\n}\n\n\n","import * as THREE from 'three';\nimport { NRenderer } from '..';\nimport { RendererThreeVectorSandboxBase } from './Base/Base'\n\nexport class RendererThreeVecSandbox extends RendererThreeVectorSandboxBase {\n    public sandboxVector: NRenderer\n    public pointLight: THREE.PointLight\n\n    public rayCaster = new THREE.Raycaster();\n    public mouse = new THREE.Vector2();\n    public m = new THREE.Vector3();\n\n    public sphere: THREE.Mesh;\n    public ground: THREE.Mesh;\n\n    public axis: THREE.AxesHelper;\n    public grid: THREE.GridHelper;\n\n\n    constructor(sandboxVector: NRenderer, id: string = 'main', color = '#00000000') {\n        super(id)\n        THREE.Object3D.DEFAULT_UP.set(0, 1, 0);\n        this.sandboxVector = sandboxVector;\n        // this.setBG(color);\n\n        this.initPost();\n        this.start();\n    }\n    public initPost() {\n\n        const ambientLight = new THREE.AmbientLight(0x555555);\n        this.scene.add(ambientLight);\n\n        this.pointLight = new THREE.PointLight(0xffffff, 100);\n        this.pointLight.position.x = 10;\n        this.pointLight.castShadow = true;\n        this.scene.add(this.pointLight);\n\n        this.axis = new THREE.AxesHelper(5);\n        this.axis.position.z = 0.001;\n        // this.axis.rotation.y = -Math.PI / 2;\n        this.scene.add(this.axis);\n\n        const sizeGrid = 50\n        this.grid = new THREE.GridHelper(sizeGrid, 100, 0x444444, 0x323232);\n        this.grid.rotation.x = -Math.PI / 2;\n        this.scene.add(this.grid);\n\n        const geometry = new THREE.PlaneGeometry(sizeGrid, sizeGrid);\n        const materialG = new THREE.MeshBasicMaterial({color: 0x010101, side: THREE.DoubleSide, \n            transparent: true, opacity: 0\n        });\n        this.ground = new THREE.Mesh(geometry, materialG);\n        // this.ground.rotation.x = -Math.PI / 2; // Rotate to make it flat\n        // this.ground.position.set(0,-1,0)\n        this.scene.add(this.ground);\n\n        \n        // @ts-ignore\n        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n        const geometrySphere = new THREE.SphereGeometry(0.05, 50, 50);\n        const objectSphere = new THREE.Mesh(geometrySphere, material);\n        objectSphere.translateX(1)\n        this.sphere = objectSphere\n        this.scene.add(objectSphere);\n\n\n        // let geometry = new THREE.SphereGeometry(1, 50, 50);\n        // let object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(-1)\n        // this.add(object);\n\n        // geometry = new THREE.SphereGeometry(1, 50, 50);\n        // object = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial());\n        // object.translateX(1)\n        // this.add(object);\n        // this.setBGT();\n    }\n    public reset() {\n\n    }\n    set showGrid(v: boolean) {\n        this.grid.visible = v;\n    }\n    set showAxis(v: boolean) {\n        this.axis.visible = v;\n    }\n    public picking(e: MouseEvent, arrayMesh) {\n        this.mouse.x = (e.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;\n        this.mouse.y = -(e.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;\n\n        this.rayCaster.setFromCamera(this.mouse, this.camera);\n\n        const intersects = this.rayCaster.intersectObjects([ ...arrayMesh]);\n        if (intersects.length > 0) {\n            // console.log(intersects[0].object);\n            // console.log(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            this.m.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z);\n\n            if (intersects[0].object !== this.sphere) {\n                this.sphere.position.set(intersects[0].point.x, intersects[0].point.y, intersects[0].point.z)\n            }\n            // console.log(intersects[0].object.userData);\n            return { \n                intersects, \n                ground: undefined \n            };\n\n        }\n\n        const intersectGround = this.rayCaster.intersectObjects([this.ground]);\n        if (intersectGround.length > 0) {\n            // console.log(intersectGround)\n            this.m.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z);\n            this.sphere.position.set(intersectGround[0].point.x, intersectGround[0].point.y, intersectGround[0].point.z)\n            return {intersects: undefined, ground :intersectGround};\n        }\n\n        return undefined;\n    }\n    public update(scene: THREE.Scene) {\n        this.updatePost(scene)\n\n        // if (this.sandboxVector.scene) {\n        //     this.sandboxVector.scene.mesh.forEach((m: THREE.Mesh, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //     })\n\n        //     this.sandboxVector.scene.arrayArrow.forEach((m: THREE.ArrowHelper, i) => {\n        //         m.position.x = this.sandboxVector.scene.arrayPoint[i].vec.x;\n        //         m.position.y = this.sandboxVector.scene.arrayPoint[i].vec.y;\n        //         m.position.z = this.sandboxVector.scene.arrayPoint[i].vec.z;\n        //         const vec = new THREE.Vector3(this.sandboxVector.scene.arrayPoint[i].velocity.x, this.sandboxVector.scene.arrayPoint[i].velocity.y, this.sandboxVector.scene.arrayPoint[i].velocity.z)\n        //         const len = vec.length() * 0.5\n        //         m.setLength(len, 0.1,  0.1)\n        //         m.setDirection(vec)\n        //     })\n\n        //     this.sandboxVector.scene.arrayLineMesh.forEach((ln, i) => {\n        //         const lnObj = this.sandboxVector.scene.arrayLine[i];\n        //         ln.geometry.attributes.position.setXYZ(0, lnObj.p0.vec.x, lnObj.p0.vec.y, lnObj.p0.vec.z);\n        //         ln.geometry.attributes.position.setXYZ(1, lnObj.p1.vec.x, lnObj.p1.vec.y, lnObj.p1.vec.z);\n        //         ln.geometry.attributes.position.needsUpdate = true;\n        //     })\n        // }\n\n        const matrix = new THREE.Matrix4();\n        matrix.makeRotationY(Math.PI * 0.011);\n        this.pointLight.position.applyMatrix4(matrix);\n    }\n    public updatePost = (scene: THREE.Scene) => { \n        \n    }\n    // .................................................... Event\n    public onMouseClick = (e) => {}\n    public mouseClickPre(e: MouseEvent): void {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n\n        if (intersect.intersects && intersect.intersects[0]) {\n            // console.log('---------------');\n            intersect.intersects[0].object.userData.onClick(intersect.intersects[0])\n        }\n\n        // this.sandboxVector.common.updateSelectedData(intersect);\n        // this.onMouseClick({e, intersect});\n    }\n    public onMouseMove = (e) => {}\n    public mouseMovePre= (e: MouseEvent) => {\n        const intersect = this.picking(e, this.sandboxVector.scene.mesh);\n        this.onMouseMove({e, intersect});\n    }\n\n}\n","import * as THREE from 'three';\nimport {NRenderer} from '..';\n\nexport class Scene {\n    public sandboxVector: NRenderer;\n    public scene: THREE.Scene;\n\n    mesh: THREE.Mesh[] = [];\n    // arrayPoint: any = [];\n    // arrayArrow: any = [];\n\n    // arrayLine: any = []\n    // arrayLineMesh: THREE.Mesh[]  = []\n\n    constructor(sandboxVector: NRenderer) {\n        this.sandboxVector = sandboxVector;\n        this.scene = sandboxVector.renderer.scene;\n    }\n    public reset() {\n        for (let i = this.mesh.length - 1; i >= 0; i--) {\n            let obj = this.mesh[i];\n            this.scene.remove(obj);\n        }\n\n        // for (let i = this.arrayArrow.length - 1; i >= 0; i--) {\n        //     let obj = this.arrayArrow[i];\n        //     this.scene.remove(obj);\n        // }\n\n        // this.mesh = [];\n        // this.arrayPoint = [];\n        // this.arrayArrow = [];\n\n        // this.arrayLine = []\n        // //    this.initPost()\n    }\n    public add(mesh: THREE.Mesh, picking = true) {\n        this.scene.add(mesh);\n        if (picking) {\n            this.mesh.push(mesh)\n        }\n    }\n    public remove(mesh: THREE.Mesh) {\n        this.scene.remove(mesh);\n        this.mesh.splice(this.mesh.indexOf(mesh), 1);\n    }\n    // public addArrow(vec, velocity) {\n    //     const arrowHelper = new THREE.ArrowHelper(velocity, vec, 1, '#f00');\n    //     this.arrayArrow.push(arrowHelper)\n    //     this.scene.add(arrowHelper);\n    // }\n    // public addPoint(v: any) {\n    //     // @ts-ignore\n    //     const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n    //     const geometry = new THREE.SphereGeometry(0.1, 20, 20);\n    //     const object = new THREE.Mesh(geometry, material);\n    //     object.translateX(v.vec.x);\n    //     object.translateY(v.vec.z);\n    //     object.translateZ(v.vec.y);\n    //     this.add(object, v);\n    //     this.addArrow(v.vec, v.velocity);\n\n    // }\n    // public addLine(ln: any) {\n    //     this.arrayLine.push(ln)\n\n    //     const material = new THREE.LineBasicMaterial( { color: 0xffffff } );\n\n    //     const points = [];\n    //     points.push( new THREE.Vector3(ln.p0.vec.x, ln.p0.vec.y, ln.p0.vec.z ) );\n    //     points.push( new THREE.Vector3(ln.p1.vec.x, ln.p1.vec.y, ln.p1.vec.z ) );\n\n    //     const geometry = new THREE.BufferGeometry().setFromPoints( points );\n    //     const line = new THREE.Line( geometry, material );\n    //     // @ts-ignore\n    //     this.arrayLineMesh.push(line)\n    //     this.scene.add(line)\n    // }\n}","import * as THREE from 'three';\nimport { NRenderer } from '../index';\n\nexport class Common {\n    public app: NRenderer\n    constructor(app: NRenderer) {\n        this.app = app;\n    }\n    public pick() {\n\n    }\n}","export class Vector3 {\n    public x: number = 0.0;\n    public y: number = 0.0;\n    public z: number = 0.0;\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n}\n\n\n// ..................................................................\nexport const xAxis = () => {\n    return new Vector3(1, 0, 0);\n}\nexport const yAxis = () => {\n    return new Vector3(0, 1, 0);\n}\nexport const zAxis = () => {\n    return new Vector3(0, 0, 1);\n}\nexport const zero = () => {\n    return new Vector3(0, 0, 0);\n}\nexport const origin = () => {\n    return new Vector3(0, 0, 0);\n}\n// ..................................................................\n\nexport const distance = (v0: Vector3, v1: Vector3) => {\n    return Math.sqrt(distance2(v0, v1));\n}\nexport const distance2 = (v0: Vector3, v1: Vector3) => {\n    return (v0.x - v1.x) * (v0.x - v1.x) + (v0.y - v1.y) * (v0.y - v1.y) + (v0.z - v1.z) * (v0.z - v1.z);\n}\nexport const dotProduct = (v1: Vector3, v2: Vector3) => {\n    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n}\nexport const crossProduct = (v1: Vector3, v2: Vector3) => {\n    return new Vector3(\n        v1.y * v2.z - v1.z * v2.y,\n        v1.z * v2.x - v1.x * v2.z,\n        v1.x * v2.y - v1.y * v2.x\n    );\n}\nexport const normalize = (v: Vector3) => {\n    let len: number = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len < 0.0001) {\n        return new Vector3(v.x, v.y, v.z);\n    }\n    return new Vector3(v.x / len, v.y / len, v.z / len);\n}\nexport const length = (v: Vector3) => {\n    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n}\n\n// ..................................................................\nexport const multiply = (v: Vector3, s: number) => {\n    return scale(v, s);\n}\nexport const scale = (v: Vector3, s: number) => {\n    return new Vector3(v.x * s, v.y * s, v.z * s);\n}\nexport const sub = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x - v1.x, v0.y - v1.y, v0.z - v1.z);\n}\nexport const add = (v0: Vector3, v1: Vector3) => {\n    return new Vector3(v0.x + v1.x, v0.y + v1.y, v0.z + v1.z);\n}\n","import * as THREE from 'three';\nimport { NRenderer } from '..';\nimport { Vector3 } from './Vector3'\n\nexport class Point3 {\n    // private _x: number;\n    // private _y: number;\n    // private _z: number;\n\n    public vec: Vector3;\n    public radius: number = 0.5;\n\n    public material: THREE.MeshBasicMaterial;\n    public geometry: THREE.SphereGeometry;\n    public mesh: THREE.Mesh;\n\n    // constructor(x: number, y: number, z: number, radius = 0.1) {\n    constructor(v: Vector3, radius = 0.1) {\n        // this._x = x;\n        // this._y = y;\n        // this._z = z;\n        this.vec = v;\n        this.radius = radius;\n        this.init();\n    }\n    // public get x () { return this._x; }\n    // public set x (v) { this._x = v; this.updateVec();}\n    // public get y () { return this._y; }\n    // public set y (v) { this._y = v; this.updateVec();}\n    // public get z () { return this._z; }\n    // public set z (v) { this._z = v; this.updateVec();}\n    // public set(x: number, y: number, z: number) {\n    //     this._x = x; this._y = y; this._z = z;\n    //     this.updateVec();\n    // }\n    public destroy() {\n        NRenderer.app.scene.remove(this.mesh);\n    }\n    public onClick(data: any) {\n\n        this.update();\n    }\n    // ...........................................................\n    public update() {\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n    }\n    private init() {\n        this.material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n        this.geometry = new THREE.SphereGeometry(this.radius, 20, 20);\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.mesh.position.set(this.vec.x, this.vec.y, this.vec.z);\n        this.mesh.userData = this;\n        NRenderer.app.scene.add(this.mesh);\n    }   \n}","import { RendererThreeVecSandbox } from './Renderer';\nimport { Scene } from './Scene';\nimport { Common } from './Common';\n\nexport * from './Geometry';\n\nexport class NRenderer {\n    public static app: NRenderer;\n    public id: string;\n    public renderer: RendererThreeVecSandbox;\n    public common: Common;\n    public scene: Scene;\n    public themeColor = '#222';\n\n    constructor(id: string, themeColor = '#00000000') {\n        NRenderer.app = this;\n        this.id = id;\n        this.themeColor = themeColor;\n\n        this.initRenderer();\n    }\n    public destroy() {\n        this.renderer.destroy();\n    }\n    private initRenderer() {\n        this.renderer = new RendererThreeVecSandbox(this, this.id, this.themeColor);\n        this.renderer.updatePost = (scene) => this.updateBinding();\n        this.renderer.onMouseMove = (e) => this.onMouseMove(e);\n        this.renderer.onMouseClick = (e) => this.onMouseClick(e);\n        this.scene = new Scene(this);\n        this.common = new Common(this)\n\n    }\n    public set showAxis(v){\n        this.renderer.showAxis = v;\n    }\n    public set showGrid(v) {\n        this.renderer.showGrid = v;\n    }\n    public reset() {\n        this.renderer.reset();\n        this.scene.reset();\n\n        this.start();\n    }\n    // ..........................\n    public start() {\n        // TODO: \n    }\n    public updateBinding() {\n        // TODO: \n    }\n    public onMouseMove(e: any) { }\n    public onMouseClick(e: any) { }\n}"],"names":["Solution","constructor","id","div","renderer","m","t","pts","p","undefined","divColB","divColorResultText","colorValueT","colorValue","resolution","needGrid","data","this","document","getElementById","NRenderer","showGrid","updateBinding","render","onMouseClick","e","mouseClick","initDom","init","createElement","style","position","margin","appendChild","axis","scale","x","y","z","camera","far","set","controls","target","geometry","THREE","wireframe","line","material","color","r","g","b","depthTest","opacity","transparent","scene","add","reset","processColor","i","length","col","theColor","Point","push","updateColor","getCSVFromURL","process","then","d","split","values","mouseMove","renderMouse","ctx","destroy","lastElementChild","removeChild","error","vec","pt","Vector3","Point3","onClick","console","log","RendererThreeVectorSandboxBase","canvas","hostDiv","requestFrame","loop","requestAnimationFrame","update","initCanvas","setBG","castShadow","antialias","alpha","setPixelRatio","clientWidth","clientHeight","domElement","shadowMap","enabled","setSize","OrbitControls","hexColor","background","eventBind","onmousedown","mouseDownPre","onmouseup","mouseUpPre","onmousemove","mouseMovePre","addEventListener","mouseClickPre","window","onWindowResize","aspect","updateProjectionMatrix","start","mouseDClickPre","mouseDragPre","removeEventListener","cancelAnimationFrame","lastChild","RendererThreeVecSandbox","sandboxVector","super","pointLight","rayCaster","mouse","sphere","ground","grid","updatePost","onMouseMove","intersect","picking","mesh","initPost","ambientLight","rotation","Math","PI","materialG","side","geometrySphere","objectSphere","translateX","v","visible","showAxis","arrayMesh","offsetX","offsetY","setFromCamera","intersects","intersectObjects","point","object","intersectGround","matrix","makeRotationY","applyMatrix4","userData","Scene","obj","remove","splice","indexOf","Common","app","pick","radius","themeColor","common","initRenderer"],"sourceRoot":""}